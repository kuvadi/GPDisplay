
GPDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010104  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f220  080102f0  080102f0  000202f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f510  0802f510  000401a8  2**0
                  CONTENTS
  4 .ARM          00000008  0802f510  0802f510  0003f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f518  0802f518  000401a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f518  0802f518  0003f518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f51c  0802f51c  0003f51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0802f520  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ebf8  200001a8  0802f6c8  000401a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000eda0  0802f6c8  0004eda0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000401a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035521  00000000  00000000  000401d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b7f  00000000  00000000  000756f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0007c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  0007dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027efe  00000000  00000000  0007f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252c5  00000000  00000000  000a719e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3ec9  00000000  00000000  000cc463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019032c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f50  00000000  00000000  00190380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001a8 	.word	0x200001a8
 8000204:	00000000 	.word	0x00000000
 8000208:	080102d4 	.word	0x080102d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ac 	.word	0x200001ac
 8000224:	080102d4 	.word	0x080102d4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2iz>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b0:	d30f      	bcc.n	80011d2 <__aeabi_f2iz+0x2a>
 80011b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d90d      	bls.n	80011d8 <__aeabi_f2iz+0x30>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	bf18      	it	ne
 80011ce:	4240      	negne	r0, r0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr
 80011d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011dc:	d101      	bne.n	80011e2 <__aeabi_f2iz+0x3a>
 80011de:	0242      	lsls	r2, r0, #9
 80011e0:	d105      	bne.n	80011ee <__aeabi_f2iz+0x46>
 80011e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011e6:	bf08      	it	eq
 80011e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <__aeabi_f2uiz>:
 80011f4:	0042      	lsls	r2, r0, #1
 80011f6:	d20e      	bcs.n	8001216 <__aeabi_f2uiz+0x22>
 80011f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011fc:	d30b      	bcc.n	8001216 <__aeabi_f2uiz+0x22>
 80011fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001202:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001206:	d409      	bmi.n	800121c <__aeabi_f2uiz+0x28>
 8001208:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800120c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	f04f 0000 	mov.w	r0, #0
 800121a:	4770      	bx	lr
 800121c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001220:	d101      	bne.n	8001226 <__aeabi_f2uiz+0x32>
 8001222:	0242      	lsls	r2, r0, #9
 8001224:	d102      	bne.n	800122c <__aeabi_f2uiz+0x38>
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	4770      	bx	lr
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__aeabi_uldivmod>:
 8001234:	b953      	cbnz	r3, 800124c <__aeabi_uldivmod+0x18>
 8001236:	b94a      	cbnz	r2, 800124c <__aeabi_uldivmod+0x18>
 8001238:	2900      	cmp	r1, #0
 800123a:	bf08      	it	eq
 800123c:	2800      	cmpeq	r0, #0
 800123e:	bf1c      	itt	ne
 8001240:	f04f 31ff 	movne.w	r1, #4294967295
 8001244:	f04f 30ff 	movne.w	r0, #4294967295
 8001248:	f000 b96e 	b.w	8001528 <__aeabi_idiv0>
 800124c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001254:	f000 f806 	bl	8001264 <__udivmoddi4>
 8001258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800125c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr

08001264 <__udivmoddi4>:
 8001264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001268:	9e08      	ldr	r6, [sp, #32]
 800126a:	460d      	mov	r5, r1
 800126c:	4604      	mov	r4, r0
 800126e:	468e      	mov	lr, r1
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 8083 	bne.w	800137c <__udivmoddi4+0x118>
 8001276:	428a      	cmp	r2, r1
 8001278:	4617      	mov	r7, r2
 800127a:	d947      	bls.n	800130c <__udivmoddi4+0xa8>
 800127c:	fab2 f382 	clz	r3, r2
 8001280:	b14b      	cbz	r3, 8001296 <__udivmoddi4+0x32>
 8001282:	f1c3 0120 	rsb	r1, r3, #32
 8001286:	fa05 fe03 	lsl.w	lr, r5, r3
 800128a:	fa20 f101 	lsr.w	r1, r0, r1
 800128e:	409f      	lsls	r7, r3
 8001290:	ea41 0e0e 	orr.w	lr, r1, lr
 8001294:	409c      	lsls	r4, r3
 8001296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800129a:	fbbe fcf8 	udiv	ip, lr, r8
 800129e:	fa1f f987 	uxth.w	r9, r7
 80012a2:	fb08 e21c 	mls	r2, r8, ip, lr
 80012a6:	fb0c f009 	mul.w	r0, ip, r9
 80012aa:	0c21      	lsrs	r1, r4, #16
 80012ac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012b0:	4290      	cmp	r0, r2
 80012b2:	d90a      	bls.n	80012ca <__udivmoddi4+0x66>
 80012b4:	18ba      	adds	r2, r7, r2
 80012b6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012ba:	f080 8118 	bcs.w	80014ee <__udivmoddi4+0x28a>
 80012be:	4290      	cmp	r0, r2
 80012c0:	f240 8115 	bls.w	80014ee <__udivmoddi4+0x28a>
 80012c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80012c8:	443a      	add	r2, r7
 80012ca:	1a12      	subs	r2, r2, r0
 80012cc:	fbb2 f0f8 	udiv	r0, r2, r8
 80012d0:	fb08 2210 	mls	r2, r8, r0, r2
 80012d4:	fb00 f109 	mul.w	r1, r0, r9
 80012d8:	b2a4      	uxth	r4, r4
 80012da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012de:	42a1      	cmp	r1, r4
 80012e0:	d909      	bls.n	80012f6 <__udivmoddi4+0x92>
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012e8:	f080 8103 	bcs.w	80014f2 <__udivmoddi4+0x28e>
 80012ec:	42a1      	cmp	r1, r4
 80012ee:	f240 8100 	bls.w	80014f2 <__udivmoddi4+0x28e>
 80012f2:	3802      	subs	r0, #2
 80012f4:	443c      	add	r4, r7
 80012f6:	1a64      	subs	r4, r4, r1
 80012f8:	2100      	movs	r1, #0
 80012fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012fe:	b11e      	cbz	r6, 8001308 <__udivmoddi4+0xa4>
 8001300:	2200      	movs	r2, #0
 8001302:	40dc      	lsrs	r4, r3
 8001304:	e9c6 4200 	strd	r4, r2, [r6]
 8001308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130c:	b902      	cbnz	r2, 8001310 <__udivmoddi4+0xac>
 800130e:	deff      	udf	#255	; 0xff
 8001310:	fab2 f382 	clz	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d14f      	bne.n	80013b8 <__udivmoddi4+0x154>
 8001318:	1a8d      	subs	r5, r1, r2
 800131a:	2101      	movs	r1, #1
 800131c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001320:	fa1f f882 	uxth.w	r8, r2
 8001324:	fbb5 fcfe 	udiv	ip, r5, lr
 8001328:	fb0e 551c 	mls	r5, lr, ip, r5
 800132c:	fb08 f00c 	mul.w	r0, r8, ip
 8001330:	0c22      	lsrs	r2, r4, #16
 8001332:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001336:	42a8      	cmp	r0, r5
 8001338:	d907      	bls.n	800134a <__udivmoddi4+0xe6>
 800133a:	197d      	adds	r5, r7, r5
 800133c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001340:	d202      	bcs.n	8001348 <__udivmoddi4+0xe4>
 8001342:	42a8      	cmp	r0, r5
 8001344:	f200 80e9 	bhi.w	800151a <__udivmoddi4+0x2b6>
 8001348:	4694      	mov	ip, r2
 800134a:	1a2d      	subs	r5, r5, r0
 800134c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001350:	fb0e 5510 	mls	r5, lr, r0, r5
 8001354:	fb08 f800 	mul.w	r8, r8, r0
 8001358:	b2a4      	uxth	r4, r4
 800135a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800135e:	45a0      	cmp	r8, r4
 8001360:	d907      	bls.n	8001372 <__udivmoddi4+0x10e>
 8001362:	193c      	adds	r4, r7, r4
 8001364:	f100 32ff 	add.w	r2, r0, #4294967295
 8001368:	d202      	bcs.n	8001370 <__udivmoddi4+0x10c>
 800136a:	45a0      	cmp	r8, r4
 800136c:	f200 80d9 	bhi.w	8001522 <__udivmoddi4+0x2be>
 8001370:	4610      	mov	r0, r2
 8001372:	eba4 0408 	sub.w	r4, r4, r8
 8001376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800137a:	e7c0      	b.n	80012fe <__udivmoddi4+0x9a>
 800137c:	428b      	cmp	r3, r1
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0x12e>
 8001380:	2e00      	cmp	r6, #0
 8001382:	f000 80b1 	beq.w	80014e8 <__udivmoddi4+0x284>
 8001386:	2100      	movs	r1, #0
 8001388:	e9c6 0500 	strd	r0, r5, [r6]
 800138c:	4608      	mov	r0, r1
 800138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001392:	fab3 f183 	clz	r1, r3
 8001396:	2900      	cmp	r1, #0
 8001398:	d14b      	bne.n	8001432 <__udivmoddi4+0x1ce>
 800139a:	42ab      	cmp	r3, r5
 800139c:	d302      	bcc.n	80013a4 <__udivmoddi4+0x140>
 800139e:	4282      	cmp	r2, r0
 80013a0:	f200 80b9 	bhi.w	8001516 <__udivmoddi4+0x2b2>
 80013a4:	1a84      	subs	r4, r0, r2
 80013a6:	eb65 0303 	sbc.w	r3, r5, r3
 80013aa:	2001      	movs	r0, #1
 80013ac:	469e      	mov	lr, r3
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d0aa      	beq.n	8001308 <__udivmoddi4+0xa4>
 80013b2:	e9c6 4e00 	strd	r4, lr, [r6]
 80013b6:	e7a7      	b.n	8001308 <__udivmoddi4+0xa4>
 80013b8:	409f      	lsls	r7, r3
 80013ba:	f1c3 0220 	rsb	r2, r3, #32
 80013be:	40d1      	lsrs	r1, r2
 80013c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80013c8:	fa1f f887 	uxth.w	r8, r7
 80013cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80013d0:	fa24 f202 	lsr.w	r2, r4, r2
 80013d4:	409d      	lsls	r5, r3
 80013d6:	fb00 fc08 	mul.w	ip, r0, r8
 80013da:	432a      	orrs	r2, r5
 80013dc:	0c15      	lsrs	r5, r2, #16
 80013de:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013e2:	45ac      	cmp	ip, r5
 80013e4:	fa04 f403 	lsl.w	r4, r4, r3
 80013e8:	d909      	bls.n	80013fe <__udivmoddi4+0x19a>
 80013ea:	197d      	adds	r5, r7, r5
 80013ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80013f0:	f080 808f 	bcs.w	8001512 <__udivmoddi4+0x2ae>
 80013f4:	45ac      	cmp	ip, r5
 80013f6:	f240 808c 	bls.w	8001512 <__udivmoddi4+0x2ae>
 80013fa:	3802      	subs	r0, #2
 80013fc:	443d      	add	r5, r7
 80013fe:	eba5 050c 	sub.w	r5, r5, ip
 8001402:	fbb5 f1fe 	udiv	r1, r5, lr
 8001406:	fb0e 5c11 	mls	ip, lr, r1, r5
 800140a:	fb01 f908 	mul.w	r9, r1, r8
 800140e:	b295      	uxth	r5, r2
 8001410:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001414:	45a9      	cmp	r9, r5
 8001416:	d907      	bls.n	8001428 <__udivmoddi4+0x1c4>
 8001418:	197d      	adds	r5, r7, r5
 800141a:	f101 32ff 	add.w	r2, r1, #4294967295
 800141e:	d274      	bcs.n	800150a <__udivmoddi4+0x2a6>
 8001420:	45a9      	cmp	r9, r5
 8001422:	d972      	bls.n	800150a <__udivmoddi4+0x2a6>
 8001424:	3902      	subs	r1, #2
 8001426:	443d      	add	r5, r7
 8001428:	eba5 0509 	sub.w	r5, r5, r9
 800142c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001430:	e778      	b.n	8001324 <__udivmoddi4+0xc0>
 8001432:	f1c1 0720 	rsb	r7, r1, #32
 8001436:	408b      	lsls	r3, r1
 8001438:	fa22 fc07 	lsr.w	ip, r2, r7
 800143c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001440:	fa25 f407 	lsr.w	r4, r5, r7
 8001444:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001448:	fbb4 f9fe 	udiv	r9, r4, lr
 800144c:	fa1f f88c 	uxth.w	r8, ip
 8001450:	fb0e 4419 	mls	r4, lr, r9, r4
 8001454:	fa20 f307 	lsr.w	r3, r0, r7
 8001458:	fb09 fa08 	mul.w	sl, r9, r8
 800145c:	408d      	lsls	r5, r1
 800145e:	431d      	orrs	r5, r3
 8001460:	0c2b      	lsrs	r3, r5, #16
 8001462:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001466:	45a2      	cmp	sl, r4
 8001468:	fa02 f201 	lsl.w	r2, r2, r1
 800146c:	fa00 f301 	lsl.w	r3, r0, r1
 8001470:	d909      	bls.n	8001486 <__udivmoddi4+0x222>
 8001472:	eb1c 0404 	adds.w	r4, ip, r4
 8001476:	f109 30ff 	add.w	r0, r9, #4294967295
 800147a:	d248      	bcs.n	800150e <__udivmoddi4+0x2aa>
 800147c:	45a2      	cmp	sl, r4
 800147e:	d946      	bls.n	800150e <__udivmoddi4+0x2aa>
 8001480:	f1a9 0902 	sub.w	r9, r9, #2
 8001484:	4464      	add	r4, ip
 8001486:	eba4 040a 	sub.w	r4, r4, sl
 800148a:	fbb4 f0fe 	udiv	r0, r4, lr
 800148e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001492:	fb00 fa08 	mul.w	sl, r0, r8
 8001496:	b2ad      	uxth	r5, r5
 8001498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800149c:	45a2      	cmp	sl, r4
 800149e:	d908      	bls.n	80014b2 <__udivmoddi4+0x24e>
 80014a0:	eb1c 0404 	adds.w	r4, ip, r4
 80014a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80014a8:	d22d      	bcs.n	8001506 <__udivmoddi4+0x2a2>
 80014aa:	45a2      	cmp	sl, r4
 80014ac:	d92b      	bls.n	8001506 <__udivmoddi4+0x2a2>
 80014ae:	3802      	subs	r0, #2
 80014b0:	4464      	add	r4, ip
 80014b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014b6:	fba0 8902 	umull	r8, r9, r0, r2
 80014ba:	eba4 040a 	sub.w	r4, r4, sl
 80014be:	454c      	cmp	r4, r9
 80014c0:	46c6      	mov	lr, r8
 80014c2:	464d      	mov	r5, r9
 80014c4:	d319      	bcc.n	80014fa <__udivmoddi4+0x296>
 80014c6:	d016      	beq.n	80014f6 <__udivmoddi4+0x292>
 80014c8:	b15e      	cbz	r6, 80014e2 <__udivmoddi4+0x27e>
 80014ca:	ebb3 020e 	subs.w	r2, r3, lr
 80014ce:	eb64 0405 	sbc.w	r4, r4, r5
 80014d2:	fa04 f707 	lsl.w	r7, r4, r7
 80014d6:	fa22 f301 	lsr.w	r3, r2, r1
 80014da:	431f      	orrs	r7, r3
 80014dc:	40cc      	lsrs	r4, r1
 80014de:	e9c6 7400 	strd	r7, r4, [r6]
 80014e2:	2100      	movs	r1, #0
 80014e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e8:	4631      	mov	r1, r6
 80014ea:	4630      	mov	r0, r6
 80014ec:	e70c      	b.n	8001308 <__udivmoddi4+0xa4>
 80014ee:	468c      	mov	ip, r1
 80014f0:	e6eb      	b.n	80012ca <__udivmoddi4+0x66>
 80014f2:	4610      	mov	r0, r2
 80014f4:	e6ff      	b.n	80012f6 <__udivmoddi4+0x92>
 80014f6:	4543      	cmp	r3, r8
 80014f8:	d2e6      	bcs.n	80014c8 <__udivmoddi4+0x264>
 80014fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80014fe:	eb69 050c 	sbc.w	r5, r9, ip
 8001502:	3801      	subs	r0, #1
 8001504:	e7e0      	b.n	80014c8 <__udivmoddi4+0x264>
 8001506:	4628      	mov	r0, r5
 8001508:	e7d3      	b.n	80014b2 <__udivmoddi4+0x24e>
 800150a:	4611      	mov	r1, r2
 800150c:	e78c      	b.n	8001428 <__udivmoddi4+0x1c4>
 800150e:	4681      	mov	r9, r0
 8001510:	e7b9      	b.n	8001486 <__udivmoddi4+0x222>
 8001512:	4608      	mov	r0, r1
 8001514:	e773      	b.n	80013fe <__udivmoddi4+0x19a>
 8001516:	4608      	mov	r0, r1
 8001518:	e749      	b.n	80013ae <__udivmoddi4+0x14a>
 800151a:	f1ac 0c02 	sub.w	ip, ip, #2
 800151e:	443d      	add	r5, r7
 8001520:	e713      	b.n	800134a <__udivmoddi4+0xe6>
 8001522:	3802      	subs	r0, #2
 8001524:	443c      	add	r4, r7
 8001526:	e724      	b.n	8001372 <__udivmoddi4+0x10e>

08001528 <__aeabi_idiv0>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <XPT2046_TouchSelect>:

#define READ_X 0xD2
#define READ_Y 0x92

static void XPT2046_TouchSelect()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <XPT2046_TouchSelect+0x14>)
 8001538:	f004 f839 	bl	80055ae <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40011800 	.word	0x40011800

08001544 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <XPT2046_TouchUnselect+0x14>)
 8001550:	f004 f82d 	bl	80055ae <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40011800 	.word	0x40011800

0800155c <XPT2046_TouchGetCoordinates>:
{
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
}

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 8001566:	f7ff ffe1 	bl	800152c <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	77bb      	strb	r3, [r7, #30]
 800157a:	e037      	b.n	80015ec <XPT2046_TouchGetCoordinates+0x90>
    {


        nsamples++;
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	3301      	adds	r3, #1
 8001580:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	2201      	movs	r2, #1
 8001588:	4940      	ldr	r1, [pc, #256]	; (800168c <XPT2046_TouchGetCoordinates+0x130>)
 800158a:	4841      	ldr	r0, [pc, #260]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 800158c:	f006 fe98 	bl	80082c0 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	493d      	ldr	r1, [pc, #244]	; (8001694 <XPT2046_TouchGetCoordinates+0x138>)
 800159e:	483c      	ldr	r0, [pc, #240]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015a0:	f006 ffca 	bl	8008538 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2201      	movs	r2, #1
 80015aa:	493b      	ldr	r1, [pc, #236]	; (8001698 <XPT2046_TouchGetCoordinates+0x13c>)
 80015ac:	4838      	ldr	r0, [pc, #224]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015ae:	f006 fe87 	bl	80082c0 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2302      	movs	r3, #2
 80015be:	4935      	ldr	r1, [pc, #212]	; (8001694 <XPT2046_TouchGetCoordinates+0x138>)
 80015c0:	4833      	ldr	r0, [pc, #204]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015c2:	f006 ffb9 	bl	8008538 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80015c6:	7b3b      	ldrb	r3, [r7, #12]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	7b7a      	ldrb	r2, [r7, #13]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	4413      	add	r3, r2
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80015d6:	7c3b      	ldrb	r3, [r7, #16]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	7c7a      	ldrb	r2, [r7, #17]
 80015dc:	4313      	orrs	r3, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	4413      	add	r3, r2
 80015e4:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	3301      	adds	r3, #1
 80015ea:	77bb      	strb	r3, [r7, #30]
 80015ec:	7fbb      	ldrb	r3, [r7, #30]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d9c4      	bls.n	800157c <XPT2046_TouchGetCoordinates+0x20>
    }

    XPT2046_TouchUnselect();
 80015f2:	f7ff ffa7 	bl	8001544 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d801      	bhi.n	8001600 <XPT2046_TouchGetCoordinates+0xa4>
        return false;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e041      	b.n	8001684 <XPT2046_TouchGetCoordinates+0x128>

    uint32_t raw_x = (avg_x / 16);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f640 5247 	movw	r2, #3399	; 0xd47
 800160c:	4293      	cmp	r3, r2
 800160e:	d802      	bhi.n	8001616 <XPT2046_TouchGetCoordinates+0xba>
 8001610:	f640 5348 	movw	r3, #3400	; 0xd48
 8001614:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f247 1248 	movw	r2, #29000	; 0x7148
 800161c:	4293      	cmp	r3, r2
 800161e:	d902      	bls.n	8001626 <XPT2046_TouchGetCoordinates+0xca>
 8001620:	f247 1348 	movw	r3, #29000	; 0x7148
 8001624:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f640 42e3 	movw	r2, #3299	; 0xce3
 8001632:	4293      	cmp	r3, r2
 8001634:	d802      	bhi.n	800163c <XPT2046_TouchGetCoordinates+0xe0>
 8001636:	f640 43e4 	movw	r3, #3300	; 0xce4
 800163a:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001642:	4293      	cmp	r3, r2
 8001644:	d902      	bls.n	800164c <XPT2046_TouchGetCoordinates+0xf0>
 8001646:	f247 5330 	movw	r3, #30000	; 0x7530
 800164a:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    //printf("raw_x = %d, raw_y = %d\r\n", (int) raw_x, (int) raw_y);

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001652:	01db      	lsls	r3, r3, #7
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <XPT2046_TouchGetCoordinates+0x140>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0b5b      	lsrs	r3, r3, #13
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001670:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <XPT2046_TouchGetCoordinates+0x144>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0b5b      	lsrs	r3, r3, #13
 800167c:	b29a      	uxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	801a      	strh	r2, [r3, #0]

    return true;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	080107b8 	.word	0x080107b8
 8001690:	2000b544 	.word	0x2000b544
 8001694:	080107bc 	.word	0x080107bc
 8001698:	080107c0 	.word	0x080107c0
 800169c:	51eb851f 	.word	0x51eb851f
 80016a0:	4e8b8659 	.word	0x4e8b8659

080016a4 <drawExperimentMenu>:
		channelButton.btnHandler();
	} else if (isPressed(expButton)) {
		expButton.btnHandler();
	}
}
void drawExperimentMenu(uint8_t mode) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	drawImage(expImage, mode);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <drawExperimentMenu+0x1c>)
 80016b4:	f000 fec4 	bl	8002440 <drawImage>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080107c4 	.word	0x080107c4

080016c4 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2110      	movs	r1, #16
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <SELECT+0x14>)
 80016ce:	f003 ff6e 	bl	80055ae <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40010800 	.word	0x40010800

080016dc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2110      	movs	r1, #16
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DESELECT+0x14>)
 80016e6:	f003 ff62 	bl	80055ae <HAL_GPIO_WritePin>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010800 	.word	0x40010800

080016f4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80016fe:	bf00      	nop
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <SPI_TxByte+0x30>)
 8001702:	f007 f9c2 	bl	8008a8a <HAL_SPI_GetState>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d1f9      	bne.n	8001700 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 800170c:	1df9      	adds	r1, r7, #7
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	2201      	movs	r2, #1
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <SPI_TxByte+0x30>)
 8001716:	f006 fdd3 	bl	80082c0 <HAL_SPI_Transmit>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000b4a0 	.word	0x2000b4a0

08001728 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800172e:	23ff      	movs	r3, #255	; 0xff
 8001730:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8001736:	bf00      	nop
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <SPI_RxByte+0x38>)
 800173a:	f007 f9a6 	bl	8008a8a <HAL_SPI_GetState>
 800173e:	4603      	mov	r3, r0
 8001740:	2b01      	cmp	r3, #1
 8001742:	d1f9      	bne.n	8001738 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8001744:	1dba      	adds	r2, r7, #6
 8001746:	1df9      	adds	r1, r7, #7
 8001748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <SPI_RxByte+0x38>)
 8001752:	f006 fef1 	bl	8008538 <HAL_SPI_TransmitReceive>

  return data;
 8001756:	79bb      	ldrb	r3, [r7, #6]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000b4a0 	.word	0x2000b4a0

08001764 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800176c:	f7ff ffdc 	bl	8001728 <SPI_RxByte>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <SD_ReadyWait+0x34>)
 8001788:	2232      	movs	r2, #50	; 0x32
 800178a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800178c:	f7ff ffcc 	bl	8001728 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001790:	f7ff ffca 	bl	8001728 <SPI_RxByte>
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d004      	beq.n	80017a8 <SD_ReadyWait+0x28>
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SD_ReadyWait+0x34>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f3      	bne.n	8001790 <SD_ReadyWait+0x10>

  return res;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000c690 	.word	0x2000c690

080017b8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80017be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017c2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80017c4:	f7ff ff8a 	bl	80016dc <DESELECT>

  for(int i = 0; i < 10; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e005      	b.n	80017da <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80017ce:	20ff      	movs	r0, #255	; 0xff
 80017d0:	f7ff ff90 	bl	80016f4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	3301      	adds	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	ddf6      	ble.n	80017ce <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80017e0:	f7ff ff70 	bl	80016c4 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017f8:	2395      	movs	r3, #149	; 0x95
 80017fa:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e009      	b.n	8001816 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff72 	bl	80016f4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b05      	cmp	r3, #5
 800181a:	ddf2      	ble.n	8001802 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800181c:	e002      	b.n	8001824 <SD_PowerOn+0x6c>
  {
    Count--;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3b01      	subs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001824:	f7ff ff80 	bl	8001728 <SPI_RxByte>
 8001828:	4603      	mov	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d002      	beq.n	8001834 <SD_PowerOn+0x7c>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f4      	bne.n	800181e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001834:	f7ff ff52 	bl	80016dc <DESELECT>
  SPI_TxByte(0XFF);
 8001838:	20ff      	movs	r0, #255	; 0xff
 800183a:	f7ff ff5b 	bl	80016f4 <SPI_TxByte>

  PowerFlag = 1;
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <SD_PowerOn+0x94>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001c5 	.word	0x200001c5

08001850 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <SD_PowerOff+0x14>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200001c5 	.word	0x200001c5

08001868 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <SD_CheckPower+0x10>)
 800186e:	781b      	ldrb	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200001c5 	.word	0x200001c5

0800187c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <SD_RxDataBlock+0x68>)
 8001888:	220a      	movs	r2, #10
 800188a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800188c:	f7ff ff4c 	bl	8001728 <SPI_RxByte>
 8001890:	4603      	mov	r3, r0
 8001892:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d104      	bne.n	80018a4 <SD_RxDataBlock+0x28>
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <SD_RxDataBlock+0x68>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f3      	bne.n	800188c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2bfe      	cmp	r3, #254	; 0xfe
 80018a8:	d001      	beq.n	80018ae <SD_RxDataBlock+0x32>
    return FALSE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e016      	b.n	80018dc <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff55 	bl	8001764 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff4f 	bl	8001764 <SPI_RxBytePtr>
  } while(btr -= 2);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b02      	subs	r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80018d2:	f7ff ff29 	bl	8001728 <SPI_RxByte>
  SPI_RxByte();
 80018d6:	f7ff ff27 	bl	8001728 <SPI_RxByte>

  return TRUE;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000c691 	.word	0x2000c691

080018e8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018f8:	f7ff ff42 	bl	8001780 <SD_ReadyWait>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d001      	beq.n	8001906 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001902:	2300      	movs	r3, #0
 8001904:	e040      	b.n	8001988 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fef3 	bl	80016f4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	2bfd      	cmp	r3, #253	; 0xfd
 8001912:	d031      	beq.n	8001978 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fee7 	bl	80016f4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fee0 	bl	80016f4 <SPI_TxByte>
    } while (--wc);
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	3b01      	subs	r3, #1
 8001938:	73bb      	strb	r3, [r7, #14]
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1eb      	bne.n	8001918 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001940:	f7ff fef2 	bl	8001728 <SPI_RxByte>
    SPI_RxByte();
 8001944:	f7ff fef0 	bl	8001728 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001948:	e00b      	b.n	8001962 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800194a:	f7ff feed 	bl	8001728 <SPI_RxByte>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b05      	cmp	r3, #5
 800195a:	d006      	beq.n	800196a <SD_TxDataBlock+0x82>
        break;

      i++;
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	3301      	adds	r3, #1
 8001960:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001962:	7b7b      	ldrb	r3, [r7, #13]
 8001964:	2b40      	cmp	r3, #64	; 0x40
 8001966:	d9f0      	bls.n	800194a <SD_TxDataBlock+0x62>
 8001968:	e000      	b.n	800196c <SD_TxDataBlock+0x84>
        break;
 800196a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800196c:	bf00      	nop
 800196e:	f7ff fedb 	bl	8001728 <SPI_RxByte>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0fa      	beq.n	800196e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2b05      	cmp	r3, #5
 8001980:	d101      	bne.n	8001986 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800199c:	f7ff fef0 	bl	8001780 <SD_ReadyWait>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2bff      	cmp	r3, #255	; 0xff
 80019a4:	d001      	beq.n	80019aa <SD_SendCmd+0x1a>
    return 0xFF;
 80019a6:	23ff      	movs	r3, #255	; 0xff
 80019a8:	e040      	b.n	8001a2c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fea1 	bl	80016f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	0e1b      	lsrs	r3, r3, #24
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe9b 	bl	80016f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe95 	bl	80016f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe8f 	bl	80016f4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe8a 	bl	80016f4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d101      	bne.n	80019ee <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80019ea:	2395      	movs	r3, #149	; 0x95
 80019ec:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b48      	cmp	r3, #72	; 0x48
 80019f2:	d101      	bne.n	80019f8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019f4:	2387      	movs	r3, #135	; 0x87
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fe7a 	bl	80016f4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b4c      	cmp	r3, #76	; 0x4c
 8001a04:	d101      	bne.n	8001a0a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a06:	f7ff fe8f 	bl	8001728 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001a0e:	f7ff fe8b 	bl	8001728 <SPI_RxByte>
 8001a12:	4603      	mov	r3, r0
 8001a14:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a16:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da05      	bge.n	8001a2a <SD_SendCmd+0x9a>
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	73bb      	strb	r3, [r7, #14]
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f1      	bne.n	8001a0e <SD_SendCmd+0x7e>

  return res;
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0d5      	b.n	8001bf4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <SD_disk_initialize+0x1c8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <SD_disk_initialize+0x2a>
    return Stat;
 8001a56:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <SD_disk_initialize+0x1c8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e0ca      	b.n	8001bf4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001a5e:	f7ff feab 	bl	80017b8 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001a62:	f7ff fe2f 	bl	80016c4 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	f7ff ff8f 	bl	8001990 <SD_SendCmd>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 80a5 	bne.w	8001bc4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <SD_disk_initialize+0x1cc>)
 8001a7c:	2264      	movs	r2, #100	; 0x64
 8001a7e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a84:	2048      	movs	r0, #72	; 0x48
 8001a86:	f7ff ff83 	bl	8001990 <SD_SendCmd>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d158      	bne.n	8001b42 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e00c      	b.n	8001ab0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a96:	7bfc      	ldrb	r4, [r7, #15]
 8001a98:	f7ff fe46 	bl	8001728 <SPI_RxByte>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4423      	add	r3, r4
 8001aa6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d9ef      	bls.n	8001a96 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ab6:	7abb      	ldrb	r3, [r7, #10]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8083 	bne.w	8001bc4 <SD_disk_initialize+0x190>
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	2baa      	cmp	r3, #170	; 0xaa
 8001ac2:	d17f      	bne.n	8001bc4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2077      	movs	r0, #119	; 0x77
 8001ac8:	f7ff ff62 	bl	8001990 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d807      	bhi.n	8001ae2 <SD_disk_initialize+0xae>
 8001ad2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ad6:	2069      	movs	r0, #105	; 0x69
 8001ad8:	f7ff ff5a 	bl	8001990 <SD_SendCmd>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <SD_disk_initialize+0x1cc>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1eb      	bne.n	8001ac4 <SD_disk_initialize+0x90>
 8001aec:	e000      	b.n	8001af0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001aee:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <SD_disk_initialize+0x1cc>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d064      	beq.n	8001bc4 <SD_disk_initialize+0x190>
 8001afa:	2100      	movs	r1, #0
 8001afc:	207a      	movs	r0, #122	; 0x7a
 8001afe:	f7ff ff47 	bl	8001990 <SD_SendCmd>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d15d      	bne.n	8001bc4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e00c      	b.n	8001b28 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001b0e:	7bfc      	ldrb	r4, [r7, #15]
 8001b10:	f7ff fe0a 	bl	8001728 <SPI_RxByte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4423      	add	r3, r4
 8001b1e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d9ef      	bls.n	8001b0e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b2e:	7a3b      	ldrb	r3, [r7, #8]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SD_disk_initialize+0x108>
 8001b38:	2306      	movs	r3, #6
 8001b3a:	e000      	b.n	8001b3e <SD_disk_initialize+0x10a>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	73bb      	strb	r3, [r7, #14]
 8001b40:	e040      	b.n	8001bc4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b42:	2100      	movs	r1, #0
 8001b44:	2077      	movs	r0, #119	; 0x77
 8001b46:	f7ff ff23 	bl	8001990 <SD_SendCmd>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d808      	bhi.n	8001b62 <SD_disk_initialize+0x12e>
 8001b50:	2100      	movs	r1, #0
 8001b52:	2069      	movs	r0, #105	; 0x69
 8001b54:	f7ff ff1c 	bl	8001990 <SD_SendCmd>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d801      	bhi.n	8001b62 <SD_disk_initialize+0x12e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e000      	b.n	8001b64 <SD_disk_initialize+0x130>
 8001b62:	2301      	movs	r3, #1
 8001b64:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d10e      	bne.n	8001b8a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2077      	movs	r0, #119	; 0x77
 8001b70:	f7ff ff0e 	bl	8001990 <SD_SendCmd>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d80e      	bhi.n	8001b98 <SD_disk_initialize+0x164>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2069      	movs	r0, #105	; 0x69
 8001b7e:	f7ff ff07 	bl	8001990 <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b88:	e00d      	b.n	8001ba6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2041      	movs	r0, #65	; 0x41
 8001b8e:	f7ff feff 	bl	8001990 <SD_SendCmd>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <SD_disk_initialize+0x1cc>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1e1      	bne.n	8001b66 <SD_disk_initialize+0x132>
 8001ba2:	e000      	b.n	8001ba6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001ba4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <SD_disk_initialize+0x1cc>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <SD_disk_initialize+0x18c>
 8001bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb4:	2050      	movs	r0, #80	; 0x50
 8001bb6:	f7ff feeb 	bl	8001990 <SD_SendCmd>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <SD_disk_initialize+0x1d0>)
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001bca:	f7ff fd87 	bl	80016dc <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001bce:	f7ff fdab 	bl	8001728 <SPI_RxByte>

  if (type)
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <SD_disk_initialize+0x1c8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SD_disk_initialize+0x1c8>)
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e001      	b.n	8001bee <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001bea:	f7ff fe31 	bl	8001850 <SD_PowerOff>
  }

  return Stat;
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <SD_disk_initialize+0x1c8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	2000c691 	.word	0x2000c691
 8001c04:	200001c4 	.word	0x200001c4

08001c08 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e002      	b.n	8001c22 <SD_disk_status+0x1a>

  return Stat;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <SD_disk_status+0x24>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2db      	uxtb	r3, r3
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000000 	.word	0x20000000

08001c30 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <SD_disk_read+0x1c>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e054      	b.n	8001cfa <SD_disk_read+0xca>

  if (Stat & STA_NOINIT)
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <SD_disk_read+0xd4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04b      	b.n	8001cfa <SD_disk_read+0xca>

  if (!(CardType & 4))
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <SD_disk_read+0xd8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c74:	f7ff fd26 	bl	80016c4 <SELECT>

  if (count == 1)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d111      	bne.n	8001ca2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	2051      	movs	r0, #81	; 0x51
 8001c82:	f7ff fe85 	bl	8001990 <SD_SendCmd>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d12c      	bne.n	8001ce6 <SD_disk_read+0xb6>
 8001c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c90:	68b8      	ldr	r0, [r7, #8]
 8001c92:	f7ff fdf3 	bl	800187c <SD_RxDataBlock>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d024      	beq.n	8001ce6 <SD_disk_read+0xb6>
      count = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	e021      	b.n	8001ce6 <SD_disk_read+0xb6>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	2052      	movs	r0, #82	; 0x52
 8001ca6:	f7ff fe73 	bl	8001990 <SD_SendCmd>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d11a      	bne.n	8001ce6 <SD_disk_read+0xb6>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb4:	68b8      	ldr	r0, [r7, #8]
 8001cb6:	f7ff fde1 	bl	800187c <SD_RxDataBlock>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <SD_disk_read+0xac>
          break;

        buff += 512;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ccc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ea      	bne.n	8001cb0 <SD_disk_read+0x80>
 8001cda:	e000      	b.n	8001cde <SD_disk_read+0xae>
          break;
 8001cdc:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	204c      	movs	r0, #76	; 0x4c
 8001ce2:	f7ff fe55 	bl	8001990 <SD_SendCmd>
    }
  }

  DESELECT();
 8001ce6:	f7ff fcf9 	bl	80016dc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001cea:	f7ff fd1d 	bl	8001728 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000
 8001d08:	200001c4 	.word	0x200001c4

08001d0c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <SD_disk_write+0x1c>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <SD_disk_write+0x20>
    return RES_PARERR;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e071      	b.n	8001e10 <SD_disk_write+0x104>

  if (Stat & STA_NOINIT)
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <SD_disk_write+0x10c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e068      	b.n	8001e10 <SD_disk_write+0x104>

  if (Stat & STA_PROTECT)
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <SD_disk_write+0x10c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e05f      	b.n	8001e10 <SD_disk_write+0x104>

  if (!(CardType & 4))
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <SD_disk_write+0x110>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d62:	f7ff fcaf 	bl	80016c4 <SELECT>

  if (count == 1)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d110      	bne.n	8001d8e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	2058      	movs	r0, #88	; 0x58
 8001d70:	f7ff fe0e 	bl	8001990 <SD_SendCmd>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d140      	bne.n	8001dfc <SD_disk_write+0xf0>
 8001d7a:	21fe      	movs	r1, #254	; 0xfe
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f7ff fdb3 	bl	80018e8 <SD_TxDataBlock>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d039      	beq.n	8001dfc <SD_disk_write+0xf0>
      count = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	e036      	b.n	8001dfc <SD_disk_write+0xf0>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <SD_disk_write+0x110>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2077      	movs	r0, #119	; 0x77
 8001d9e:	f7ff fdf7 	bl	8001990 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	2057      	movs	r0, #87	; 0x57
 8001da6:	f7ff fdf3 	bl	8001990 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	2059      	movs	r0, #89	; 0x59
 8001dae:	f7ff fdef 	bl	8001990 <SD_SendCmd>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d121      	bne.n	8001dfc <SD_disk_write+0xf0>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001db8:	21fc      	movs	r1, #252	; 0xfc
 8001dba:	68b8      	ldr	r0, [r7, #8]
 8001dbc:	f7ff fd94 	bl	80018e8 <SD_TxDataBlock>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <SD_disk_write+0xd6>
          break;

        buff += 512;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dd2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1eb      	bne.n	8001db8 <SD_disk_write+0xac>
 8001de0:	e000      	b.n	8001de4 <SD_disk_write+0xd8>
          break;
 8001de2:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001de4:	21fd      	movs	r1, #253	; 0xfd
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fd7e 	bl	80018e8 <SD_TxDataBlock>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SD_disk_write+0xf0>
      {
        count = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001dfc:	f7ff fc6e 	bl	80016dc <DESELECT>
  SPI_RxByte();
 8001e00:	f7ff fc92 	bl	8001728 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	200001c4 	.word	0x200001c4

08001e20 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	603a      	str	r2, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e11b      	b.n	8002076 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d129      	bne.n	8001e9e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d017      	beq.n	8001e82 <SD_disk_ioctl+0x62>
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	dc1f      	bgt.n	8001e96 <SD_disk_ioctl+0x76>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <SD_disk_ioctl+0x40>
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d00b      	beq.n	8001e76 <SD_disk_ioctl+0x56>
 8001e5e:	e01a      	b.n	8001e96 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e60:	f7ff fd02 	bl	8001868 <SD_CheckPower>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e6a:	f7ff fcf1 	bl	8001850 <SD_PowerOff>
      res = RES_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e74:	e0fd      	b.n	8002072 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e76:	f7ff fc9f 	bl	80017b8 <SD_PowerOn>
      res = RES_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e80:	e0f7      	b.n	8002072 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	1c5c      	adds	r4, r3, #1
 8001e86:	f7ff fcef 	bl	8001868 <SD_CheckPower>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e94:	e0ed      	b.n	8002072 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e96:	2304      	movs	r3, #4
 8001e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e9c:	e0e9      	b.n	8002072 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001e9e:	4b78      	ldr	r3, [pc, #480]	; (8002080 <SD_disk_ioctl+0x260>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0e2      	b.n	8002076 <SD_disk_ioctl+0x256>

    SELECT();
 8001eb0:	f7ff fc08 	bl	80016c4 <SELECT>

    switch (ctrl)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	2b0d      	cmp	r3, #13
 8001eb8:	f200 80cc 	bhi.w	8002054 <SD_disk_ioctl+0x234>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <SD_disk_ioctl+0xa4>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001fbf 	.word	0x08001fbf
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	08001faf 	.word	0x08001faf
 8001ed0:	08002055 	.word	0x08002055
 8001ed4:	08002055 	.word	0x08002055
 8001ed8:	08002055 	.word	0x08002055
 8001edc:	08002055 	.word	0x08002055
 8001ee0:	08002055 	.word	0x08002055
 8001ee4:	08002055 	.word	0x08002055
 8001ee8:	08002055 	.word	0x08002055
 8001eec:	08002055 	.word	0x08002055
 8001ef0:	08001fd1 	.word	0x08001fd1
 8001ef4:	08001ff5 	.word	0x08001ff5
 8001ef8:	08002019 	.word	0x08002019
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001efc:	2100      	movs	r1, #0
 8001efe:	2049      	movs	r0, #73	; 0x49
 8001f00:	f7ff fd46 	bl	8001990 <SD_SendCmd>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80a8 	bne.w	800205c <SD_disk_ioctl+0x23c>
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2110      	movs	r1, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fcb2 	bl	800187c <SD_RxDataBlock>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 809e 	beq.w	800205c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10e      	bne.n	8001f48 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f2a:	7d7b      	ldrb	r3, [r7, #21]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	7d3b      	ldrb	r3, [r7, #20]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	029a      	lsls	r2, r3, #10
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e02e      	b.n	8001fa6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f48:	7c7b      	ldrb	r3, [r7, #17]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	7dbb      	ldrb	r3, [r7, #22]
 8001f52:	09db      	lsrs	r3, r3, #7
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	7d7b      	ldrb	r3, [r7, #21]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0306 	and.w	r3, r3, #6
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f70:	7d3b      	ldrb	r3, [r7, #20]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	7cbb      	ldrb	r3, [r7, #18]
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f98:	8bfa      	ldrh	r2, [r7, #30]
 8001f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f9e:	3b09      	subs	r3, #9
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001fac:	e056      	b.n	800205c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fbc:	e055      	b.n	800206a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001fbe:	f7ff fbdf 	bl	8001780 <SD_ReadyWait>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2bff      	cmp	r3, #255	; 0xff
 8001fc6:	d14b      	bne.n	8002060 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fce:	e047      	b.n	8002060 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2049      	movs	r0, #73	; 0x49
 8001fd4:	f7ff fcdc 	bl	8001990 <SD_SendCmd>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d142      	bne.n	8002064 <SD_disk_ioctl+0x244>
 8001fde:	2110      	movs	r1, #16
 8001fe0:	6a38      	ldr	r0, [r7, #32]
 8001fe2:	f7ff fc4b 	bl	800187c <SD_RxDataBlock>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03b      	beq.n	8002064 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ff2:	e037      	b.n	8002064 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	204a      	movs	r0, #74	; 0x4a
 8001ff8:	f7ff fcca 	bl	8001990 <SD_SendCmd>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d132      	bne.n	8002068 <SD_disk_ioctl+0x248>
 8002002:	2110      	movs	r1, #16
 8002004:	6a38      	ldr	r0, [r7, #32]
 8002006:	f7ff fc39 	bl	800187c <SD_RxDataBlock>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d02b      	beq.n	8002068 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002016:	e027      	b.n	8002068 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002018:	2100      	movs	r1, #0
 800201a:	207a      	movs	r0, #122	; 0x7a
 800201c:	f7ff fcb8 	bl	8001990 <SD_SendCmd>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800202c:	e00b      	b.n	8002046 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800202e:	6a3c      	ldr	r4, [r7, #32]
 8002030:	1c63      	adds	r3, r4, #1
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	f7ff fb78 	bl	8001728 <SPI_RxByte>
 8002038:	4603      	mov	r3, r0
 800203a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800203c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002040:	3301      	adds	r3, #1
 8002042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800204a:	2b03      	cmp	r3, #3
 800204c:	d9ef      	bls.n	800202e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8002054:	2304      	movs	r3, #4
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800205a:	e006      	b.n	800206a <SD_disk_ioctl+0x24a>
      break;
 800205c:	bf00      	nop
 800205e:	e004      	b.n	800206a <SD_disk_ioctl+0x24a>
      break;
 8002060:	bf00      	nop
 8002062:	e002      	b.n	800206a <SD_disk_ioctl+0x24a>
      break;
 8002064:	bf00      	nop
 8002066:	e000      	b.n	800206a <SD_disk_ioctl+0x24a>
      break;
 8002068:	bf00      	nop
    }

    DESELECT();
 800206a:	f7ff fb37 	bl	80016dc <DESELECT>
    SPI_RxByte();
 800206e:	f7ff fb5b 	bl	8001728 <SPI_RxByte>
  }

  return res;
 8002072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002076:	4618      	mov	r0, r3
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <GUI_init>:

//BUTTON HANDLERS

// BUTTON HANDLERS

void GUI_init() {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	ILI9163_init(1);
 8002088:	2001      	movs	r0, #1
 800208a:	f000 fad7 	bl	800263c <ILI9163_init>
	ILI9163_render();
 800208e:	f000 fbbf 	bl	8002810 <ILI9163_render>
	XPT2046_TouchGetCoordinates(&x, &y);
 8002092:	4903      	ldr	r1, [pc, #12]	; (80020a0 <GUI_init+0x1c>)
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <GUI_init+0x20>)
 8002096:	f7ff fa61 	bl	800155c <XPT2046_TouchGetCoordinates>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000a450 	.word	0x2000a450
 80020a4:	2000a410 	.word	0x2000a410

080020a8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
	ILI9163_drawPixel(x, y, GREEN);
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <EXTI15_10_IRQHandler+0x138>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <EXTI15_10_IRQHandler+0x13c>)
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	b2d1      	uxtb	r1, r2
 80020ba:	2204      	movs	r2, #4
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fbcd 	bl	800285c <ILI9163_drawPixel>
	XPT2046_TouchGetCoordinates(&x, &y);
 80020c2:	4948      	ldr	r1, [pc, #288]	; (80021e4 <EXTI15_10_IRQHandler+0x13c>)
 80020c4:	4846      	ldr	r0, [pc, #280]	; (80021e0 <EXTI15_10_IRQHandler+0x138>)
 80020c6:	f7ff fa49 	bl	800155c <XPT2046_TouchGetCoordinates>
	scrolling = 0;
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <EXTI15_10_IRQHandler+0x140>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
	while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) {
 80020d0:	e01b      	b.n	800210a <EXTI15_10_IRQHandler+0x62>
		uint16_t xLast, yLast;
		XPT2046_TouchGetCoordinates(&xLast, &yLast);
 80020d2:	1d3a      	adds	r2, r7, #4
 80020d4:	1dbb      	adds	r3, r7, #6
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fa3f 	bl	800155c <XPT2046_TouchGetCoordinates>

		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) {
 80020de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e2:	4842      	ldr	r0, [pc, #264]	; (80021ec <EXTI15_10_IRQHandler+0x144>)
 80020e4:	f003 fa4c 	bl	8005580 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <EXTI15_10_IRQHandler+0x74>
			break;
		}
		scrolling = -(yLast - y - 20);
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <EXTI15_10_IRQHandler+0x13c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f1c3 0314 	rsb	r3, r3, #20
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <EXTI15_10_IRQHandler+0x140>)
 80020fe:	6013      	str	r3, [r2, #0]
		//read_exp_menu(scrolling+position);
		drawExperimentMenu(1);
 8002100:	2001      	movs	r0, #1
 8002102:	f7ff facf 	bl	80016a4 <drawExperimentMenu>
		ILI9163_render();
 8002106:	f000 fb83 	bl	8002810 <ILI9163_render>
	while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) {
 800210a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210e:	4837      	ldr	r0, [pc, #220]	; (80021ec <EXTI15_10_IRQHandler+0x144>)
 8002110:	f003 fa36 	bl	8005580 <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0db      	beq.n	80020d2 <EXTI15_10_IRQHandler+0x2a>
 800211a:	e000      	b.n	800211e <EXTI15_10_IRQHandler+0x76>
			break;
 800211c:	bf00      	nop

	}
	position = position + scrolling;
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <EXTI15_10_IRQHandler+0x140>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a31      	ldr	r2, [pc, #196]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 800212a:	6013      	str	r3, [r2, #0]
	if (position < 0) {
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da02      	bge.n	800213a <EXTI15_10_IRQHandler+0x92>
		position = 0;
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
	}
	if (position > 140)
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b8c      	cmp	r3, #140	; 0x8c
 8002140:	dd02      	ble.n	8002148 <EXTI15_10_IRQHandler+0xa0>
		position = 140;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 8002144:	228c      	movs	r2, #140	; 0x8c
 8002146:	601a      	str	r2, [r3, #0]
	switch (state) {
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <EXTI15_10_IRQHandler+0x14c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d815      	bhi.n	800217c <EXTI15_10_IRQHandler+0xd4>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <EXTI15_10_IRQHandler+0xb0>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	08002171 	.word	0x08002171
 800215c:	0800217d 	.word	0x0800217d
 8002160:	08002177 	.word	0x08002177
 8002164:	0800217d 	.word	0x0800217d
 8002168:	0800217d 	.word	0x0800217d
 800216c:	0800217d 	.word	0x0800217d
	case MAINMENU:
		checkMainButtons();
 8002170:	f001 f910 	bl	8003394 <checkMainButtons>
		break;
 8002174:	e002      	b.n	800217c <EXTI15_10_IRQHandler+0xd4>

		break;
	case PLOT:
		break;
	case NUMPAD:
		checkNumpadButtons();
 8002176:	f001 fd2f 	bl	8003bd8 <checkNumpadButtons>

		break;
 800217a:	bf00      	nop
		break;
	case ABOUT:
		break;

	}
	switch (state) {
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <EXTI15_10_IRQHandler+0x14c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d822      	bhi.n	80021ca <EXTI15_10_IRQHandler+0x122>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <EXTI15_10_IRQHandler+0xe4>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	080021a5 	.word	0x080021a5
 8002190:	080021ab 	.word	0x080021ab
 8002194:	080021b9 	.word	0x080021b9
 8002198:	080021b3 	.word	0x080021b3
 800219c:	080021c5 	.word	0x080021c5
 80021a0:	080021cb 	.word	0x080021cb
	case MAINMENU:
		drawMainButtons();
 80021a4:	f001 f920 	bl	80033e8 <drawMainButtons>
		break;
 80021a8:	e00f      	b.n	80021ca <EXTI15_10_IRQHandler+0x122>
	case EXPMENU:
		drawExperimentMenu(0);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fa7a 	bl	80016a4 <drawExperimentMenu>

		break;
 80021b0:	e00b      	b.n	80021ca <EXTI15_10_IRQHandler+0x122>
	case PLOT:
		read_plot();
 80021b2:	f001 fe4f 	bl	8003e54 <read_plot>
			break;
 80021b6:	e008      	b.n	80021ca <EXTI15_10_IRQHandler+0x122>
	case NUMPAD:
		position = 0;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <EXTI15_10_IRQHandler+0x148>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
		drawNumpad();
 80021be:	f001 fdab 	bl	8003d18 <drawNumpad>

		break;
 80021c2:	e002      	b.n	80021ca <EXTI15_10_IRQHandler+0x122>
	case PASTMENU:
		drawGraph();
 80021c4:	f000 f824 	bl	8002210 <drawGraph>
		break;
 80021c8:	bf00      	nop
	case ABOUT:
		break;

	}

	ILI9163_render();
 80021ca:	f000 fb21 	bl	8002810 <ILI9163_render>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80021ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021d2:	f003 fa05 	bl	80055e0 <HAL_GPIO_EXTI_IRQHandler>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000a410 	.word	0x2000a410
 80021e4:	2000a450 	.word	0x2000a450
 80021e8:	2000a44c 	.word	0x2000a44c
 80021ec:	40011800 	.word	0x40011800
 80021f0:	2000a414 	.word	0x2000a414
 80021f4:	2000a42c 	.word	0x2000a42c

080021f8 <GUI_drawGUI>:
void GUI_drawGUI(UART_HandleTypeDef huart) {
 80021f8:	b084      	sub	sp, #16
 80021fa:	b490      	push	{r4, r7}
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	f107 0408 	add.w	r4, r7, #8
 8002202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// need to call for interrupts

}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc90      	pop	{r4, r7}
 800220c:	b004      	add	sp, #16
 800220e:	4770      	bx	lr

08002210 <drawGraph>:
				i * 128 / dataCount + 128 / dataCount,
				nextVal * 128 / (maxY - minY), BLACK);
	}
}

void drawGraph() {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 8002216:	af02      	add	r7, sp, #8

	//test data
	float data[] = { 0.0056, 0.0103961, 0.02415, 0.03572, 0.04311, 0.052359,
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <drawGraph+0x1b0>)
 800221c:	4618      	mov	r0, r3
 800221e:	4611      	mov	r1, r2
 8002220:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002224:	461a      	mov	r2, r3
 8002226:	f00c fc53 	bl	800ead0 <memcpy>
			0.005624, 0.01031, 0.02418, 0.0357, 0.0431, 0.052399, 0.0573,
			0.0609, 0.062, 0.06242, 0.0608, 0.05806, 0.0540, 0.049, 0.04347,
			0.03724, 0.03062, 0.0237, 0.0168, 0.0100, 0.0035, 0.0609, 0.062,
			0.0624, 0.0608, 0.0580, 0.0540, 0.0491, 0.0434, 0.0372, 0.0306,
			0.0237 };
	float max = 0.0f, min = 999.0f;
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <drawGraph+0x1b4>)
 8002234:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	for (int i = 0; i < 100; i++) {
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800223e:	e030      	b.n	80022a2 <drawGraph+0x92>
		if (*(data + i) < min) {
 8002240:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	1d3a      	adds	r2, r7, #4
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f8d7 03d0 	ldr.w	r0, [r7, #976]	; 0x3d0
 8002252:	f7fe ff9f 	bl	8001194 <__aeabi_fcmpgt>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <drawGraph+0x5c>
			min = *(data + i);
 800225c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	1d3a      	adds	r2, r7, #4
 8002264:	4413      	add	r3, r2
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		}
		if (*(data + i) > max) {
 800226c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	1d3a      	adds	r2, r7, #4
 8002274:	4413      	add	r3, r2
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 800227e:	f7fe ff6b 	bl	8001158 <__aeabi_fcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <drawGraph+0x88>
			max = *(data + i);
 8002288:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	1d3a      	adds	r2, r7, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	for (int i = 0; i < 100; i++) {
 8002298:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800229c:	3301      	adds	r3, #1
 800229e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80022a2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80022a6:	2b63      	cmp	r3, #99	; 0x63
 80022a8:	ddca      	ble.n	8002240 <drawGraph+0x30>
		}
	}
	uint16_t pixVal = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
	uint16_t nextVal = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8a7 33c4 	strh.w	r3, [r7, #964]	; 0x3c4
	for (int i = 0; i < 100; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80022bc:	e076      	b.n	80023ac <drawGraph+0x19c>
		pixVal = *(data + i) * 128 / (max - min);
 80022be:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	1d3a      	adds	r2, r7, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fda4 	bl	8000e1c <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461c      	mov	r4, r3
 80022d8:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80022dc:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 80022e0:	f7fe fc92 	bl	8000c08 <__aeabi_fsub>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4619      	mov	r1, r3
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7fe fe4b 	bl	8000f84 <__aeabi_fdiv>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ff7f 	bl	80011f4 <__aeabi_f2uiz>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
		nextVal = *(data + i + 1) * 128 / (max - min);
 80022fc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002300:	3301      	adds	r3, #1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	1d3a      	adds	r2, r7, #4
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fd84 	bl	8000e1c <__aeabi_fmul>
 8002314:	4603      	mov	r3, r0
 8002316:	461c      	mov	r4, r3
 8002318:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 800231c:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 8002320:	f7fe fc72 	bl	8000c08 <__aeabi_fsub>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	4620      	mov	r0, r4
 800232a:	f7fe fe2b 	bl	8000f84 <__aeabi_fdiv>
 800232e:	4603      	mov	r3, r0
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe ff5f 	bl	80011f4 <__aeabi_f2uiz>
 8002336:	4603      	mov	r3, r0
 8002338:	f8a7 33c4 	strh.w	r3, [r7, #964]	; 0x3c4
		if (pixVal <= nextVal)
 800233c:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	; 0x3c6
 8002340:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 8002344:	429a      	cmp	r2, r3
 8002346:	d816      	bhi.n	8002376 <drawGraph+0x166>
			ILI9163_drawLine(i * 2, pixVal, (i + 1) * 2, nextVal, WHITE);
 8002348:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800234c:	b2db      	uxtb	r3, r3
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	b2d8      	uxtb	r0, r3
 8002352:	f8b7 33c6 	ldrh.w	r3, [r7, #966]	; 0x3c6
 8002356:	b2d9      	uxtb	r1, r3
 8002358:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800235c:	3301      	adds	r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800236e:	9400      	str	r4, [sp, #0]
 8002370:	f000 fb05 	bl	800297e <ILI9163_drawLine>
 8002374:	e015      	b.n	80023a2 <drawGraph+0x192>
		else
			ILI9163_drawLine(i * 2, pixVal, (i + 1) * 2, nextVal, WHITE);
 8002376:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800237a:	b2db      	uxtb	r3, r3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	b2d8      	uxtb	r0, r3
 8002380:	f8b7 33c6 	ldrh.w	r3, [r7, #966]	; 0x3c6
 8002384:	b2d9      	uxtb	r1, r3
 8002386:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800238a:	3301      	adds	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800239c:	9400      	str	r4, [sp, #0]
 800239e:	f000 faee 	bl	800297e <ILI9163_drawLine>
	for (int i = 0; i < 100; i++) {
 80023a2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80023a6:	3301      	adds	r3, #1
 80023a8:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80023ac:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80023b0:	2b63      	cmp	r3, #99	; 0x63
 80023b2:	dd84      	ble.n	80022be <drawGraph+0xae>
	}
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	f507 7777 	add.w	r7, r7, #988	; 0x3dc
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	080102f0 	.word	0x080102f0
 80023c4:	4479c000 	.word	0x4479c000

080023c8 <isPressed>:

int isPressed(Button button) {
 80023c8:	b490      	push	{r4, r7}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	463c      	mov	r4, r7
 80023d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (x > button.x1 && x < button.x2 && y - position > button.y1
 80023d4:	783b      	ldrb	r3, [r7, #0]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <isPressed+0x58>)
 80023da:	881b      	ldrh	r3, [r3, #0]
			&& y - position < button.y2);
 80023dc:	429a      	cmp	r2, r3
 80023de:	d219      	bcs.n	8002414 <isPressed+0x4c>
	return (x > button.x1 && x < button.x2 && y - position > button.y1
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <isPressed+0x58>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d913      	bls.n	8002414 <isPressed+0x4c>
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <isPressed+0x5c>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <isPressed+0x60>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	78ba      	ldrb	r2, [r7, #2]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	dd0a      	ble.n	8002414 <isPressed+0x4c>
			&& y - position < button.y2);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <isPressed+0x5c>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <isPressed+0x60>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	4293      	cmp	r3, r2
 800240e:	da01      	bge.n	8002414 <isPressed+0x4c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <isPressed+0x4e>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bc90      	pop	{r4, r7}
 800241e:	4770      	bx	lr
 8002420:	2000a410 	.word	0x2000a410
 8002424:	2000a450 	.word	0x2000a450
 8002428:	2000a414 	.word	0x2000a414

0800242c <get_buffer>:
extern uint16_t frameBuffer[BUFSIZE] = { 0 };

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

uint16_t *get_buffer(){
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	return frameBuffer;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <get_buffer+0x10>)
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200001c8 	.word	0x200001c8

08002440 <drawImage>:

void drawImage(const uint16_t *image, uint8_t mode) {
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
	if (mode == 0) {
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d117      	bne.n	8002482 <drawImage+0x42>
		for (int i = 0; i < BUFSIZE; i++) {
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e00f      	b.n	8002478 <drawImage+0x38>

			frameBuffer[i] = image[i + 128 * position];
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <drawImage+0x80>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	01da      	lsls	r2, r3, #7
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	8819      	ldrh	r1, [r3, #0]
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <drawImage+0x84>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BUFSIZE; i++) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3301      	adds	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800247e:	dbeb      	blt.n	8002458 <drawImage+0x18>

			frameBuffer[i] = image[i + 128 * (scrolling+position)];
		}
	}

}
 8002480:	e019      	b.n	80024b6 <drawImage+0x76>
		for (int i = 0; i < BUFSIZE; i++) {
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	e012      	b.n	80024ae <drawImage+0x6e>
			frameBuffer[i] = image[i + 128 * (scrolling+position)];
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <drawImage+0x88>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <drawImage+0x80>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4413      	add	r3, r2
 8002492:	01da      	lsls	r2, r3, #7
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	8819      	ldrh	r1, [r3, #0]
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <drawImage+0x84>)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BUFSIZE; i++) {
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80024b4:	dbe8      	blt.n	8002488 <drawImage+0x48>
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	2000a414 	.word	0x2000a414
 80024c4:	200001c8 	.word	0x200001c8
 80024c8:	2000a44c 	.word	0x2000a44c

080024cc <ILI9163_writeCommand>:

void ILI9163_writeCommand(uint8_t address) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <ILI9163_writeCommand+0x40>)
 80024dc:	f003 f867 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e6:	4809      	ldr	r0, [pc, #36]	; (800250c <ILI9163_writeCommand+0x40>)
 80024e8:	f003 f861 	bl	80055ae <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80024ec:	1df9      	adds	r1, r7, #7
 80024ee:	2300      	movs	r3, #0
 80024f0:	2201      	movs	r2, #1
 80024f2:	4807      	ldr	r0, [pc, #28]	; (8002510 <ILI9163_writeCommand+0x44>)
 80024f4:	f005 fee4 	bl	80082c0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <ILI9163_writeCommand+0x40>)
 80024fe:	f003 f856 	bl	80055ae <HAL_GPIO_WritePin>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40011800 	.word	0x40011800
 8002510:	2000b544 	.word	0x2000b544

08002514 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	480c      	ldr	r0, [pc, #48]	; (8002554 <ILI9163_writeData+0x40>)
 8002524:	f003 f843 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8002528:	2201      	movs	r2, #1
 800252a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252e:	4809      	ldr	r0, [pc, #36]	; (8002554 <ILI9163_writeData+0x40>)
 8002530:	f003 f83d 	bl	80055ae <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8002534:	1df9      	adds	r1, r7, #7
 8002536:	2300      	movs	r3, #0
 8002538:	2201      	movs	r2, #1
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <ILI9163_writeData+0x44>)
 800253c:	f005 fec0 	bl	80082c0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8002540:	2201      	movs	r2, #1
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <ILI9163_writeData+0x40>)
 8002546:	f003 f832 	bl	80055ae <HAL_GPIO_WritePin>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40011800 	.word	0x40011800
 8002558:	2000b544 	.word	0x2000b544

0800255c <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	4810      	ldr	r0, [pc, #64]	; (80025ac <ILI9163_writeData16+0x50>)
 800256c:	f003 f81f 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <ILI9163_writeData16+0x50>)
 8002578:	f003 f819 	bl	80055ae <HAL_GPIO_WritePin>

	uint8_t data[2] = { (word >> 8) & 0x00FF, word & 0x00FF };
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b29b      	uxth	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	733b      	strb	r3, [r7, #12]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 800258c:	f107 010c 	add.w	r1, r7, #12
 8002590:	2300      	movs	r3, #0
 8002592:	2202      	movs	r2, #2
 8002594:	4806      	ldr	r0, [pc, #24]	; (80025b0 <ILI9163_writeData16+0x54>)
 8002596:	f005 fe93 	bl	80082c0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800259a:	2201      	movs	r2, #1
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <ILI9163_writeData16+0x50>)
 80025a0:	f003 f805 	bl	80055ae <HAL_GPIO_WritePin>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40011800 	.word	0x40011800
 80025b0:	2000b544 	.word	0x2000b544

080025b4 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4604      	mov	r4, r0
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	80fb      	strh	r3, [r7, #6]
 80025c6:	4603      	mov	r3, r0
 80025c8:	80bb      	strh	r3, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]
 80025ce:	4613      	mov	r3, r2
 80025d0:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80025d2:	202a      	movs	r0, #42	; 0x2a
 80025d4:	f7ff ff7a 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ffbe 	bl	800255c <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ffba 	bl	800255c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80025e8:	202b      	movs	r0, #43	; 0x2b
 80025ea:	f7ff ff6f 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ffb3 	bl	800255c <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80025f6:	883b      	ldrh	r3, [r7, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ffaf 	bl	800255c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80025fe:	202c      	movs	r0, #44	; 0x2c
 8002600:	f7ff ff64 	bl	80024cc <ILI9163_writeCommand>
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <ILI9163_reset>:

void ILI9163_reset(void) {
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <ILI9163_reset+0x2c>)
 8002618:	f002 ffc9 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800261c:	2032      	movs	r0, #50	; 0x32
 800261e:	f001 ff75 	bl	800450c <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <ILI9163_reset+0x2c>)
 800262a:	f002 ffc0 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800262e:	2064      	movs	r0, #100	; 0x64
 8002630:	f001 ff6c 	bl	800450c <HAL_Delay>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40011800 	.word	0x40011800

0800263c <ILI9163_init>:

void ILI9163_init(int rotation) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	scrolling = 0;
 8002644:	4b70      	ldr	r3, [pc, #448]	; (8002808 <ILI9163_init+0x1cc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	486f      	ldr	r0, [pc, #444]	; (800280c <ILI9163_init+0x1d0>)
 8002650:	f002 ffad 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265a:	486c      	ldr	r0, [pc, #432]	; (800280c <ILI9163_init+0x1d0>)
 800265c:	f002 ffa7 	bl	80055ae <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8002660:	f7ff ffd4 	bl	800260c <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8002664:	2011      	movs	r0, #17
 8002666:	f7ff ff31 	bl	80024cc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 800266a:	2005      	movs	r0, #5
 800266c:	f001 ff4e 	bl	800450c <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8002670:	203a      	movs	r0, #58	; 0x3a
 8002672:	f7ff ff2b 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8002676:	2005      	movs	r0, #5
 8002678:	f7ff ff4c 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 800267c:	2026      	movs	r0, #38	; 0x26
 800267e:	f7ff ff25 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 8002682:	2004      	movs	r0, #4
 8002684:	f7ff ff46 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8002688:	20f2      	movs	r0, #242	; 0xf2
 800268a:	f7ff ff1f 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff ff40 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8002694:	20e0      	movs	r0, #224	; 0xe0
 8002696:	f7ff ff19 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 800269a:	203f      	movs	r0, #63	; 0x3f
 800269c:	f7ff ff3a 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80026a0:	2025      	movs	r0, #37	; 0x25
 80026a2:	f7ff ff37 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 80026a6:	201c      	movs	r0, #28
 80026a8:	f7ff ff34 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80026ac:	201e      	movs	r0, #30
 80026ae:	f7ff ff31 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80026b2:	2020      	movs	r0, #32
 80026b4:	f7ff ff2e 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80026b8:	2012      	movs	r0, #18
 80026ba:	f7ff ff2b 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80026be:	202a      	movs	r0, #42	; 0x2a
 80026c0:	f7ff ff28 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80026c4:	2090      	movs	r0, #144	; 0x90
 80026c6:	f7ff ff25 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80026ca:	2024      	movs	r0, #36	; 0x24
 80026cc:	f7ff ff22 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80026d0:	2011      	movs	r0, #17
 80026d2:	f7ff ff1f 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff ff1c 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff ff19 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff ff16 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ff13 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff ff10 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80026f4:	20e1      	movs	r0, #225	; 0xe1
 80026f6:	f7ff fee9 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80026fa:	2020      	movs	r0, #32
 80026fc:	f7ff ff0a 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002700:	2020      	movs	r0, #32
 8002702:	f7ff ff07 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002706:	2020      	movs	r0, #32
 8002708:	f7ff ff04 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800270c:	2020      	movs	r0, #32
 800270e:	f7ff ff01 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 8002712:	2005      	movs	r0, #5
 8002714:	f7ff fefe 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fefb 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 800271e:	2015      	movs	r0, #21
 8002720:	f7ff fef8 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 8002724:	20a7      	movs	r0, #167	; 0xa7
 8002726:	f7ff fef5 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 800272a:	203d      	movs	r0, #61	; 0x3d
 800272c:	f7ff fef2 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8002730:	2018      	movs	r0, #24
 8002732:	f7ff feef 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8002736:	2025      	movs	r0, #37	; 0x25
 8002738:	f7ff feec 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800273c:	202a      	movs	r0, #42	; 0x2a
 800273e:	f7ff fee9 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8002742:	202b      	movs	r0, #43	; 0x2b
 8002744:	f7ff fee6 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8002748:	202b      	movs	r0, #43	; 0x2b
 800274a:	f7ff fee3 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 800274e:	203a      	movs	r0, #58	; 0x3a
 8002750:	f7ff fee0 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8002754:	20b1      	movs	r0, #177	; 0xb1
 8002756:	f7ff feb9 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800275a:	2008      	movs	r0, #8
 800275c:	f7ff feda 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002760:	2002      	movs	r0, #2
 8002762:	f7ff fed7 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8002766:	20b2      	movs	r0, #178	; 0xb2
 8002768:	f7ff feb0 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800276c:	2008      	movs	r0, #8
 800276e:	f7ff fed1 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002772:	2002      	movs	r0, #2
 8002774:	f7ff fece 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8002778:	20b3      	movs	r0, #179	; 0xb3
 800277a:	f7ff fea7 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800277e:	2008      	movs	r0, #8
 8002780:	f7ff fec8 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002784:	2002      	movs	r0, #2
 8002786:	f7ff fec5 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 800278a:	20b4      	movs	r0, #180	; 0xb4
 800278c:	f7ff fe9e 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8002790:	2007      	movs	r0, #7
 8002792:	f7ff febf 	bl	8002514 <ILI9163_writeData>

	 ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	 ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	 */

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8002796:	202a      	movs	r0, #42	; 0x2a
 8002798:	f7ff fe98 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff feb9 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff feb6 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff feb3 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT - 1); // XEL (128 pixels x)
 80027ae:	209f      	movs	r0, #159	; 0x9f
 80027b0:	f7ff feb0 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80027b4:	202b      	movs	r0, #43	; 0x2b
 80027b6:	f7ff fe89 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff feaa 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7ff fea7 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff fea4 	bl	8002514 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH - 1); // 160 pixels y
 80027cc:	207f      	movs	r0, #127	; 0x7f
 80027ce:	f7ff fea1 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80027d2:	2036      	movs	r0, #54	; 0x36
 80027d4:	f7ff fe7a 	bl	80024cc <ILI9163_writeCommand>
	if (rotation)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <ILI9163_init+0x1aa>
		ILI9163_writeData(0xc0 | 0x08);
 80027de:	20c8      	movs	r0, #200	; 0xc8
 80027e0:	f7ff fe98 	bl	8002514 <ILI9163_writeData>
 80027e4:	e002      	b.n	80027ec <ILI9163_init+0x1b0>
	else
		ILI9163_writeData(0xc0 | 0x08);
 80027e6:	20c8      	movs	r0, #200	; 0xc8
 80027e8:	f7ff fe94 	bl	8002514 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80027ec:	2013      	movs	r0, #19
 80027ee:	f7ff fe6d 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80027f2:	2029      	movs	r0, #41	; 0x29
 80027f4:	f7ff fe6a 	bl	80024cc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80027f8:	202c      	movs	r0, #44	; 0x2c
 80027fa:	f7ff fe67 	bl	80024cc <ILI9163_writeCommand>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000a44c 	.word	0x2000a44c
 800280c:	40011800 	.word	0x40011800

08002810 <ILI9163_render>:
void ILI9163_newFrame() {
	for (uint32_t i = 0; i < (ILI9163_WIDTH * ILI9163_HEIGHT); i++)
		frameBuffer[i] = 0xFFFF;
}

void ILI9163_render() {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8002814:	23a0      	movs	r3, #160	; 0xa0
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff feca 	bl	80025b4 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	4809      	ldr	r0, [pc, #36]	; (800284c <ILI9163_render+0x3c>)
 8002826:	f002 fec2 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <ILI9163_render+0x3c>)
 8002832:	f002 febc 	bl	80055ae <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*) frameBuffer, BUFSIZE * 2);
 8002836:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800283a:	4905      	ldr	r1, [pc, #20]	; (8002850 <ILI9163_render+0x40>)
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <ILI9163_render+0x44>)
 800283e:	f006 f81d 	bl	800887c <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL = 0;
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <ILI9163_render+0x48>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
	//while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40011800 	.word	0x40011800
 8002850:	200001c8 	.word	0x200001c8
 8002854:	2000b544 	.word	0x2000b544
 8002858:	2000a1c8 	.word	0x2000a1c8

0800285c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
 8002866:	460b      	mov	r3, r1
 8002868:	71bb      	strb	r3, [r7, #6]
 800286a:	4613      	mov	r3, r2
 800286c:	80bb      	strh	r3, [r7, #4]

	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT))
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <ILI9163_drawPixel+0x32>
 8002876:	79bb      	ldrb	r3, [r7, #6]
 8002878:	2b9f      	cmp	r3, #159	; 0x9f
 800287a:	d808      	bhi.n	800288e <ILI9163_drawPixel+0x32>
		return;
	frameBuffer[((x) + (y * ILI9163_WIDTH))] = color; // >> 8;
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	79bb      	ldrb	r3, [r7, #6]
 8002880:	01db      	lsls	r3, r3, #7
 8002882:	4413      	add	r3, r2
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <ILI9163_drawPixel+0x3c>)
 8002886:	88ba      	ldrh	r2, [r7, #4]
 8002888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800288c:	e000      	b.n	8002890 <ILI9163_drawPixel+0x34>
		return;
 800288e:	bf00      	nop
	//frameBuffer[((x*2)+(y*2*ILI9163_WIDTH))+1] = color & 0xFF;
}
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	200001c8 	.word	0x200001c8

0800289c <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		uint16_t color) {
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4604      	mov	r4, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	4603      	mov	r3, r0
 80028b0:	71bb      	strb	r3, [r7, #6]
 80028b2:	460b      	mov	r3, r1
 80028b4:	717b      	strb	r3, [r7, #5]
 80028b6:	4613      	mov	r3, r2
 80028b8:	713b      	strb	r3, [r7, #4]
	for (uint8_t x = x1; x < x2; x++)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e012      	b.n	80028e6 <ILI9163_fillRect+0x4a>
		for (uint8_t y = y1; y < y2; y++)
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	73bb      	strb	r3, [r7, #14]
 80028c4:	e008      	b.n	80028d8 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 80028c6:	8c3a      	ldrh	r2, [r7, #32]
 80028c8:	7bb9      	ldrb	r1, [r7, #14]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ffc5 	bl	800285c <ILI9163_drawPixel>
		for (uint8_t y = y1; y < y2; y++)
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	3301      	adds	r3, #1
 80028d6:	73bb      	strb	r3, [r7, #14]
 80028d8:	7bba      	ldrb	r2, [r7, #14]
 80028da:	793b      	ldrb	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3f2      	bcc.n	80028c6 <ILI9163_fillRect+0x2a>
	for (uint8_t x = x1; x < x2; x++)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	797b      	ldrb	r3, [r7, #5]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3e8      	bcc.n	80028c0 <ILI9163_fillRect+0x24>
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		uint8_t thickness, uint16_t color) {
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	4604      	mov	r4, r0
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4623      	mov	r3, r4
 8002908:	71fb      	strb	r3, [r7, #7]
 800290a:	4603      	mov	r3, r0
 800290c:	71bb      	strb	r3, [r7, #6]
 800290e:	460b      	mov	r3, r1
 8002910:	717b      	strb	r3, [r7, #5]
 8002912:	4613      	mov	r3, r2
 8002914:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1 + thickness, color);
 8002916:	79ba      	ldrb	r2, [r7, #6]
 8002918:	7e3b      	ldrb	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	b2dc      	uxtb	r4, r3
 800291e:	797a      	ldrb	r2, [r7, #5]
 8002920:	79b9      	ldrb	r1, [r7, #6]
 8002922:	79f8      	ldrb	r0, [r7, #7]
 8002924:	8bbb      	ldrh	r3, [r7, #28]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4623      	mov	r3, r4
 800292a:	f7ff ffb7 	bl	800289c <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2 - thickness, x2, y2, color);
 800292e:	793a      	ldrb	r2, [r7, #4]
 8002930:	7e3b      	ldrb	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	b2d9      	uxtb	r1, r3
 8002936:	793c      	ldrb	r4, [r7, #4]
 8002938:	797a      	ldrb	r2, [r7, #5]
 800293a:	79f8      	ldrb	r0, [r7, #7]
 800293c:	8bbb      	ldrh	r3, [r7, #28]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4623      	mov	r3, r4
 8002942:	f7ff ffab 	bl	800289c <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1 + thickness, y2, color);
 8002946:	79fa      	ldrb	r2, [r7, #7]
 8002948:	7e3b      	ldrb	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	b2da      	uxtb	r2, r3
 800294e:	793c      	ldrb	r4, [r7, #4]
 8002950:	79b9      	ldrb	r1, [r7, #6]
 8002952:	79f8      	ldrb	r0, [r7, #7]
 8002954:	8bbb      	ldrh	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4623      	mov	r3, r4
 800295a:	f7ff ff9f 	bl	800289c <ILI9163_fillRect>
	ILI9163_fillRect(x2 - thickness, y1, x2, y2, color);
 800295e:	797a      	ldrb	r2, [r7, #5]
 8002960:	7e3b      	ldrb	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	b2d8      	uxtb	r0, r3
 8002966:	793c      	ldrb	r4, [r7, #4]
 8002968:	797a      	ldrb	r2, [r7, #5]
 800296a:	79b9      	ldrb	r1, [r7, #6]
 800296c:	8bbb      	ldrh	r3, [r7, #28]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4623      	mov	r3, r4
 8002972:	f7ff ff93 	bl	800289c <ILI9163_fillRect>
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}

0800297e <ILI9163_drawLine>:

void ILI9163_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,
		uint16_t color) {
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b089      	sub	sp, #36	; 0x24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4604      	mov	r4, r0
 8002986:	4608      	mov	r0, r1
 8002988:	4611      	mov	r1, r2
 800298a:	461a      	mov	r2, r3
 800298c:	4623      	mov	r3, r4
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4603      	mov	r3, r0
 8002992:	71bb      	strb	r3, [r7, #6]
 8002994:	460b      	mov	r3, r1
 8002996:	717b      	strb	r3, [r7, #5]
 8002998:	4613      	mov	r3, r2
 800299a:	713b      	strb	r3, [r7, #4]
	int dy = y1 - y0;
 800299c:	793a      	ldrb	r2, [r7, #4]
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	61fb      	str	r3, [r7, #28]
	int dx = x1 - x0;
 80029a4:	797a      	ldrb	r2, [r7, #5]
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	61bb      	str	r3, [r7, #24]
	int stepx, stepy;

	if (dy < 0) {
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da06      	bge.n	80029c0 <ILI9163_drawLine+0x42>
		dy = -dy;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	425b      	negs	r3, r3
 80029b6:	61fb      	str	r3, [r7, #28]
		stepy = -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e001      	b.n	80029c4 <ILI9163_drawLine+0x46>
	} else
		stepy = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	613b      	str	r3, [r7, #16]

	if (dx < 0) {
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da06      	bge.n	80029d8 <ILI9163_drawLine+0x5a>
		dx = -dx;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	425b      	negs	r3, r3
 80029ce:	61bb      	str	r3, [r7, #24]
		stepx = -1;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e001      	b.n	80029dc <ILI9163_drawLine+0x5e>
	} else
		stepx = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]

	dy <<= 1;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
	dx <<= 1;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]

	ILI9163_drawPixel(x0, y0, color);
 80029e8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80029ea:	79b9      	ldrb	r1, [r7, #6]
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff34 	bl	800285c <ILI9163_drawPixel>

	if (dx > dy) {
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dd25      	ble.n	8002a48 <ILI9163_drawLine+0xca>
		int fraction = dy - (dx >> 1);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	105b      	asrs	r3, r3, #1
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	60fb      	str	r3, [r7, #12]
		while (x0 != x1) {
 8002a06:	e01a      	b.n	8002a3e <ILI9163_drawLine+0xc0>
			if (fraction >= 0) {
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db08      	blt.n	8002a20 <ILI9163_drawLine+0xa2>
				y0 += stepy;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	79bb      	ldrb	r3, [r7, #6]
 8002a14:	4413      	add	r3, r2
 8002a16:	71bb      	strb	r3, [r7, #6]
				fraction -= dx;
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
			}

			x0 += stepx;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	4413      	add	r3, r2
 8002a28:	71fb      	strb	r3, [r7, #7]
			fraction += dy;
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
			ILI9163_drawPixel(x0, y0, color);
 8002a32:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a34:	79b9      	ldrb	r1, [r7, #6]
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff0f 	bl	800285c <ILI9163_drawPixel>
		while (x0 != x1) {
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	797b      	ldrb	r3, [r7, #5]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d1e0      	bne.n	8002a08 <ILI9163_drawLine+0x8a>
			y0 += stepy;
			fraction += dx;
			ILI9163_drawPixel(x0, y0, color);
		}
	}
}
 8002a46:	e024      	b.n	8002a92 <ILI9163_drawLine+0x114>
		int fraction = dx - (dy >> 1);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	105b      	asrs	r3, r3, #1
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	60bb      	str	r3, [r7, #8]
		while (y0 != y1) {
 8002a52:	e01a      	b.n	8002a8a <ILI9163_drawLine+0x10c>
			if (fraction >= 0) {
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db08      	blt.n	8002a6c <ILI9163_drawLine+0xee>
				x0 += stepx;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4413      	add	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
				fraction -= dy;
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	60bb      	str	r3, [r7, #8]
			y0 += stepy;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	4413      	add	r3, r2
 8002a74:	71bb      	strb	r3, [r7, #6]
			fraction += dx;
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
			ILI9163_drawPixel(x0, y0, color);
 8002a7e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a80:	79b9      	ldrb	r1, [r7, #6]
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fee9 	bl	800285c <ILI9163_drawPixel>
		while (y0 != y1) {
 8002a8a:	79ba      	ldrb	r2, [r7, #6]
 8002a8c:	793b      	ldrb	r3, [r7, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d1e0      	bne.n	8002a54 <ILI9163_drawLine+0xd6>
}
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}

08002a9a <ILI9163_drawChar>:
void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font,
		uint16_t color) {
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	71bb      	strb	r3, [r7, #6]
 8002aac:	4613      	mov	r3, r2
 8002aae:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for (i = 0; i < font.height; i++) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	81fb      	strh	r3, [r7, #14]
 8002ab4:	e02f      	b.n	8002b16 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	797b      	ldrb	r3, [r7, #5]
 8002aba:	3b20      	subs	r3, #32
 8002abc:	7f79      	ldrb	r1, [r7, #29]
 8002abe:	fb01 f103 	mul.w	r1, r1, r3
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	440b      	add	r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	817b      	strh	r3, [r7, #10]
		for (j = 0; j < font.width; j++) {
 8002ace:	2300      	movs	r3, #0
 8002ad0:	81bb      	strh	r3, [r7, #12]
 8002ad2:	e018      	b.n	8002b06 <ILI9163_drawChar+0x6c>
			if ((b << j) & 0x8000) {
 8002ad4:	897a      	ldrh	r2, [r7, #10]
 8002ad6:	89bb      	ldrh	r3, [r7, #12]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8002ae4:	89bb      	ldrh	r3, [r7, #12]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4413      	add	r3, r2
 8002aec:	b2d8      	uxtb	r0, r3
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	79bb      	ldrb	r3, [r7, #6]
 8002af4:	4413      	add	r3, r2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7ff feae 	bl	800285c <ILI9163_drawPixel>
		for (j = 0; j < font.width; j++) {
 8002b00:	89bb      	ldrh	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	81bb      	strh	r3, [r7, #12]
 8002b06:	7f3b      	ldrb	r3, [r7, #28]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	89ba      	ldrh	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3e1      	bcc.n	8002ad4 <ILI9163_drawChar+0x3a>
	for (i = 0; i < font.height; i++) {
 8002b10:	89fb      	ldrh	r3, [r7, #14]
 8002b12:	3301      	adds	r3, #1
 8002b14:	81fb      	strh	r3, [r7, #14]
 8002b16:	7f7b      	ldrb	r3, [r7, #29]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	89fa      	ldrh	r2, [r7, #14]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3ca      	bcc.n	8002ab6 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b2c:	b002      	add	sp, #8
 8002b2e:	4770      	bx	lr

08002b30 <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color,
		const char *string) {
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	4604      	mov	r4, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	1d39      	adds	r1, r7, #4
 8002b3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8002b40:	4623      	mov	r3, r4
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	4603      	mov	r3, r0
 8002b46:	73bb      	strb	r3, [r7, #14]
	while (*string) {
 8002b48:	e029      	b.n	8002b9e <ILI9163_drawString+0x6e>
		if (x + font.width >= ILI9163_WIDTH) {
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	793a      	ldrb	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	2b7f      	cmp	r3, #127	; 0x7f
 8002b52:	dd12      	ble.n	8002b7a <ILI9163_drawString+0x4a>
			x = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8002b58:	797a      	ldrb	r2, [r7, #5]
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	73bb      	strb	r3, [r7, #14]
			if (y + font.height >= ILI9163_HEIGHT)
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	797a      	ldrb	r2, [r7, #5]
 8002b64:	4413      	add	r3, r2
 8002b66:	2b9f      	cmp	r3, #159	; 0x9f
 8002b68:	dc1e      	bgt.n	8002ba8 <ILI9163_drawString+0x78>
				break;

			if (*string == ' ') {
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d103      	bne.n	8002b7a <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8002b78:	e011      	b.n	8002b9e <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	7bb9      	ldrb	r1, [r7, #14]
 8002b80:	7bf8      	ldrb	r0, [r7, #15]
 8002b82:	8c3b      	ldrh	r3, [r7, #32]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f7ff ff85 	bl	8002a9a <ILI9163_drawChar>

		x += font.width;
 8002b90:	793a      	ldrb	r2, [r7, #4]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4413      	add	r3, r2
 8002b96:	73fb      	strb	r3, [r7, #15]
		string++;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*string) {
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1d1      	bne.n	8002b4a <ILI9163_drawString+0x1a>
	}
}
 8002ba6:	e000      	b.n	8002baa <ILI9163_drawString+0x7a>
				break;
 8002ba8:	bf00      	nop
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
	...

08002bb4 <ILI9163_drawButton>:
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
}

void ILI9163_drawButton(Button *button) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
	ILI9163_drawRect(button->x1, button->y1, button->x2, button->y2, 2,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7818      	ldrb	r0, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7899      	ldrb	r1, [r3, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	785a      	ldrb	r2, [r3, #1]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	78dc      	ldrb	r4, [r3, #3]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	891b      	ldrh	r3, [r3, #8]
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	f7ff fe8e 	bl	80028f8 <ILI9163_drawRect>
			button->color);
	uint8_t xS, yS;
	xS = (button->x1 + button->x2) / 2 - 3 * strlen(button->_string);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	4413      	add	r3, r2
 8002be8:	0fda      	lsrs	r2, r3, #31
 8002bea:	4413      	add	r3, r2
 8002bec:	105b      	asrs	r3, r3, #1
 8002bee:	b2dc      	uxtb	r4, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fb17 	bl	8000228 <strlen>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	0052      	lsls	r2, r2, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	1ae3      	subs	r3, r4, r3
 8002c08:	73fb      	strb	r3, [r7, #15]
	yS = (button->y1 + button->y2) / 2 - 5;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	789b      	ldrb	r3, [r3, #2]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	4413      	add	r3, r2
 8002c16:	0fda      	lsrs	r2, r3, #31
 8002c18:	4413      	add	r3, r2
 8002c1a:	105b      	asrs	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3b05      	subs	r3, #5
 8002c20:	73bb      	strb	r3, [r7, #14]
	ILI9163_drawString(xS, yS, Font_7x10, GREEN, button->_string);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <ILI9163_drawButton+0x8c>)
 8002c28:	7bb9      	ldrb	r1, [r7, #14]
 8002c2a:	7bf8      	ldrb	r0, [r7, #15]
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2304      	movs	r3, #4
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	ca0c      	ldmia	r2, {r2, r3}
 8002c34:	f7ff ff7c 	bl	8002b30 <ILI9163_drawString>

}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}
 8002c40:	20000004 	.word	0x20000004

08002c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b08d      	sub	sp, #52	; 0x34
 8002c48:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4a:	f001 fbfd 	bl	8004448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c4e:	f000 f843 	bl	8002cd8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	state = EXPMENU;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <main+0x80>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c58:	f000 f9e0 	bl	800301c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c5c:	f000 f9b8 	bl	8002fd0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002c60:	f000 f8b2 	bl	8002dc8 <MX_ADC1_Init>
  MX_RTC_Init();
 8002c64:	f000 f8ee 	bl	8002e44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002c68:	f000 f988 	bl	8002f7c <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8002c6c:	f00b fc66 	bl	800e53c <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8002c70:	f000 f918 	bl	8002ea4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002c74:	f006 ff20 	bl	8009ab8 <MX_FATFS_Init>
  MX_SPI3_Init();
 8002c78:	f000 f94a 	bl	8002f10 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	GUI_init();
 8002c7c:	f7ff fa02 	bl	8002084 <GUI_init>
	fresult = f_mount(&fs, "" ,0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <main+0x84>)
 8002c84:	4811      	ldr	r0, [pc, #68]	; (8002ccc <main+0x88>)
 8002c86:	f00a fcf3 	bl	800d670 <f_mount>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <main+0x8c>)
 8002c90:	701a      	strb	r2, [r3, #0]
	GUI_drawGUI(huart2);
 8002c92:	4e10      	ldr	r6, [pc, #64]	; (8002cd4 <main+0x90>)
 8002c94:	466d      	mov	r5, sp
 8002c96:	f106 0410 	add.w	r4, r6, #16
 8002c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002caa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cae:	f7ff faa3 	bl	80021f8 <GUI_drawGUI>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cb2:	2028      	movs	r0, #40	; 0x28
 8002cb4:	f001 ff4b 	bl	8004b4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2028      	movs	r0, #40	; 0x28
 8002cbe:	f001 ff2a 	bl	8004b16 <HAL_NVIC_SetPriority>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 while (1) {
 8002cc2:	e7fe      	b.n	8002cc2 <main+0x7e>
 8002cc4:	2000a42c 	.word	0x2000a42c
 8002cc8:	080106b0 	.word	0x080106b0
 8002ccc:	2000a46c 	.word	0x2000a46c
 8002cd0:	2000b540 	.word	0x2000b540
 8002cd4:	2000b59c 	.word	0x2000b59c

08002cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b09c      	sub	sp, #112	; 0x70
 8002cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ce2:	2238      	movs	r2, #56	; 0x38
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f00b ff00 	bl	800eaec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2220      	movs	r2, #32
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f00b fef2 	bl	800eaec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002d08:	2305      	movs	r3, #5
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002d12:	2304      	movs	r3, #4
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d16:	2301      	movs	r3, #1
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002d34:	2302      	movs	r3, #2
 8002d36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002d38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 f906 	bl	8006f58 <HAL_RCC_OscConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002d52:	f000 fafb 	bl	800334c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d56:	230f      	movs	r3, #15
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 fc06 	bl	8007584 <HAL_RCC_ClockConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002d7e:	f000 fae5 	bl	800334c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8002d82:	2313      	movs	r3, #19
 8002d84:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d90:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fe21 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002da4:	f000 fad2 	bl	800334c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002da8:	2200      	movs	r2, #0
 8002daa:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002dae:	2000      	movs	r0, #0
 8002db0:	f004 fcd2 	bl	8007758 <HAL_RCC_MCOConfig>
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <SystemClock_Config+0xec>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3770      	adds	r7, #112	; 0x70
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	42420070 	.word	0x42420070

08002dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002dda:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <MX_ADC1_Init+0x78>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002df2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002e06:	f001 fba5 	bl	8004554 <HAL_ADC_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002e10:	f000 fa9c 	bl	800334c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e14:	230e      	movs	r3, #14
 8002e16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_ADC1_Init+0x74>)
 8002e26:	f001 fc6d 	bl	8004704 <HAL_ADC_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002e30:	f000 fa8c 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	2000b4f8 	.word	0x2000b4f8
 8002e40:	40012400 	.word	0x40012400

08002e44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <MX_RTC_Init+0x58>)
 8002e54:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <MX_RTC_Init+0x5c>)
 8002e56:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_RTC_Init+0x58>)
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_RTC_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <MX_RTC_Init+0x58>)
 8002e68:	f005 f850 	bl	8007f0c <HAL_RTC_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_RTC_Init+0x32>
  {
    Error_Handler();
 8002e72:	f000 fa6b 	bl	800334c <Error_Handler>
  }
  /** Enable the RTC Tamper
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_LOWLEVEL;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	607b      	str	r3, [r7, #4]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <MX_RTC_Init+0x58>)
 8002e84:	f005 f956 	bl	8008134 <HAL_RTCEx_SetTamper>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8002e8e:	f000 fa5d 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000b528 	.word	0x2000b528
 8002ea0:	40002800 	.word	0x40002800

08002ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <MX_SPI1_Init+0x68>)
 8002eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ed8:	2218      	movs	r2, #24
 8002eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ef0:	220a      	movs	r2, #10
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ef4:	4804      	ldr	r0, [pc, #16]	; (8002f08 <MX_SPI1_Init+0x64>)
 8002ef6:	f005 f95f 	bl	80081b8 <HAL_SPI_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f00:	f000 fa24 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	2000b544 	.word	0x2000b544
 8002f0c:	40013000 	.word	0x40013000

08002f10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <MX_SPI3_Init+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f22:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f44:	2218      	movs	r2, #24
 8002f46:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f5c:	220a      	movs	r2, #10
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <MX_SPI3_Init+0x64>)
 8002f62:	f005 f929 	bl	80081b8 <HAL_SPI_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002f6c:	f000 f9ee 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000b4a0 	.word	0x2000b4a0
 8002f78:	40003c00 	.word	0x40003c00

08002f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <MX_USART2_UART_Init+0x50>)
 8002f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fb4:	f005 fe9e 	bl	8008cf4 <HAL_UART_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fbe:	f000 f9c5 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000b59c 	.word	0x2000b59c
 8002fcc:	40004400 	.word	0x40004400

08002fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <MX_DMA_Init+0x48>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <MX_DMA_Init+0x48>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6153      	str	r3, [r2, #20]
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <MX_DMA_Init+0x48>)
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	200c      	movs	r0, #12
 8002ff4:	f001 fd8f 	bl	8004b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ff8:	200c      	movs	r0, #12
 8002ffa:	f001 fda8 	bl	8004b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	200d      	movs	r0, #13
 8003004:	f001 fd87 	bl	8004b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003008:	200d      	movs	r0, #13
 800300a:	f001 fda0 	bl	8004b4e <HAL_NVIC_EnableIRQ>

}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003022:	f107 0318 	add.w	r3, r7, #24
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003030:	4bad      	ldr	r3, [pc, #692]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4aac      	ldr	r2, [pc, #688]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4baa      	ldr	r3, [pc, #680]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003048:	4ba7      	ldr	r3, [pc, #668]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4aa6      	ldr	r2, [pc, #664]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4ba4      	ldr	r3, [pc, #656]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	4ba1      	ldr	r3, [pc, #644]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4aa0      	ldr	r2, [pc, #640]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	6193      	str	r3, [r2, #24]
 800306c:	4b9e      	ldr	r3, [pc, #632]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	4b9b      	ldr	r3, [pc, #620]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a9a      	ldr	r2, [pc, #616]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b98      	ldr	r3, [pc, #608]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003090:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a94      	ldr	r2, [pc, #592]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 8003096:	f043 0320 	orr.w	r3, r3, #32
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <MX_GPIO_Init+0x2cc>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MicroSDCard_CS_GPIO_Port, MicroSDCard_CS_Pin, GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2110      	movs	r1, #16
 80030ac:	488f      	ldr	r0, [pc, #572]	; (80032ec <MX_GPIO_Init+0x2d0>)
 80030ae:	f002 fa7e 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2104      	movs	r1, #4
 80030b6:	488e      	ldr	r0, [pc, #568]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 80030b8:	f002 fa79 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80030bc:	2200      	movs	r2, #0
 80030be:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80030c2:	488c      	ldr	r0, [pc, #560]	; (80032f4 <MX_GPIO_Init+0x2d8>)
 80030c4:	f002 fa73 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f242 0198 	movw	r1, #8344	; 0x2098
 80030ce:	488a      	ldr	r0, [pc, #552]	; (80032f8 <MX_GPIO_Init+0x2dc>)
 80030d0:	f002 fa6d 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030d4:	2201      	movs	r2, #1
 80030d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030da:	4888      	ldr	r0, [pc, #544]	; (80032fc <MX_GPIO_Init+0x2e0>)
 80030dc:	f002 fa67 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin I2S_MCK_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|I2S_MCK_Pin;
 80030e0:	234e      	movs	r3, #78	; 0x4e
 80030e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2302      	movs	r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ec:	f107 0318 	add.w	r3, r7, #24
 80030f0:	4619      	mov	r1, r3
 80030f2:	4882      	ldr	r0, [pc, #520]	; (80032fc <MX_GPIO_Init+0x2e0>)
 80030f4:	f002 f8c0 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_RX_CLK_Pin MII_MDIO_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_RX_CLK_Pin|MII_MDIO_Pin|MII_COL_Pin;
 80030f8:	230f      	movs	r3, #15
 80030fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f107 0318 	add.w	r3, r7, #24
 8003108:	4619      	mov	r1, r3
 800310a:	4878      	ldr	r0, [pc, #480]	; (80032ec <MX_GPIO_Init+0x2d0>)
 800310c:	f002 f8b4 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_CS_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CS_Pin;
 8003110:	2310      	movs	r3, #16
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003114:	2301      	movs	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2302      	movs	r3, #2
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MicroSDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	4619      	mov	r1, r3
 8003126:	4871      	ldr	r0, [pc, #452]	; (80032ec <MX_GPIO_Init+0x2d0>)
 8003128:	f002 f8a6 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800312c:	2304      	movs	r3, #4
 800312e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2302      	movs	r3, #2
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800313c:	f107 0318 	add.w	r3, r7, #24
 8003140:	4619      	mov	r1, r3
 8003142:	486b      	ldr	r0, [pc, #428]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 8003144:	f002 f898 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003148:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800314c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2302      	movs	r3, #2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	4619      	mov	r1, r3
 8003160:	4864      	ldr	r0, [pc, #400]	; (80032f4 <MX_GPIO_Init+0x2d8>)
 8003162:	f002 f889 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800316c:	4b64      	ldr	r3, [pc, #400]	; (8003300 <MX_GPIO_Init+0x2e4>)
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003174:	f107 0318 	add.w	r3, r7, #24
 8003178:	4619      	mov	r1, r3
 800317a:	485e      	ldr	r0, [pc, #376]	; (80032f4 <MX_GPIO_Init+0x2d8>)
 800317c:	f002 f87c 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD0_I2S_CMD_Pin MII_TXD1_I2S_CK_Pin I2S_DIN_Pin
                           MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD0_I2S_CMD_Pin|MII_TXD1_I2S_CK_Pin|I2S_DIN_Pin
 8003180:	f44f 4339 	mov.w	r3, #47360	; 0xb900
 8003184:	61bb      	str	r3, [r7, #24]
                          |MII_TXD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2302      	movs	r3, #2
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	f107 0318 	add.w	r3, r7, #24
 8003192:	4619      	mov	r1, r3
 8003194:	4856      	ldr	r0, [pc, #344]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 8003196:	f002 f86f 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_Expander_INT_Pin */
  GPIO_InitStruct.Pin = IO_Expander_INT_Pin;
 800319a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031a0:	4b58      	ldr	r3, [pc, #352]	; (8003304 <MX_GPIO_Init+0x2e8>)
 80031a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a4:	2301      	movs	r3, #1
 80031a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IO_Expander_INT_GPIO_Port, &GPIO_InitStruct);
 80031a8:	f107 0318 	add.w	r3, r7, #24
 80031ac:	4619      	mov	r1, r3
 80031ae:	4850      	ldr	r0, [pc, #320]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 80031b0:	f002 f862 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_DV_Pin MII_RXD0_Pin MII_RXD1_Pin MII_RXD2_Pin
                           MII_RXD3_Pin CAN1_TX_Pin */
  GPIO_InitStruct.Pin = MII_RX_DV_Pin|MII_RXD0_Pin|MII_RXD1_Pin|MII_RXD2_Pin
 80031b4:	f641 7302 	movw	r3, #7938	; 0x1f02
 80031b8:	61bb      	str	r3, [r7, #24]
                          |MII_RXD3_Pin|CAN1_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c2:	f107 0318 	add.w	r3, r7, #24
 80031c6:	4619      	mov	r1, r3
 80031c8:	484b      	ldr	r0, [pc, #300]	; (80032f8 <MX_GPIO_Init+0x2dc>)
 80031ca:	f002 f855 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin;
 80031ce:	f242 0398 	movw	r3, #8344	; 0x2098
 80031d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d4:	2301      	movs	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031dc:	2302      	movs	r3, #2
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e0:	f107 0318 	add.w	r3, r7, #24
 80031e4:	4619      	mov	r1, r3
 80031e6:	4844      	ldr	r0, [pc, #272]	; (80032f8 <MX_GPIO_Init+0x2dc>)
 80031e8:	f002 f846 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80031ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2302      	movs	r3, #2
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 0318 	add.w	r3, r7, #24
 8003202:	4619      	mov	r1, r3
 8003204:	483d      	ldr	r0, [pc, #244]	; (80032fc <MX_GPIO_Init+0x2e0>)
 8003206:	f002 f837 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800320a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	4619      	mov	r1, r3
 800321e:	4833      	ldr	r0, [pc, #204]	; (80032ec <MX_GPIO_Init+0x2d0>)
 8003220:	f002 f82a 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_RX_Pin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin;
 8003224:	2301      	movs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800322c:	2301      	movs	r3, #1
 800322e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	4619      	mov	r1, r3
 8003236:	4830      	ldr	r0, [pc, #192]	; (80032f8 <MX_GPIO_Init+0x2dc>)
 8003238:	f002 f81e 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCK_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCK_Pin|I2C1_SDA_Pin;
 800323c:	23c0      	movs	r3, #192	; 0xc0
 800323e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003240:	2312      	movs	r3, #18
 8003242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2302      	movs	r3, #2
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003248:	f107 0318 	add.w	r3, r7, #24
 800324c:	4619      	mov	r1, r3
 800324e:	4828      	ldr	r0, [pc, #160]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 8003250:	f002 f812 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8003254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <MX_GPIO_Init+0x2e8>)
 800325c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8003262:	f107 0318 	add.w	r3, r7, #24
 8003266:	4619      	mov	r1, r3
 8003268:	4821      	ldr	r0, [pc, #132]	; (80032f0 <MX_GPIO_Init+0x2d4>)
 800326a:	f002 f805 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_Detection_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_Detection_Pin;
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003276:	2301      	movs	r3, #1
 8003278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MicroSDCard_Detection_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 0318 	add.w	r3, r7, #24
 800327e:	4619      	mov	r1, r3
 8003280:	481c      	ldr	r0, [pc, #112]	; (80032f4 <MX_GPIO_Init+0x2d8>)
 8003282:	f001 fff9 	bl	8005278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	4619      	mov	r1, r3
 8003298:	4816      	ldr	r0, [pc, #88]	; (80032f4 <MX_GPIO_Init+0x2d8>)
 800329a:	f001 ffed 	bl	8005278 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_ETH_ENABLE();
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_GPIO_Init+0x2ec>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <MX_GPIO_Init+0x2ec>)
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	6053      	str	r3, [r2, #4]

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_3();
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <MX_GPIO_Init+0x2ec>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d8:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <MX_GPIO_Init+0x2ec>)
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	6053      	str	r3, [r2, #4]

}
 80032de:	bf00      	nop
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40010c00 	.word	0x40010c00
 80032f4:	40011800 	.word	0x40011800
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40011000 	.word	0x40011000
 8003300:	10110000 	.word	0x10110000
 8003304:	10120000 	.word	0x10120000
 8003308:	40010000 	.word	0x40010000

0800330c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_SPI_TxCpltCallback+0x34>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3b01      	subs	r3, #1
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_SPI_TxCpltCallback+0x34>)
 800331c:	6013      	str	r3, [r2, #0]
	if (SPI_DMA_CNT == 0) {
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_SPI_TxCpltCallback+0x34>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_SPI_TxCpltCallback+0x2c>
		HAL_SPI_DMAStop(&hspi1);
 8003326:	4807      	ldr	r0, [pc, #28]	; (8003344 <HAL_SPI_TxCpltCallback+0x38>)
 8003328:	f005 fb5e 	bl	80089e8 <HAL_SPI_DMAStop>
		SPI_DMA_CNT = 1;
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_SPI_TxCpltCallback+0x34>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL = 1;
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_SPI_TxCpltCallback+0x3c>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
	}
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	2000000c 	.word	0x2000000c
 8003344:	2000b544 	.word	0x2000b544
 8003348:	2000a1c8 	.word	0x2000a1c8

0800334c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <expHandler>:
 *  Created on: Apr 3, 2021
 *      Author: bbari
 */
#include "mainmenu.h"

void expHandler() {
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	state = EXPMENU;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <expHandler+0x14>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]

}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	2000a42c 	.word	0x2000a42c

08003370 <expplotHandler>:
void expplotHandler() {
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
	state = PASTMENU;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <expplotHandler+0x14>)
 8003376:	2204      	movs	r2, #4
 8003378:	701a      	strb	r2, [r3, #0]
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000a42c 	.word	0x2000a42c

08003388 <aboutHandler>:
void aboutHandler() {
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <checkMainButtons>:
Button about = {  0, 128, 100, 150, "About", 0x00f0, aboutHandler };



//BUTTON CONTROL
void checkMainButtons() {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	if (isPressed(exp)) {
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <checkMainButtons+0x48>)
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	f7ff f814 	bl	80023c8 <isPressed>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <checkMainButtons+0x1a>
		exp.btnHandler();
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <checkMainButtons+0x48>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4798      	blx	r3
	} else if (isPressed(expplot)) {
		expplot.btnHandler();
	} else if (isPressed(about)) {
		about.btnHandler();
	}
}
 80033ac:	e014      	b.n	80033d8 <checkMainButtons+0x44>
	} else if (isPressed(expplot)) {
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <checkMainButtons+0x4c>)
 80033b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b2:	f7ff f809 	bl	80023c8 <isPressed>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <checkMainButtons+0x30>
		expplot.btnHandler();
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <checkMainButtons+0x4c>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4798      	blx	r3
}
 80033c2:	e009      	b.n	80033d8 <checkMainButtons+0x44>
	} else if (isPressed(about)) {
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <checkMainButtons+0x50>)
 80033c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c8:	f7fe fffe 	bl	80023c8 <isPressed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <checkMainButtons+0x44>
		about.btnHandler();
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <checkMainButtons+0x50>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4798      	blx	r3
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000010 	.word	0x20000010
 80033e0:	20000020 	.word	0x20000020
 80033e4:	20000030 	.word	0x20000030

080033e8 <drawMainButtons>:
void drawMainButtons() {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	 ILI9163_drawButton(&exp);
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <drawMainButtons+0x1c>)
 80033ee:	f7ff fbe1 	bl	8002bb4 <ILI9163_drawButton>
	 ILI9163_drawButton(&expplot);
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <drawMainButtons+0x20>)
 80033f4:	f7ff fbde 	bl	8002bb4 <ILI9163_drawButton>
	 ILI9163_drawButton(&about);
 80033f8:	4804      	ldr	r0, [pc, #16]	; (800340c <drawMainButtons+0x24>)
 80033fa:	f7ff fbdb 	bl	8002bb4 <ILI9163_drawButton>
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000010 	.word	0x20000010
 8003408:	20000020 	.word	0x20000020
 800340c:	20000030 	.word	0x20000030

08003410 <oneHandler>:
#include "numpad.h"
const uint16_t numpadImage[] = {0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xf9cf,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xfde7,0xfff7,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xfff7,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfff7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xfde7,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xffff,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xffff,0xd6ba,0xc000,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xffff,0xfde7,0xfde7,0xffff,0xc000,0xc000,0xffff,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xfde7,0xfdef,0xffff,0xc000,0xc000,0xffff,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xc000,0xd292,0xffff,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfff7,0xc000,0xc000,0xffff,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xffff,0xc000,0xc000,0xffff,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xfff7,0xc000,0xc008,0xfff7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xffff,0xce71,0xc000,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfde7,0xfdef,0xfdef,0xfde7,0xffff,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfff7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfff7,0xfdef,0xfdef,0xfde7,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfde7,0xfde7,0xfdef,0xfdef,0xfff7,0xfdef,0xfde7,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xfdef,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf7be,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf7be,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfbd7,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xfbd7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xe73c,0xc008,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdefb,0xc000,0xc000,0xf5a6,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xe94d,0xd08a,0xd4a2,0xd4aa,0xca59,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf5ae,0xd4a2,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xc000,0xc000,0xffff,0xffff,0xc000,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xfdef,0xdef3,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xc008,0xc000,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xc000,0xf9cf,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd082,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xc000,0xfbd7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xe104,0xfbd7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xc008,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfde7,0xc428,0xeb5d,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xce71,0xfbd7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xe945,0xdce3,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xc008,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xca59,0xfbdf,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdad3,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xcc69,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xe31c,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfbd7,0xc000,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xc008,0xf39e,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfbdf,0xffff,0xffff,0xffff,0xd8c3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xf39e,0xed65,0xc000,0xf39e,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xc000,0xf9c7,0xf396,0xf5a6,0xf18e,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd6b2,0xe314,0xffff,0xe524,0xe104,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xc000,0xc000,0xc000,0xc000,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xc000,0xc000,0xc000,0xc000,0xc000,0xf9c7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xed6d,0xd8c3,0xed65,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7b6,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf7be,0xf9cf,0xf9c7,0xf7be,0xf9c7,0xfbd7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xfbd7,0xf9c7,0xf7be,0xf9c7,0xf9cf,0xf7be,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xfff7,0xffff,0xfff7,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xfff7,0xf9cf,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfbdf,0xdad3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xfff7,0xce71,0xd6b2,0xd4a2,0xdad3,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xcc69,0xd6b2,0xd29a,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd4aa,0xdef3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdceb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xce79,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xed65,0xed6d,0xdefb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfbd7,0xe31c,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xeb5d,0xed6d,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd292,0xffff,0xdce3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xf39e,0xf186,0xfdef,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdad3,0xffff,0xfbdf,0xfde7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdce3,0xfbd7,0xffff,0xdce3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xed6d,0xca59,0xdce3,0xce71,0xf396,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdceb,0xd8c3,0xdce3,0xd6b2,0xdef3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7b6,0xe104,0xffff,0xffff,0xdceb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd08a,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xc849,0xfde7,0xfff7,0xffff,0xe104,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xce79,0xf5ae,0xf396,0xf5ae,0xd6ba,0xf7b6,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xef75,0xed65,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xffff,0xffff,0xf9c7,0xe31c,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xe73c,0xe73c,0xe734,0xe945,0xd29a,0xed65,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xf5a6,0xe94d,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xffff,0xffff,0xfbdf,0xe10c,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xdceb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xf5ae,0xffff,0xffff,0xffff,0xdad3,0xfdef,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xe734,0xef7d,0xffff,0xffff,0xe945,0xf396,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8c3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xeb55,0xd6ba,0xf7b6,0xe104,0xdefb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xcc69,0xef75,0xef7d,0xd08a,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xf9c7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xf7b6,0xdef3,0xf18e,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xe52c,0xe734,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xfbd7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xfbd7,0xf7b6,0xf9cf,0xf9c7,0xf9c7,0xf9cf,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xfbd7,0xf9c7,0xf9cf,0xf9c7,0xf9cf,0xf7be,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xf9cf,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xf9c7,0xfdef,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xed65,0xd4a2,0xd6b2,0xd6b2,0xd6b2,0xdadb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xd082,0xdceb,0xd6b2,0xe104,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfbdf,0xcc69,0xdef3,0xce71,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xeb5d,0xf39e,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xe31c,0xf5a6,0xffff,0xffff,0xdadb,0xfde7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd6ba,0xffff,0xffff,0xffff,0xd29a,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xfff7,0xffff,0xffff,0xd6b2,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xd8c3,0xffff,0xffff,0xffff,0xed6d,0xf186,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8c3,0xffff,0xfff7,0xffff,0xdef3,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xf7b6,0xe314,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xf39e,0xdefb,0xffff,0xffff,0xdef3,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdad3,0xfff7,0xffff,0xffff,0xed6d,0xef7d,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdad3,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xce71,0xd4aa,0xfbd7,0xd6b2,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd4aa,0xffff,0xffff,0xfff7,0xe104,0xef75,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xe734,0xef7d,0xffff,0xd4aa,0xe104,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xed65,0xd8cb,0xf9cf,0xe314,0xd4a2,0xf18e,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xed65,0xef7d,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd6ba,0xffff,0xffff,0xffff,0xe104,0xf5a6,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf5ae,0xdceb,0xf5ae,0xe734,0xfbd7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xd8c3,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8c3,0xffff,0xffff,0xffff,0xf9cf,0xe31c,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xd6ba,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xdef3,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xd6b2,0xffff,0xffff,0xffff,0xe524,0xf39e,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf5ae,0xe10c,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xdadb,0xfdef,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfde7,0xca51,0xef75,0xe104,0xd4aa,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xed6d,0xe94d,0xe52c,0xd082,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfbdf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xeb55,0xf396,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xeb5d,0xf186,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9cf,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfbd7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfbd7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9cf,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xf18e,0xf7b6,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xd082,0xe524,0xdce3,0xe104,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xe945,0xf186,0xffff,0xffff,0xdadb,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfbdf,0xdefb,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8c3,0xffff,0xffff,0xfff7,0xf5ae,0xe945,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xfff7,0xcc61,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xd6ba,0xdceb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xdadb,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xd29a,0xf9cf,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xc000,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8c3,0xfff7,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xdceb,0xdef3,0xf5ae,0xf186,0xf18e,0xf186,0xef7d,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xc008,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd6ba,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xd4a2,0xdce3,0xe524,0xe314,0xe314,0xe31c,0xe104,0xf7be,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xc000,0xc000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xdadb,0xffff,0xffff,0xffff,0xfff7,0xdadb,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xce79,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xd8cb,0xffff,0xfff7,0xffff,0xf39e,0xe73c,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfde7,0xcc69,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfdef,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xe94d,0xf18e,0xffff,0xfff7,0xdadb,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf396,0xdce3,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xce79,0xe314,0xdad3,0xe10c,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xf396,0xf9c7,0xffff,0xfdef,0xfff7,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfff7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xf9c7,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,
 };


void oneHandler() {
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <oneHandler+0xa4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d027      	beq.n	800346c <oneHandler+0x5c>
		number += 1.0 * pow(10.0, --fractionCount);
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <oneHandler+0xa8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3b01      	subs	r3, #1
 8003422:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <oneHandler+0xa8>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <oneHandler+0xa8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f856 	bl	80004dc <__aeabi_i2d>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	f04f 0000 	mov.w	r0, #0
 8003438:	4920      	ldr	r1, [pc, #128]	; (80034bc <oneHandler+0xac>)
 800343a:	f00b ffbb 	bl	800f3b4 <pow>
 800343e:	4604      	mov	r4, r0
 8003440:	460d      	mov	r5, r1
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <oneHandler+0xb0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f85a 	bl	8000500 <__aeabi_f2d>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc fef6 	bl	8000244 <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb7e 	bl	8000b60 <__aeabi_d2f>
 8003464:	4603      	mov	r3, r0
 8003466:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <oneHandler+0xb0>)
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01b      	b.n	80034a4 <oneHandler+0x94>

	} else {
		number = number * 10.0 + 1.0;
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <oneHandler+0xb0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f845 	bl	8000500 <__aeabi_f2d>
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <oneHandler+0xac>)
 800347c:	f7fd f898 	bl	80005b0 <__aeabi_dmul>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <oneHandler+0xb4>)
 800348e:	f7fc fed9 	bl	8000244 <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f7fd fb61 	bl	8000b60 <__aeabi_d2f>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <oneHandler+0xb0>)
 80034a2:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <oneHandler+0xb8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <oneHandler+0xb8>)
 80034ac:	6013      	str	r3, [r2, #0]

}
 80034ae:	bf00      	nop
 80034b0:	bdb0      	pop	{r4, r5, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000a43c 	.word	0x2000a43c
 80034b8:	2000a438 	.word	0x2000a438
 80034bc:	40240000 	.word	0x40240000
 80034c0:	2000a430 	.word	0x2000a430
 80034c4:	3ff00000 	.word	0x3ff00000
 80034c8:	2000a420 	.word	0x2000a420

080034cc <twoHandler>:
void twoHandler() {
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	if (isFloat) {
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <twoHandler+0xb0>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02d      	beq.n	8003534 <twoHandler+0x68>
		number += 2.0 * pow(10.0, --fractionCount);
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <twoHandler+0xb4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <twoHandler+0xb4>)
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <twoHandler+0xb4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fc fff8 	bl	80004dc <__aeabi_i2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	4923      	ldr	r1, [pc, #140]	; (8003584 <twoHandler+0xb8>)
 80034f6:	f00b ff5d 	bl	800f3b4 <pow>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	f7fc fea1 	bl	8000244 <__adddf3>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4614      	mov	r4, r2
 8003508:	461d      	mov	r5, r3
 800350a:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <twoHandler+0xbc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc fff6 	bl	8000500 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4620      	mov	r0, r4
 800351a:	4629      	mov	r1, r5
 800351c:	f7fc fe92 	bl	8000244 <__adddf3>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd fb1a 	bl	8000b60 <__aeabi_d2f>
 800352c:	4603      	mov	r3, r0
 800352e:	4a16      	ldr	r2, [pc, #88]	; (8003588 <twoHandler+0xbc>)
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01c      	b.n	800356e <twoHandler+0xa2>

	} else {
		number = number * 10.0 + 2.0;
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <twoHandler+0xbc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fc ffe1 	bl	8000500 <__aeabi_f2d>
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <twoHandler+0xb8>)
 8003544:	f7fd f834 	bl	80005b0 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003558:	f7fc fe74 	bl	8000244 <__adddf3>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fafc 	bl	8000b60 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	4a07      	ldr	r2, [pc, #28]	; (8003588 <twoHandler+0xbc>)
 800356c:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <twoHandler+0xc0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <twoHandler+0xc0>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	bdb0      	pop	{r4, r5, r7, pc}
 800357c:	2000a43c 	.word	0x2000a43c
 8003580:	2000a438 	.word	0x2000a438
 8003584:	40240000 	.word	0x40240000
 8003588:	2000a430 	.word	0x2000a430
 800358c:	2000a420 	.word	0x2000a420

08003590 <threeHandler>:
void threeHandler() {
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <threeHandler+0xb0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d02e      	beq.n	80035fa <threeHandler+0x6a>
		number += 3.0 * pow(10.0, --fractionCount);
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <threeHandler+0xb4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	4a28      	ldr	r2, [pc, #160]	; (8003644 <threeHandler+0xb4>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <threeHandler+0xb4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ff96 	bl	80004dc <__aeabi_i2d>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	4923      	ldr	r1, [pc, #140]	; (8003648 <threeHandler+0xb8>)
 80035ba:	f00b fefb 	bl	800f3b4 <pow>
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <threeHandler+0xbc>)
 80035c4:	f7fc fff4 	bl	80005b0 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <threeHandler+0xc0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff93 	bl	8000500 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fc fe2f 	bl	8000244 <__adddf3>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fab7 	bl	8000b60 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <threeHandler+0xc0>)
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	e01b      	b.n	8003632 <threeHandler+0xa2>

	} else {
		number = number * 10.0 + 3.0;
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <threeHandler+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff7e 	bl	8000500 <__aeabi_f2d>
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <threeHandler+0xb8>)
 800360a:	f7fc ffd1 	bl	80005b0 <__aeabi_dmul>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <threeHandler+0xbc>)
 800361c:	f7fc fe12 	bl	8000244 <__adddf3>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f7fd fa9a 	bl	8000b60 <__aeabi_d2f>
 800362c:	4603      	mov	r3, r0
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <threeHandler+0xc0>)
 8003630:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <threeHandler+0xc4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <threeHandler+0xc4>)
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	bdb0      	pop	{r4, r5, r7, pc}
 8003640:	2000a43c 	.word	0x2000a43c
 8003644:	2000a438 	.word	0x2000a438
 8003648:	40240000 	.word	0x40240000
 800364c:	40080000 	.word	0x40080000
 8003650:	2000a430 	.word	0x2000a430
 8003654:	2000a420 	.word	0x2000a420

08003658 <fourHandler>:
void fourHandler() {
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	af00      	add	r7, sp, #0
	if (isFloat) {
 800365c:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <fourHandler+0xb0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02e      	beq.n	80036c2 <fourHandler+0x6a>
		number += 4.0 * pow(10.0, --fractionCount);
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <fourHandler+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	4a28      	ldr	r2, [pc, #160]	; (800370c <fourHandler+0xb4>)
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <fourHandler+0xb4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff32 	bl	80004dc <__aeabi_i2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	f04f 0000 	mov.w	r0, #0
 8003680:	4923      	ldr	r1, [pc, #140]	; (8003710 <fourHandler+0xb8>)
 8003682:	f00b fe97 	bl	800f3b4 <pow>
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <fourHandler+0xbc>)
 800368c:	f7fc ff90 	bl	80005b0 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <fourHandler+0xc0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff2f 	bl	8000500 <__aeabi_f2d>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f7fc fdcb 	bl	8000244 <__adddf3>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f7fd fa53 	bl	8000b60 <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <fourHandler+0xc0>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e01b      	b.n	80036fa <fourHandler+0xa2>

	} else {
		number = number * 10.0 + 4.0;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <fourHandler+0xc0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff1a 	bl	8000500 <__aeabi_f2d>
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <fourHandler+0xb8>)
 80036d2:	f7fc ff6d 	bl	80005b0 <__aeabi_dmul>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <fourHandler+0xbc>)
 80036e4:	f7fc fdae 	bl	8000244 <__adddf3>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f7fd fa36 	bl	8000b60 <__aeabi_d2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <fourHandler+0xc0>)
 80036f8:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <fourHandler+0xc4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <fourHandler+0xc4>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	2000a43c 	.word	0x2000a43c
 800370c:	2000a438 	.word	0x2000a438
 8003710:	40240000 	.word	0x40240000
 8003714:	40100000 	.word	0x40100000
 8003718:	2000a430 	.word	0x2000a430
 800371c:	2000a420 	.word	0x2000a420

08003720 <fiveHandler>:
void fiveHandler() {
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <fiveHandler+0xb0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02e      	beq.n	800378a <fiveHandler+0x6a>
		number += 5.0 * pow(10.0, --fractionCount);
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <fiveHandler+0xb4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <fiveHandler+0xb4>)
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <fiveHandler+0xb4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fece 	bl	80004dc <__aeabi_i2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	4923      	ldr	r1, [pc, #140]	; (80037d8 <fiveHandler+0xb8>)
 800374a:	f00b fe33 	bl	800f3b4 <pow>
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <fiveHandler+0xbc>)
 8003754:	f7fc ff2c 	bl	80005b0 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4614      	mov	r4, r2
 800375e:	461d      	mov	r5, r3
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <fiveHandler+0xc0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fecb 	bl	8000500 <__aeabi_f2d>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fc fd67 	bl	8000244 <__adddf3>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7fd f9ef 	bl	8000b60 <__aeabi_d2f>
 8003782:	4603      	mov	r3, r0
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <fiveHandler+0xc0>)
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e01b      	b.n	80037c2 <fiveHandler+0xa2>

	} else {
		number = number * 10.0 + 5.0;
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <fiveHandler+0xc0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc feb6 	bl	8000500 <__aeabi_f2d>
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <fiveHandler+0xb8>)
 800379a:	f7fc ff09 	bl	80005b0 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <fiveHandler+0xbc>)
 80037ac:	f7fc fd4a 	bl	8000244 <__adddf3>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fd f9d2 	bl	8000b60 <__aeabi_d2f>
 80037bc:	4603      	mov	r3, r0
 80037be:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <fiveHandler+0xc0>)
 80037c0:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <fiveHandler+0xc4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <fiveHandler+0xc4>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}
 80037d0:	2000a43c 	.word	0x2000a43c
 80037d4:	2000a438 	.word	0x2000a438
 80037d8:	40240000 	.word	0x40240000
 80037dc:	40140000 	.word	0x40140000
 80037e0:	2000a430 	.word	0x2000a430
 80037e4:	2000a420 	.word	0x2000a420

080037e8 <sixHandler>:
void sixHandler() {
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	af00      	add	r7, sp, #0
	if (isFloat) {
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <sixHandler+0xb0>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02e      	beq.n	8003852 <sixHandler+0x6a>
		number += 6.0 * pow(10.0, --fractionCount);
 80037f4:	4b29      	ldr	r3, [pc, #164]	; (800389c <sixHandler+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <sixHandler+0xb4>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <sixHandler+0xb4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fe6a 	bl	80004dc <__aeabi_i2d>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	4923      	ldr	r1, [pc, #140]	; (80038a0 <sixHandler+0xb8>)
 8003812:	f00b fdcf 	bl	800f3b4 <pow>
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <sixHandler+0xbc>)
 800381c:	f7fc fec8 	bl	80005b0 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4614      	mov	r4, r2
 8003826:	461d      	mov	r5, r3
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <sixHandler+0xc0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fe67 	bl	8000500 <__aeabi_f2d>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fc fd03 	bl	8000244 <__adddf3>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f7fd f98b 	bl	8000b60 <__aeabi_d2f>
 800384a:	4603      	mov	r3, r0
 800384c:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <sixHandler+0xc0>)
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e01b      	b.n	800388a <sixHandler+0xa2>

	} else {
		number = number * 10.0 + 6.0;
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <sixHandler+0xc0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe52 	bl	8000500 <__aeabi_f2d>
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <sixHandler+0xb8>)
 8003862:	f7fc fea5 	bl	80005b0 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <sixHandler+0xbc>)
 8003874:	f7fc fce6 	bl	8000244 <__adddf3>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f7fd f96e 	bl	8000b60 <__aeabi_d2f>
 8003884:	4603      	mov	r3, r0
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <sixHandler+0xc0>)
 8003888:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <sixHandler+0xc4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <sixHandler+0xc4>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	bdb0      	pop	{r4, r5, r7, pc}
 8003898:	2000a43c 	.word	0x2000a43c
 800389c:	2000a438 	.word	0x2000a438
 80038a0:	40240000 	.word	0x40240000
 80038a4:	40180000 	.word	0x40180000
 80038a8:	2000a430 	.word	0x2000a430
 80038ac:	2000a420 	.word	0x2000a420

080038b0 <sevenHandler>:
void sevenHandler() {
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	if (isFloat) {
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <sevenHandler+0xb0>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02e      	beq.n	800391a <sevenHandler+0x6a>
		number += 7.0 * pow(10.0, --fractionCount);
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <sevenHandler+0xb4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	4a28      	ldr	r2, [pc, #160]	; (8003964 <sevenHandler+0xb4>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <sevenHandler+0xb4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fe06 	bl	80004dc <__aeabi_i2d>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	4923      	ldr	r1, [pc, #140]	; (8003968 <sevenHandler+0xb8>)
 80038da:	f00b fd6b 	bl	800f3b4 <pow>
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <sevenHandler+0xbc>)
 80038e4:	f7fc fe64 	bl	80005b0 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4614      	mov	r4, r2
 80038ee:	461d      	mov	r5, r3
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <sevenHandler+0xc0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fe03 	bl	8000500 <__aeabi_f2d>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4620      	mov	r0, r4
 8003900:	4629      	mov	r1, r5
 8003902:	f7fc fc9f 	bl	8000244 <__adddf3>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f927 	bl	8000b60 <__aeabi_d2f>
 8003912:	4603      	mov	r3, r0
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <sevenHandler+0xc0>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e01b      	b.n	8003952 <sevenHandler+0xa2>

	} else {
		number = number * 10.0 + 7.0;
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <sevenHandler+0xc0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fdee 	bl	8000500 <__aeabi_f2d>
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <sevenHandler+0xb8>)
 800392a:	f7fc fe41 	bl	80005b0 <__aeabi_dmul>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <sevenHandler+0xbc>)
 800393c:	f7fc fc82 	bl	8000244 <__adddf3>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fd f90a 	bl	8000b60 <__aeabi_d2f>
 800394c:	4603      	mov	r3, r0
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <sevenHandler+0xc0>)
 8003950:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <sevenHandler+0xc4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <sevenHandler+0xc4>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	bdb0      	pop	{r4, r5, r7, pc}
 8003960:	2000a43c 	.word	0x2000a43c
 8003964:	2000a438 	.word	0x2000a438
 8003968:	40240000 	.word	0x40240000
 800396c:	401c0000 	.word	0x401c0000
 8003970:	2000a430 	.word	0x2000a430
 8003974:	2000a420 	.word	0x2000a420

08003978 <eightHandler>:
void eightHandler() {
 8003978:	b5b0      	push	{r4, r5, r7, lr}
 800397a:	af00      	add	r7, sp, #0
	if (isFloat) {
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <eightHandler+0xb0>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02e      	beq.n	80039e2 <eightHandler+0x6a>
		number += 8.0 * pow(10.0, --fractionCount);
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <eightHandler+0xb4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3b01      	subs	r3, #1
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <eightHandler+0xb4>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <eightHandler+0xb4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fda2 	bl	80004dc <__aeabi_i2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	4923      	ldr	r1, [pc, #140]	; (8003a30 <eightHandler+0xb8>)
 80039a2:	f00b fd07 	bl	800f3b4 <pow>
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <eightHandler+0xbc>)
 80039ac:	f7fc fe00 	bl	80005b0 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	461d      	mov	r5, r3
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <eightHandler+0xc0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fd9f 	bl	8000500 <__aeabi_f2d>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fc3b 	bl	8000244 <__adddf3>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fd f8c3 	bl	8000b60 <__aeabi_d2f>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <eightHandler+0xc0>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e01b      	b.n	8003a1a <eightHandler+0xa2>

	} else {
		number = number * 10.0 + 8.0;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <eightHandler+0xc0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fd8a 	bl	8000500 <__aeabi_f2d>
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <eightHandler+0xb8>)
 80039f2:	f7fc fddd 	bl	80005b0 <__aeabi_dmul>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <eightHandler+0xbc>)
 8003a04:	f7fc fc1e 	bl	8000244 <__adddf3>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f7fd f8a6 	bl	8000b60 <__aeabi_d2f>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <eightHandler+0xc0>)
 8003a18:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <eightHandler+0xc4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <eightHandler+0xc4>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	bdb0      	pop	{r4, r5, r7, pc}
 8003a28:	2000a43c 	.word	0x2000a43c
 8003a2c:	2000a438 	.word	0x2000a438
 8003a30:	40240000 	.word	0x40240000
 8003a34:	40200000 	.word	0x40200000
 8003a38:	2000a430 	.word	0x2000a430
 8003a3c:	2000a420 	.word	0x2000a420

08003a40 <nineHandler>:
void nineHandler() {
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <nineHandler+0xb0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02e      	beq.n	8003aaa <nineHandler+0x6a>
		number += 9.0 * pow(10.0, --fractionCount);
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <nineHandler+0xb4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <nineHandler+0xb4>)
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <nineHandler+0xb4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd3e 	bl	80004dc <__aeabi_i2d>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	4923      	ldr	r1, [pc, #140]	; (8003af8 <nineHandler+0xb8>)
 8003a6a:	f00b fca3 	bl	800f3b4 <pow>
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	4b22      	ldr	r3, [pc, #136]	; (8003afc <nineHandler+0xbc>)
 8003a74:	f7fc fd9c 	bl	80005b0 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <nineHandler+0xc0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd3b 	bl	8000500 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fc fbd7 	bl	8000244 <__adddf3>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7fd f85f 	bl	8000b60 <__aeabi_d2f>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <nineHandler+0xc0>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e01b      	b.n	8003ae2 <nineHandler+0xa2>

	} else {
		number = number * 10.0 + 9.0;
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <nineHandler+0xc0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd26 	bl	8000500 <__aeabi_f2d>
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <nineHandler+0xb8>)
 8003aba:	f7fc fd79 	bl	80005b0 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <nineHandler+0xbc>)
 8003acc:	f7fc fbba 	bl	8000244 <__adddf3>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f7fd f842 	bl	8000b60 <__aeabi_d2f>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <nineHandler+0xc0>)
 8003ae0:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <nineHandler+0xc4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <nineHandler+0xc4>)
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	2000a43c 	.word	0x2000a43c
 8003af4:	2000a438 	.word	0x2000a438
 8003af8:	40240000 	.word	0x40240000
 8003afc:	40220000 	.word	0x40220000
 8003b00:	2000a430 	.word	0x2000a430
 8003b04:	2000a420 	.word	0x2000a420

08003b08 <dotHandler>:
void dotHandler() {
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
	if(isFloat ==0){
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <dotHandler+0x24>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <dotHandler+0x1c>
		digitNumber++;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <dotHandler+0x28>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <dotHandler+0x28>)
 8003b1c:	6013      	str	r3, [r2, #0]
		isFloat = 1;
 8003b1e:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <dotHandler+0x24>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
	}
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	2000a43c 	.word	0x2000a43c
 8003b30:	2000a420 	.word	0x2000a420

08003b34 <zeroHandler>:
void zeroHandler() {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	if (number != 0.0f) {
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <zeroHandler+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd faff 	bl	8001144 <__aeabi_fcmpeq>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d000      	beq.n	8003b4e <zeroHandler+0x1a>
			number = number * 10.0;
		}

		digitNumber++;
	}
}
 8003b4c:	e018      	b.n	8003b80 <zeroHandler+0x4c>
		if (isFloat) {
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <zeroHandler+0x54>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <zeroHandler+0x2e>
			fractionCount--;
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <zeroHandler+0x58>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <zeroHandler+0x58>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e009      	b.n	8003b76 <zeroHandler+0x42>
			number = number * 10.0;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <zeroHandler+0x50>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <zeroHandler+0x5c>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd f957 	bl	8000e1c <__aeabi_fmul>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <zeroHandler+0x50>)
 8003b74:	601a      	str	r2, [r3, #0]
		digitNumber++;
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <zeroHandler+0x60>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <zeroHandler+0x60>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	2000a430 	.word	0x2000a430
 8003b88:	2000a43c 	.word	0x2000a43c
 8003b8c:	2000a438 	.word	0x2000a438
 8003b90:	41200000 	.word	0x41200000
 8003b94:	2000a420 	.word	0x2000a420

08003b98 <enterHandler>:
void enterHandler() {
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	number = 0;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <enterHandler+0x2c>)
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
	digitNumber = 0;
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <enterHandler+0x30>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
	isFloat = 0;
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <enterHandler+0x34>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
	fractionCount = 0;
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <enterHandler+0x38>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
	state = EXPMENU;
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <enterHandler+0x3c>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	2000a430 	.word	0x2000a430
 8003bc8:	2000a420 	.word	0x2000a420
 8003bcc:	2000a43c 	.word	0x2000a43c
 8003bd0:	2000a438 	.word	0x2000a438
 8003bd4:	2000a42c 	.word	0x2000a42c

08003bd8 <checkNumpadButtons>:
Button dotButton = { 0, 42, 128, 160, "", 0x00f0, dotHandler };
Button zeroButton = { 43, 85, 128, 160, "", 0x00f0, zeroHandler };
Button enterButton = { 85, 128, 128, 160, "", 0x00f0, enterHandler };

//BUTTON CONTROL
void checkNumpadButtons() {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	if (isPressed(oneButton)) {
 8003bdc:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <checkNumpadButtons+0x110>)
 8003bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be0:	f7fe fbf2 	bl	80023c8 <isPressed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <checkNumpadButtons+0x1a>
		oneButton.btnHandler();
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <checkNumpadButtons+0x110>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4798      	blx	r3
	} else if (isPressed(zeroButton)) {
		zeroButton.btnHandler();
	} else if (isPressed(enterButton)) {
		enterButton.btnHandler();
	}
}
 8003bf0:	e077      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(twoButton)) {
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <checkNumpadButtons+0x114>)
 8003bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf6:	f7fe fbe7 	bl	80023c8 <isPressed>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <checkNumpadButtons+0x30>
		twoButton.btnHandler();
 8003c00:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <checkNumpadButtons+0x114>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4798      	blx	r3
}
 8003c06:	e06c      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(threeButton)) {
 8003c08:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <checkNumpadButtons+0x118>)
 8003c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0c:	f7fe fbdc 	bl	80023c8 <isPressed>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <checkNumpadButtons+0x46>
		threeButton.btnHandler();
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <checkNumpadButtons+0x118>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4798      	blx	r3
}
 8003c1c:	e061      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(fourButton)) {
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <checkNumpadButtons+0x11c>)
 8003c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c22:	f7fe fbd1 	bl	80023c8 <isPressed>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <checkNumpadButtons+0x5c>
		fourButton.btnHandler();
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <checkNumpadButtons+0x11c>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4798      	blx	r3
}
 8003c32:	e056      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(fiveButton)) {
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <checkNumpadButtons+0x120>)
 8003c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c38:	f7fe fbc6 	bl	80023c8 <isPressed>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <checkNumpadButtons+0x72>
		fiveButton.btnHandler();
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <checkNumpadButtons+0x120>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4798      	blx	r3
}
 8003c48:	e04b      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(sixButton)) {
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <checkNumpadButtons+0x124>)
 8003c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4e:	f7fe fbbb 	bl	80023c8 <isPressed>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <checkNumpadButtons+0x88>
		sixButton.btnHandler();
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <checkNumpadButtons+0x124>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4798      	blx	r3
}
 8003c5e:	e040      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(sevenButton)) {
 8003c60:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <checkNumpadButtons+0x128>)
 8003c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c64:	f7fe fbb0 	bl	80023c8 <isPressed>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <checkNumpadButtons+0x9e>
		sevenButton.btnHandler();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <checkNumpadButtons+0x128>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4798      	blx	r3
}
 8003c74:	e035      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(eightButton)) {
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <checkNumpadButtons+0x12c>)
 8003c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7a:	f7fe fba5 	bl	80023c8 <isPressed>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <checkNumpadButtons+0xb4>
		eightButton.btnHandler();
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <checkNumpadButtons+0x12c>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4798      	blx	r3
}
 8003c8a:	e02a      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(nineButton)) {
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <checkNumpadButtons+0x130>)
 8003c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c90:	f7fe fb9a 	bl	80023c8 <isPressed>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <checkNumpadButtons+0xca>
		nineButton.btnHandler();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <checkNumpadButtons+0x130>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4798      	blx	r3
}
 8003ca0:	e01f      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(dotButton)) {
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <checkNumpadButtons+0x134>)
 8003ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca6:	f7fe fb8f 	bl	80023c8 <isPressed>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <checkNumpadButtons+0xe0>
		dotButton.btnHandler();
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <checkNumpadButtons+0x134>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4798      	blx	r3
}
 8003cb6:	e014      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(zeroButton)) {
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <checkNumpadButtons+0x138>)
 8003cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbc:	f7fe fb84 	bl	80023c8 <isPressed>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <checkNumpadButtons+0xf6>
		zeroButton.btnHandler();
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <checkNumpadButtons+0x138>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4798      	blx	r3
}
 8003ccc:	e009      	b.n	8003ce2 <checkNumpadButtons+0x10a>
	} else if (isPressed(enterButton)) {
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <checkNumpadButtons+0x13c>)
 8003cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd2:	f7fe fb79 	bl	80023c8 <isPressed>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <checkNumpadButtons+0x10a>
		enterButton.btnHandler();
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <checkNumpadButtons+0x13c>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4798      	blx	r3
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000040 	.word	0x20000040
 8003cec:	20000050 	.word	0x20000050
 8003cf0:	20000060 	.word	0x20000060
 8003cf4:	20000070 	.word	0x20000070
 8003cf8:	20000080 	.word	0x20000080
 8003cfc:	20000090 	.word	0x20000090
 8003d00:	200000a0 	.word	0x200000a0
 8003d04:	200000b0 	.word	0x200000b0
 8003d08:	200000c0 	.word	0x200000c0
 8003d0c:	200000d0 	.word	0x200000d0
 8003d10:	200000e0 	.word	0x200000e0
 8003d14:	200000f0 	.word	0x200000f0

08003d18 <drawNumpad>:
void drawNumpad() {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af02      	add	r7, sp, #8
	drawImage(numpadImage, 0);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4841      	ldr	r0, [pc, #260]	; (8003e28 <drawNumpad+0x110>)
 8003d22:	f7fe fb8d 	bl	8002440 <drawImage>
	char numberString[20];

	char *tmpSign = (number < 0) ? "-" : "";
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <drawNumpad+0x114>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fa12 	bl	8001158 <__aeabi_fcmplt>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <drawNumpad+0x26>
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <drawNumpad+0x118>)
 8003d3c:	e000      	b.n	8003d40 <drawNumpad+0x28>
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <drawNumpad+0x11c>)
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
	float tmpVal = (number < 0) ? -number : number;
 8003d42:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <drawNumpad+0x114>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fa04 	bl	8001158 <__aeabi_fcmplt>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <drawNumpad+0x48>
 8003d56:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <drawNumpad+0x114>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d5e:	e001      	b.n	8003d64 <drawNumpad+0x4c>
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <drawNumpad+0x114>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	623b      	str	r3, [r7, #32]

	int tmpInt1 = tmpVal;                  // Get the integer (678).
 8003d66:	6a38      	ldr	r0, [r7, #32]
 8003d68:	f7fd fa1e 	bl	80011a8 <__aeabi_f2iz>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	61fb      	str	r3, [r7, #28]
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8003d70:	69f8      	ldr	r0, [r7, #28]
 8003d72:	f7fc ffff 	bl	8000d74 <__aeabi_i2f>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6a38      	ldr	r0, [r7, #32]
 8003d7c:	f7fc ff44 	bl	8000c08 <__aeabi_fsub>
 8003d80:	4603      	mov	r3, r0
 8003d82:	61bb      	str	r3, [r7, #24]
	int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).
 8003d84:	492c      	ldr	r1, [pc, #176]	; (8003e38 <drawNumpad+0x120>)
 8003d86:	69b8      	ldr	r0, [r7, #24]
 8003d88:	f7fd f848 	bl	8000e1c <__aeabi_fmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fbb6 	bl	8000500 <__aeabi_f2d>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f00b fada 	bl	800f354 <trunc>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc feb2 	bl	8000b10 <__aeabi_d2iz>
 8003dac:	4603      	mov	r3, r0
 8003dae:	617b      	str	r3, [r7, #20]

	// Print as parts, note that you need 0-padding for fractional bit.

	sprintf(numberString, "%s%d.%d", tmpSign, tmpInt1, tmpInt2);
 8003db0:	4638      	mov	r0, r7
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	4920      	ldr	r1, [pc, #128]	; (8003e3c <drawNumpad+0x124>)
 8003dbc:	f00a ff54 	bl	800ec68 <siprintf>

	ILI9163_drawString(100 - digitNumber * 7, 10, Font_7x10, GREEN,
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <drawNumpad+0x128>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3364      	adds	r3, #100	; 0x64
 8003dd0:	b2d8      	uxtb	r0, r3
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <drawNumpad+0x12c>)
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	2304      	movs	r3, #4
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	ca0c      	ldmia	r2, {r2, r3}
 8003dde:	210a      	movs	r1, #10
 8003de0:	f7fe fea6 	bl	8002b30 <ILI9163_drawString>
			numberString);
	switch (selectedParameter) {
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <drawNumpad+0x130>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d002      	beq.n	8003df2 <drawNumpad+0xda>
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d00b      	beq.n	8003e08 <drawNumpad+0xf0>
		break;
	case 2:
		ILI9163_drawString(5, 10, Font_7x10, GREEN, "Ei");
		break;
	}
}
 8003df0:	e015      	b.n	8003e1e <drawNumpad+0x106>
		ILI9163_drawString(5, 10, Font_7x10, GREEN, "Range");
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <drawNumpad+0x12c>)
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <drawNumpad+0x134>)
 8003df6:	9201      	str	r2, [sp, #4]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	9200      	str	r2, [sp, #0]
 8003dfc:	cb0c      	ldmia	r3, {r2, r3}
 8003dfe:	210a      	movs	r1, #10
 8003e00:	2005      	movs	r0, #5
 8003e02:	f7fe fe95 	bl	8002b30 <ILI9163_drawString>
		break;
 8003e06:	e00a      	b.n	8003e1e <drawNumpad+0x106>
		ILI9163_drawString(5, 10, Font_7x10, GREEN, "Ei");
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <drawNumpad+0x12c>)
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <drawNumpad+0x138>)
 8003e0c:	9201      	str	r2, [sp, #4]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	9200      	str	r2, [sp, #0]
 8003e12:	cb0c      	ldmia	r3, {r2, r3}
 8003e14:	210a      	movs	r1, #10
 8003e16:	2005      	movs	r0, #5
 8003e18:	f7fe fe8a 	bl	8002b30 <ILI9163_drawString>
		break;
 8003e1c:	bf00      	nop
}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08024f30 	.word	0x08024f30
 8003e2c:	2000a430 	.word	0x2000a430
 8003e30:	080106e4 	.word	0x080106e4
 8003e34:	080106e0 	.word	0x080106e0
 8003e38:	461c4000 	.word	0x461c4000
 8003e3c:	080106e8 	.word	0x080106e8
 8003e40:	2000a420 	.word	0x2000a420
 8003e44:	20000004 	.word	0x20000004
 8003e48:	2000a43d 	.word	0x2000a43d
 8003e4c:	080106f0 	.word	0x080106f0
 8003e50:	080106f8 	.word	0x080106f8

08003e54 <read_plot>:
	//fresult = f_lseek(&fil, offset*128*2);
	f_read (&fil, fb, 128*160*2, &br);
	f_close(&fil);
}

void read_plot(){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
	uint16_t *fb = get_buffer();
 8003e5a:	f7fe fae7 	bl	800242c <get_buffer>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	607b      	str	r3, [r7, #4]
	fresult = f_open(&fil, "plot.dat", FA_OPEN_ALWAYS | FA_READ);
 8003e62:	2211      	movs	r2, #17
 8003e64:	490a      	ldr	r1, [pc, #40]	; (8003e90 <read_plot+0x3c>)
 8003e66:	480b      	ldr	r0, [pc, #44]	; (8003e94 <read_plot+0x40>)
 8003e68:	f009 fc4c 	bl	800d704 <f_open>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <read_plot+0x44>)
 8003e72:	701a      	strb	r2, [r3, #0]
	//fresult = f_lseek(&fil, offset*128*2);
	f_read(&fil, fb, 128 * 160 * 2, &br);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <read_plot+0x48>)
 8003e76:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <read_plot+0x40>)
 8003e7e:	f009 ff7b 	bl	800dd78 <f_read>
	f_close(&fil);
 8003e82:	4804      	ldr	r0, [pc, #16]	; (8003e94 <read_plot+0x40>)
 8003e84:	f00a fa6c 	bl	800e360 <f_close>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08010720 	.word	0x08010720
 8003e94:	2000b620 	.word	0x2000b620
 8003e98:	2000b540 	.word	0x2000b540
 8003e9c:	2000b49c 	.word	0x2000b49c

08003ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_MspInit+0x5c>)
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_MspInit+0x5c>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6193      	str	r3, [r2, #24]
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_MspInit+0x5c>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_MspInit+0x5c>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <HAL_MspInit+0x5c>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	61d3      	str	r3, [r2, #28]
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_MspInit+0x5c>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_MspInit+0x60>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_MspInit+0x60>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40010000 	.word	0x40010000

08003f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 0318 	add.w	r3, r7, #24
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_ADC_MspInit+0x98>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d137      	bne.n	8003f94 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f24:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2e:	6193      	str	r3, [r2, #24]
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6193      	str	r3, [r2, #24]
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f5a:	f043 0310 	orr.w	r3, r3, #16
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_ADC_MspInit+0x9c>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f70:	2303      	movs	r3, #3
 8003f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8003f74:	f107 0318 	add.w	r3, r7, #24
 8003f78:	4619      	mov	r1, r3
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <HAL_ADC_MspInit+0xa0>)
 8003f7c:	f001 f97c 	bl	8005278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Potentiometer_Pin|VBAT_Voltage_OUT_Pin;
 8003f80:	2330      	movs	r3, #48	; 0x30
 8003f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f84:	2303      	movs	r3, #3
 8003f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f88:	f107 0318 	add.w	r3, r7, #24
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <HAL_ADC_MspInit+0xa4>)
 8003f90:	f001 f972 	bl	8005278 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f94:	bf00      	nop
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40012400 	.word	0x40012400
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40010800 	.word	0x40010800
 8003fa8:	40011000 	.word	0x40011000

08003fac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <HAL_RTC_MspInit+0x3c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d110      	bne.n	8003fe0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003fbe:	f002 ffbf 	bl	8006f40 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RTC_MspInit+0x40>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_RTC_MspInit+0x40>)
 8003fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	61d3      	str	r3, [r2, #28]
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RTC_MspInit+0x40>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RTC_MspInit+0x44>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40002800 	.word	0x40002800
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	4242043c 	.word	0x4242043c

08003ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffc:	f107 0318 	add.w	r3, r7, #24
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_SPI_MspInit+0x1d4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f040 808f 	bne.w	8004134 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004016:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4a6c      	ldr	r2, [pc, #432]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 800401c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004020:	6193      	str	r3, [r2, #24]
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402e:	4b67      	ldr	r3, [pc, #412]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	4a66      	ldr	r2, [pc, #408]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	6193      	str	r3, [r2, #24]
 800403a:	4b64      	ldr	r3, [pc, #400]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004046:	2328      	movs	r3, #40	; 0x28
 8004048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004052:	f107 0318 	add.w	r3, r7, #24
 8004056:	4619      	mov	r1, r3
 8004058:	485d      	ldr	r0, [pc, #372]	; (80041d0 <HAL_SPI_MspInit+0x1dc>)
 800405a:	f001 f90d 	bl	8005278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800405e:	2310      	movs	r3, #16
 8004060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406a:	f107 0318 	add.w	r3, r7, #24
 800406e:	4619      	mov	r1, r3
 8004070:	4857      	ldr	r0, [pc, #348]	; (80041d0 <HAL_SPI_MspInit+0x1dc>)
 8004072:	f001 f901 	bl	8005278 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004076:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <HAL_SPI_MspInit+0x1e0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
 800408c:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_SPI_MspInit+0x1e0>)
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004092:	4b51      	ldr	r3, [pc, #324]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 8004094:	4a51      	ldr	r2, [pc, #324]	; (80041dc <HAL_SPI_MspInit+0x1e8>)
 8004096:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 800409a:	2200      	movs	r2, #0
 800409c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800409e:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040a4:	4b4c      	ldr	r3, [pc, #304]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040aa:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040b2:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040bc:	2220      	movs	r2, #32
 80040be:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80040c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80040c8:	4843      	ldr	r0, [pc, #268]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040ca:	f000 fd5b 	bl	8004b84 <HAL_DMA_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_SPI_MspInit+0xe4>
    {
      Error_Handler();
 80040d4:	f7ff f93a 	bl	800334c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80040de:	4a3e      	ldr	r2, [pc, #248]	; (80041d8 <HAL_SPI_MspInit+0x1e4>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80040e4:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 80040e6:	4a3f      	ldr	r2, [pc, #252]	; (80041e4 <HAL_SPI_MspInit+0x1f0>)
 80040e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 80040ec:	2210      	movs	r2, #16
 80040ee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f0:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fc:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 8004104:	2200      	movs	r2, #0
 8004106:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 800410a:	2200      	movs	r2, #0
 800410c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 8004110:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004114:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004116:	4832      	ldr	r0, [pc, #200]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 8004118:	f000 fd34 	bl	8004b84 <HAL_DMA_Init>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 8004122:	f7ff f913 	bl	800334c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 800412a:	649a      	str	r2, [r3, #72]	; 0x48
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_SPI_MspInit+0x1ec>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004132:	e044      	b.n	80041be <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_SPI_MspInit+0x1f4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d13f      	bne.n	80041be <HAL_SPI_MspInit+0x1ca>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004148:	61d3      	str	r3, [r2, #28]
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	6193      	str	r3, [r2, #24]
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_SPI_MspInit+0x1d8>)
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MOSI_Pin;
 800416e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004178:	2302      	movs	r3, #2
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417c:	f107 0318 	add.w	r3, r7, #24
 8004180:	4619      	mov	r1, r3
 8004182:	481a      	ldr	r0, [pc, #104]	; (80041ec <HAL_SPI_MspInit+0x1f8>)
 8004184:	f001 f878 	bl	8005278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_MISO_Pin;
 8004188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800418c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPI3_MISO_GPIO_Port, &GPIO_InitStruct);
 8004196:	f107 0318 	add.w	r3, r7, #24
 800419a:	4619      	mov	r1, r3
 800419c:	4813      	ldr	r0, [pc, #76]	; (80041ec <HAL_SPI_MspInit+0x1f8>)
 800419e:	f001 f86b 	bl	8005278 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_SPI_MspInit+0x1e0>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <HAL_SPI_MspInit+0x1e0>)
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	6053      	str	r3, [r2, #4]
}
 80041be:	bf00      	nop
 80041c0:	3730      	adds	r7, #48	; 0x30
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40013000 	.word	0x40013000
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40010c00 	.word	0x40010c00
 80041d4:	40010000 	.word	0x40010000
 80041d8:	2000b5dc 	.word	0x2000b5dc
 80041dc:	4002001c 	.word	0x4002001c
 80041e0:	2000c64c 	.word	0x2000c64c
 80041e4:	40020030 	.word	0x40020030
 80041e8:	40003c00 	.word	0x40003c00
 80041ec:	40011000 	.word	0x40011000

080041f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_UART_MspInit+0x8c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d131      	bne.n	8004274 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_UART_MspInit+0x90>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_UART_MspInit+0x90>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421a:	61d3      	str	r3, [r2, #28]
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <HAL_UART_MspInit+0x90>)
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_UART_MspInit+0x90>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4a14      	ldr	r2, [pc, #80]	; (8004280 <HAL_UART_MspInit+0x90>)
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	6193      	str	r3, [r2, #24]
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_UART_MspInit+0x90>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004240:	2360      	movs	r3, #96	; 0x60
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	2302      	movs	r3, #2
 800424a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4619      	mov	r1, r3
 8004252:	480c      	ldr	r0, [pc, #48]	; (8004284 <HAL_UART_MspInit+0x94>)
 8004254:	f001 f810 	bl	8005278 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_UART_MspInit+0x98>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f043 0308 	orr.w	r3, r3, #8
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <HAL_UART_MspInit+0x98>)
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004274:	bf00      	nop
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40004400 	.word	0x40004400
 8004280:	40021000 	.word	0x40021000
 8004284:	40011400 	.word	0x40011400
 8004288:	40010000 	.word	0x40010000

0800428c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <SDTimer_Handler+0x3c>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <SDTimer_Handler+0x1c>
		Timer1--;
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <SDTimer_Handler+0x3c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <SDTimer_Handler+0x3c>)
 80042a6:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <SDTimer_Handler+0x40>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <SDTimer_Handler+0x34>
		Timer2--;
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <SDTimer_Handler+0x40>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <SDTimer_Handler+0x40>)
 80042be:	701a      	strb	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	2000c691 	.word	0x2000c691
 80042cc:	2000c690 	.word	0x2000c690

080042d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <NMI_Handler+0x4>

080042d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042da:	e7fe      	b.n	80042da <HardFault_Handler+0x4>

080042dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <MemManage_Handler+0x4>

080042e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <BusFault_Handler+0x4>

080042e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ec:	e7fe      	b.n	80042ec <UsageFault_Handler+0x4>

080042ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr
	...

08004314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <SysTick_Handler+0x30>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	3301      	adds	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <SysTick_Handler+0x30>)
 8004324:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <SysTick_Handler+0x30>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b09      	cmp	r3, #9
 800432e:	d904      	bls.n	800433a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SysTick_Handler+0x30>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004336:	f7ff ffa9 	bl	800428c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433a:	f000 f8cb 	bl	80044d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000a1c9 	.word	0x2000a1c9

08004348 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <DMA1_Channel2_IRQHandler+0x10>)
 800434e:	f000 fd29 	bl	8004da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	2000b5dc 	.word	0x2000b5dc

0800435c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <DMA1_Channel3_IRQHandler+0x10>)
 8004362:	f000 fd1f 	bl	8004da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2000c64c 	.word	0x2000c64c

08004370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <OTG_FS_IRQHandler+0x10>)
 8004376:	f001 fbe1 	bl	8005b3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	2000eacc 	.word	0x2000eacc

08004384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <_sbrk+0x5c>)
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <_sbrk+0x60>)
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <_sbrk+0x64>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <_sbrk+0x68>)
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_sbrk+0x64>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b4:	f00a fb52 	bl	800ea5c <__errno>
 80043b8:	4603      	mov	r3, r0
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e009      	b.n	80043d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_sbrk+0x64>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <_sbrk+0x64>)
 80043d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20010000 	.word	0x20010000
 80043e4:	00000400 	.word	0x00000400
 80043e8:	2000a1cc 	.word	0x2000a1cc
 80043ec:	2000eda0 	.word	0x2000eda0

080043f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80043fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80043fe:	e003      	b.n	8004408 <LoopCopyDataInit>

08004400 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004402:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004404:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004406:	3104      	adds	r1, #4

08004408 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004408:	480a      	ldr	r0, [pc, #40]	; (8004434 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800440c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800440e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004410:	d3f6      	bcc.n	8004400 <CopyDataInit>
  ldr r2, =_sbss
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004414:	e002      	b.n	800441c <LoopFillZerobss>

08004416 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004418:	f842 3b04 	str.w	r3, [r2], #4

0800441c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800441e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004420:	d3f9      	bcc.n	8004416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004422:	f7ff ffe5 	bl	80043f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004426:	f00a fb1f 	bl	800ea68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800442a:	f7fe fc0b 	bl	8002c44 <main>
  bx lr
 800442e:	4770      	bx	lr
  ldr r3, =_sidata
 8004430:	0802f520 	.word	0x0802f520
  ldr r0, =_sdata
 8004434:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004438:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 800443c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8004440:	2000eda0 	.word	0x2000eda0

08004444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC1_2_IRQHandler>
	...

08004448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <HAL_Init+0x28>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <HAL_Init+0x28>)
 8004452:	f043 0310 	orr.w	r3, r3, #16
 8004456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004458:	2003      	movs	r0, #3
 800445a:	f000 fb51 	bl	8004b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800445e:	2000      	movs	r0, #0
 8004460:	f000 f808 	bl	8004474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004464:	f7ff fd1c 	bl	8003ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000

08004474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_InitTick+0x54>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_InitTick+0x58>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4619      	mov	r1, r3
 8004486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448a:	fbb3 f3f1 	udiv	r3, r3, r1
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fb69 	bl	8004b6a <HAL_SYSTICK_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00e      	b.n	80044c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d80a      	bhi.n	80044be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a8:	2200      	movs	r2, #0
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	f000 fb31 	bl	8004b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b4:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <HAL_InitTick+0x5c>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000100 	.word	0x20000100
 80044cc:	20000108 	.word	0x20000108
 80044d0:	20000104 	.word	0x20000104

080044d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_IncTick+0x1c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_IncTick+0x20>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	4a03      	ldr	r2, [pc, #12]	; (80044f4 <HAL_IncTick+0x20>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	20000108 	.word	0x20000108
 80044f4:	2000c694 	.word	0x2000c694

080044f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return uwTick;
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <HAL_GetTick+0x10>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	2000c694 	.word	0x2000c694

0800450c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7ff fff0 	bl	80044f8 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d005      	beq.n	8004532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_Delay+0x44>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004532:	bf00      	nop
 8004534:	f7ff ffe0 	bl	80044f8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d8f7      	bhi.n	8004534 <HAL_Delay+0x28>
  {
  }
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000108 	.word	0x20000108

08004554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0be      	b.n	80046f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fcb6 	bl	8003f04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f9ab 	bl	80048f4 <ADC_ConversionStop_Disable>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 8099 	bne.w	80046e2 <HAL_ADC_Init+0x18e>
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 8095 	bne.w	80046e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	7b1b      	ldrb	r3, [r3, #12]
 80045da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ec:	d003      	beq.n	80045f6 <HAL_ADC_Init+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <HAL_ADC_Init+0xa8>
 80045f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fa:	e000      	b.n	80045fe <HAL_ADC_Init+0xaa>
 80045fc:	2300      	movs	r3, #0
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7d1b      	ldrb	r3, [r3, #20]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	3b01      	subs	r3, #1
 800461a:	035a      	lsls	r2, r3, #13
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e00b      	b.n	8004640 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_ADC_Init+0x1a8>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	d003      	beq.n	800467a <HAL_ADC_Init+0x126>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d104      	bne.n	8004684 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	3b01      	subs	r3, #1
 8004680:	051b      	lsls	r3, r3, #20
 8004682:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	430a      	orrs	r2, r1
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <HAL_ADC_Init+0x1ac>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d10b      	bne.n	80046c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f023 0303 	bic.w	r3, r3, #3
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046be:	e018      	b.n	80046f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f023 0312 	bic.w	r3, r3, #18
 80046c8:	f043 0210 	orr.w	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046e0:	e007      	b.n	80046f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f043 0210 	orr.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	ffe1f7fd 	.word	0xffe1f7fd
 8004700:	ff1f0efe 	.word	0xff1f0efe

08004704 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x20>
 8004720:	2302      	movs	r3, #2
 8004722:	e0dc      	b.n	80048de <HAL_ADC_ConfigChannel+0x1da>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b06      	cmp	r3, #6
 8004732:	d81c      	bhi.n	800476e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	3b05      	subs	r3, #5
 8004746:	221f      	movs	r2, #31
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	4019      	ands	r1, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	3b05      	subs	r3, #5
 8004760:	fa00 f203 	lsl.w	r2, r0, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	635a      	str	r2, [r3, #52]	; 0x34
 800476c:	e03c      	b.n	80047e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d81c      	bhi.n	80047b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	3b23      	subs	r3, #35	; 0x23
 8004788:	221f      	movs	r2, #31
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	4019      	ands	r1, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	3b23      	subs	r3, #35	; 0x23
 80047a2:	fa00 f203 	lsl.w	r2, r0, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
 80047ae:	e01b      	b.n	80047e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3b41      	subs	r3, #65	; 0x41
 80047c2:	221f      	movs	r2, #31
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4019      	ands	r1, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	3b41      	subs	r3, #65	; 0x41
 80047dc:	fa00 f203 	lsl.w	r2, r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d91c      	bls.n	800482a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	3b1e      	subs	r3, #30
 8004802:	2207      	movs	r2, #7
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	4019      	ands	r1, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6898      	ldr	r0, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	3b1e      	subs	r3, #30
 800481c:	fa00 f203 	lsl.w	r2, r0, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e019      	b.n	800485e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	2207      	movs	r2, #7
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	4019      	ands	r1, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6898      	ldr	r0, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	fa00 f203 	lsl.w	r2, r0, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b10      	cmp	r3, #16
 8004864:	d003      	beq.n	800486e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800486a:	2b11      	cmp	r3, #17
 800486c:	d132      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d125      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d126      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004894:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b10      	cmp	r3, #16
 800489c:	d11a      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x1e8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9a      	lsrs	r2, r3, #18
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048b4:	e002      	b.n	80048bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f9      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x1b2>
 80048c2:	e007      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40012400 	.word	0x40012400
 80048ec:	20000100 	.word	0x20000100
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d127      	bne.n	800495e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800491e:	f7ff fdeb 	bl	80044f8 <HAL_GetTick>
 8004922:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004924:	e014      	b.n	8004950 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004926:	f7ff fde7 	bl	80044f8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d90d      	bls.n	8004950 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f043 0210 	orr.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d0e3      	beq.n	8004926 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	60d3      	str	r3, [r2, #12]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <__NVIC_GetPriorityGrouping+0x18>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 0307 	and.w	r3, r3, #7
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0b      	blt.n	80049f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4906      	ldr	r1, [pc, #24]	; (8004a00 <__NVIC_EnableIRQ+0x34>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db0a      	blt.n	8004a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	490c      	ldr	r1, [pc, #48]	; (8004a50 <__NVIC_SetPriority+0x4c>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a2c:	e00a      	b.n	8004a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4908      	ldr	r1, [pc, #32]	; (8004a54 <__NVIC_SetPriority+0x50>)
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	761a      	strb	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e100 	.word	0xe000e100
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f1c3 0307 	rsb	r3, r3, #7
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf28      	it	cs
 8004a76:	2304      	movcs	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d902      	bls.n	8004a88 <NVIC_EncodePriority+0x30>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b03      	subs	r3, #3
 8004a86:	e000      	b.n	8004a8a <NVIC_EncodePriority+0x32>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	4313      	orrs	r3, r2
         );
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	; 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004acc:	d301      	bcc.n	8004ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e00f      	b.n	8004af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <SysTick_Config+0x40>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ada:	210f      	movs	r1, #15
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	f7ff ff90 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <SysTick_Config+0x40>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <SysTick_Config+0x40>)
 8004aec:	2207      	movs	r2, #7
 8004aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	e000e010 	.word	0xe000e010

08004b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff2d 	bl	8004968 <__NVIC_SetPriorityGrouping>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b28:	f7ff ff42 	bl	80049b0 <__NVIC_GetPriorityGrouping>
 8004b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7ff ff90 	bl	8004a58 <NVIC_EncodePriority>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ff5f 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b46:	bf00      	nop
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4603      	mov	r3, r0
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff35 	bl	80049cc <__NVIC_EnableIRQ>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ffa2 	bl	8004abc <SysTick_Config>
 8004b78:	4603      	mov	r3, r0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e059      	b.n	8004c4e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_DMA_Init+0xd4>)
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d80f      	bhi.n	8004bc6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_DMA_Init+0xd8>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <HAL_DMA_Init+0xdc>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	009a      	lsls	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <HAL_DMA_Init+0xe0>)
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bc4:	e00e      	b.n	8004be4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <HAL_DMA_Init+0xe4>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_DMA_Init+0xdc>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	009a      	lsls	r2, r3, #2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_DMA_Init+0xe8>)
 8004be2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	40020407 	.word	0x40020407
 8004c5c:	bffdfff8 	.word	0xbffdfff8
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020000 	.word	0x40020000
 8004c68:	bffdfbf8 	.word	0xbffdfbf8
 8004c6c:	40020400 	.word	0x40020400

08004c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_DMA_Start_IT+0x20>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e04a      	b.n	8004d26 <HAL_DMA_Start_IT+0xb6>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d13a      	bne.n	8004d18 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 faa8 	bl	800521c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 020e 	orr.w	r2, r2, #14
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e00f      	b.n	8004d06 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0204 	bic.w	r2, r2, #4
 8004cf4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 020a 	orr.w	r2, r2, #10
 8004d04:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e005      	b.n	8004d24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d008      	beq.n	8004d56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e020      	b.n	8004d98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 020e 	bic.w	r2, r2, #14
 8004d64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f202 	lsl.w	r2, r1, r2
 8004d84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80d6 	beq.w	8004f7a <HAL_DMA_IRQHandler+0x1d6>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80d0 	beq.w	8004f7a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0204 	bic.w	r2, r2, #4
 8004df6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4b9b      	ldr	r3, [pc, #620]	; (800506c <HAL_DMA_IRQHandler+0x2c8>)
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d958      	bls.n	8004eb6 <HAL_DMA_IRQHandler+0x112>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a99      	ldr	r2, [pc, #612]	; (8005070 <HAL_DMA_IRQHandler+0x2cc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04f      	beq.n	8004eae <HAL_DMA_IRQHandler+0x10a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a98      	ldr	r2, [pc, #608]	; (8005074 <HAL_DMA_IRQHandler+0x2d0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d048      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x106>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a96      	ldr	r2, [pc, #600]	; (8005078 <HAL_DMA_IRQHandler+0x2d4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x100>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a95      	ldr	r2, [pc, #596]	; (800507c <HAL_DMA_IRQHandler+0x2d8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d038      	beq.n	8004e9e <HAL_DMA_IRQHandler+0xfa>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a93      	ldr	r2, [pc, #588]	; (8005080 <HAL_DMA_IRQHandler+0x2dc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d030      	beq.n	8004e98 <HAL_DMA_IRQHandler+0xf4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a92      	ldr	r2, [pc, #584]	; (8005084 <HAL_DMA_IRQHandler+0x2e0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d028      	beq.n	8004e92 <HAL_DMA_IRQHandler+0xee>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a89      	ldr	r2, [pc, #548]	; (800506c <HAL_DMA_IRQHandler+0x2c8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d020      	beq.n	8004e8c <HAL_DMA_IRQHandler+0xe8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a8e      	ldr	r2, [pc, #568]	; (8005088 <HAL_DMA_IRQHandler+0x2e4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d019      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xe4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a8c      	ldr	r2, [pc, #560]	; (800508c <HAL_DMA_IRQHandler+0x2e8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d012      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xe0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a8b      	ldr	r2, [pc, #556]	; (8005090 <HAL_DMA_IRQHandler+0x2ec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00a      	beq.n	8004e7e <HAL_DMA_IRQHandler+0xda>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a89      	ldr	r2, [pc, #548]	; (8005094 <HAL_DMA_IRQHandler+0x2f0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d102      	bne.n	8004e78 <HAL_DMA_IRQHandler+0xd4>
 8004e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e76:	e01b      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e7c:	e018      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e82:	e015      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e84:	2340      	movs	r3, #64	; 0x40
 8004e86:	e013      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e011      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e90:	e00e      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e96:	e00b      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e9c:	e008      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ea2:	e005      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea8:	e002      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	e000      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x10c>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	4a79      	ldr	r2, [pc, #484]	; (8005098 <HAL_DMA_IRQHandler+0x2f4>)
 8004eb2:	6053      	str	r3, [r2, #4]
 8004eb4:	e057      	b.n	8004f66 <HAL_DMA_IRQHandler+0x1c2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6d      	ldr	r2, [pc, #436]	; (8005070 <HAL_DMA_IRQHandler+0x2cc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d04f      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x1bc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_DMA_IRQHandler+0x2d0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d048      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x1b8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <HAL_DMA_IRQHandler+0x2d4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d040      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x1b2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	; (800507c <HAL_DMA_IRQHandler+0x2d8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d038      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x1ac>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a67      	ldr	r2, [pc, #412]	; (8005080 <HAL_DMA_IRQHandler+0x2dc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d030      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x1a6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a65      	ldr	r2, [pc, #404]	; (8005084 <HAL_DMA_IRQHandler+0x2e0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d028      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x1a0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_DMA_IRQHandler+0x2c8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d020      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x19a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_DMA_IRQHandler+0x2e4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x196>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a60      	ldr	r2, [pc, #384]	; (800508c <HAL_DMA_IRQHandler+0x2e8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d012      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x192>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5e      	ldr	r2, [pc, #376]	; (8005090 <HAL_DMA_IRQHandler+0x2ec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00a      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x18c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <HAL_DMA_IRQHandler+0x2f0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d102      	bne.n	8004f2a <HAL_DMA_IRQHandler+0x186>
 8004f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f28:	e01b      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f2e:	e018      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	e015      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	e013      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e011      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f42:	e00e      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f48:	e00b      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f4e:	e008      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f54:	e005      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5a:	e002      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	e000      	b.n	8004f62 <HAL_DMA_IRQHandler+0x1be>
 8004f60:	2304      	movs	r3, #4
 8004f62:	4a4e      	ldr	r2, [pc, #312]	; (800509c <HAL_DMA_IRQHandler+0x2f8>)
 8004f64:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8136 	beq.w	80051dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f78:	e130      	b.n	80051dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2202      	movs	r2, #2
 8004f80:	409a      	lsls	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80f8 	beq.w	800517c <HAL_DMA_IRQHandler+0x3d8>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80f2 	beq.w	800517c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 020a 	bic.w	r2, r2, #10
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_DMA_IRQHandler+0x2c8>)
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d973      	bls.n	80050b2 <HAL_DMA_IRQHandler+0x30e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <HAL_DMA_IRQHandler+0x2cc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d06a      	beq.n	80050aa <HAL_DMA_IRQHandler+0x306>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_DMA_IRQHandler+0x2d0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d063      	beq.n	80050a6 <HAL_DMA_IRQHandler+0x302>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a25      	ldr	r2, [pc, #148]	; (8005078 <HAL_DMA_IRQHandler+0x2d4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d05b      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x2fc>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <HAL_DMA_IRQHandler+0x2d8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d038      	beq.n	8005064 <HAL_DMA_IRQHandler+0x2c0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a22      	ldr	r2, [pc, #136]	; (8005080 <HAL_DMA_IRQHandler+0x2dc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d030      	beq.n	800505e <HAL_DMA_IRQHandler+0x2ba>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a20      	ldr	r2, [pc, #128]	; (8005084 <HAL_DMA_IRQHandler+0x2e0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d028      	beq.n	8005058 <HAL_DMA_IRQHandler+0x2b4>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <HAL_DMA_IRQHandler+0x2c8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d020      	beq.n	8005052 <HAL_DMA_IRQHandler+0x2ae>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_DMA_IRQHandler+0x2e4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d019      	beq.n	800504e <HAL_DMA_IRQHandler+0x2aa>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_DMA_IRQHandler+0x2e8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d012      	beq.n	800504a <HAL_DMA_IRQHandler+0x2a6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a19      	ldr	r2, [pc, #100]	; (8005090 <HAL_DMA_IRQHandler+0x2ec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00a      	beq.n	8005044 <HAL_DMA_IRQHandler+0x2a0>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a18      	ldr	r2, [pc, #96]	; (8005094 <HAL_DMA_IRQHandler+0x2f0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d102      	bne.n	800503e <HAL_DMA_IRQHandler+0x29a>
 8005038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503c:	e036      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 800503e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005042:	e033      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 8005044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005048:	e030      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 800504a:	2320      	movs	r3, #32
 800504c:	e02e      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 800504e:	2302      	movs	r3, #2
 8005050:	e02c      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 8005052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005056:	e029      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 8005058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800505c:	e026      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 800505e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005062:	e023      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 8005064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005068:	e020      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 800506a:	bf00      	nop
 800506c:	40020080 	.word	0x40020080
 8005070:	40020008 	.word	0x40020008
 8005074:	4002001c 	.word	0x4002001c
 8005078:	40020030 	.word	0x40020030
 800507c:	40020044 	.word	0x40020044
 8005080:	40020058 	.word	0x40020058
 8005084:	4002006c 	.word	0x4002006c
 8005088:	40020408 	.word	0x40020408
 800508c:	4002041c 	.word	0x4002041c
 8005090:	40020430 	.word	0x40020430
 8005094:	40020444 	.word	0x40020444
 8005098:	40020400 	.word	0x40020400
 800509c:	40020000 	.word	0x40020000
 80050a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a4:	e002      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 80050a6:	2320      	movs	r3, #32
 80050a8:	e000      	b.n	80050ac <HAL_DMA_IRQHandler+0x308>
 80050aa:	2302      	movs	r3, #2
 80050ac:	4a4e      	ldr	r2, [pc, #312]	; (80051e8 <HAL_DMA_IRQHandler+0x444>)
 80050ae:	6053      	str	r3, [r2, #4]
 80050b0:	e057      	b.n	8005162 <HAL_DMA_IRQHandler+0x3be>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <HAL_DMA_IRQHandler+0x448>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d04f      	beq.n	800515c <HAL_DMA_IRQHandler+0x3b8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a4b      	ldr	r2, [pc, #300]	; (80051f0 <HAL_DMA_IRQHandler+0x44c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d048      	beq.n	8005158 <HAL_DMA_IRQHandler+0x3b4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4a      	ldr	r2, [pc, #296]	; (80051f4 <HAL_DMA_IRQHandler+0x450>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d040      	beq.n	8005152 <HAL_DMA_IRQHandler+0x3ae>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a48      	ldr	r2, [pc, #288]	; (80051f8 <HAL_DMA_IRQHandler+0x454>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d038      	beq.n	800514c <HAL_DMA_IRQHandler+0x3a8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a47      	ldr	r2, [pc, #284]	; (80051fc <HAL_DMA_IRQHandler+0x458>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d030      	beq.n	8005146 <HAL_DMA_IRQHandler+0x3a2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a45      	ldr	r2, [pc, #276]	; (8005200 <HAL_DMA_IRQHandler+0x45c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d028      	beq.n	8005140 <HAL_DMA_IRQHandler+0x39c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a44      	ldr	r2, [pc, #272]	; (8005204 <HAL_DMA_IRQHandler+0x460>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d020      	beq.n	800513a <HAL_DMA_IRQHandler+0x396>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a42      	ldr	r2, [pc, #264]	; (8005208 <HAL_DMA_IRQHandler+0x464>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d019      	beq.n	8005136 <HAL_DMA_IRQHandler+0x392>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a41      	ldr	r2, [pc, #260]	; (800520c <HAL_DMA_IRQHandler+0x468>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d012      	beq.n	8005132 <HAL_DMA_IRQHandler+0x38e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3f      	ldr	r2, [pc, #252]	; (8005210 <HAL_DMA_IRQHandler+0x46c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00a      	beq.n	800512c <HAL_DMA_IRQHandler+0x388>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3e      	ldr	r2, [pc, #248]	; (8005214 <HAL_DMA_IRQHandler+0x470>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d102      	bne.n	8005126 <HAL_DMA_IRQHandler+0x382>
 8005120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005124:	e01b      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800512a:	e018      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 800512c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005130:	e015      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005132:	2320      	movs	r3, #32
 8005134:	e013      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005136:	2302      	movs	r3, #2
 8005138:	e011      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 800513a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800513e:	e00e      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005144:	e00b      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800514a:	e008      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 800514c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005150:	e005      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005156:	e002      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 8005158:	2320      	movs	r3, #32
 800515a:	e000      	b.n	800515e <HAL_DMA_IRQHandler+0x3ba>
 800515c:	2302      	movs	r3, #2
 800515e:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_DMA_IRQHandler+0x474>)
 8005160:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d034      	beq.n	80051dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800517a:	e02f      	b.n	80051dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2208      	movs	r2, #8
 8005182:	409a      	lsls	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d028      	beq.n	80051de <HAL_DMA_IRQHandler+0x43a>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d023      	beq.n	80051de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 020e 	bic.w	r2, r2, #14
 80051a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
    }
  }
  return;
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
}
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40020400 	.word	0x40020400
 80051ec:	40020008 	.word	0x40020008
 80051f0:	4002001c 	.word	0x4002001c
 80051f4:	40020030 	.word	0x40020030
 80051f8:	40020044 	.word	0x40020044
 80051fc:	40020058 	.word	0x40020058
 8005200:	4002006c 	.word	0x4002006c
 8005204:	40020080 	.word	0x40020080
 8005208:	40020408 	.word	0x40020408
 800520c:	4002041c 	.word	0x4002041c
 8005210:	40020430 	.word	0x40020430
 8005214:	40020444 	.word	0x40020444
 8005218:	40020000 	.word	0x40020000

0800521c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f202 	lsl.w	r2, r1, r2
 8005238:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b10      	cmp	r3, #16
 8005248:	d108      	bne.n	800525c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800525a:	e007      	b.n	800526c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
	...

08005278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005278:	b480      	push	{r7}
 800527a:	b08b      	sub	sp, #44	; 0x2c
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005286:	2300      	movs	r3, #0
 8005288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800528a:	e169      	b.n	8005560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800528c:	2201      	movs	r2, #1
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f040 8158 	bne.w	800555a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4a9a      	ldr	r2, [pc, #616]	; (8005518 <HAL_GPIO_Init+0x2a0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d05e      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
 80052b4:	4a98      	ldr	r2, [pc, #608]	; (8005518 <HAL_GPIO_Init+0x2a0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d875      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052ba:	4a98      	ldr	r2, [pc, #608]	; (800551c <HAL_GPIO_Init+0x2a4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d058      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
 80052c0:	4a96      	ldr	r2, [pc, #600]	; (800551c <HAL_GPIO_Init+0x2a4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d86f      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052c6:	4a96      	ldr	r2, [pc, #600]	; (8005520 <HAL_GPIO_Init+0x2a8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d052      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
 80052cc:	4a94      	ldr	r2, [pc, #592]	; (8005520 <HAL_GPIO_Init+0x2a8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d869      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052d2:	4a94      	ldr	r2, [pc, #592]	; (8005524 <HAL_GPIO_Init+0x2ac>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04c      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
 80052d8:	4a92      	ldr	r2, [pc, #584]	; (8005524 <HAL_GPIO_Init+0x2ac>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d863      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052de:	4a92      	ldr	r2, [pc, #584]	; (8005528 <HAL_GPIO_Init+0x2b0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d046      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
 80052e4:	4a90      	ldr	r2, [pc, #576]	; (8005528 <HAL_GPIO_Init+0x2b0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d85d      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052ea:	2b12      	cmp	r3, #18
 80052ec:	d82a      	bhi.n	8005344 <HAL_GPIO_Init+0xcc>
 80052ee:	2b12      	cmp	r3, #18
 80052f0:	d859      	bhi.n	80053a6 <HAL_GPIO_Init+0x12e>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <HAL_GPIO_Init+0x80>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005373 	.word	0x08005373
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	0800535f 	.word	0x0800535f
 8005304:	080053a1 	.word	0x080053a1
 8005308:	080053a7 	.word	0x080053a7
 800530c:	080053a7 	.word	0x080053a7
 8005310:	080053a7 	.word	0x080053a7
 8005314:	080053a7 	.word	0x080053a7
 8005318:	080053a7 	.word	0x080053a7
 800531c:	080053a7 	.word	0x080053a7
 8005320:	080053a7 	.word	0x080053a7
 8005324:	080053a7 	.word	0x080053a7
 8005328:	080053a7 	.word	0x080053a7
 800532c:	080053a7 	.word	0x080053a7
 8005330:	080053a7 	.word	0x080053a7
 8005334:	080053a7 	.word	0x080053a7
 8005338:	080053a7 	.word	0x080053a7
 800533c:	08005355 	.word	0x08005355
 8005340:	08005369 	.word	0x08005369
 8005344:	4a79      	ldr	r2, [pc, #484]	; (800552c <HAL_GPIO_Init+0x2b4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800534a:	e02c      	b.n	80053a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	623b      	str	r3, [r7, #32]
          break;
 8005352:	e029      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	3304      	adds	r3, #4
 800535a:	623b      	str	r3, [r7, #32]
          break;
 800535c:	e024      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	3308      	adds	r3, #8
 8005364:	623b      	str	r3, [r7, #32]
          break;
 8005366:	e01f      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	330c      	adds	r3, #12
 800536e:	623b      	str	r3, [r7, #32]
          break;
 8005370:	e01a      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800537a:	2304      	movs	r3, #4
 800537c:	623b      	str	r3, [r7, #32]
          break;
 800537e:	e013      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005388:	2308      	movs	r3, #8
 800538a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	611a      	str	r2, [r3, #16]
          break;
 8005392:	e009      	b.n	80053a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005394:	2308      	movs	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	615a      	str	r2, [r3, #20]
          break;
 800539e:	e003      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053a0:	2300      	movs	r3, #0
 80053a2:	623b      	str	r3, [r7, #32]
          break;
 80053a4:	e000      	b.n	80053a8 <HAL_GPIO_Init+0x130>
          break;
 80053a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2bff      	cmp	r3, #255	; 0xff
 80053ac:	d801      	bhi.n	80053b2 <HAL_GPIO_Init+0x13a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	e001      	b.n	80053b6 <HAL_GPIO_Init+0x13e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2bff      	cmp	r3, #255	; 0xff
 80053bc:	d802      	bhi.n	80053c4 <HAL_GPIO_Init+0x14c>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	e002      	b.n	80053ca <HAL_GPIO_Init+0x152>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	3b08      	subs	r3, #8
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	210f      	movs	r1, #15
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	431a      	orrs	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80b1 	beq.w	800555a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80053f8:	4b4d      	ldr	r3, [pc, #308]	; (8005530 <HAL_GPIO_Init+0x2b8>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	4a4c      	ldr	r2, [pc, #304]	; (8005530 <HAL_GPIO_Init+0x2b8>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6193      	str	r3, [r2, #24]
 8005404:	4b4a      	ldr	r3, [pc, #296]	; (8005530 <HAL_GPIO_Init+0x2b8>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005410:	4a48      	ldr	r2, [pc, #288]	; (8005534 <HAL_GPIO_Init+0x2bc>)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	3302      	adds	r3, #2
 8005418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	220f      	movs	r2, #15
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <HAL_GPIO_Init+0x2c0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_GPIO_Init+0x1ec>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3f      	ldr	r2, [pc, #252]	; (800553c <HAL_GPIO_Init+0x2c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00d      	beq.n	8005460 <HAL_GPIO_Init+0x1e8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3e      	ldr	r2, [pc, #248]	; (8005540 <HAL_GPIO_Init+0x2c8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <HAL_GPIO_Init+0x1e4>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3d      	ldr	r2, [pc, #244]	; (8005544 <HAL_GPIO_Init+0x2cc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_GPIO_Init+0x1e0>
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <HAL_GPIO_Init+0x1ee>
 8005458:	2304      	movs	r3, #4
 800545a:	e004      	b.n	8005466 <HAL_GPIO_Init+0x1ee>
 800545c:	2302      	movs	r3, #2
 800545e:	e002      	b.n	8005466 <HAL_GPIO_Init+0x1ee>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_GPIO_Init+0x1ee>
 8005464:	2300      	movs	r3, #0
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	f002 0203 	and.w	r2, r2, #3
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	4093      	lsls	r3, r2
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005476:	492f      	ldr	r1, [pc, #188]	; (8005534 <HAL_GPIO_Init+0x2bc>)
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	3302      	adds	r3, #2
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005490:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	492c      	ldr	r1, [pc, #176]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
 800549c:	e006      	b.n	80054ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800549e:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	43db      	mvns	r3, r3
 80054a6:	4928      	ldr	r1, [pc, #160]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d006      	beq.n	80054c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4922      	ldr	r1, [pc, #136]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	e006      	b.n	80054d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80054c6:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	43db      	mvns	r3, r3
 80054ce:	491e      	ldr	r1, [pc, #120]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	4918      	ldr	r1, [pc, #96]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	4914      	ldr	r1, [pc, #80]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d021      	beq.n	800554c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	490e      	ldr	r1, [pc, #56]	; (8005548 <HAL_GPIO_Init+0x2d0>)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	60cb      	str	r3, [r1, #12]
 8005514:	e021      	b.n	800555a <HAL_GPIO_Init+0x2e2>
 8005516:	bf00      	nop
 8005518:	10320000 	.word	0x10320000
 800551c:	10310000 	.word	0x10310000
 8005520:	10220000 	.word	0x10220000
 8005524:	10210000 	.word	0x10210000
 8005528:	10120000 	.word	0x10120000
 800552c:	10110000 	.word	0x10110000
 8005530:	40021000 	.word	0x40021000
 8005534:	40010000 	.word	0x40010000
 8005538:	40010800 	.word	0x40010800
 800553c:	40010c00 	.word	0x40010c00
 8005540:	40011000 	.word	0x40011000
 8005544:	40011400 	.word	0x40011400
 8005548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_GPIO_Init+0x304>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	43db      	mvns	r3, r3
 8005554:	4909      	ldr	r1, [pc, #36]	; (800557c <HAL_GPIO_Init+0x304>)
 8005556:	4013      	ands	r3, r2
 8005558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	3301      	adds	r3, #1
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	f47f ae8e 	bne.w	800528c <HAL_GPIO_Init+0x14>
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	372c      	adds	r7, #44	; 0x2c
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40010400 	.word	0x40010400

08005580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	887b      	ldrh	r3, [r7, #2]
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e001      	b.n	80055a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	807b      	strh	r3, [r7, #2]
 80055ba:	4613      	mov	r3, r2
 80055bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055be:	787b      	ldrb	r3, [r7, #1]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80055ca:	e003      	b.n	80055d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	041a      	lsls	r2, r3, #16
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	611a      	str	r2, [r3, #16]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
	...

080055e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055f6:	4a05      	ldr	r2, [pc, #20]	; (800560c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f806 	bl	8005610 <HAL_GPIO_EXTI_Callback>
  }
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40010400 	.word	0x40010400

08005610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b08f      	sub	sp, #60	; 0x3c
 8005628:	af0a      	add	r7, sp, #40	; 0x28
 800562a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e054      	b.n	80056e0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f008 ffc5 	bl	800e5e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2203      	movs	r2, #3
 800565a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f003 fc71 	bl	8008f5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	687e      	ldr	r6, [r7, #4]
 8005682:	466d      	mov	r5, sp
 8005684:	f106 0410 	add.w	r4, r6, #16
 8005688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005694:	e885 0003 	stmia.w	r5, {r0, r1}
 8005698:	1d33      	adds	r3, r6, #4
 800569a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800569c:	6838      	ldr	r0, [r7, #0]
 800569e:	f003 fc05 	bl	8008eac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f003 fc67 	bl	8008f7c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	687e      	ldr	r6, [r7, #4]
 80056b6:	466d      	mov	r5, sp
 80056b8:	f106 0410 	add.w	r4, r6, #16
 80056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056cc:	1d33      	adds	r3, r6, #4
 80056ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f003 fd6b 	bl	80091ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af04      	add	r7, sp, #16
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	70fb      	strb	r3, [r7, #3]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70bb      	strb	r3, [r7, #2]
 80056fe:	4613      	mov	r3, r2
 8005700:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_HCD_HC_Init+0x28>
 800570c:	2302      	movs	r3, #2
 800570e:	e07f      	b.n	8005810 <HAL_HCD_HC_Init+0x128>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	440b      	add	r3, r1
 8005726:	333d      	adds	r3, #61	; 0x3d
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	440b      	add	r3, r1
 800573a:	3338      	adds	r3, #56	; 0x38
 800573c:	787a      	ldrb	r2, [r7, #1]
 800573e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	3340      	adds	r3, #64	; 0x40
 8005750:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005752:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	3339      	adds	r3, #57	; 0x39
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	333f      	adds	r3, #63	; 0x3f
 8005778:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800577c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	78bb      	ldrb	r3, [r7, #2]
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	b2d8      	uxtb	r0, r3
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	333a      	adds	r3, #58	; 0x3a
 8005796:	4602      	mov	r2, r0
 8005798:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800579a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da0a      	bge.n	80057b8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	440b      	add	r3, r1
 80057b0:	333b      	adds	r3, #59	; 0x3b
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e009      	b.n	80057cc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	333b      	adds	r3, #59	; 0x3b
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	333c      	adds	r3, #60	; 0x3c
 80057dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80057e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	787c      	ldrb	r4, [r7, #1]
 80057e8:	78ba      	ldrb	r2, [r7, #2]
 80057ea:	78f9      	ldrb	r1, [r7, #3]
 80057ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057ee:	9302      	str	r3, [sp, #8]
 80057f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	4623      	mov	r3, r4
 80057fe:	f003 fdd5 	bl	80093ac <USB_HC_Init>
 8005802:	4603      	mov	r3, r0
 8005804:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}

08005818 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_HCD_HC_Halt+0x1e>
 8005832:	2302      	movs	r3, #2
 8005834:	e00f      	b.n	8005856 <HAL_HCD_HC_Halt+0x3e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f003 ffb2 	bl	80097b0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	4608      	mov	r0, r1
 800586a:	4611      	mov	r1, r2
 800586c:	461a      	mov	r2, r3
 800586e:	4603      	mov	r3, r0
 8005870:	70fb      	strb	r3, [r7, #3]
 8005872:	460b      	mov	r3, r1
 8005874:	70bb      	strb	r3, [r7, #2]
 8005876:	4613      	mov	r3, r2
 8005878:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800587a:	78fa      	ldrb	r2, [r7, #3]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	333b      	adds	r3, #59	; 0x3b
 800588a:	78ba      	ldrb	r2, [r7, #2]
 800588c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	333f      	adds	r3, #63	; 0x3f
 800589e:	787a      	ldrb	r2, [r7, #1]
 80058a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80058a2:	7c3b      	ldrb	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d114      	bne.n	80058d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	3342      	adds	r3, #66	; 0x42
 80058b8:	2203      	movs	r2, #3
 80058ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	440b      	add	r3, r1
 80058ca:	333d      	adds	r3, #61	; 0x3d
 80058cc:	7f3a      	ldrb	r2, [r7, #28]
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e009      	b.n	80058e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	440b      	add	r3, r1
 80058e0:	3342      	adds	r3, #66	; 0x42
 80058e2:	2202      	movs	r2, #2
 80058e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80058e6:	787b      	ldrb	r3, [r7, #1]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	f200 80d6 	bhi.w	8005a9a <HAL_HCD_HC_SubmitRequest+0x23a>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005a85 	.word	0x08005a85
 80058fc:	08005971 	.word	0x08005971
 8005900:	080059fb 	.word	0x080059fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005904:	7c3b      	ldrb	r3, [r7, #16]
 8005906:	2b01      	cmp	r3, #1
 8005908:	f040 80c9 	bne.w	8005a9e <HAL_HCD_HC_SubmitRequest+0x23e>
 800590c:	78bb      	ldrb	r3, [r7, #2]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 80c5 	bne.w	8005a9e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005914:	8b3b      	ldrh	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	3351      	adds	r3, #81	; 0x51
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800592e:	78fa      	ldrb	r2, [r7, #3]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	3351      	adds	r3, #81	; 0x51
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	3342      	adds	r3, #66	; 0x42
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005958:	e0a1      	b.n	8005a9e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	3342      	adds	r3, #66	; 0x42
 800596a:	2202      	movs	r2, #2
 800596c:	701a      	strb	r2, [r3, #0]
      break;
 800596e:	e096      	b.n	8005a9e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005970:	78bb      	ldrb	r3, [r7, #2]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d120      	bne.n	80059b8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	440b      	add	r3, r1
 8005984:	3351      	adds	r3, #81	; 0x51
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	440b      	add	r3, r1
 800599a:	3342      	adds	r3, #66	; 0x42
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80059a0:	e07e      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	440b      	add	r3, r1
 80059b0:	3342      	adds	r3, #66	; 0x42
 80059b2:	2202      	movs	r2, #2
 80059b4:	701a      	strb	r2, [r3, #0]
      break;
 80059b6:	e073      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	440b      	add	r3, r1
 80059c6:	3350      	adds	r3, #80	; 0x50
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	3342      	adds	r3, #66	; 0x42
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]
      break;
 80059e2:	e05d      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	440b      	add	r3, r1
 80059f2:	3342      	adds	r3, #66	; 0x42
 80059f4:	2202      	movs	r2, #2
 80059f6:	701a      	strb	r2, [r3, #0]
      break;
 80059f8:	e052      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80059fa:	78bb      	ldrb	r3, [r7, #2]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d120      	bne.n	8005a42 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3351      	adds	r3, #81	; 0x51
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	3342      	adds	r3, #66	; 0x42
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005a2a:	e039      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	440b      	add	r3, r1
 8005a3a:	3342      	adds	r3, #66	; 0x42
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
      break;
 8005a40:	e02e      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	3350      	adds	r3, #80	; 0x50
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	3342      	adds	r3, #66	; 0x42
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
      break;
 8005a6c:	e018      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3342      	adds	r3, #66	; 0x42
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
      break;
 8005a82:	e00d      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	440b      	add	r3, r1
 8005a92:	3342      	adds	r3, #66	; 0x42
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
      break;
 8005a98:	e002      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005a9e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	3344      	adds	r3, #68	; 0x44
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	8b39      	ldrh	r1, [r7, #24]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4403      	add	r3, r0
 8005ac4:	3348      	adds	r3, #72	; 0x48
 8005ac6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	335c      	adds	r3, #92	; 0x5c
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	334c      	adds	r3, #76	; 0x4c
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	3339      	adds	r3, #57	; 0x39
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	440b      	add	r3, r1
 8005b12:	335d      	adds	r3, #93	; 0x5d
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	3338      	adds	r3, #56	; 0x38
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f003 fd2f 	bl	8009590 <USB_HC_StartXfer>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f003 faea 	bl	800912c <USB_GetMode>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 80ef 	bne.w	8005d3e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f003 facf 	bl	8009108 <USB_ReadInterrupts>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80e5 	beq.w	8005d3c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f003 fac6 	bl	8009108 <USB_ReadInterrupts>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b86:	d104      	bne.n	8005b92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f003 fab6 	bl	8009108 <USB_ReadInterrupts>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d104      	bne.n	8005bb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f003 faa6 	bl	8009108 <USB_ReadInterrupts>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc6:	d104      	bne.n	8005bd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f003 fa96 	bl	8009108 <USB_ReadInterrupts>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f003 fa88 	bl	8009108 <USB_ReadInterrupts>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d115      	bne.n	8005c30 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f008 fd40 	bl	800e6a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 fb3c 	bl	80092a8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f003 fa67 	bl	8009108 <USB_ReadInterrupts>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c44:	d102      	bne.n	8005c4c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f906 	bl	8006e58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f003 fa59 	bl	8009108 <USB_ReadInterrupts>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d106      	bne.n	8005c6e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f008 fd03 	bl	800e66c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f003 fa48 	bl	8009108 <USB_ReadInterrupts>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c82:	d138      	bne.n	8005cf6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fd81 	bl	8009790 <USB_HC_ReadInterrupt>
 8005c8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e025      	b.n	8005ce2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d018      	beq.n	8005cdc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d106      	bne.n	8005cd0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f8b1 	bl	8005e30 <HCD_HC_IN_IRQHandler>
 8005cce:	e005      	b.n	8005cdc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fcbb 	bl	8006652 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3d4      	bcc.n	8005c96 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 fa04 	bl	8009108 <USB_ReadInterrupts>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d101      	bne.n	8005d0e <HAL_HCD_IRQHandler+0x1d2>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_HCD_IRQHandler+0x1d4>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d014      	beq.n	8005d3e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0210 	bic.w	r2, r2, #16
 8005d22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 ffe9 	bl	8006cfc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0210 	orr.w	r2, r2, #16
 8005d38:	619a      	str	r2, [r3, #24]
 8005d3a:	e000      	b.n	8005d3e <HAL_HCD_IRQHandler+0x202>
      return;
 8005d3c:	bf00      	nop
    }
  }
}
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_HCD_Start+0x16>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e013      	b.n	8005d82 <HAL_HCD_Start+0x3e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f003 f8e8 	bl	8008f3c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2101      	movs	r1, #1
 8005d72:	4618      	mov	r0, r3
 8005d74:	f003 fad1 	bl	800931a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_HCD_Stop+0x16>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e00d      	b.n	8005dbc <HAL_HCD_Stop+0x32>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f003 fdfd 	bl	80099ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	335c      	adds	r3, #92	; 0x5c
 8005de0:	781b      	ldrb	r3, [r3, #0]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr

08005dec <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	440b      	add	r3, r1
 8005e06:	334c      	adds	r3, #76	; 0x4c
 8005e08:	681b      	ldr	r3, [r3, #0]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f003 fab2 	bl	800938a <USB_GetCurrentFrame>
 8005e26:	4603      	mov	r3, r0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d119      	bne.n	8005e94 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2304      	movs	r3, #4
 8005e70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	60d3      	str	r3, [r2, #12]
 8005e92:	e0ce      	b.n	8006032 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eaa:	d12c      	bne.n	8005f06 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	335d      	adds	r3, #93	; 0x5d
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eee:	f043 0302 	orr.w	r3, r3, #2
 8005ef2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 fc56 	bl	80097b0 <USB_HC_Halt>
 8005f04:	e095      	b.n	8006032 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d109      	bne.n	8005f30 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2320      	movs	r3, #32
 8005f2c:	6093      	str	r3, [r2, #8]
 8005f2e:	e080      	b.n	8006032 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d134      	bne.n	8005fb0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	440b      	add	r3, r1
 8005f74:	335d      	adds	r3, #93	; 0x5d
 8005f76:	2205      	movs	r2, #5
 8005f78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	2310      	movs	r3, #16
 8005f8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 fc01 	bl	80097b0 <USB_HC_Halt>
 8005fae:	e040      	b.n	8006032 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d134      	bne.n	8006032 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f043 0302 	orr.w	r3, r3, #2
 8005fe6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 fbdc 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	461a      	mov	r2, r3
 8006006:	2310      	movs	r3, #16
 8006008:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	440b      	add	r3, r1
 8006018:	335d      	adds	r3, #93	; 0x5d
 800601a:	2208      	movs	r2, #8
 800601c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602a:	461a      	mov	r2, r3
 800602c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006030:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006048:	d122      	bne.n	8006090 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	440a      	add	r2, r1
 8006060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006064:	f043 0302 	orr.w	r3, r3, #2
 8006068:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f003 fb9b 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	461a      	mov	r2, r3
 8006088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800608e:	e2dc      	b.n	800664a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	f040 80dd 	bne.w	8006262 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335d      	adds	r3, #93	; 0x5d
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3358      	adds	r3, #88	; 0x58
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	440b      	add	r3, r1
 80060f0:	333f      	adds	r3, #63	; 0x3f
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	333f      	adds	r3, #63	; 0x3f
 8006108:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800610a:	2b02      	cmp	r3, #2
 800610c:	d121      	bne.n	8006152 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f003 fb39 	bl	80097b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	461a      	mov	r2, r3
 800614c:	2310      	movs	r3, #16
 800614e:	6093      	str	r3, [r2, #8]
 8006150:	e070      	b.n	8006234 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	333f      	adds	r3, #63	; 0x3f
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d12a      	bne.n	80061be <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006186:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	335c      	adds	r3, #92	; 0x5c
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	b2d8      	uxtb	r0, r3
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	335c      	adds	r3, #92	; 0x5c
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	4601      	mov	r1, r0
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f008 fa82 	bl	800e6c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80061bc:	e03a      	b.n	8006234 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	440b      	add	r3, r1
 80061cc:	333f      	adds	r3, #63	; 0x3f
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d12f      	bne.n	8006234 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	440b      	add	r3, r1
 80061e2:	335c      	adds	r3, #92	; 0x5c
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	3350      	adds	r3, #80	; 0x50
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f083 0301 	eor.w	r3, r3, #1
 80061fe:	b2d8      	uxtb	r0, r3
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	440b      	add	r3, r1
 800620e:	3350      	adds	r3, #80	; 0x50
 8006210:	4602      	mov	r2, r0
 8006212:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	b2d8      	uxtb	r0, r3
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	335c      	adds	r3, #92	; 0x5c
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4601      	mov	r1, r0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f008 fa46 	bl	800e6c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	440b      	add	r3, r1
 8006242:	3350      	adds	r3, #80	; 0x50
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f083 0301 	eor.w	r3, r3, #1
 800624a:	b2d8      	uxtb	r0, r3
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	3350      	adds	r3, #80	; 0x50
 800625c:	4602      	mov	r2, r0
 800625e:	701a      	strb	r2, [r3, #0]
}
 8006260:	e1f3      	b.n	800664a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	f040 811a 	bne.w	80064ae <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006294:	f023 0302 	bic.w	r3, r3, #2
 8006298:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	440b      	add	r3, r1
 80062a8:	335d      	adds	r3, #93	; 0x5d
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10a      	bne.n	80062c6 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	440b      	add	r3, r1
 80062be:	335c      	adds	r3, #92	; 0x5c
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e0d9      	b.n	800647a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	440b      	add	r3, r1
 80062d4:	335d      	adds	r3, #93	; 0x5d
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d10a      	bne.n	80062f2 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	440b      	add	r3, r1
 80062ea:	335c      	adds	r3, #92	; 0x5c
 80062ec:	2205      	movs	r2, #5
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e0c3      	b.n	800647a <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	440b      	add	r3, r1
 8006300:	335d      	adds	r3, #93	; 0x5d
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b06      	cmp	r3, #6
 8006306:	d00a      	beq.n	800631e <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	440b      	add	r3, r1
 8006316:	335d      	adds	r3, #93	; 0x5d
 8006318:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800631a:	2b08      	cmp	r3, #8
 800631c:	d156      	bne.n	80063cc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	440b      	add	r3, r1
 800632c:	3358      	adds	r3, #88	; 0x58
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4403      	add	r3, r0
 8006340:	3358      	adds	r3, #88	; 0x58
 8006342:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	3358      	adds	r3, #88	; 0x58
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d914      	bls.n	8006384 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	440b      	add	r3, r1
 8006368:	3358      	adds	r3, #88	; 0x58
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	440b      	add	r3, r1
 800637c:	335c      	adds	r3, #92	; 0x5c
 800637e:	2204      	movs	r2, #4
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e009      	b.n	8006398 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	440b      	add	r3, r1
 8006392:	335c      	adds	r3, #92	; 0x5c
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e056      	b.n	800647a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	440b      	add	r3, r1
 80063da:	335d      	adds	r3, #93	; 0x5d
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d123      	bne.n	800642a <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	440b      	add	r3, r1
 80063f0:	335c      	adds	r3, #92	; 0x5c
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800640c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006414:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e027      	b.n	800647a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	440b      	add	r3, r1
 8006438:	335d      	adds	r3, #93	; 0x5d
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b07      	cmp	r3, #7
 800643e:	d11c      	bne.n	800647a <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	3358      	adds	r3, #88	; 0x58
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4403      	add	r3, r0
 8006462:	3358      	adds	r3, #88	; 0x58
 8006464:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	335c      	adds	r3, #92	; 0x5c
 8006476:	2204      	movs	r2, #4
 8006478:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	461a      	mov	r2, r3
 8006488:	2302      	movs	r3, #2
 800648a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	b2d8      	uxtb	r0, r3
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	440b      	add	r3, r1
 800649e:	335c      	adds	r3, #92	; 0x5c
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	4601      	mov	r1, r0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f008 f90a 	bl	800e6c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80064ac:	e0cd      	b.n	800664a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d13e      	bne.n	8006542 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3358      	adds	r3, #88	; 0x58
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4403      	add	r3, r0
 8006506:	3358      	adds	r3, #88	; 0x58
 8006508:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	440b      	add	r3, r1
 8006518:	335d      	adds	r3, #93	; 0x5d
 800651a:	2206      	movs	r2, #6
 800651c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f003 f941 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	6093      	str	r3, [r2, #8]
}
 8006540:	e083      	b.n	800664a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d178      	bne.n	800664a <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	440b      	add	r3, r1
 8006566:	333f      	adds	r3, #63	; 0x3f
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d122      	bne.n	80065b4 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	440b      	add	r3, r1
 800657c:	3358      	adds	r3, #88	; 0x58
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	440a      	add	r2, r1
 8006598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f003 f8ff 	bl	80097b0 <USB_HC_Halt>
 80065b2:	e041      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	440b      	add	r3, r1
 80065c2:	333f      	adds	r3, #63	; 0x3f
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	440b      	add	r3, r1
 80065d8:	333f      	adds	r3, #63	; 0x3f
 80065da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d12b      	bne.n	8006638 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	440b      	add	r3, r1
 80065ee:	3358      	adds	r3, #88	; 0x58
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	440b      	add	r3, r1
 8006602:	335d      	adds	r3, #93	; 0x5d
 8006604:	2203      	movs	r2, #3
 8006606:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	440a      	add	r2, r1
 800661e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006622:	f043 0302 	orr.w	r3, r3, #2
 8006626:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f003 f8bc 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4413      	add	r3, r2
 8006640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006644:	461a      	mov	r2, r3
 8006646:	2310      	movs	r3, #16
 8006648:	6093      	str	r3, [r2, #8]
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d119      	bne.n	80066b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	2304      	movs	r3, #4
 8006692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80066b4:	e31e      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d141      	bne.n	8006750 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	461a      	mov	r2, r3
 80066da:	2320      	movs	r3, #32
 80066dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	440b      	add	r3, r1
 80066ec:	333d      	adds	r3, #61	; 0x3d
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f040 82ff 	bne.w	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	440b      	add	r3, r1
 8006704:	333d      	adds	r3, #61	; 0x3d
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	440b      	add	r3, r1
 8006718:	335c      	adds	r3, #92	; 0x5c
 800671a:	2202      	movs	r2, #2
 800671c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	440a      	add	r2, r1
 8006734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006738:	f043 0302 	orr.w	r3, r3, #2
 800673c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f003 f831 	bl	80097b0 <USB_HC_Halt>
}
 800674e:	e2d1      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d13f      	bne.n	80067e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	440b      	add	r3, r1
 8006774:	335d      	adds	r3, #93	; 0x5d
 8006776:	2204      	movs	r2, #4
 8006778:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	440b      	add	r3, r1
 8006788:	333d      	adds	r3, #61	; 0x3d
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	440b      	add	r3, r1
 800679c:	3358      	adds	r3, #88	; 0x58
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 ffef 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	461a      	mov	r2, r3
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	6093      	str	r3, [r2, #8]
}
 80067e4:	e286      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d122      	bne.n	8006844 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	440a      	add	r2, r1
 8006814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006818:	f043 0302 	orr.w	r3, r3, #2
 800681c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f002 ffc1 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	461a      	mov	r2, r3
 800683c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006840:	6093      	str	r3, [r2, #8]
}
 8006842:	e257      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b01      	cmp	r3, #1
 8006858:	d135      	bne.n	80068c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	440b      	add	r3, r1
 8006868:	3358      	adds	r3, #88	; 0x58
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	440a      	add	r2, r1
 8006884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006888:	f043 0302 	orr.w	r3, r3, #2
 800688c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f002 ff89 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	2301      	movs	r3, #1
 80068ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	440b      	add	r3, r1
 80068be:	335d      	adds	r3, #93	; 0x5d
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
}
 80068c4:	e216      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d12b      	bne.n	8006934 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e8:	461a      	mov	r2, r3
 80068ea:	2308      	movs	r3, #8
 80068ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006908:	f043 0302 	orr.w	r3, r3, #2
 800690c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f002 ff49 	bl	80097b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	440b      	add	r3, r1
 800692c:	335d      	adds	r3, #93	; 0x5d
 800692e:	2205      	movs	r2, #5
 8006930:	701a      	strb	r2, [r3, #0]
}
 8006932:	e1df      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b10      	cmp	r3, #16
 8006948:	d135      	bne.n	80069b6 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	440b      	add	r3, r1
 8006958:	3358      	adds	r3, #88	; 0x58
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	440b      	add	r3, r1
 800696c:	335d      	adds	r3, #93	; 0x5d
 800696e:	2203      	movs	r2, #3
 8006970:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	440a      	add	r2, r1
 8006988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	4611      	mov	r1, r2
 800699c:	4618      	mov	r0, r3
 800699e:	f002 ff07 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	461a      	mov	r2, r3
 80069b0:	2310      	movs	r3, #16
 80069b2:	6093      	str	r3, [r2, #8]
}
 80069b4:	e19e      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d12b      	bne.n	8006a24 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 feda 	bl	80097b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	440b      	add	r3, r1
 8006a0a:	335d      	adds	r3, #93	; 0x5d
 8006a0c:	2206      	movs	r2, #6
 8006a0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	6093      	str	r3, [r2, #8]
}
 8006a22:	e167      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3a:	d135      	bne.n	8006aa8 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a56:	f043 0302 	orr.w	r3, r3, #2
 8006a5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 fea2 	bl	80097b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2310      	movs	r3, #16
 8006a7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	335d      	adds	r3, #93	; 0x5d
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	701a      	strb	r2, [r3, #0]
}
 8006aa6:	e125      	b.n	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	f040 811a 	bne.w	8006cf4 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f023 0302 	bic.w	r3, r3, #2
 8006ade:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	440b      	add	r3, r1
 8006aee:	335d      	adds	r3, #93	; 0x5d
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d137      	bne.n	8006b66 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	440b      	add	r3, r1
 8006b04:	335c      	adds	r3, #92	; 0x5c
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	440b      	add	r3, r1
 8006b18:	333f      	adds	r3, #63	; 0x3f
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d00b      	beq.n	8006b38 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	440b      	add	r3, r1
 8006b2e:	333f      	adds	r3, #63	; 0x3f
 8006b30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	f040 80c5 	bne.w	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	440b      	add	r3, r1
 8006b46:	3351      	adds	r3, #81	; 0x51
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f083 0301 	eor.w	r3, r3, #1
 8006b4e:	b2d8      	uxtb	r0, r3
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3351      	adds	r3, #81	; 0x51
 8006b60:	4602      	mov	r2, r0
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	e0ad      	b.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	440b      	add	r3, r1
 8006b74:	335d      	adds	r3, #93	; 0x5d
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d10a      	bne.n	8006b92 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	440b      	add	r3, r1
 8006b8a:	335c      	adds	r3, #92	; 0x5c
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	e097      	b.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	335d      	adds	r3, #93	; 0x5d
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d10a      	bne.n	8006bbe <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	440b      	add	r3, r1
 8006bb6:	335c      	adds	r3, #92	; 0x5c
 8006bb8:	2202      	movs	r2, #2
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e081      	b.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	440b      	add	r3, r1
 8006bcc:	335d      	adds	r3, #93	; 0x5d
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d10a      	bne.n	8006bea <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	440b      	add	r3, r1
 8006be2:	335c      	adds	r3, #92	; 0x5c
 8006be4:	2205      	movs	r2, #5
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	e06b      	b.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	440b      	add	r3, r1
 8006bf8:	335d      	adds	r3, #93	; 0x5d
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b06      	cmp	r3, #6
 8006bfe:	d00a      	beq.n	8006c16 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	440b      	add	r3, r1
 8006c0e:	335d      	adds	r3, #93	; 0x5d
 8006c10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d155      	bne.n	8006cc2 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	440b      	add	r3, r1
 8006c24:	3358      	adds	r3, #88	; 0x58
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4403      	add	r3, r0
 8006c38:	3358      	adds	r3, #88	; 0x58
 8006c3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	440b      	add	r3, r1
 8006c4a:	3358      	adds	r3, #88	; 0x58
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d914      	bls.n	8006c7c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	440b      	add	r3, r1
 8006c60:	3358      	adds	r3, #88	; 0x58
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	440b      	add	r3, r1
 8006c74:	335c      	adds	r3, #92	; 0x5c
 8006c76:	2204      	movs	r2, #4
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e009      	b.n	8006c90 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	440b      	add	r3, r1
 8006c8a:	335c      	adds	r3, #92	; 0x5c
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	b2d8      	uxtb	r0, r3
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	440b      	add	r3, r1
 8006ce6:	335c      	adds	r3, #92	; 0x5c
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	4601      	mov	r1, r0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f007 fce6 	bl	800e6c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006cf4:	bf00      	nop
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	0c5b      	lsrs	r3, r3, #17
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	091b      	lsrs	r3, r3, #4
 8006d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d30:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d004      	beq.n	8006d42 <HCD_RXQLVL_IRQHandler+0x46>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	f000 8082 	beq.w	8006e44 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006d40:	e083      	b.n	8006e4a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d07f      	beq.n	8006e48 <HCD_RXQLVL_IRQHandler+0x14c>
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	440b      	add	r3, r1
 8006d56:	3344      	adds	r3, #68	; 0x44
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d074      	beq.n	8006e48 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	440b      	add	r3, r1
 8006d70:	3344      	adds	r3, #68	; 0x44
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	b292      	uxth	r2, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f002 f99d 	bl	80090b8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3344      	adds	r3, #68	; 0x44
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	18d1      	adds	r1, r2, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4403      	add	r3, r0
 8006da2:	3344      	adds	r3, #68	; 0x44
 8006da4:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	440b      	add	r3, r1
 8006db4:	334c      	adds	r3, #76	; 0x4c
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	18d1      	adds	r1, r2, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4403      	add	r3, r0
 8006dca:	334c      	adds	r3, #76	; 0x4c
 8006dcc:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <HCD_RXQLVL_IRQHandler+0x158>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d031      	beq.n	8006e48 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dfa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	461a      	mov	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	440b      	add	r3, r1
 8006e24:	3350      	adds	r3, #80	; 0x50
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f083 0301 	eor.w	r3, r3, #1
 8006e2c:	b2d8      	uxtb	r0, r3
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3350      	adds	r3, #80	; 0x50
 8006e3e:	4602      	mov	r2, r0
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e001      	b.n	8006e48 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006e44:	bf00      	nop
 8006e46:	e000      	b.n	8006e4a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8006e48:	bf00      	nop
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3728      	adds	r7, #40	; 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	1ff80000 	.word	0x1ff80000

08006e58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d10b      	bne.n	8006ea8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d102      	bne.n	8006ea0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f007 fbf4 	bl	800e688 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f043 0302 	orr.w	r3, r3, #2
 8006ea6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d132      	bne.n	8006f18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f043 0308 	orr.w	r3, r3, #8
 8006eb8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d126      	bne.n	8006f12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d113      	bne.n	8006ef4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed6:	d106      	bne.n	8006ee6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2102      	movs	r1, #2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 f9e2 	bl	80092a8 <USB_InitFSLSPClkSel>
 8006ee4:	e011      	b.n	8006f0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f002 f9db 	bl	80092a8 <USB_InitFSLSPClkSel>
 8006ef2:	e00a      	b.n	8006f0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d106      	bne.n	8006f0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	461a      	mov	r2, r3
 8006f04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006f08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f007 fbe5 	bl	800e6da <HAL_HCD_PortEnabled_Callback>
 8006f10:	e002      	b.n	8006f18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f007 fbef 	bl	800e6f6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d103      	bne.n	8006f2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f043 0320 	orr.w	r3, r3, #32
 8006f28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f30:	461a      	mov	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6013      	str	r3, [r2, #0]
}
 8006f36:	bf00      	nop
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006f44:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	420e0020 	.word	0x420e0020

08006f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e304      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8087 	beq.w	8007086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f78:	4b92      	ldr	r3, [pc, #584]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f003 030c 	and.w	r3, r3, #12
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d00c      	beq.n	8006f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f84:	4b8f      	ldr	r3, [pc, #572]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 030c 	and.w	r3, r3, #12
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d112      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x5e>
 8006f90:	4b8c      	ldr	r3, [pc, #560]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d10b      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9e:	4b89      	ldr	r3, [pc, #548]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d06c      	beq.n	8007084 <HAL_RCC_OscConfig+0x12c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d168      	bne.n	8007084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e2de      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d106      	bne.n	8006fce <HAL_RCC_OscConfig+0x76>
 8006fc0:	4b80      	ldr	r3, [pc, #512]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a7f      	ldr	r2, [pc, #508]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e02e      	b.n	800702c <HAL_RCC_OscConfig+0xd4>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x98>
 8006fd6:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7a      	ldr	r2, [pc, #488]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b78      	ldr	r3, [pc, #480]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a77      	ldr	r2, [pc, #476]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e01d      	b.n	800702c <HAL_RCC_OscConfig+0xd4>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCC_OscConfig+0xbc>
 8006ffa:	4b72      	ldr	r3, [pc, #456]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a71      	ldr	r2, [pc, #452]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4b6f      	ldr	r3, [pc, #444]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a6e      	ldr	r2, [pc, #440]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00b      	b.n	800702c <HAL_RCC_OscConfig+0xd4>
 8007014:	4b6b      	ldr	r3, [pc, #428]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6a      	ldr	r2, [pc, #424]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 800701a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a67      	ldr	r2, [pc, #412]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800702a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7fd fa60 	bl	80044f8 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800703c:	f7fd fa5c 	bl	80044f8 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e292      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b5d      	ldr	r3, [pc, #372]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0xe4>
 800705a:	e014      	b.n	8007086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705c:	f7fd fa4c 	bl	80044f8 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007064:	f7fd fa48 	bl	80044f8 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e27e      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007076:	4b53      	ldr	r3, [pc, #332]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x10c>
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d063      	beq.n	800715a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007092:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800709e:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d11c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x18c>
 80070aa:	4b46      	ldr	r3, [pc, #280]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d116      	bne.n	80070e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b6:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_RCC_OscConfig+0x176>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d001      	beq.n	80070ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e252      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b3d      	ldr	r3, [pc, #244]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4939      	ldr	r1, [pc, #228]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070e2:	e03a      	b.n	800715a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ec:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <HAL_RCC_OscConfig+0x270>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f2:	f7fd fa01 	bl	80044f8 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fd f9fd 	bl	80044f8 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e233      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710c:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	4b2a      	ldr	r3, [pc, #168]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4927      	ldr	r1, [pc, #156]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	600b      	str	r3, [r1, #0]
 800712c:	e015      	b.n	800715a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <HAL_RCC_OscConfig+0x270>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7fd f9e0 	bl	80044f8 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800713c:	f7fd f9dc 	bl	80044f8 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e212      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800714e:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d03a      	beq.n	80071dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d019      	beq.n	80071a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800716e:	4b17      	ldr	r3, [pc, #92]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007174:	f7fd f9c0 	bl	80044f8 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717c:	f7fd f9bc 	bl	80044f8 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e1f2      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_RCC_OscConfig+0x26c>)
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800719a:	2001      	movs	r0, #1
 800719c:	f000 fc02 	bl	80079a4 <RCC_Delay>
 80071a0:	e01c      	b.n	80071dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071a8:	f7fd f9a6 	bl	80044f8 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ae:	e00f      	b.n	80071d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b0:	f7fd f9a2 	bl	80044f8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d908      	bls.n	80071d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e1d8      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
 80071c2:	bf00      	nop
 80071c4:	40021000 	.word	0x40021000
 80071c8:	42420000 	.word	0x42420000
 80071cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d0:	4b9b      	ldr	r3, [pc, #620]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e9      	bne.n	80071b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80a6 	beq.w	8007336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ee:	4b94      	ldr	r3, [pc, #592]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10d      	bne.n	8007216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071fa:	4b91      	ldr	r3, [pc, #580]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	4a90      	ldr	r2, [pc, #576]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007204:	61d3      	str	r3, [r2, #28]
 8007206:	4b8e      	ldr	r3, [pc, #568]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007216:	4b8b      	ldr	r3, [pc, #556]	; (8007444 <HAL_RCC_OscConfig+0x4ec>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d118      	bne.n	8007254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007222:	4b88      	ldr	r3, [pc, #544]	; (8007444 <HAL_RCC_OscConfig+0x4ec>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a87      	ldr	r2, [pc, #540]	; (8007444 <HAL_RCC_OscConfig+0x4ec>)
 8007228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800722e:	f7fd f963 	bl	80044f8 <HAL_GetTick>
 8007232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007236:	f7fd f95f 	bl	80044f8 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b64      	cmp	r3, #100	; 0x64
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e195      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007248:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <HAL_RCC_OscConfig+0x4ec>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0f0      	beq.n	8007236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <HAL_RCC_OscConfig+0x312>
 800725c:	4b78      	ldr	r3, [pc, #480]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	4a77      	ldr	r2, [pc, #476]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	6213      	str	r3, [r2, #32]
 8007268:	e02d      	b.n	80072c6 <HAL_RCC_OscConfig+0x36e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10c      	bne.n	800728c <HAL_RCC_OscConfig+0x334>
 8007272:	4b73      	ldr	r3, [pc, #460]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	4a72      	ldr	r2, [pc, #456]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	6213      	str	r3, [r2, #32]
 800727e:	4b70      	ldr	r3, [pc, #448]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	4a6f      	ldr	r2, [pc, #444]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007284:	f023 0304 	bic.w	r3, r3, #4
 8007288:	6213      	str	r3, [r2, #32]
 800728a:	e01c      	b.n	80072c6 <HAL_RCC_OscConfig+0x36e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b05      	cmp	r3, #5
 8007292:	d10c      	bne.n	80072ae <HAL_RCC_OscConfig+0x356>
 8007294:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	4a69      	ldr	r2, [pc, #420]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 800729a:	f043 0304 	orr.w	r3, r3, #4
 800729e:	6213      	str	r3, [r2, #32]
 80072a0:	4b67      	ldr	r3, [pc, #412]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	4a66      	ldr	r2, [pc, #408]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	6213      	str	r3, [r2, #32]
 80072ac:	e00b      	b.n	80072c6 <HAL_RCC_OscConfig+0x36e>
 80072ae:	4b64      	ldr	r3, [pc, #400]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	4a63      	ldr	r2, [pc, #396]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	6213      	str	r3, [r2, #32]
 80072ba:	4b61      	ldr	r3, [pc, #388]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	4a60      	ldr	r2, [pc, #384]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d015      	beq.n	80072fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ce:	f7fd f913 	bl	80044f8 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d4:	e00a      	b.n	80072ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d6:	f7fd f90f 	bl	80044f8 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e143      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ec:	4b54      	ldr	r3, [pc, #336]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0ee      	beq.n	80072d6 <HAL_RCC_OscConfig+0x37e>
 80072f8:	e014      	b.n	8007324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072fa:	f7fd f8fd 	bl	80044f8 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007300:	e00a      	b.n	8007318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fd f8f9 	bl	80044f8 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e12d      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007318:	4b49      	ldr	r3, [pc, #292]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1ee      	bne.n	8007302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007324:	7dfb      	ldrb	r3, [r7, #23]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d105      	bne.n	8007336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732a:	4b45      	ldr	r3, [pc, #276]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	4a44      	ldr	r2, [pc, #272]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007334:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 808c 	beq.w	8007458 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007340:	4b3f      	ldr	r3, [pc, #252]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734c:	d10e      	bne.n	800736c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800734e:	4b3c      	ldr	r3, [pc, #240]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007356:	2b08      	cmp	r3, #8
 8007358:	d108      	bne.n	800736c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800735a:	4b39      	ldr	r3, [pc, #228]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d101      	bne.n	800736c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e103      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2b02      	cmp	r3, #2
 8007372:	d14e      	bne.n	8007412 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007374:	4b32      	ldr	r3, [pc, #200]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007380:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0ef      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007394:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <HAL_RCC_OscConfig+0x4f0>)
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739a:	f7fd f8ad 	bl	80044f8 <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073a2:	f7fd f8a9 	bl	80044f8 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b64      	cmp	r3, #100	; 0x64
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e0df      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80073b4:	4b22      	ldr	r3, [pc, #136]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f0      	bne.n	80073a2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80073c0:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	491c      	ldr	r1, [pc, #112]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80073d2:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	4918      	ldr	r1, [pc, #96]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80073e4:	4b18      	ldr	r3, [pc, #96]	; (8007448 <HAL_RCC_OscConfig+0x4f0>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ea:	f7fd f885 	bl	80044f8 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073f2:	f7fd f881 	bl	80044f8 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b64      	cmp	r3, #100	; 0x64
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e0b7      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0f0      	beq.n	80073f2 <HAL_RCC_OscConfig+0x49a>
 8007410:	e022      	b.n	8007458 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <HAL_RCC_OscConfig+0x4e8>)
 8007418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800741e:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <HAL_RCC_OscConfig+0x4f0>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007424:	f7fd f868 	bl	80044f8 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800742a:	e00f      	b.n	800744c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800742c:	f7fd f864 	bl	80044f8 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b64      	cmp	r3, #100	; 0x64
 8007438:	d908      	bls.n	800744c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e09a      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
 800743e:	bf00      	nop
 8007440:	40021000 	.word	0x40021000
 8007444:	40007000 	.word	0x40007000
 8007448:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800744c:	4b4b      	ldr	r3, [pc, #300]	; (800757c <HAL_RCC_OscConfig+0x624>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e9      	bne.n	800742c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8088 	beq.w	8007572 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007462:	4b46      	ldr	r3, [pc, #280]	; (800757c <HAL_RCC_OscConfig+0x624>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b08      	cmp	r3, #8
 800746c:	d068      	beq.n	8007540 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d14d      	bne.n	8007512 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007476:	4b42      	ldr	r3, [pc, #264]	; (8007580 <HAL_RCC_OscConfig+0x628>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747c:	f7fd f83c 	bl	80044f8 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007484:	f7fd f838 	bl	80044f8 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e06e      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <HAL_RCC_OscConfig+0x624>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074aa:	d10f      	bne.n	80074cc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80074ac:	4b33      	ldr	r3, [pc, #204]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4931      	ldr	r1, [pc, #196]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074ba:	4b30      	ldr	r3, [pc, #192]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f023 020f 	bic.w	r2, r3, #15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	492d      	ldr	r1, [pc, #180]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074cc:	4b2b      	ldr	r3, [pc, #172]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	430b      	orrs	r3, r1
 80074de:	4927      	ldr	r1, [pc, #156]	; (800757c <HAL_RCC_OscConfig+0x624>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e4:	4b26      	ldr	r3, [pc, #152]	; (8007580 <HAL_RCC_OscConfig+0x628>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ea:	f7fd f805 	bl	80044f8 <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f2:	f7fd f801 	bl	80044f8 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e037      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007504:	4b1d      	ldr	r3, [pc, #116]	; (800757c <HAL_RCC_OscConfig+0x624>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x59a>
 8007510:	e02f      	b.n	8007572 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <HAL_RCC_OscConfig+0x628>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007518:	f7fc ffee 	bl	80044f8 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007520:	f7fc ffea 	bl	80044f8 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e020      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <HAL_RCC_OscConfig+0x624>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x5c8>
 800753e:	e018      	b.n	8007572 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e013      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <HAL_RCC_OscConfig+0x624>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	429a      	cmp	r2, r3
 800755e:	d106      	bne.n	800756e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40021000 	.word	0x40021000
 8007580:	42420060 	.word	0x42420060

08007584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e0d0      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007598:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d910      	bls.n	80075c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b67      	ldr	r3, [pc, #412]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 0207 	bic.w	r2, r3, #7
 80075ae:	4965      	ldr	r1, [pc, #404]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b6:	4b63      	ldr	r3, [pc, #396]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d001      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0b8      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d020      	beq.n	8007616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e0:	4b59      	ldr	r3, [pc, #356]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4a58      	ldr	r2, [pc, #352]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80075ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f8:	4b53      	ldr	r3, [pc, #332]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4a52      	ldr	r2, [pc, #328]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007604:	4b50      	ldr	r3, [pc, #320]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	494d      	ldr	r1, [pc, #308]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	4313      	orrs	r3, r2
 8007614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d040      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	4b47      	ldr	r3, [pc, #284]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d115      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e07f      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d107      	bne.n	8007652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007642:	4b41      	ldr	r3, [pc, #260]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e073      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007652:	4b3d      	ldr	r3, [pc, #244]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e06b      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007662:	4b39      	ldr	r3, [pc, #228]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f023 0203 	bic.w	r2, r3, #3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	4936      	ldr	r1, [pc, #216]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	4313      	orrs	r3, r2
 8007672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007674:	f7fc ff40 	bl	80044f8 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	e00a      	b.n	8007692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767c:	f7fc ff3c 	bl	80044f8 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e053      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f003 020c 	and.w	r2, r3, #12
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d1eb      	bne.n	800767c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076a4:	4b27      	ldr	r3, [pc, #156]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d210      	bcs.n	80076d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f023 0207 	bic.w	r2, r3, #7
 80076ba:	4922      	ldr	r1, [pc, #136]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c2:	4b20      	ldr	r3, [pc, #128]	; (8007744 <HAL_RCC_ClockConfig+0x1c0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d001      	beq.n	80076d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e032      	b.n	800773a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e0:	4b19      	ldr	r3, [pc, #100]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4916      	ldr	r1, [pc, #88]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	490e      	ldr	r1, [pc, #56]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 800770e:	4313      	orrs	r3, r2
 8007710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007712:	f000 f859 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8007716:	4602      	mov	r2, r0
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	490a      	ldr	r1, [pc, #40]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007724:	5ccb      	ldrb	r3, [r1, r3]
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	4a09      	ldr	r2, [pc, #36]	; (8007750 <HAL_RCC_ClockConfig+0x1cc>)
 800772c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <HAL_RCC_ClockConfig+0x1d0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc fe9e 	bl	8004474 <HAL_InitTick>

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40022000 	.word	0x40022000
 8007748:	40021000 	.word	0x40021000
 800774c:	0802ef30 	.word	0x0802ef30
 8007750:	20000100 	.word	0x20000100
 8007754:	20000104 	.word	0x20000104

08007758 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8007764:	f107 0318 	add.w	r3, r7, #24
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	609a      	str	r2, [r3, #8]
 8007770:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8007772:	2302      	movs	r3, #2
 8007774:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007776:	2303      	movs	r3, #3
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800777a:	2300      	movs	r3, #0
 800777c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800777e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007782:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <HAL_RCC_MCOConfig+0x68>)
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	4a0d      	ldr	r2, [pc, #52]	; (80077c0 <HAL_RCC_MCOConfig+0x68>)
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	6193      	str	r3, [r2, #24]
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <HAL_RCC_MCOConfig+0x68>)
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800779c:	f107 0318 	add.w	r3, r7, #24
 80077a0:	4619      	mov	r1, r3
 80077a2:	4808      	ldr	r0, [pc, #32]	; (80077c4 <HAL_RCC_MCOConfig+0x6c>)
 80077a4:	f7fd fd68 	bl	8005278 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <HAL_RCC_MCOConfig+0x68>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80077b0:	4903      	ldr	r1, [pc, #12]	; (80077c0 <HAL_RCC_MCOConfig+0x68>)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	604b      	str	r3, [r1, #4]
}
 80077b8:	bf00      	nop
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40021000 	.word	0x40021000
 80077c4:	40010800 	.word	0x40010800

080077c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ca:	b091      	sub	sp, #68	; 0x44
 80077cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80077ce:	4b56      	ldr	r3, [pc, #344]	; (8007928 <HAL_RCC_GetSysClockFreq+0x160>)
 80077d0:	f107 0414 	add.w	r4, r7, #20
 80077d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077d6:	c407      	stmia	r4!, {r0, r1, r2}
 80077d8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80077da:	4b54      	ldr	r3, [pc, #336]	; (800792c <HAL_RCC_GetSysClockFreq+0x164>)
 80077dc:	1d3c      	adds	r4, r7, #4
 80077de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
 80077e8:	2300      	movs	r3, #0
 80077ea:	633b      	str	r3, [r7, #48]	; 0x30
 80077ec:	2300      	movs	r3, #0
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f0:	2300      	movs	r3, #0
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fc:	2300      	movs	r3, #0
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007800:	4b4b      	ldr	r3, [pc, #300]	; (8007930 <HAL_RCC_GetSysClockFreq+0x168>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b04      	cmp	r3, #4
 800780e:	d002      	beq.n	8007816 <HAL_RCC_GetSysClockFreq+0x4e>
 8007810:	2b08      	cmp	r3, #8
 8007812:	d003      	beq.n	800781c <HAL_RCC_GetSysClockFreq+0x54>
 8007814:	e080      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007816:	4b47      	ldr	r3, [pc, #284]	; (8007934 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007818:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800781a:	e080      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	0c9b      	lsrs	r3, r3, #18
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007828:	4413      	add	r3, r2
 800782a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d066      	beq.n	8007908 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800783a:	4b3d      	ldr	r3, [pc, #244]	; (8007930 <HAL_RCC_GetSysClockFreq+0x168>)
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007846:	4413      	add	r3, r2
 8007848:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800784e:	4b38      	ldr	r3, [pc, #224]	; (8007930 <HAL_RCC_GetSysClockFreq+0x168>)
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d044      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800785a:	4b35      	ldr	r3, [pc, #212]	; (8007930 <HAL_RCC_GetSysClockFreq+0x168>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	3301      	adds	r3, #1
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007868:	4b31      	ldr	r3, [pc, #196]	; (8007930 <HAL_RCC_GetSysClockFreq+0x168>)
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	3302      	adds	r3, #2
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	4618      	mov	r0, r3
 800787a:	f04f 0100 	mov.w	r1, #0
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	461a      	mov	r2, r3
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	fb02 f501 	mul.w	r5, r2, r1
 800788a:	fb00 f403 	mul.w	r4, r0, r3
 800788e:	442c      	add	r4, r5
 8007890:	fba0 2302 	umull	r2, r3, r0, r2
 8007894:	18e1      	adds	r1, r4, r3
 8007896:	460b      	mov	r3, r1
 8007898:	4926      	ldr	r1, [pc, #152]	; (8007934 <HAL_RCC_GetSysClockFreq+0x16c>)
 800789a:	fb01 f003 	mul.w	r0, r1, r3
 800789e:	2100      	movs	r1, #0
 80078a0:	fb01 f102 	mul.w	r1, r1, r2
 80078a4:	4401      	add	r1, r0
 80078a6:	4823      	ldr	r0, [pc, #140]	; (8007934 <HAL_RCC_GetSysClockFreq+0x16c>)
 80078a8:	fba2 4500 	umull	r4, r5, r2, r0
 80078ac:	194b      	adds	r3, r1, r5
 80078ae:	461d      	mov	r5, r3
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	4618      	mov	r0, r3
 80078b4:	f04f 0100 	mov.w	r1, #0
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	fb02 fc01 	mul.w	ip, r2, r1
 80078c4:	fb00 f603 	mul.w	r6, r0, r3
 80078c8:	4466      	add	r6, ip
 80078ca:	fba0 2302 	umull	r2, r3, r0, r2
 80078ce:	18f1      	adds	r1, r6, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f9 fcad 	bl	8001234 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4613      	mov	r3, r2
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e2:	e007      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	4a13      	ldr	r2, [pc, #76]	; (8007934 <HAL_RCC_GetSysClockFreq+0x16c>)
 80078e8:	fb02 f203 	mul.w	r2, r2, r3
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80078f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80078f8:	461a      	mov	r2, r3
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d108      	bne.n	8007912 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007906:	e004      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	4a0b      	ldr	r2, [pc, #44]	; (8007938 <HAL_RCC_GetSysClockFreq+0x170>)
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007916:	e002      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <HAL_RCC_GetSysClockFreq+0x174>)
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800791c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007920:	4618      	mov	r0, r3
 8007922:	3744      	adds	r7, #68	; 0x44
 8007924:	46bd      	mov	sp, r7
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	0801072c 	.word	0x0801072c
 800792c:	0801073c 	.word	0x0801073c
 8007930:	40021000 	.word	0x40021000
 8007934:	017d7840 	.word	0x017d7840
 8007938:	003d0900 	.word	0x003d0900
 800793c:	007a1200 	.word	0x007a1200

08007940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <HAL_RCC_GetHCLKFreq+0x10>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	20000100 	.word	0x20000100

08007954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007958:	f7ff fff2 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 800795c:	4602      	mov	r2, r0
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	0a1b      	lsrs	r3, r3, #8
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	4903      	ldr	r1, [pc, #12]	; (8007978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800796a:	5ccb      	ldrb	r3, [r1, r3]
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40021000 	.word	0x40021000
 8007978:	0802ef40 	.word	0x0802ef40

0800797c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007980:	f7ff ffde 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	0adb      	lsrs	r3, r3, #11
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4903      	ldr	r1, [pc, #12]	; (80079a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	0802ef40 	.word	0x0802ef40

080079a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <RCC_Delay+0x34>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <RCC_Delay+0x38>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	0a5b      	lsrs	r3, r3, #9
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80079c0:	bf00      	nop
  }
  while (Delay --);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1e5a      	subs	r2, r3, #1
 80079c6:	60fa      	str	r2, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f9      	bne.n	80079c0 <RCC_Delay+0x1c>
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr
 80079d8:	20000100 	.word	0x20000100
 80079dc:	10624dd3 	.word	0x10624dd3

080079e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d07d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007a00:	2300      	movs	r3, #0
 8007a02:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a04:	4b8b      	ldr	r3, [pc, #556]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a10:	4b88      	ldr	r3, [pc, #544]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	4a87      	ldr	r2, [pc, #540]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1a:	61d3      	str	r3, [r2, #28]
 8007a1c:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2c:	4b82      	ldr	r3, [pc, #520]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d118      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a38:	4b7f      	ldr	r3, [pc, #508]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7e      	ldr	r2, [pc, #504]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a44:	f7fc fd58 	bl	80044f8 <HAL_GetTick>
 8007a48:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a4a:	e008      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4c:	f7fc fd54 	bl	80044f8 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b64      	cmp	r3, #100	; 0x64
 8007a58:	d901      	bls.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e0e5      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a5e:	4b76      	ldr	r3, [pc, #472]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0f0      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a6a:	4b72      	ldr	r3, [pc, #456]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02e      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d027      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a88:	4b6a      	ldr	r3, [pc, #424]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a90:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a92:	4b6a      	ldr	r3, [pc, #424]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a98:	4b68      	ldr	r3, [pc, #416]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a9e:	4a65      	ldr	r2, [pc, #404]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d014      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aae:	f7fc fd23 	bl	80044f8 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab4:	e00a      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab6:	f7fc fd1f 	bl	80044f8 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e0ae      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007acc:	4b59      	ldr	r3, [pc, #356]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0ee      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ad8:	4b56      	ldr	r3, [pc, #344]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	4953      	ldr	r1, [pc, #332]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007aea:	7efb      	ldrb	r3, [r7, #27]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d105      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af0:	4b50      	ldr	r3, [pc, #320]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	4a4f      	ldr	r2, [pc, #316]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007afa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b08:	4b4a      	ldr	r3, [pc, #296]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4947      	ldr	r1, [pc, #284]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007b26:	4b43      	ldr	r3, [pc, #268]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	4940      	ldr	r1, [pc, #256]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8007b44:	4b3b      	ldr	r3, [pc, #236]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	4938      	ldr	r1, [pc, #224]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8007b56:	4b37      	ldr	r3, [pc, #220]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8007b62:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d148      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8007b78:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d138      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d001      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e042      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8007ba4:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4920      	ldr	r1, [pc, #128]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	491c      	ldr	r1, [pc, #112]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bce:	f7fc fc93 	bl	80044f8 <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bd4:	e008      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bd6:	f7fc fc8f 	bl	80044f8 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b64      	cmp	r3, #100	; 0x64
 8007be2:	d901      	bls.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e020      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007be8:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007bf4:	e009      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d001      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e00f      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c16:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	4904      	ldr	r1, [pc, #16]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40007000 	.word	0x40007000
 8007c3c:	42420440 	.word	0x42420440
 8007c40:	42420070 	.word	0x42420070

08007c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b093      	sub	sp, #76	; 0x4c
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8007c4c:	4ba8      	ldr	r3, [pc, #672]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8007c4e:	f107 0418 	add.w	r4, r7, #24
 8007c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c54:	c407      	stmia	r4!, {r0, r1, r2}
 8007c56:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8007c58:	4ba6      	ldr	r3, [pc, #664]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c5a:	f107 0408 	add.w	r4, r7, #8
 8007c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c68:	2300      	movs	r3, #0
 8007c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	2300      	movs	r3, #0
 8007c76:	633b      	str	r3, [r7, #48]	; 0x30
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c80:	2300      	movs	r3, #0
 8007c82:	643b      	str	r3, [r7, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	f200 8123 	bhi.w	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007e55 	.word	0x08007e55
 8007c98:	08007eb9 	.word	0x08007eb9
 8007c9c:	08007ed5 	.word	0x08007ed5
 8007ca0:	08007db3 	.word	0x08007db3
 8007ca4:	08007ed5 	.word	0x08007ed5
 8007ca8:	08007ed5 	.word	0x08007ed5
 8007cac:	08007ed5 	.word	0x08007ed5
 8007cb0:	08007e05 	.word	0x08007e05
 8007cb4:	08007ed5 	.word	0x08007ed5
 8007cb8:	08007ed5 	.word	0x08007ed5
 8007cbc:	08007ed5 	.word	0x08007ed5
 8007cc0:	08007ed5 	.word	0x08007ed5
 8007cc4:	08007ed5 	.word	0x08007ed5
 8007cc8:	08007ed5 	.word	0x08007ed5
 8007ccc:	08007ed5 	.word	0x08007ed5
 8007cd0:	08007cd5 	.word	0x08007cd5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007cd4:	4b88      	ldr	r3, [pc, #544]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007cda:	4b87      	ldr	r3, [pc, #540]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80f8 	beq.w	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	0c9b      	lsrs	r3, r3, #18
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d03e      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007d06:	4b7c      	ldr	r3, [pc, #496]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007d12:	4413      	add	r3, r2
 8007d14:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007d1a:	4b77      	ldr	r3, [pc, #476]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01c      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007d26:	4b74      	ldr	r3, [pc, #464]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	091b      	lsrs	r3, r3, #4
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	3301      	adds	r3, #1
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007d34:	4b70      	ldr	r3, [pc, #448]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	3302      	adds	r3, #2
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8007d42:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d4c:	fb02 f203 	mul.w	r2, r2, r3
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
 8007d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5e:	e007      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007d60:	4a66      	ldr	r2, [pc, #408]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007d70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007d74:	461a      	mov	r2, r3
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d108      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8007d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7e:	085b      	lsrs	r3, r3, #1
 8007d80:	647b      	str	r3, [r7, #68]	; 0x44
 8007d82:	e004      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	4a5e      	ldr	r2, [pc, #376]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8007d8e:	4b5a      	ldr	r3, [pc, #360]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d9a:	d102      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007da0:	e09a      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = (2 * pllclk) / 3;
 8007da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4a57      	ldr	r2, [pc, #348]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007da8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007db0:	e092      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8007db2:	4b51      	ldr	r3, [pc, #324]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8007dbe:	f7ff fd03 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8007dc2:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007dc4:	e08a      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8007dc6:	4b4c      	ldr	r3, [pc, #304]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8084 	beq.w	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007dd4:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	3301      	adds	r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8007de2:	4b45      	ldr	r3, [pc, #276]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	0b1b      	lsrs	r3, r3, #12
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	3302      	adds	r3, #2
 8007dee:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8007df0:	4a42      	ldr	r2, [pc, #264]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007e02:	e06b      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8007e04:	4b3c      	ldr	r3, [pc, #240]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8007e10:	f7ff fcda 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8007e14:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007e16:	e063      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8007e18:	4b37      	ldr	r3, [pc, #220]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d05d      	beq.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007e24:	4b34      	ldr	r3, [pc, #208]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	3301      	adds	r3, #1
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8007e32:	4b31      	ldr	r3, [pc, #196]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	0b1b      	lsrs	r3, r3, #12
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8007e40:	4a2e      	ldr	r2, [pc, #184]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007e52:	e045      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007e54:	4b28      	ldr	r3, [pc, #160]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e64:	d108      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8007e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e74:	643b      	str	r3, [r7, #64]	; 0x40
 8007e76:	e01e      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e82:	d109      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007e84:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8007e90:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
 8007e96:	e00e      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea2:	d11f      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007ea4:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d019      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        frequency = HSE_VALUE / 128U;
 8007eb0:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007eb2:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007eb4:	e016      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007eb6:	e015      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007eb8:	f7ff fd60 	bl	800797c <HAL_RCC_GetPCLK2Freq>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	0b9b      	lsrs	r3, r3, #14
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    default:
    {
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e006      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8007ee4:	bf00      	nop
    }
  }
  return (frequency);
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	374c      	adds	r7, #76	; 0x4c
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}
 8007ef0:	0801074c 	.word	0x0801074c
 8007ef4:	0801075c 	.word	0x0801075c
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	017d7840 	.word	0x017d7840
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	aaaaaaab 	.word	0xaaaaaaab
 8007f08:	0002faf0 	.word	0x0002faf0

08007f0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e084      	b.n	800802c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7c5b      	ldrb	r3, [r3, #17]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fc f83a 	bl	8003fac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f87a 	bl	8008038 <HAL_RTC_WaitForSynchro>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e06b      	b.n	800802c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f89c 	bl	8008092 <RTC_EnterInitMode>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2204      	movs	r2, #4
 8007f64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e060      	b.n	800802c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0207 	bic.w	r2, r2, #7
 8007f78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007f82:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <HAL_RTC_Init+0x128>)
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	4a2b      	ldr	r2, [pc, #172]	; (8008034 <HAL_RTC_Init+0x128>)
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <HAL_RTC_Init+0x128>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4926      	ldr	r1, [pc, #152]	; (8008034 <HAL_RTC_Init+0x128>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d003      	beq.n	8007fb2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	f7ff fe46 	bl	8007c44 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fb8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e030      	b.n	800802c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f023 010f 	bic.w	r1, r3, #15
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	0c1a      	lsrs	r2, r3, #16
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	041b      	lsls	r3, r3, #16
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	b291      	uxth	r1, r2
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f870 	bl	80080e2 <RTC_ExitInitMode>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2204      	movs	r2, #4
 800800c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e00c      	b.n	800802c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800802a:	2300      	movs	r3, #0
  }
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40006c00 	.word	0x40006c00

08008038 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e01d      	b.n	800808a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0208 	bic.w	r2, r2, #8
 800805c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800805e:	f7fc fa4b 	bl	80044f8 <HAL_GetTick>
 8008062:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008064:	e009      	b.n	800807a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008066:	f7fc fa47 	bl	80044f8 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008074:	d901      	bls.n	800807a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e007      	b.n	800808a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0ee      	beq.n	8008066 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800809e:	f7fc fa2b 	bl	80044f8 <HAL_GetTick>
 80080a2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80080a4:	e009      	b.n	80080ba <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80080a6:	f7fc fa27 	bl	80044f8 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080b4:	d901      	bls.n	80080ba <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e00f      	b.n	80080da <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0ee      	beq.n	80080a6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0210 	orr.w	r2, r2, #16
 80080d6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0210 	bic.w	r2, r2, #16
 80080fc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80080fe:	f7fc f9fb 	bl	80044f8 <HAL_GetTick>
 8008102:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008104:	e009      	b.n	800811a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008106:	f7fc f9f7 	bl	80044f8 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008114:	d901      	bls.n	800811a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e007      	b.n	800812a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0ee      	beq.n	8008106 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <HAL_RTCEx_SetTamper>:
  * @param  sTamper: Pointer to Tamper Structure.
  * @note   Tamper can be enabled only if ASOE and CCO bit are reset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  /* Check input parameters */
  if ((hrtc == NULL) || (sTamper == NULL))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <HAL_RTCEx_SetTamper+0x16>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_RTCEx_SetTamper+0x1a>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e02c      	b.n	80081a8 <HAL_RTCEx_SetTamper+0x74>
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(sTamper->Tamper));
  assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_RTCEx_SetTamper+0x26>
 8008156:	2302      	movs	r3, #2
 8008158:	e026      	b.n	80081a8 <HAL_RTCEx_SetTamper+0x74>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	745a      	strb	r2, [r3, #17]

  if (HAL_IS_BIT_SET(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE)))
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <HAL_RTCEx_SetTamper+0x80>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_RTCEx_SetTamper+0x4e>
  {
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2204      	movs	r2, #4
 8008176:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e012      	b.n	80081a8 <HAL_RTCEx_SetTamper+0x74>
  }

  MODIFY_REG(BKP->CR, (BKP_CR_TPE | BKP_CR_TPAL), (sTamper->Tamper | (sTamper->Trigger)));
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <HAL_RTCEx_SetTamper+0x80>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	f023 0203 	bic.w	r2, r3, #3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	430b      	orrs	r3, r1
 8008194:	4907      	ldr	r1, [pc, #28]	; (80081b4 <HAL_RTCEx_SetTamper+0x80>)
 8008196:	4313      	orrs	r3, r2
 8008198:	630b      	str	r3, [r1, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40006c00 	.word	0x40006c00

080081b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e076      	b.n	80082b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d108      	bne.n	80081e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081da:	d009      	beq.n	80081f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	61da      	str	r2, [r3, #28]
 80081e2:	e005      	b.n	80081f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fb fef2 	bl	8003ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008274:	ea42 0103 	orr.w	r1, r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	0c1a      	lsrs	r2, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f002 0204 	and.w	r2, r2, #4
 8008296:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_SPI_Transmit+0x22>
 80082de:	2302      	movs	r3, #2
 80082e0:	e126      	b.n	8008530 <HAL_SPI_Transmit+0x270>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ea:	f7fc f905 	bl	80044f8 <HAL_GetTick>
 80082ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d002      	beq.n	8008306 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008300:	2302      	movs	r3, #2
 8008302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008304:	e10b      	b.n	800851e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_SPI_Transmit+0x52>
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008316:	e102      	b.n	800851e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2203      	movs	r2, #3
 800831c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d10f      	bne.n	8008380 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800836e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800837e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	d007      	beq.n	800839e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800839c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a6:	d14b      	bne.n	8008440 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_SPI_Transmit+0xf6>
 80083b0:	8afb      	ldrh	r3, [r7, #22]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d13e      	bne.n	8008434 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	1c9a      	adds	r2, r3, #2
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083da:	e02b      	b.n	8008434 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d112      	bne.n	8008410 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	881a      	ldrh	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	86da      	strh	r2, [r3, #54]	; 0x36
 800840e:	e011      	b.n	8008434 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008410:	f7fc f872 	bl	80044f8 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d803      	bhi.n	8008428 <HAL_SPI_Transmit+0x168>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d102      	bne.n	800842e <HAL_SPI_Transmit+0x16e>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008432:	e074      	b.n	800851e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008438:	b29b      	uxth	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1ce      	bne.n	80083dc <HAL_SPI_Transmit+0x11c>
 800843e:	e04c      	b.n	80084da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_SPI_Transmit+0x18e>
 8008448:	8afb      	ldrh	r3, [r7, #22]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d140      	bne.n	80084d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008474:	e02c      	b.n	80084d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b02      	cmp	r3, #2
 8008482:	d113      	bne.n	80084ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80084aa:	e011      	b.n	80084d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ac:	f7fc f824 	bl	80044f8 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d803      	bhi.n	80084c4 <HAL_SPI_Transmit+0x204>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d102      	bne.n	80084ca <HAL_SPI_Transmit+0x20a>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084ce:	e026      	b.n	800851e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1cd      	bne.n	8008476 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fbea 	bl	8008cb8 <SPI_EndRxTxTransaction>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084f8:	2300      	movs	r3, #0
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e000      	b.n	800851e <HAL_SPI_Transmit+0x25e>
  }

error:
 800851c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800852e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008546:	2301      	movs	r3, #1
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_SPI_TransmitReceive+0x26>
 800855a:	2302      	movs	r3, #2
 800855c:	e18a      	b.n	8008874 <HAL_SPI_TransmitReceive+0x33c>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008566:	f7fb ffc7 	bl	80044f8 <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008584:	2b01      	cmp	r3, #1
 8008586:	d00f      	beq.n	80085a8 <HAL_SPI_TransmitReceive+0x70>
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800858e:	d107      	bne.n	80085a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <HAL_SPI_TransmitReceive+0x68>
 8008598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800859c:	2b04      	cmp	r3, #4
 800859e:	d003      	beq.n	80085a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085a6:	e15b      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <HAL_SPI_TransmitReceive+0x82>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_SPI_TransmitReceive+0x82>
 80085b4:	887b      	ldrh	r3, [r7, #2]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085c0:	e14e      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d003      	beq.n	80085d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2205      	movs	r2, #5
 80085d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	887a      	ldrh	r2, [r7, #2]
 80085e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	887a      	ldrh	r2, [r7, #2]
 80085ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	887a      	ldrh	r2, [r7, #2]
 80085f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	887a      	ldrh	r2, [r7, #2]
 80085fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d007      	beq.n	800862a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008632:	d178      	bne.n	8008726 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_SPI_TransmitReceive+0x10a>
 800863c:	8b7b      	ldrh	r3, [r7, #26]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d166      	bne.n	8008710 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	881a      	ldrh	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	1c9a      	adds	r2, r3, #2
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008666:	e053      	b.n	8008710 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b02      	cmp	r3, #2
 8008674:	d11b      	bne.n	80086ae <HAL_SPI_TransmitReceive+0x176>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d016      	beq.n	80086ae <HAL_SPI_TransmitReceive+0x176>
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d113      	bne.n	80086ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	881a      	ldrh	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	1c9a      	adds	r2, r3, #2
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d119      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x1b8>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d014      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	b292      	uxth	r2, r2
 80086d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	1c9a      	adds	r2, r3, #2
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086ec:	2301      	movs	r3, #1
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086f0:	f7fb ff02 	bl	80044f8 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d807      	bhi.n	8008710 <HAL_SPI_TransmitReceive+0x1d8>
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d003      	beq.n	8008710 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800870e:	e0a7      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1a6      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x130>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871e:	b29b      	uxth	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1a1      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x130>
 8008724:	e07c      	b.n	8008820 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_SPI_TransmitReceive+0x1fc>
 800872e:	8b7b      	ldrh	r3, [r7, #26]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d16b      	bne.n	800880c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	330c      	adds	r3, #12
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800875a:	e057      	b.n	800880c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b02      	cmp	r3, #2
 8008768:	d11c      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x26c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d017      	beq.n	80087a4 <HAL_SPI_TransmitReceive+0x26c>
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	2b01      	cmp	r3, #1
 8008778:	d114      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	330c      	adds	r3, #12
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d119      	bne.n	80087e6 <HAL_SPI_TransmitReceive+0x2ae>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d014      	beq.n	80087e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087e2:	2301      	movs	r3, #1
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087e6:	f7fb fe87 	bl	80044f8 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d803      	bhi.n	80087fe <HAL_SPI_TransmitReceive+0x2c6>
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d102      	bne.n	8008804 <HAL_SPI_TransmitReceive+0x2cc>
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800880a:	e029      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1a2      	bne.n	800875c <HAL_SPI_TransmitReceive+0x224>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800881a:	b29b      	uxth	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d19d      	bne.n	800875c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fa47 	bl	8008cb8 <SPI_EndRxTxTransaction>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d006      	beq.n	800883e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800883c:	e010      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	e000      	b.n	8008860 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800885e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008874:	4618      	mov	r0, r3
 8008876:	3730      	adds	r7, #48	; 0x30
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_SPI_Transmit_DMA+0x20>
 8008898:	2302      	movs	r3, #2
 800889a:	e09b      	b.n	80089d4 <HAL_SPI_Transmit_DMA+0x158>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d002      	beq.n	80088b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80088b0:	2302      	movs	r3, #2
 80088b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088b4:	e089      	b.n	80089ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <HAL_SPI_Transmit_DMA+0x46>
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088c6:	e080      	b.n	80089ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2203      	movs	r2, #3
 80088cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	88fa      	ldrh	r2, [r7, #6]
 80088e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800890e:	d10f      	bne.n	8008930 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800892e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008934:	4a29      	ldr	r2, [pc, #164]	; (80089dc <HAL_SPI_Transmit_DMA+0x160>)
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893c:	4a28      	ldr	r2, [pc, #160]	; (80089e0 <HAL_SPI_Transmit_DMA+0x164>)
 800893e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008944:	4a27      	ldr	r2, [pc, #156]	; (80089e4 <HAL_SPI_Transmit_DMA+0x168>)
 8008946:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894c:	2200      	movs	r2, #0
 800894e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	4619      	mov	r1, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	330c      	adds	r3, #12
 8008960:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008966:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008968:	f7fc f982 	bl	8004c70 <HAL_DMA_Start_IT>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00c      	beq.n	800898c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008976:	f043 0210 	orr.w	r2, r3, #16
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800898a:	e01e      	b.n	80089ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b40      	cmp	r3, #64	; 0x40
 8008998:	d007      	beq.n	80089aa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0220 	orr.w	r2, r2, #32
 80089b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0202 	orr.w	r2, r2, #2
 80089c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	08008b4b 	.word	0x08008b4b
 80089e0:	08008aa5 	.word	0x08008aa5
 80089e4:	08008b67 	.word	0x08008b67

080089e8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00f      	beq.n	8008a1c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fc f994 	bl	8004d2e <HAL_DMA_Abort>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	f043 0210 	orr.w	r2, r3, #16
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00f      	beq.n	8008a44 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fc f980 	bl	8004d2e <HAL_DMA_Abort>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	f043 0210 	orr.w	r2, r3, #16
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0203 	bic.w	r2, r2, #3
 8008a52:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr

08008a8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a98:	b2db      	uxtb	r3, r3
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab2:	f7fb fd21 	bl	80044f8 <HAL_GetTick>
 8008ab6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d03b      	beq.n	8008b3e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0220 	bic.w	r2, r2, #32
 8008ad4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0202 	bic.w	r2, r2, #2
 8008ae4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	2164      	movs	r1, #100	; 0x64
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f000 f8e4 	bl	8008cb8 <SPI_EndRxTxTransaction>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afa:	f043 0220 	orr.w	r2, r3, #32
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2200      	movs	r2, #0
 8008b24:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b36:	6978      	ldr	r0, [r7, #20]
 8008b38:	f7ff ff9e 	bl	8008a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b3c:	e002      	b.n	8008b44 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	f7fa fbe4 	bl	800330c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff84 	bl	8008a66 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0203 	bic.w	r2, r2, #3
 8008b82:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	f043 0210 	orr.w	r2, r3, #16
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff ff6d 	bl	8008a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008bb8:	f7fb fc9e 	bl	80044f8 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008bc8:	f7fb fc96 	bl	80044f8 <HAL_GetTick>
 8008bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bce:	4b39      	ldr	r3, [pc, #228]	; (8008cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	015b      	lsls	r3, r3, #5
 8008bd4:	0d1b      	lsrs	r3, r3, #20
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	fb02 f303 	mul.w	r3, r2, r3
 8008bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bde:	e054      	b.n	8008c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d050      	beq.n	8008c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008be8:	f7fb fc86 	bl	80044f8 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d902      	bls.n	8008bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d13d      	bne.n	8008c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c16:	d111      	bne.n	8008c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c20:	d004      	beq.n	8008c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2a:	d107      	bne.n	8008c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c44:	d10f      	bne.n	8008c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e017      	b.n	8008caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d19b      	bne.n	8008be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000100 	.word	0x20000100

08008cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2180      	movs	r1, #128	; 0x80
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff ff6a 	bl	8008ba8 <SPI_WaitFlagStateUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e000      	b.n	8008cec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e03f      	b.n	8008d86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fb fa68 	bl	80041f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2224      	movs	r2, #36	; 0x24
 8008d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f829 	bl	8008d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695a      	ldr	r2, [r3, #20]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008dca:	f023 030c 	bic.w	r3, r3, #12
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a2c      	ldr	r2, [pc, #176]	; (8008ea4 <UART_SetConfig+0x114>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d103      	bne.n	8008e00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008df8:	f7fe fdc0 	bl	800797c <HAL_RCC_GetPCLK2Freq>
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	e002      	b.n	8008e06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e00:	f7fe fda8 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 8008e04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009a      	lsls	r2, r3, #2
 8008e10:	441a      	add	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	4a22      	ldr	r2, [pc, #136]	; (8008ea8 <UART_SetConfig+0x118>)
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	0119      	lsls	r1, r3, #4
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009a      	lsls	r2, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <UART_SetConfig+0x118>)
 8008e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	2064      	movs	r0, #100	; 0x64
 8008e46:	fb00 f303 	mul.w	r3, r0, r3
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	3332      	adds	r3, #50	; 0x32
 8008e50:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <UART_SetConfig+0x118>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	095b      	lsrs	r3, r3, #5
 8008e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e5c:	4419      	add	r1, r3
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009a      	lsls	r2, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <UART_SetConfig+0x118>)
 8008e76:	fba3 0302 	umull	r0, r3, r3, r2
 8008e7a:	095b      	lsrs	r3, r3, #5
 8008e7c:	2064      	movs	r0, #100	; 0x64
 8008e7e:	fb00 f303 	mul.w	r3, r0, r3
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	3332      	adds	r3, #50	; 0x32
 8008e88:	4a07      	ldr	r2, [pc, #28]	; (8008ea8 <UART_SetConfig+0x118>)
 8008e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	440a      	add	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40013800 	.word	0x40013800
 8008ea8:	51eb851f 	.word	0x51eb851f

08008eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eac:	b084      	sub	sp, #16
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	f107 001c 	add.w	r0, r7, #28
 8008eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d122      	bne.n	8008f0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d105      	bne.n	8008efe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f922 	bl	8009148 <USB_CoreReset>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
 8008f08:	e010      	b.n	8008f2c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f916 	bl	8009148 <USB_CoreReset>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f38:	b004      	add	sp, #16
 8008f3a:	4770      	bx	lr

08008f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f043 0201 	orr.w	r2, r3, #1
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr

08008f5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f023 0201 	bic.w	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr

08008f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d106      	bne.n	8008fa8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60da      	str	r2, [r3, #12]
 8008fa6:	e00b      	b.n	8008fc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	e001      	b.n	8008fc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e003      	b.n	8008fc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008fc0:	2032      	movs	r0, #50	; 0x32
 8008fc2:	f7fb faa3 	bl	800450c <HAL_Delay>

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	019b      	lsls	r3, r3, #6
 8008fe2:	f043 0220 	orr.w	r2, r3, #32
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a08      	ldr	r2, [pc, #32]	; (8009014 <USB_FlushTxFifo+0x44>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d901      	bls.n	8008ffc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e006      	b.n	800900a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b20      	cmp	r3, #32
 8009006:	d0f0      	beq.n	8008fea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr
 8009014:	00030d40 	.word	0x00030d40

08009018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2210      	movs	r2, #16
 8009028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3301      	adds	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <USB_FlushRxFifo+0x3c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d901      	bls.n	800903c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e006      	b.n	800904a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b10      	cmp	r3, #16
 8009046:	d0f0      	beq.n	800902a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr
 8009054:	00030d40 	.word	0x00030d40

08009058 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009058:	b480      	push	{r7}
 800905a:	b089      	sub	sp, #36	; 0x24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	460b      	mov	r3, r1
 8009068:	71fb      	strb	r3, [r7, #7]
 800906a:	4613      	mov	r3, r2
 800906c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009076:	88bb      	ldrh	r3, [r7, #4]
 8009078:	3303      	adds	r3, #3
 800907a:	089b      	lsrs	r3, r3, #2
 800907c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	e00f      	b.n	80090a4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	031a      	lsls	r2, r3, #12
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009090:	461a      	mov	r2, r3
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	3304      	adds	r3, #4
 800909c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	3301      	adds	r3, #1
 80090a2:	61bb      	str	r3, [r7, #24]
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d3eb      	bcc.n	8009084 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3724      	adds	r7, #36	; 0x24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b089      	sub	sp, #36	; 0x24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	3303      	adds	r3, #3
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	61bb      	str	r3, [r7, #24]
 80090da:	e00b      	b.n	80090f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3304      	adds	r3, #4
 80090ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	3301      	adds	r3, #1
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3ef      	bcc.n	80090dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80090fc:	69fb      	ldr	r3, [r7, #28]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3724      	adds	r7, #36	; 0x24
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4013      	ands	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	bc80      	pop	{r7}
 800912a:	4770      	bx	lr

0800912c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 0301 	and.w	r3, r3, #1
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
	...

08009148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4a12      	ldr	r2, [pc, #72]	; (80091a8 <USB_CoreReset+0x60>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d901      	bls.n	8009166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e01b      	b.n	800919e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	daf2      	bge.n	8009154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f043 0201 	orr.w	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3301      	adds	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <USB_CoreReset+0x60>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d901      	bls.n	8009190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e006      	b.n	800919e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b01      	cmp	r3, #1
 800919a:	d0f0      	beq.n	800917e <USB_CoreReset+0x36>

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	00030d40 	.word	0x00030d40

080091ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091ac:	b084      	sub	sp, #16
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	f107 001c 	add.w	r0, r7, #28
 80091ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091c8:	461a      	mov	r2, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091f4:	f023 0304 	bic.w	r3, r3, #4
 80091f8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80091fa:	2110      	movs	r1, #16
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff fee7 	bl	8008fd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ff08 	bl	8009018 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e015      	b.n	800923a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921a:	461a      	mov	r2, r3
 800921c:	f04f 33ff 	mov.w	r3, #4294967295
 8009220:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4413      	add	r3, r2
 800922a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922e:	461a      	mov	r2, r3
 8009230:	2300      	movs	r3, #0
 8009232:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d3e5      	bcc.n	800920e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009242:	2101      	movs	r1, #1
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f868 	bl	800931a <USB_DriveVbus>

  HAL_Delay(200U);
 800924a:	20c8      	movs	r0, #200	; 0xc8
 800924c:	f7fb f95e 	bl	800450c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f04f 32ff 	mov.w	r2, #4294967295
 800925c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2280      	movs	r2, #128	; 0x80
 8009262:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a0d      	ldr	r2, [pc, #52]	; (800929c <USB_HostInit+0xf0>)
 8009268:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <USB_HostInit+0xf4>)
 800926e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f043 0210 	orr.w	r2, r3, #16
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <USB_HostInit+0xf8>)
 8009284:	4313      	orrs	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009296:	b004      	add	sp, #16
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	00600080 	.word	0x00600080
 80092a0:	004000e0 	.word	0x004000e0
 80092a4:	a3200008 	.word	0xa3200008

080092a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092c6:	f023 0303 	bic.w	r3, r3, #3
 80092ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80092e0:	4313      	orrs	r3, r2
 80092e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d107      	bne.n	80092fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f0:	461a      	mov	r2, r3
 80092f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80092f6:	6053      	str	r3, [r2, #4]
 80092f8:	e009      	b.n	800930e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d106      	bne.n	800930e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009306:	461a      	mov	r2, r3
 8009308:	f241 7370 	movw	r3, #6000	; 0x1770
 800930c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800933e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <USB_DriveVbus+0x44>
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d106      	bne.n	800935e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800935c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009368:	d109      	bne.n	800937e <USB_DriveVbus+0x64>
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d106      	bne.n	800937e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800937c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr

0800938a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800938a:	b480      	push	{r7}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	b29b      	uxth	r3, r3
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
	...

080093ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	70fb      	strb	r3, [r7, #3]
 80093be:	460b      	mov	r3, r1
 80093c0:	70bb      	strb	r3, [r7, #2]
 80093c2:	4613      	mov	r3, r2
 80093c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093da:	461a      	mov	r2, r3
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80093e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d867      	bhi.n	80094ba <USB_HC_Init+0x10e>
 80093ea:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <USB_HC_Init+0x44>)
 80093ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f0:	08009401 	.word	0x08009401
 80093f4:	0800947d 	.word	0x0800947d
 80093f8:	08009401 	.word	0x08009401
 80093fc:	0800943f 	.word	0x0800943f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4413      	add	r3, r2
 8009408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940c:	461a      	mov	r2, r3
 800940e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009412:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009414:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009418:	2b00      	cmp	r3, #0
 800941a:	da51      	bge.n	80094c0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4413      	add	r3, r2
 8009424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	440a      	add	r2, r1
 8009432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800943c:	e040      	b.n	80094c0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4413      	add	r3, r2
 8009446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800944a:	461a      	mov	r2, r3
 800944c:	f240 639d 	movw	r3, #1693	; 0x69d
 8009450:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009452:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009456:	2b00      	cmp	r3, #0
 8009458:	da34      	bge.n	80094c4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	440a      	add	r2, r1
 8009470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009478:	60d3      	str	r3, [r2, #12]
      }

      break;
 800947a:	e023      	b.n	80094c4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4413      	add	r3, r2
 8009484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009488:	461a      	mov	r2, r3
 800948a:	f240 2325 	movw	r3, #549	; 0x225
 800948e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da17      	bge.n	80094c8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80094b6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80094b8:	e006      	b.n	80094c8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
      break;
 80094be:	e004      	b.n	80094ca <USB_HC_Init+0x11e>
      break;
 80094c0:	bf00      	nop
 80094c2:	e002      	b.n	80094ca <USB_HC_Init+0x11e>
      break;
 80094c4:	bf00      	nop
 80094c6:	e000      	b.n	80094ca <USB_HC_Init+0x11e>
      break;
 80094c8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	2101      	movs	r1, #1
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80094e4:	4313      	orrs	r3, r2
 80094e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80094f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	da03      	bge.n	8009504 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80094fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	e001      	b.n	8009508 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009508:	f897 3020 	ldrb.w	r3, [r7, #32]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d103      	bne.n	8009518 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e001      	b.n	800951c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800951c:	787b      	ldrb	r3, [r7, #1]
 800951e:	059b      	lsls	r3, r3, #22
 8009520:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009524:	78bb      	ldrb	r3, [r7, #2]
 8009526:	02db      	lsls	r3, r3, #11
 8009528:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800952c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800952e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009532:	049b      	lsls	r3, r3, #18
 8009534:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009538:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800953a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800953c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009540:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	0159      	lsls	r1, r3, #5
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	440b      	add	r3, r1
 800954e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009552:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009558:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800955a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800955e:	2b03      	cmp	r3, #3
 8009560:	d10f      	bne.n	8009582 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	4413      	add	r3, r2
 800956a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	440a      	add	r2, r1
 8009578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800957c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009580:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop

08009590 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80095a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d018      	beq.n	80095e4 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	8912      	ldrh	r2, [r2, #8]
 80095ba:	4413      	add	r3, r2
 80095bc:	3b01      	subs	r3, #1
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	8912      	ldrh	r2, [r2, #8]
 80095c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80095c8:	8bfa      	ldrh	r2, [r7, #30]
 80095ca:	8a7b      	ldrh	r3, [r7, #18]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d90b      	bls.n	80095e8 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80095d0:	8a7b      	ldrh	r3, [r7, #18]
 80095d2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80095d4:	8bfb      	ldrh	r3, [r7, #30]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	8912      	ldrh	r2, [r2, #8]
 80095da:	fb02 f203 	mul.w	r2, r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	611a      	str	r2, [r3, #16]
 80095e2:	e001      	b.n	80095e8 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80095e4:	2301      	movs	r3, #1
 80095e6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	78db      	ldrb	r3, [r3, #3]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80095f0:	8bfb      	ldrh	r3, [r7, #30]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	8912      	ldrh	r2, [r2, #8]
 80095f6:	fb02 f203 	mul.w	r2, r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009606:	8bfb      	ldrh	r3, [r7, #30]
 8009608:	04d9      	lsls	r1, r3, #19
 800960a:	4b5f      	ldr	r3, [pc, #380]	; (8009788 <USB_HC_StartXfer+0x1f8>)
 800960c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800960e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	7a9b      	ldrb	r3, [r3, #10]
 8009614:	075b      	lsls	r3, r3, #29
 8009616:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	0148      	lsls	r0, r1, #5
 800961e:	69b9      	ldr	r1, [r7, #24]
 8009620:	4401      	add	r1, r0
 8009622:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009626:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009628:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	4413      	add	r3, r2
 800964a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	0151      	lsls	r1, r2, #5
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	440a      	add	r2, r1
 8009658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800965c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009660:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	7c7b      	ldrb	r3, [r7, #17]
 8009672:	075b      	lsls	r3, r3, #29
 8009674:	6979      	ldr	r1, [r7, #20]
 8009676:	0148      	lsls	r0, r1, #5
 8009678:	69b9      	ldr	r1, [r7, #24]
 800967a:	4401      	add	r1, r0
 800967c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009680:	4313      	orrs	r3, r2
 8009682:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	4413      	add	r3, r2
 800968c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a3e      	ldr	r2, [pc, #248]	; (800978c <USB_HC_StartXfer+0x1fc>)
 8009694:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009696:	4b3d      	ldr	r3, [pc, #244]	; (800978c <USB_HC_StartXfer+0x1fc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800969e:	4a3b      	ldr	r2, [pc, #236]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096a0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	78db      	ldrb	r3, [r3, #3]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096aa:	4b38      	ldr	r3, [pc, #224]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096b2:	4a36      	ldr	r2, [pc, #216]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	e005      	b.n	80096c4 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096b8:	4b34      	ldr	r3, [pc, #208]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096c0:	4a32      	ldr	r2, [pc, #200]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096c2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096c4:	4b31      	ldr	r3, [pc, #196]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096cc:	4a2f      	ldr	r2, [pc, #188]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096ce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096dc:	461a      	mov	r2, r3
 80096de:	4b2b      	ldr	r3, [pc, #172]	; (800978c <USB_HC_StartXfer+0x1fc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	78db      	ldrb	r3, [r3, #3]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d148      	bne.n	800977e <USB_HC_StartXfer+0x1ee>
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d044      	beq.n	800977e <USB_HC_StartXfer+0x1ee>
  {
    switch (hc->ep_type)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	79db      	ldrb	r3, [r3, #7]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d831      	bhi.n	8009760 <USB_HC_StartXfer+0x1d0>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USB_HC_StartXfer+0x174>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009715 	.word	0x08009715
 8009708:	08009739 	.word	0x08009739
 800970c:	08009715 	.word	0x08009715
 8009710:	08009739 	.word	0x08009739
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	3303      	adds	r3, #3
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800971e:	89fa      	ldrh	r2, [r7, #14]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	b29b      	uxth	r3, r3
 8009726:	429a      	cmp	r2, r3
 8009728:	d91c      	bls.n	8009764 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	f043 0220 	orr.w	r2, r3, #32
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	619a      	str	r2, [r3, #24]
        }
        break;
 8009736:	e015      	b.n	8009764 <USB_HC_StartXfer+0x1d4>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	3303      	adds	r3, #3
 800973e:	089b      	lsrs	r3, r3, #2
 8009740:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009742:	89fa      	ldrh	r2, [r7, #14]
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	b29b      	uxth	r3, r3
 800974e:	429a      	cmp	r2, r3
 8009750:	d90a      	bls.n	8009768 <USB_HC_StartXfer+0x1d8>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	619a      	str	r2, [r3, #24]
        }
        break;
 800975e:	e003      	b.n	8009768 <USB_HC_StartXfer+0x1d8>

      default:
        break;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <USB_HC_StartXfer+0x1da>
        break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <USB_HC_StartXfer+0x1da>
        break;
 8009768:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68d9      	ldr	r1, [r3, #12]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	785a      	ldrb	r2, [r3, #1]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	b29b      	uxth	r3, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fc6d 	bl	8009058 <USB_WritePacket>
  }

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3720      	adds	r7, #32
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	1ff80000 	.word	0x1ff80000
 800978c:	2000a1d0 	.word	0x2000a1d0

08009790 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	b29b      	uxth	r3, r3
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	0c9b      	lsrs	r3, r3, #18
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <USB_HC_Halt+0x3a>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d16c      	bne.n	80098c4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009808:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d143      	bne.n	800989e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	440a      	add	r2, r1
 800982c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009834:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	440a      	add	r2, r1
 800984c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009854:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	4413      	add	r3, r2
 800985e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	440a      	add	r2, r1
 800986c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009874:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	3301      	adds	r3, #1
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009882:	d81d      	bhi.n	80098c0 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	4413      	add	r3, r2
 800988c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800989a:	d0ec      	beq.n	8009876 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800989c:	e080      	b.n	80099a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098bc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80098be:	e06f      	b.n	80099a0 <USB_HC_Halt+0x1f0>
          break;
 80098c0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80098c2:	e06d      	b.n	80099a0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d143      	bne.n	800997c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	440a      	add	r2, r1
 800990a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800990e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009912:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	4413      	add	r3, r2
 800991c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	440a      	add	r2, r1
 800992a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800992e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	4413      	add	r3, r2
 800993c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	440a      	add	r2, r1
 800994a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800994e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009952:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	3301      	adds	r3, #1
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009960:	d81d      	bhi.n	800999e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4413      	add	r3, r2
 800996a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009978:	d0ec      	beq.n	8009954 <USB_HC_Halt+0x1a4>
 800997a:	e011      	b.n	80099a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	4413      	add	r3, r2
 8009984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	440a      	add	r2, r1
 8009992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	e000      	b.n	80099a0 <USB_HC_Halt+0x1f0>
          break;
 800999e:	bf00      	nop
    }
  }

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr

080099ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff facd 	bl	8008f5c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80099c2:	2110      	movs	r1, #16
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff fb03 	bl	8008fd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff fb24 	bl	8009018 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]
 80099d4:	e01f      	b.n	8009a16 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	3301      	adds	r3, #1
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b0f      	cmp	r3, #15
 8009a1a:	d9dc      	bls.n	80099d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	613b      	str	r3, [r7, #16]
 8009a20:	e034      	b.n	8009a8c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a40:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a48:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a56:	461a      	mov	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a68:	d80c      	bhi.n	8009a84 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a80:	d0ec      	beq.n	8009a5c <USB_StopHost+0xb0>
 8009a82:	e000      	b.n	8009a86 <USB_StopHost+0xda>
        break;
 8009a84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b0f      	cmp	r3, #15
 8009a90:	d9c7      	bls.n	8009a22 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fa47 	bl	8008f3c <USB_EnableGlobalInt>

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <MX_FATFS_Init+0x18>)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <MX_FATFS_Init+0x1c>)
 8009ac0:	f004 fcc4 	bl	800e44c <FATFS_LinkDriver>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b03      	ldr	r3, [pc, #12]	; (8009ad8 <MX_FATFS_Init+0x20>)
 8009aca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009acc:	bf00      	nop
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000c698 	.word	0x2000c698
 8009ad4:	2000010c 	.word	0x2000010c
 8009ad8:	2000c69c 	.word	0x2000c69c

08009adc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ae0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr

08009aea <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b082      	sub	sp, #8
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	4603      	mov	r3, r0
 8009af2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f7 ff9c 	bl	8001a34 <SD_disk_initialize>
 8009afc:	4603      	mov	r3, r0
 8009afe:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7f8 f877 	bl	8001c08 <SD_disk_status>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009b36:	7bf8      	ldrb	r0, [r7, #15]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	f7f8 f877 	bl	8001c30 <SD_disk_read>
 8009b42:	4603      	mov	r3, r0
 8009b44:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009b5e:	7bf8      	ldrb	r0, [r7, #15]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	f7f8 f8d1 	bl	8001d0c <SD_disk_write>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	603a      	str	r2, [r7, #0]
 8009b80:	71fb      	strb	r3, [r7, #7]
 8009b82:	460b      	mov	r3, r1
 8009b84:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	73fb      	strb	r3, [r7, #15]
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	79b9      	ldrb	r1, [r7, #6]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f8 f945 	bl	8001e20 <SD_disk_ioctl>
 8009b96:	4603      	mov	r3, r0
 8009b98:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ba2:	b590      	push	{r4, r7, lr}
 8009ba4:	b089      	sub	sp, #36	; 0x24
 8009ba6:	af04      	add	r7, sp, #16
 8009ba8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009baa:	2301      	movs	r3, #1
 8009bac:	2202      	movs	r2, #2
 8009bae:	2102      	movs	r1, #2
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fc5a 	bl	800a46a <USBH_FindInterface>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2bff      	cmp	r3, #255	; 0xff
 8009bbe:	d002      	beq.n	8009bc6 <USBH_CDC_InterfaceInit+0x24>
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d901      	bls.n	8009bca <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e13d      	b.n	8009e46 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fc30 	bl	800a434 <USBH_SelectInterface>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	e131      	b.n	8009e46 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8009be8:	2050      	movs	r0, #80	; 0x50
 8009bea:	f004 ff61 	bl	800eab0 <malloc>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009c02:	2302      	movs	r3, #2
 8009c04:	e11f      	b.n	8009e46 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009c06:	2250      	movs	r2, #80	; 0x50
 8009c08:	2100      	movs	r1, #0
 8009c0a:	68b8      	ldr	r0, [r7, #8]
 8009c0c:	f004 ff6e 	bl	800eaec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	211a      	movs	r1, #26
 8009c16:	fb01 f303 	mul.w	r3, r1, r3
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b25b      	sxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	da15      	bge.n	8009c54 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	211a      	movs	r1, #26
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	211a      	movs	r1, #26
 8009c44:	fb01 f303 	mul.w	r3, r1, r3
 8009c48:	4413      	add	r3, r2
 8009c4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c4e:	881a      	ldrh	r2, [r3, #0]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 ff8b 	bl	800ab76 <USBH_AllocPipe>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	7819      	ldrb	r1, [r3, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	7858      	ldrb	r0, [r3, #1]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	8952      	ldrh	r2, [r2, #10]
 8009c80:	9202      	str	r2, [sp, #8]
 8009c82:	2203      	movs	r2, #3
 8009c84:	9201      	str	r2, [sp, #4]
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4623      	mov	r3, r4
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 ff43 	bl	800ab18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2200      	movs	r2, #0
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f004 fe64 	bl	800e968 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	210a      	movs	r1, #10
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fbdf 	bl	800a46a <USBH_FindInterface>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	2bff      	cmp	r3, #255	; 0xff
 8009cb4:	d002      	beq.n	8009cbc <USBH_CDC_InterfaceInit+0x11a>
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d901      	bls.n	8009cc0 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e0c2      	b.n	8009e46 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	211a      	movs	r1, #26
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da16      	bge.n	8009d06 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	211a      	movs	r1, #26
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	211a      	movs	r1, #26
 8009cf4:	fb01 f303 	mul.w	r3, r1, r3
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cfe:	881a      	ldrh	r2, [r3, #0]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	835a      	strh	r2, [r3, #26]
 8009d04:	e015      	b.n	8009d32 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	211a      	movs	r1, #26
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	211a      	movs	r1, #26
 8009d22:	fb01 f303 	mul.w	r3, r1, r3
 8009d26:	4413      	add	r3, r2
 8009d28:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d2c:	881a      	ldrh	r2, [r3, #0]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	211a      	movs	r1, #26
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da16      	bge.n	8009d78 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	211a      	movs	r1, #26
 8009d50:	fb01 f303 	mul.w	r3, r1, r3
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	211a      	movs	r1, #26
 8009d66:	fb01 f303 	mul.w	r3, r1, r3
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d70:	881a      	ldrh	r2, [r3, #0]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	835a      	strh	r2, [r3, #26]
 8009d76:	e015      	b.n	8009da4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	211a      	movs	r1, #26
 8009d7e:	fb01 f303 	mul.w	r3, r1, r3
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	211a      	movs	r1, #26
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	4413      	add	r3, r2
 8009d9a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d9e:	881a      	ldrh	r2, [r3, #0]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	7b9b      	ldrb	r3, [r3, #14]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fee3 	bl	800ab76 <USBH_AllocPipe>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	7bdb      	ldrb	r3, [r3, #15]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fed9 	bl	800ab76 <USBH_AllocPipe>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	7b59      	ldrb	r1, [r3, #13]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	7b98      	ldrb	r0, [r3, #14]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	8b12      	ldrh	r2, [r2, #24]
 8009de4:	9202      	str	r2, [sp, #8]
 8009de6:	2202      	movs	r2, #2
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4623      	mov	r3, r4
 8009dee:	4602      	mov	r2, r0
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fe91 	bl	800ab18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	7b19      	ldrb	r1, [r3, #12]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	7bd8      	ldrb	r0, [r3, #15]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	8b52      	ldrh	r2, [r2, #26]
 8009e0e:	9202      	str	r2, [sp, #8]
 8009e10:	2202      	movs	r2, #2
 8009e12:	9201      	str	r2, [sp, #4]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4623      	mov	r3, r4
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fe7c 	bl	800ab18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	7b5b      	ldrb	r3, [r3, #13]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f004 fd99 	bl	800e968 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	7b1b      	ldrb	r3, [r3, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f004 fd92 	bl	800e968 <USBH_LL_SetToggle>

  return USBH_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd90      	pop	{r4, r7, pc}

08009e4e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00e      	beq.n	8009e86 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fe71 	bl	800ab56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fe9b 	bl	800abb6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7b1b      	ldrb	r3, [r3, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00e      	beq.n	8009eac <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	7b1b      	ldrb	r3, [r3, #12]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fe5e 	bl	800ab56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	7b1b      	ldrb	r3, [r3, #12]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fe88 	bl	800abb6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	7b5b      	ldrb	r3, [r3, #13]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00e      	beq.n	8009ed2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	7b5b      	ldrb	r3, [r3, #13]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fe4b 	bl	800ab56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	7b5b      	ldrb	r3, [r3, #13]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fe75 	bl	800abb6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f004 fdea 	bl	800eac0 <free>
    phost->pActiveClass->pData = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	3340      	adds	r3, #64	; 0x40
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f8b1 	bl	800a084 <GetLineCoding>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009f32:	2102      	movs	r1, #2
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
  }
  return status;
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d877      	bhi.n	800a058 <USBH_CDC_Process+0x114>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <USBH_CDC_Process+0x2c>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	08009f85 	.word	0x08009f85
 8009f74:	08009f8b 	.word	0x08009f8b
 8009f78:	08009fbb 	.word	0x08009fbb
 8009f7c:	0800a02f 	.word	0x0800a02f
 8009f80:	0800a03d 	.word	0x0800a03d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
      break;
 8009f88:	e06d      	b.n	800a066 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f896 	bl	800a0c2 <SetLineCoding>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009fa8:	e058      	b.n	800a05c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d055      	beq.n	800a05c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2204      	movs	r2, #4
 8009fb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009fb8:	e050      	b.n	800a05c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3340      	adds	r3, #64	; 0x40
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f85f 	bl	800a084 <GetLineCoding>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d126      	bne.n	800a01e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe2:	791b      	ldrb	r3, [r3, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d13b      	bne.n	800a060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d133      	bne.n	800a060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a002:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a004:	429a      	cmp	r2, r3
 800a006:	d12b      	bne.n	800a060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a010:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a012:	429a      	cmp	r2, r3
 800a014:	d124      	bne.n	800a060 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f955 	bl	800a2c6 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a01c:	e020      	b.n	800a060 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d01d      	beq.n	800a060 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2204      	movs	r2, #4
 800a028:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a02c:	e018      	b.n	800a060 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f866 	bl	800a100 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f8d9 	bl	800a1ec <CDC_ProcessReception>
      break;
 800a03a:	e014      	b.n	800a066 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 faf4 	bl	800a62c <USBH_ClrFeature>
 800a044:	4603      	mov	r3, r0
 800a046:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a056:	e005      	b.n	800a064 <USBH_CDC_Process+0x120>

    default:
      break;
 800a058:	bf00      	nop
 800a05a:	e004      	b.n	800a066 <USBH_CDC_Process+0x122>
      break;
 800a05c:	bf00      	nop
 800a05e:	e002      	b.n	800a066 <USBH_CDC_Process+0x122>
      break;
 800a060:	bf00      	nop
 800a062:	e000      	b.n	800a066 <USBH_CDC_Process+0x122>
      break;
 800a064:	bf00      	nop

  }

  return status;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr

0800a084 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	22a1      	movs	r2, #161	; 0xa1
 800a092:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2221      	movs	r2, #33	; 0x21
 800a098:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2207      	movs	r2, #7
 800a0aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2207      	movs	r2, #7
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fade 	bl	800a674 <USBH_CtlReq>
 800a0b8:	4603      	mov	r3, r0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2221      	movs	r2, #33	; 0x21
 800a0d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2207      	movs	r2, #7
 800a0e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fabf 	bl	800a674 <USBH_CtlReq>
 800a0f6:	4603      	mov	r3, r0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af02      	add	r7, sp, #8
 800a106:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a112:	2300      	movs	r3, #0
 800a114:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d002      	beq.n	800a126 <CDC_ProcessTransmission+0x26>
 800a120:	2b02      	cmp	r3, #2
 800a122:	d023      	beq.n	800a16c <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a124:	e05e      	b.n	800a1e4 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	8b12      	ldrh	r2, [r2, #24]
 800a12e:	4293      	cmp	r3, r2
 800a130:	d90b      	bls.n	800a14a <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	69d9      	ldr	r1, [r3, #28]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8b1a      	ldrh	r2, [r3, #24]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	7b5b      	ldrb	r3, [r3, #13]
 800a13e:	2001      	movs	r0, #1
 800a140:	9000      	str	r0, [sp, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fca5 	bl	800aa92 <USBH_BulkSendData>
 800a148:	e00b      	b.n	800a162 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	7b5b      	ldrb	r3, [r3, #13]
 800a158:	2001      	movs	r0, #1
 800a15a:	9000      	str	r0, [sp, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fc98 	bl	800aa92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2202      	movs	r2, #2
 800a166:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a16a:	e03b      	b.n	800a1e4 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	7b5b      	ldrb	r3, [r3, #13]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f004 fbce 	bl	800e914 <USBH_LL_GetURBState>
 800a178:	4603      	mov	r3, r0
 800a17a:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d128      	bne.n	800a1d4 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	8b12      	ldrh	r2, [r2, #24]
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d90e      	bls.n	800a1ac <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	8b12      	ldrh	r2, [r2, #24]
 800a196:	1a9a      	subs	r2, r3, r2
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	8b12      	ldrh	r2, [r2, #24]
 800a1a4:	441a      	add	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	61da      	str	r2, [r3, #28]
 800a1aa:	e002      	b.n	800a1b2 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a1c2:	e00e      	b.n	800a1e2 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f868 	bl	800a2a2 <USBH_CDC_TransmitCallback>
      break;
 800a1d2:	e006      	b.n	800a1e2 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d103      	bne.n	800a1e2 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a1e2:	bf00      	nop
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d002      	beq.n	800a212 <CDC_ProcessReception+0x26>
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d00e      	beq.n	800a22e <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a210:	e043      	b.n	800a29a <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6a19      	ldr	r1, [r3, #32]
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	8b5a      	ldrh	r2, [r3, #26]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	7b1b      	ldrb	r3, [r3, #12]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fc5c 	bl	800aadc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2204      	movs	r2, #4
 800a228:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a22c:	e035      	b.n	800a29a <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	7b1b      	ldrb	r3, [r3, #12]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f004 fb6d 	bl	800e914 <USBH_LL_GetURBState>
 800a23a:	4603      	mov	r3, r0
 800a23c:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a23e:	7cfb      	ldrb	r3, [r7, #19]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d129      	bne.n	800a298 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	7b1b      	ldrb	r3, [r3, #12]
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f004 fad0 	bl	800e7f0 <USBH_LL_GetLastXferSize>
 800a250:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d016      	beq.n	800a28a <CDC_ProcessReception+0x9e>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	8b5b      	ldrh	r3, [r3, #26]
 800a260:	461a      	mov	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4293      	cmp	r3, r2
 800a266:	d910      	bls.n	800a28a <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	6a1a      	ldr	r2, [r3, #32]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	441a      	add	r2, r3
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2203      	movs	r2, #3
 800a284:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a288:	e006      	b.n	800a298 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f80e 	bl	800a2b4 <USBH_CDC_ReceiveCallback>
      break;
 800a298:	bf00      	nop
  }
}
 800a29a:	bf00      	nop
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bc80      	pop	{r7}
 800a2b2:	4770      	bx	lr

0800a2b4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bc80      	pop	{r7}
 800a2c4:	4770      	bx	lr

0800a2c6 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr

0800a2d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e029      	b.n	800a344 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	79fa      	ldrb	r2, [r7, #7]
 800a2f4:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f81f 	bl	800a34c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f004 f9e9 	bl	800e714 <USBH_LL_Init>

  return USBH_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	e008      	b.n	800a370 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	32e0      	adds	r2, #224	; 0xe0
 800a364:	2100      	movs	r1, #0
 800a366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3301      	adds	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b0e      	cmp	r3, #14
 800a374:	d9f3      	bls.n	800a35e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a376:	2300      	movs	r3, #0
 800a378:	60fb      	str	r3, [r7, #12]
 800a37a:	e009      	b.n	800a390 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a396:	d3f1      	bcc.n	800a37c <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2240      	movs	r2, #64	; 0x40
 800a3bc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr

0800a3e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d017      	beq.n	800a424 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10f      	bne.n	800a41e <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a404:	1c59      	adds	r1, r3, #1
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	33dc      	adds	r3, #220	; 0xdc
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
 800a41c:	e004      	b.n	800a428 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a41e:	2302      	movs	r3, #2
 800a420:	73fb      	strb	r3, [r7, #15]
 800a422:	e001      	b.n	800a428 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a424:	2302      	movs	r3, #2
 800a426:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	bc80      	pop	{r7}
 800a432:	4770      	bx	lr

0800a434 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a44a:	78fa      	ldrb	r2, [r7, #3]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d204      	bcs.n	800a45a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	78fa      	ldrb	r2, [r7, #3]
 800a454:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800a458:	e001      	b.n	800a45e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a45a:	2302      	movs	r3, #2
 800a45c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr

0800a46a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b087      	sub	sp, #28
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	4608      	mov	r0, r1
 800a474:	4611      	mov	r1, r2
 800a476:	461a      	mov	r2, r3
 800a478:	4603      	mov	r3, r0
 800a47a:	70fb      	strb	r3, [r7, #3]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70bb      	strb	r3, [r7, #2]
 800a480:	4613      	mov	r3, r2
 800a482:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a488:	2300      	movs	r3, #0
 800a48a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f203 3336 	addw	r3, r3, #822	; 0x336
 800a492:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a494:	e025      	b.n	800a4e2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	221a      	movs	r2, #26
 800a49a:	fb02 f303 	mul.w	r3, r2, r3
 800a49e:	3308      	adds	r3, #8
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	795b      	ldrb	r3, [r3, #5]
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d002      	beq.n	800a4b8 <USBH_FindInterface+0x4e>
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	2bff      	cmp	r3, #255	; 0xff
 800a4b6:	d111      	bne.n	800a4dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a4bc:	78ba      	ldrb	r2, [r7, #2]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d002      	beq.n	800a4c8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4c2:	78bb      	ldrb	r3, [r7, #2]
 800a4c4:	2bff      	cmp	r3, #255	; 0xff
 800a4c6:	d109      	bne.n	800a4dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4cc:	787a      	ldrb	r2, [r7, #1]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d002      	beq.n	800a4d8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a4d2:	787b      	ldrb	r3, [r7, #1]
 800a4d4:	2bff      	cmp	r3, #255	; 0xff
 800a4d6:	d101      	bne.n	800a4dc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
 800a4da:	e006      	b.n	800a4ea <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d9d6      	bls.n	800a496 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a4e8:	23ff      	movs	r3, #255	; 0xff
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	371c      	adds	r7, #28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bc80      	pop	{r7}
 800a4f2:	4770      	bx	lr

0800a4f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f004 f941 	bl	800e784 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a502:	2101      	movs	r1, #1
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f004 fa18 	bl	800e93a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bc80      	pop	{r7}
 800a52e:	4770      	bx	lr

0800a530 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f804 	bl	800a554 <USBH_HandleSof>
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b0b      	cmp	r3, #11
 800a564:	d10a      	bne.n	800a57c <USBH_HandleSof+0x28>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	4798      	blx	r3
  }
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a594:	bf00      	nop
}
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr

0800a59e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800a5ae:	bf00      	nop
}
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bc80      	pop	{r7}
 800a5b6:	4770      	bx	lr

0800a5b8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f004 f8d8 	bl	800e7ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	791b      	ldrb	r3, [r3, #4]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fad0 	bl	800abb6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	795b      	ldrb	r3, [r3, #5]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 faca 	bl	800abb6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d10f      	bne.n	800a660 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	b29a      	uxth	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f805 	bl	800a674 <USBH_CtlReq>
 800a66a:	4603      	mov	r3, r0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4613      	mov	r3, r2
 800a680:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a682:	2301      	movs	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	789b      	ldrb	r3, [r3, #2]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d002      	beq.n	800a694 <USBH_CtlReq+0x20>
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d00f      	beq.n	800a6b2 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800a692:	e034      	b.n	800a6fe <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b0:	e025      	b.n	800a6fe <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f828 	bl	800a708 <USBH_HandleControl>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d108      	bne.n	800a6d4 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d2:	e013      	b.n	800a6fc <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d108      	bne.n	800a6ec <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ea:	e007      	b.n	800a6fc <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d104      	bne.n	800a6fc <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fc:	bf00      	nop
  }
  return status;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a710:	2301      	movs	r3, #1
 800a712:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	7e1b      	ldrb	r3, [r3, #24]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	2b0a      	cmp	r3, #10
 800a720:	f200 814a 	bhi.w	800a9b8 <USBH_HandleControl+0x2b0>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <USBH_HandleControl+0x24>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	0800a773 	.word	0x0800a773
 800a734:	0800a7dd 	.word	0x0800a7dd
 800a738:	0800a803 	.word	0x0800a803
 800a73c:	0800a83b 	.word	0x0800a83b
 800a740:	0800a865 	.word	0x0800a865
 800a744:	0800a8b7 	.word	0x0800a8b7
 800a748:	0800a8d9 	.word	0x0800a8d9
 800a74c:	0800a915 	.word	0x0800a915
 800a750:	0800a93b 	.word	0x0800a93b
 800a754:	0800a979 	.word	0x0800a979
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f103 0110 	add.w	r1, r3, #16
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	795b      	ldrb	r3, [r3, #5]
 800a762:	461a      	mov	r2, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f937 	bl	800a9d8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	761a      	strb	r2, [r3, #24]
      break;
 800a770:	e12d      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	795b      	ldrb	r3, [r3, #5]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f004 f8cb 	bl	800e914 <USBH_LL_GetURBState>
 800a77e:	4603      	mov	r3, r0
 800a780:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d11e      	bne.n	800a7c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a790:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8adb      	ldrh	r3, [r3, #22]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a79a:	7b7b      	ldrb	r3, [r7, #13]
 800a79c:	2b80      	cmp	r3, #128	; 0x80
 800a79e:	d103      	bne.n	800a7a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7a6:	e109      	b.n	800a9bc <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2205      	movs	r2, #5
 800a7ac:	761a      	strb	r2, [r3, #24]
      break;
 800a7ae:	e105      	b.n	800a9bc <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800a7b0:	7b7b      	ldrb	r3, [r7, #13]
 800a7b2:	2b80      	cmp	r3, #128	; 0x80
 800a7b4:	d103      	bne.n	800a7be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2209      	movs	r2, #9
 800a7ba:	761a      	strb	r2, [r3, #24]
      break;
 800a7bc:	e0fe      	b.n	800a9bc <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2207      	movs	r2, #7
 800a7c2:	761a      	strb	r2, [r3, #24]
      break;
 800a7c4:	e0fa      	b.n	800a9bc <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d003      	beq.n	800a7d4 <USBH_HandleControl+0xcc>
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	f040 80f4 	bne.w	800a9bc <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220b      	movs	r2, #11
 800a7d8:	761a      	strb	r2, [r3, #24]
      break;
 800a7da:	e0ef      	b.n	800a9bc <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6899      	ldr	r1, [r3, #8]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	899a      	ldrh	r2, [r3, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	791b      	ldrb	r3, [r3, #4]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f92e 	bl	800aa56 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2204      	movs	r2, #4
 800a7fe:	761a      	strb	r2, [r3, #24]
      break;
 800a800:	e0e5      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	791b      	ldrb	r3, [r3, #4]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f004 f883 	bl	800e914 <USBH_LL_GetURBState>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d102      	bne.n	800a81e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2209      	movs	r2, #9
 800a81c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	2b05      	cmp	r3, #5
 800a822:	d102      	bne.n	800a82a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a824:	2303      	movs	r3, #3
 800a826:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a828:	e0ca      	b.n	800a9c0 <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	f040 80c7 	bne.w	800a9c0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	220b      	movs	r2, #11
 800a836:	761a      	strb	r2, [r3, #24]
      break;
 800a838:	e0c2      	b.n	800a9c0 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6899      	ldr	r1, [r3, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	899a      	ldrh	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	795b      	ldrb	r3, [r3, #5]
 800a846:	2001      	movs	r0, #1
 800a848:	9000      	str	r0, [sp, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f8de 	bl	800aa0c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a856:	b29a      	uxth	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2206      	movs	r2, #6
 800a860:	761a      	strb	r2, [r3, #24]
      break;
 800a862:	e0b4      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	795b      	ldrb	r3, [r3, #5]
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f004 f852 	bl	800e914 <USBH_LL_GetURBState>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d103      	bne.n	800a882 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2207      	movs	r2, #7
 800a87e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a880:	e0a0      	b.n	800a9c4 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	2b05      	cmp	r3, #5
 800a886:	d105      	bne.n	800a894 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	220c      	movs	r2, #12
 800a88c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a88e:	2303      	movs	r3, #3
 800a890:	73fb      	strb	r3, [r7, #15]
      break;
 800a892:	e097      	b.n	800a9c4 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d103      	bne.n	800a8a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2205      	movs	r2, #5
 800a89e:	761a      	strb	r2, [r3, #24]
      break;
 800a8a0:	e090      	b.n	800a9c4 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	f040 808d 	bne.w	800a9c4 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	220b      	movs	r2, #11
 800a8ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b4:	e086      	b.n	800a9c4 <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	791b      	ldrb	r3, [r3, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f8c9 	bl	800aa56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	761a      	strb	r2, [r3, #24]

      break;
 800a8d6:	e07a      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	791b      	ldrb	r3, [r3, #4]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f004 f818 	bl	800e914 <USBH_LL_GetURBState>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d105      	bne.n	800a8fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	220d      	movs	r2, #13
 800a8f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a8f8:	e066      	b.n	800a9c8 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d103      	bne.n	800a908 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	220b      	movs	r2, #11
 800a904:	761a      	strb	r2, [r3, #24]
      break;
 800a906:	e05f      	b.n	800a9c8 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d15c      	bne.n	800a9c8 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800a90e:	2303      	movs	r3, #3
 800a910:	73fb      	strb	r3, [r7, #15]
      break;
 800a912:	e059      	b.n	800a9c8 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	795b      	ldrb	r3, [r3, #5]
 800a918:	2201      	movs	r2, #1
 800a91a:	9200      	str	r2, [sp, #0]
 800a91c:	2200      	movs	r2, #0
 800a91e:	2100      	movs	r1, #0
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f873 	bl	800aa0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	220a      	movs	r2, #10
 800a936:	761a      	strb	r2, [r3, #24]
      break;
 800a938:	e049      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	795b      	ldrb	r3, [r3, #5]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f003 ffe7 	bl	800e914 <USBH_LL_GetURBState>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d105      	bne.n	800a95c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	220d      	movs	r2, #13
 800a958:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a95a:	e037      	b.n	800a9cc <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d103      	bne.n	800a96a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2209      	movs	r2, #9
 800a966:	761a      	strb	r2, [r3, #24]
      break;
 800a968:	e030      	b.n	800a9cc <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b04      	cmp	r3, #4
 800a96e:	d12d      	bne.n	800a9cc <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	220b      	movs	r2, #11
 800a974:	761a      	strb	r2, [r3, #24]
      break;
 800a976:	e029      	b.n	800a9cc <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7e5b      	ldrb	r3, [r3, #25]
 800a97c:	3301      	adds	r3, #1
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	765a      	strb	r2, [r3, #25]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7e5b      	ldrb	r3, [r3, #25]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d806      	bhi.n	800a99a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a998:	e019      	b.n	800a9ce <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a9a0:	2106      	movs	r1, #6
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b6:	e00a      	b.n	800a9ce <USBH_HandleControl+0x2c6>

    default:
      break;
 800a9b8:	bf00      	nop
 800a9ba:	e008      	b.n	800a9ce <USBH_HandleControl+0x2c6>
      break;
 800a9bc:	bf00      	nop
 800a9be:	e006      	b.n	800a9ce <USBH_HandleControl+0x2c6>
      break;
 800a9c0:	bf00      	nop
 800a9c2:	e004      	b.n	800a9ce <USBH_HandleControl+0x2c6>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e002      	b.n	800a9ce <USBH_HandleControl+0x2c6>
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <USBH_HandleControl+0x2c6>
      break;
 800a9cc:	bf00      	nop
  }

  return status;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af04      	add	r7, sp, #16
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9e6:	79f9      	ldrb	r1, [r7, #7]
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9303      	str	r3, [sp, #12]
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	9302      	str	r3, [sp, #8]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f003 ff58 	bl	800e8b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af04      	add	r7, sp, #16
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4611      	mov	r1, r2
 800aa18:	461a      	mov	r2, r3
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	80fb      	strh	r3, [r7, #6]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa30:	7979      	ldrb	r1, [r7, #5]
 800aa32:	7e3b      	ldrb	r3, [r7, #24]
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	9302      	str	r3, [sp, #8]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	2301      	movs	r3, #1
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	2300      	movs	r3, #0
 800aa44:	2200      	movs	r2, #0
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f003 ff33 	bl	800e8b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af04      	add	r7, sp, #16
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	4611      	mov	r1, r2
 800aa62:	461a      	mov	r2, r3
 800aa64:	460b      	mov	r3, r1
 800aa66:	80fb      	strh	r3, [r7, #6]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa6c:	7979      	ldrb	r1, [r7, #5]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9303      	str	r3, [sp, #12]
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	9302      	str	r3, [sp, #8]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2201      	movs	r2, #1
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f003 ff15 	bl	800e8b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aa88:	2300      	movs	r3, #0

}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b088      	sub	sp, #32
 800aa96:	af04      	add	r7, sp, #16
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	80fb      	strh	r3, [r7, #6]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aab6:	7979      	ldrb	r1, [r7, #5]
 800aab8:	7e3b      	ldrb	r3, [r7, #24]
 800aaba:	9303      	str	r3, [sp, #12]
 800aabc:	88fb      	ldrh	r3, [r7, #6]
 800aabe:	9302      	str	r3, [sp, #8]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	2301      	movs	r3, #1
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	2302      	movs	r3, #2
 800aaca:	2200      	movs	r2, #0
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f003 fef0 	bl	800e8b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4611      	mov	r1, r2
 800aae8:	461a      	mov	r2, r3
 800aaea:	460b      	mov	r3, r1
 800aaec:	80fb      	strh	r3, [r7, #6]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaf2:	7979      	ldrb	r1, [r7, #5]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	88fb      	ldrh	r3, [r7, #6]
 800aafa:	9302      	str	r3, [sp, #8]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	2301      	movs	r3, #1
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2302      	movs	r3, #2
 800ab06:	2201      	movs	r2, #1
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f003 fed2 	bl	800e8b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af04      	add	r7, sp, #16
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	4608      	mov	r0, r1
 800ab22:	4611      	mov	r1, r2
 800ab24:	461a      	mov	r2, r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	70fb      	strb	r3, [r7, #3]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	70bb      	strb	r3, [r7, #2]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab32:	7878      	ldrb	r0, [r7, #1]
 800ab34:	78ba      	ldrb	r2, [r7, #2]
 800ab36:	78f9      	ldrb	r1, [r7, #3]
 800ab38:	8b3b      	ldrh	r3, [r7, #24]
 800ab3a:	9302      	str	r3, [sp, #8]
 800ab3c:	7d3b      	ldrb	r3, [r7, #20]
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	7c3b      	ldrb	r3, [r7, #16]
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4603      	mov	r3, r0
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f003 fe65 	bl	800e816 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f003 fe84 	bl	800e874 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f832 	bl	800abec <USBH_GetFreePipe>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab8c:	89fb      	ldrh	r3, [r7, #14]
 800ab8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d009      	beq.n	800abaa <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	89fa      	ldrh	r2, [r7, #14]
 800ab9a:	f002 020f 	and.w	r2, r2, #15
 800ab9e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32e0      	adds	r2, #224	; 0xe0
 800aba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800abaa:	89fb      	ldrh	r3, [r7, #14]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	460b      	mov	r3, r1
 800abc0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800abc2:	78fb      	ldrb	r3, [r7, #3]
 800abc4:	2b0a      	cmp	r3, #10
 800abc6:	d80b      	bhi.n	800abe0 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abc8:	78fa      	ldrb	r2, [r7, #3]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	32e0      	adds	r2, #224	; 0xe0
 800abce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd2:	78fa      	ldrb	r2, [r7, #3]
 800abd4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	32e0      	adds	r2, #224	; 0xe0
 800abdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr

0800abec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
 800abfc:	e00e      	b.n	800ac1c <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abfe:	7bfa      	ldrb	r2, [r7, #15]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	32e0      	adds	r2, #224	; 0xe0
 800ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	e007      	b.n	800ac26 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	2b0a      	cmp	r3, #10
 800ac20:	d9ed      	bls.n	800abfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac22:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac3a:	79fb      	ldrb	r3, [r7, #7]
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <disk_status+0x30>)
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	79fa      	ldrb	r2, [r7, #7]
 800ac48:	4905      	ldr	r1, [pc, #20]	; (800ac60 <disk_status+0x30>)
 800ac4a:	440a      	add	r2, r1
 800ac4c:	7a12      	ldrb	r2, [r2, #8]
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	2000a3f4 	.word	0x2000a3f4

0800ac64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	4a0d      	ldr	r2, [pc, #52]	; (800acac <disk_initialize+0x48>)
 800ac76:	5cd3      	ldrb	r3, [r2, r3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d111      	bne.n	800aca0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	4a0b      	ldr	r2, [pc, #44]	; (800acac <disk_initialize+0x48>)
 800ac80:	2101      	movs	r1, #1
 800ac82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	4a09      	ldr	r2, [pc, #36]	; (800acac <disk_initialize+0x48>)
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	79fa      	ldrb	r2, [r7, #7]
 800ac92:	4906      	ldr	r1, [pc, #24]	; (800acac <disk_initialize+0x48>)
 800ac94:	440a      	add	r2, r1
 800ac96:	7a12      	ldrb	r2, [r2, #8]
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4798      	blx	r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	2000a3f4 	.word	0x2000a3f4

0800acb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800acb0:	b590      	push	{r4, r7, lr}
 800acb2:	b087      	sub	sp, #28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	4a0a      	ldr	r2, [pc, #40]	; (800acec <disk_read+0x3c>)
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	689c      	ldr	r4, [r3, #8]
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4a07      	ldr	r2, [pc, #28]	; (800acec <disk_read+0x3c>)
 800acd0:	4413      	add	r3, r2
 800acd2:	7a18      	ldrb	r0, [r3, #8]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	47a0      	blx	r4
 800acdc:	4603      	mov	r3, r0
 800acde:	75fb      	strb	r3, [r7, #23]
  return res;
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd90      	pop	{r4, r7, pc}
 800acea:	bf00      	nop
 800acec:	2000a3f4 	.word	0x2000a3f4

0800acf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4a0a      	ldr	r2, [pc, #40]	; (800ad2c <disk_write+0x3c>)
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68dc      	ldr	r4, [r3, #12]
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4a07      	ldr	r2, [pc, #28]	; (800ad2c <disk_write+0x3c>)
 800ad10:	4413      	add	r3, r2
 800ad12:	7a18      	ldrb	r0, [r3, #8]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	47a0      	blx	r4
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd90      	pop	{r4, r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	2000a3f4 	.word	0x2000a3f4

0800ad30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	603a      	str	r2, [r7, #0]
 800ad3a:	71fb      	strb	r3, [r7, #7]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	4a09      	ldr	r2, [pc, #36]	; (800ad68 <disk_ioctl+0x38>)
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	79fa      	ldrb	r2, [r7, #7]
 800ad4e:	4906      	ldr	r1, [pc, #24]	; (800ad68 <disk_ioctl+0x38>)
 800ad50:	440a      	add	r2, r1
 800ad52:	7a10      	ldrb	r0, [r2, #8]
 800ad54:	79b9      	ldrb	r1, [r7, #6]
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4798      	blx	r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2000a3f4 	.word	0x2000a3f4

0800ad6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800ad80:	e007      	b.n	800ad92 <mem_cpy+0x26>
		*d++ = *s++;
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	1c53      	adds	r3, r2, #1
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	1c59      	adds	r1, r3, #1
 800ad8c:	6179      	str	r1, [r7, #20]
 800ad8e:	7812      	ldrb	r2, [r2, #0]
 800ad90:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	1e5a      	subs	r2, r3, #1
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f2      	bne.n	800ad82 <mem_cpy+0x16>
}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr

0800ada8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800adb8:	e005      	b.n	800adc6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	1c5a      	adds	r2, r3, #1
 800adbe:	617a      	str	r2, [r7, #20]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	1e5a      	subs	r2, r3, #1
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f4      	bne.n	800adba <mem_set+0x12>
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	bc80      	pop	{r7}
 800adda:	4770      	bx	lr

0800addc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800addc:	b480      	push	{r7}
 800adde:	b089      	sub	sp, #36	; 0x24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800adf4:	bf00      	nop
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	1e5a      	subs	r2, r3, #1
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00d      	beq.n	800ae1c <mem_cmp+0x40>
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	61fa      	str	r2, [r7, #28]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	61ba      	str	r2, [r7, #24]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	1acb      	subs	r3, r1, r3
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0ec      	beq.n	800adf6 <mem_cmp+0x1a>
	return r;
 800ae1c:	697b      	ldr	r3, [r7, #20]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3724      	adds	r7, #36	; 0x24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bc80      	pop	{r7}
 800ae26:	4770      	bx	lr

0800ae28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae32:	e002      	b.n	800ae3a <chk_chr+0x12>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3301      	adds	r3, #1
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <chk_chr+0x26>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d1f2      	bne.n	800ae34 <chk_chr+0xc>
	return *str;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	781b      	ldrb	r3, [r3, #0]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	e03d      	b.n	800aeec <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800ae70:	4932      	ldr	r1, [pc, #200]	; (800af3c <chk_lock+0xe0>)
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	4613      	mov	r3, r2
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d02e      	beq.n	800aee2 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ae84:	492d      	ldr	r1, [pc, #180]	; (800af3c <chk_lock+0xe0>)
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d122      	bne.n	800aee6 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800aea0:	4926      	ldr	r1, [pc, #152]	; (800af3c <chk_lock+0xe0>)
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4613      	mov	r3, r2
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	4413      	add	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	440b      	add	r3, r1
 800aeae:	3304      	adds	r3, #4
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb8:	3308      	adds	r3, #8
 800aeba:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d112      	bne.n	800aee6 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800aec0:	491e      	ldr	r1, [pc, #120]	; (800af3c <chk_lock+0xe0>)
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4613      	mov	r3, r2
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	3308      	adds	r3, #8
 800aed0:	881a      	ldrh	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed8:	3306      	adds	r3, #6
 800aeda:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800aedc:	429a      	cmp	r2, r3
 800aede:	d102      	bne.n	800aee6 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800aee0:	e007      	b.n	800aef2 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d9be      	bls.n	800ae70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d109      	bne.n	800af0c <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <chk_lock+0xa8>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d101      	bne.n	800af08 <chk_lock+0xac>
 800af04:	2300      	movs	r3, #0
 800af06:	e013      	b.n	800af30 <chk_lock+0xd4>
 800af08:	2312      	movs	r3, #18
 800af0a:	e011      	b.n	800af30 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10b      	bne.n	800af2a <chk_lock+0xce>
 800af12:	490a      	ldr	r1, [pc, #40]	; (800af3c <chk_lock+0xe0>)
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	4613      	mov	r3, r2
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	4413      	add	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	440b      	add	r3, r1
 800af20:	330a      	adds	r3, #10
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af28:	d101      	bne.n	800af2e <chk_lock+0xd2>
 800af2a:	2310      	movs	r3, #16
 800af2c:	e000      	b.n	800af30 <chk_lock+0xd4>
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	bc80      	pop	{r7}
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	2000a1dc 	.word	0x2000a1dc

0800af40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	e002      	b.n	800af52 <enq_lock+0x12>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	607b      	str	r3, [r7, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d809      	bhi.n	800af6c <enq_lock+0x2c>
 800af58:	490a      	ldr	r1, [pc, #40]	; (800af84 <enq_lock+0x44>)
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1ef      	bne.n	800af4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	bf14      	ite	ne
 800af72:	2301      	movne	r3, #1
 800af74:	2300      	moveq	r3, #0
 800af76:	b2db      	uxtb	r3, r3
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	2000a1dc 	.word	0x2000a1dc

0800af88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e030      	b.n	800affa <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800af98:	495a      	ldr	r1, [pc, #360]	; (800b104 <inc_lock+0x17c>)
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4613      	mov	r3, r2
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d11f      	bne.n	800aff4 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800afb4:	4953      	ldr	r1, [pc, #332]	; (800b104 <inc_lock+0x17c>)
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4613      	mov	r3, r2
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	3304      	adds	r3, #4
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afcc:	3308      	adds	r3, #8
 800afce:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d10f      	bne.n	800aff4 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800afd4:	494b      	ldr	r1, [pc, #300]	; (800b104 <inc_lock+0x17c>)
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4613      	mov	r3, r2
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	440b      	add	r3, r1
 800afe2:	3308      	adds	r3, #8
 800afe4:	881a      	ldrh	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afec:	3306      	adds	r3, #6
 800afee:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d006      	beq.n	800b002 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d9cb      	bls.n	800af98 <inc_lock+0x10>
 800b000:	e000      	b.n	800b004 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800b002:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d14a      	bne.n	800b0a0 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e002      	b.n	800b016 <inc_lock+0x8e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d809      	bhi.n	800b030 <inc_lock+0xa8>
 800b01c:	4939      	ldr	r1, [pc, #228]	; (800b104 <inc_lock+0x17c>)
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	440b      	add	r3, r1
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1ef      	bne.n	800b010 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d101      	bne.n	800b03a <inc_lock+0xb2>
 800b036:	2300      	movs	r3, #0
 800b038:	e05f      	b.n	800b0fa <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b040:	6819      	ldr	r1, [r3, #0]
 800b042:	4830      	ldr	r0, [pc, #192]	; (800b104 <inc_lock+0x17c>)
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4613      	mov	r3, r2
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4403      	add	r3, r0
 800b050:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b058:	3308      	adds	r3, #8
 800b05a:	6819      	ldr	r1, [r3, #0]
 800b05c:	4829      	ldr	r0, [pc, #164]	; (800b104 <inc_lock+0x17c>)
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4613      	mov	r3, r2
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4403      	add	r3, r0
 800b06a:	3304      	adds	r3, #4
 800b06c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b074:	3306      	adds	r3, #6
 800b076:	8818      	ldrh	r0, [r3, #0]
 800b078:	4922      	ldr	r1, [pc, #136]	; (800b104 <inc_lock+0x17c>)
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3308      	adds	r3, #8
 800b088:	4602      	mov	r2, r0
 800b08a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b08c:	491d      	ldr	r1, [pc, #116]	; (800b104 <inc_lock+0x17c>)
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4613      	mov	r3, r2
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	440b      	add	r3, r1
 800b09a:	330a      	adds	r3, #10
 800b09c:	2200      	movs	r2, #0
 800b09e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00c      	beq.n	800b0c0 <inc_lock+0x138>
 800b0a6:	4917      	ldr	r1, [pc, #92]	; (800b104 <inc_lock+0x17c>)
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	330a      	adds	r3, #10
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <inc_lock+0x138>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e01c      	b.n	800b0fa <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <inc_lock+0x156>
 800b0c6:	490f      	ldr	r1, [pc, #60]	; (800b104 <inc_lock+0x17c>)
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	330a      	adds	r3, #10
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	b299      	uxth	r1, r3
 800b0dc:	e001      	b.n	800b0e2 <inc_lock+0x15a>
 800b0de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0e2:	4808      	ldr	r0, [pc, #32]	; (800b104 <inc_lock+0x17c>)
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4403      	add	r3, r0
 800b0f0:	330a      	adds	r3, #10
 800b0f2:	460a      	mov	r2, r1
 800b0f4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3301      	adds	r3, #1
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bc80      	pop	{r7}
 800b102:	4770      	bx	lr
 800b104:	2000a1dc 	.word	0x2000a1dc

0800b108 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3b01      	subs	r3, #1
 800b114:	607b      	str	r3, [r7, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d82e      	bhi.n	800b17a <dec_lock+0x72>
		n = Files[i].ctr;
 800b11c:	491b      	ldr	r1, [pc, #108]	; (800b18c <dec_lock+0x84>)
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	4613      	mov	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4413      	add	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	440b      	add	r3, r1
 800b12a:	330a      	adds	r3, #10
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b136:	d101      	bne.n	800b13c <dec_lock+0x34>
 800b138:	2300      	movs	r3, #0
 800b13a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b13c:	89fb      	ldrh	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <dec_lock+0x40>
 800b142:	89fb      	ldrh	r3, [r7, #14]
 800b144:	3b01      	subs	r3, #1
 800b146:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b148:	4910      	ldr	r1, [pc, #64]	; (800b18c <dec_lock+0x84>)
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	440b      	add	r3, r1
 800b156:	330a      	adds	r3, #10
 800b158:	89fa      	ldrh	r2, [r7, #14]
 800b15a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b15c:	89fb      	ldrh	r3, [r7, #14]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <dec_lock+0x6c>
 800b162:	490a      	ldr	r1, [pc, #40]	; (800b18c <dec_lock+0x84>)
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4613      	mov	r3, r2
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	440b      	add	r3, r1
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	737b      	strb	r3, [r7, #13]
 800b178:	e001      	b.n	800b17e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b17a:	2302      	movs	r3, #2
 800b17c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b17e:	7b7b      	ldrb	r3, [r7, #13]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	2000a1dc 	.word	0x2000a1dc

0800b190 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b198:	2300      	movs	r3, #0
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e016      	b.n	800b1cc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b19e:	4910      	ldr	r1, [pc, #64]	; (800b1e0 <clear_lock+0x50>)
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d108      	bne.n	800b1c6 <clear_lock+0x36>
 800b1b4:	490a      	ldr	r1, [pc, #40]	; (800b1e0 <clear_lock+0x50>)
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d9e5      	bls.n	800b19e <clear_lock+0xe>
	}
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	2000a1dc 	.word	0x2000a1dc

0800b1e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d047      	beq.n	800b28e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b204:	330c      	adds	r3, #12
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b210:	3301      	adds	r3, #1
 800b212:	7818      	ldrb	r0, [r3, #0]
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	2301      	movs	r3, #1
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	f7ff fd69 	bl	800acf0 <disk_write>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <sync_window+0x46>
			res = FR_DISK_ERR;
 800b224:	2301      	movs	r3, #1
 800b226:	73fb      	strb	r3, [r7, #15]
 800b228:	e031      	b.n	800b28e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b230:	3304      	adds	r3, #4
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b248:	3318      	adds	r3, #24
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d21e      	bcs.n	800b28e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b256:	3303      	adds	r3, #3
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	613b      	str	r3, [r7, #16]
 800b25c:	e014      	b.n	800b288 <sync_window+0xa4>
					wsect += fs->fsize;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b264:	3318      	adds	r3, #24
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	4413      	add	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b274:	3301      	adds	r3, #1
 800b276:	7818      	ldrb	r0, [r3, #0]
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	2301      	movs	r3, #1
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	f7ff fd37 	bl	800acf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	3b01      	subs	r3, #1
 800b286:	613b      	str	r3, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d8e7      	bhi.n	800b25e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d01f      	beq.n	800b2f6 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff ff94 	bl	800b1e4 <sync_window>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d117      	bne.n	800b2f6 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	7818      	ldrb	r0, [r3, #0]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	f7ff fceb 	bl	800acb0 <disk_read>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7ff ff6b 	bl	800b1e4 <sync_window>
 800b30e:	4603      	mov	r3, r0
 800b310:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f040 80bd 	bne.w	800b494 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b03      	cmp	r3, #3
 800b324:	f040 80a7 	bne.w	800b476 <sync_fs+0x176>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b32e:	3305      	adds	r3, #5
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b01      	cmp	r3, #1
 800b334:	f040 809f 	bne.w	800b476 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b340:	330a      	adds	r3, #10
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	2100      	movs	r1, #0
 800b348:	f7ff fd2e 	bl	800ada8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2255      	movs	r2, #85	; 0x55
 800b350:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	22aa      	movs	r2, #170	; 0xaa
 800b358:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2252      	movs	r2, #82	; 0x52
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2252      	movs	r2, #82	; 0x52
 800b366:	705a      	strb	r2, [r3, #1]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2261      	movs	r2, #97	; 0x61
 800b36c:	709a      	strb	r2, [r3, #2]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2241      	movs	r2, #65	; 0x41
 800b372:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2272      	movs	r2, #114	; 0x72
 800b378:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2272      	movs	r2, #114	; 0x72
 800b380:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2241      	movs	r2, #65	; 0x41
 800b388:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2261      	movs	r2, #97	; 0x61
 800b390:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b39a:	3310      	adds	r3, #16
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ac:	3310      	adds	r3, #16
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	0a1b      	lsrs	r3, r3, #8
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c4:	3310      	adds	r3, #16
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	0c1b      	lsrs	r3, r3, #16
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d8:	3310      	adds	r3, #16
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	0e1b      	lsrs	r3, r3, #24
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ec:	330c      	adds	r3, #12
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fe:	330c      	adds	r3, #12
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	0a1b      	lsrs	r3, r3, #8
 800b406:	b29b      	uxth	r3, r3
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b416:	330c      	adds	r3, #12
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	0c1b      	lsrs	r3, r3, #16
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b42a:	330c      	adds	r3, #12
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	0e1b      	lsrs	r3, r3, #24
 800b430:	b2da      	uxtb	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43e:	331c      	adds	r3, #28
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b44a:	330c      	adds	r3, #12
 800b44c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b454:	3301      	adds	r3, #1
 800b456:	7818      	ldrb	r0, [r3, #0]
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b460:	330c      	adds	r3, #12
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	2301      	movs	r3, #1
 800b466:	f7ff fc43 	bl	800acf0 <disk_write>
			fs->fsi_flag = 0;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b470:	3305      	adds	r3, #5
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b47c:	3301      	adds	r3, #1
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff fc53 	bl	800ad30 <disk_ioctl>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	3b02      	subs	r3, #2
 800b4ac:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3b02      	subs	r3, #2
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d301      	bcc.n	800b4c4 <clust2sect+0x26>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e00e      	b.n	800b4e2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ca:	3302      	adds	r3, #2
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	fb03 f202 	mul.w	r2, r3, r2
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b4dc:	3308      	adds	r3, #8
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4413      	add	r3, r2
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bc80      	pop	{r7}
 800b4ea:	4770      	bx	lr

0800b4ec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d907      	bls.n	800b50c <get_fat+0x20>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b502:	3314      	adds	r3, #20
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d302      	bcc.n	800b512 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b50c:	2301      	movs	r3, #1
 800b50e:	617b      	str	r3, [r7, #20]
 800b510:	e0ec      	b.n	800b6ec <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b512:	f04f 33ff 	mov.w	r3, #4294967295
 800b516:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b03      	cmp	r3, #3
 800b522:	f000 809e 	beq.w	800b662 <get_fat+0x176>
 800b526:	2b03      	cmp	r3, #3
 800b528:	f300 80d6 	bgt.w	800b6d8 <get_fat+0x1ec>
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d002      	beq.n	800b536 <get_fat+0x4a>
 800b530:	2b02      	cmp	r3, #2
 800b532:	d063      	beq.n	800b5fc <get_fat+0x110>
 800b534:	e0d0      	b.n	800b6d8 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	085b      	lsrs	r3, r3, #1
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b552:	330a      	adds	r3, #10
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b55e:	4413      	add	r3, r2
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff fe98 	bl	800b298 <move_window>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f040 80b7 	bne.w	800b6de <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	60fa      	str	r2, [r7, #12]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b57c:	320a      	adds	r2, #10
 800b57e:	8812      	ldrh	r2, [r2, #0]
 800b580:	fbb3 f1f2 	udiv	r1, r3, r2
 800b584:	fb02 f201 	mul.w	r2, r2, r1
 800b588:	1a9b      	subs	r3, r3, r2
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	5cd3      	ldrb	r3, [r2, r3]
 800b58e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59e:	330a      	adds	r3, #10
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5aa:	4413      	add	r3, r2
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fe72 	bl	800b298 <move_window>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f040 8093 	bne.w	800b6e2 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c2:	330a      	adds	r3, #10
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5ce:	fb02 f201 	mul.w	r2, r2, r1
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	5cd3      	ldrb	r3, [r2, r3]
 800b5d8:	021b      	lsls	r3, r3, #8
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <get_fat+0x106>
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	091b      	lsrs	r3, r3, #4
 800b5f0:	e002      	b.n	800b5f8 <get_fat+0x10c>
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f8:	617b      	str	r3, [r7, #20]
			break;
 800b5fa:	e077      	b.n	800b6ec <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b60a:	330a      	adds	r3, #10
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	085b      	lsrs	r3, r3, #1
 800b610:	b29b      	uxth	r3, r3
 800b612:	4619      	mov	r1, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	fbb3 f3f1 	udiv	r3, r3, r1
 800b61a:	4413      	add	r3, r2
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff fe3a 	bl	800b298 <move_window>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d15d      	bne.n	800b6e6 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	005a      	lsls	r2, r3, #1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b634:	330a      	adds	r3, #10
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	fbb2 f1f3 	udiv	r1, r2, r3
 800b63c:	fb03 f301 	mul.w	r3, r3, r1
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	3301      	adds	r3, #1
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	b21a      	sxth	r2, r3
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	b21b      	sxth	r3, r3
 800b658:	4313      	orrs	r3, r2
 800b65a:	b21b      	sxth	r3, r3
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	617b      	str	r3, [r7, #20]
			break;
 800b660:	e044      	b.n	800b6ec <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b670:	330a      	adds	r3, #10
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	089b      	lsrs	r3, r3, #2
 800b676:	b29b      	uxth	r3, r3
 800b678:	4619      	mov	r1, r3
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b680:	4413      	add	r3, r2
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fe07 	bl	800b298 <move_window>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d12c      	bne.n	800b6ea <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	009a      	lsls	r2, r3, #2
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69a:	330a      	adds	r3, #10
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a2:	fb03 f301 	mul.w	r3, r3, r1
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3303      	adds	r3, #3
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	061a      	lsls	r2, r3, #24
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	041b      	lsls	r3, r3, #16
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	7812      	ldrb	r2, [r2, #0]
 800b6c6:	0212      	lsls	r2, r2, #8
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	7812      	ldrb	r2, [r2, #0]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6d4:	617b      	str	r3, [r7, #20]
			break;
 800b6d6:	e009      	b.n	800b6ec <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800b6d8:	2301      	movs	r3, #1
 800b6da:	617b      	str	r3, [r7, #20]
 800b6dc:	e006      	b.n	800b6ec <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6de:	bf00      	nop
 800b6e0:	e004      	b.n	800b6ec <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6e2:	bf00      	nop
 800b6e4:	e002      	b.n	800b6ec <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6e6:	bf00      	nop
 800b6e8:	e000      	b.n	800b6ec <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6ea:	bf00      	nop
		}
	}

	return val;
 800b6ec:	697b      	ldr	r3, [r7, #20]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b088      	sub	sp, #32
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	60b9      	str	r1, [r7, #8]
 800b700:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d907      	bls.n	800b718 <put_fat+0x22>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70e:	3314      	adds	r3, #20
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	429a      	cmp	r2, r3
 800b716:	d302      	bcc.n	800b71e <put_fat+0x28>
		res = FR_INT_ERR;
 800b718:	2302      	movs	r3, #2
 800b71a:	77fb      	strb	r3, [r7, #31]
 800b71c:	e146      	b.n	800b9ac <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	2b03      	cmp	r3, #3
 800b728:	f000 80d9 	beq.w	800b8de <put_fat+0x1e8>
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	f300 8133 	bgt.w	800b998 <put_fat+0x2a2>
 800b732:	2b01      	cmp	r3, #1
 800b734:	d003      	beq.n	800b73e <put_fat+0x48>
 800b736:	2b02      	cmp	r3, #2
 800b738:	f000 8095 	beq.w	800b866 <put_fat+0x170>
 800b73c:	e12c      	b.n	800b998 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	085b      	lsrs	r3, r3, #1
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	4413      	add	r3, r2
 800b74a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b75a:	330a      	adds	r3, #10
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	4619      	mov	r1, r3
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	fbb3 f3f1 	udiv	r3, r3, r1
 800b766:	4413      	add	r3, r2
 800b768:	4619      	mov	r1, r3
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff fd94 	bl	800b298 <move_window>
 800b770:	4603      	mov	r3, r0
 800b772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b774:	7ffb      	ldrb	r3, [r7, #31]
 800b776:	2b00      	cmp	r3, #0
 800b778:	f040 8111 	bne.w	800b99e <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	617a      	str	r2, [r7, #20]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b788:	320a      	adds	r2, #10
 800b78a:	8812      	ldrh	r2, [r2, #0]
 800b78c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b790:	fb02 f201 	mul.w	r2, r2, r1
 800b794:	1a9b      	subs	r3, r3, r2
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	4413      	add	r3, r2
 800b79a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <put_fat+0xcc>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	b25b      	sxtb	r3, r3
 800b7ac:	f003 030f 	and.w	r3, r3, #15
 800b7b0:	b25a      	sxtb	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	e001      	b.n	800b7c6 <put_fat+0xd0>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e4:	330a      	adds	r3, #10
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7ff fd4f 	bl	800b298 <move_window>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7fe:	7ffb      	ldrb	r3, [r7, #31]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f040 80ce 	bne.w	800b9a2 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b80c:	330a      	adds	r3, #10
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	fbb3 f1f2 	udiv	r1, r3, r2
 800b818:	fb02 f201 	mul.w	r2, r2, r1
 800b81c:	1a9b      	subs	r3, r3, r2
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4413      	add	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <put_fat+0x140>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	b2db      	uxtb	r3, r3
 800b834:	e00e      	b.n	800b854 <put_fat+0x15e>
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	b25b      	sxtb	r3, r3
 800b83c:	f023 030f 	bic.w	r3, r3, #15
 800b840:	b25a      	sxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	b25b      	sxtb	r3, r3
 800b848:	f003 030f 	and.w	r3, r3, #15
 800b84c:	b25b      	sxtb	r3, r3
 800b84e:	4313      	orrs	r3, r2
 800b850:	b25b      	sxtb	r3, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85e:	3304      	adds	r3, #4
 800b860:	2201      	movs	r2, #1
 800b862:	701a      	strb	r2, [r3, #0]
			break;
 800b864:	e0a2      	b.n	800b9ac <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b874:	330a      	adds	r3, #10
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	085b      	lsrs	r3, r3, #1
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4619      	mov	r1, r3
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	fbb3 f3f1 	udiv	r3, r3, r1
 800b884:	4413      	add	r3, r2
 800b886:	4619      	mov	r1, r3
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fd05 	bl	800b298 <move_window>
 800b88e:	4603      	mov	r3, r0
 800b890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b892:	7ffb      	ldrb	r3, [r7, #31]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f040 8086 	bne.w	800b9a6 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	005a      	lsls	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a4:	330a      	adds	r3, #10
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8ac:	fb03 f301 	mul.w	r3, r3, r1
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	0a1b      	lsrs	r3, r3, #8
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	b2d2      	uxtb	r2, r2
 800b8ce:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	2201      	movs	r2, #1
 800b8da:	701a      	strb	r2, [r3, #0]
			break;
 800b8dc:	e066      	b.n	800b9ac <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ec:	330a      	adds	r3, #10
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	089b      	lsrs	r3, r3, #2
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4619      	mov	r1, r3
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff fcc9 	bl	800b298 <move_window>
 800b906:	4603      	mov	r3, r0
 800b908:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b90a:	7ffb      	ldrb	r3, [r7, #31]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d14c      	bne.n	800b9aa <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	009a      	lsls	r2, r3, #2
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91a:	330a      	adds	r3, #10
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b922:	fb03 f301 	mul.w	r3, r3, r1
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4413      	add	r3, r2
 800b92c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	3303      	adds	r3, #3
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	061a      	lsls	r2, r3, #24
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	3302      	adds	r3, #2
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	041b      	lsls	r3, r3, #16
 800b93e:	4313      	orrs	r3, r2
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	3201      	adds	r2, #1
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	0212      	lsls	r2, r2, #8
 800b948:	4313      	orrs	r3, r2
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	7812      	ldrb	r2, [r2, #0]
 800b94e:	4313      	orrs	r3, r2
 800b950:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	4313      	orrs	r3, r2
 800b958:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	b29b      	uxth	r3, r3
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	b29a      	uxth	r2, r3
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	3301      	adds	r3, #1
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	0c1a      	lsrs	r2, r3, #16
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	3302      	adds	r3, #2
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	0e1a      	lsrs	r2, r3, #24
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	3303      	adds	r3, #3
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b990:	3304      	adds	r3, #4
 800b992:	2201      	movs	r2, #1
 800b994:	701a      	strb	r2, [r3, #0]
			break;
 800b996:	e009      	b.n	800b9ac <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800b998:	2302      	movs	r3, #2
 800b99a:	77fb      	strb	r3, [r7, #31]
 800b99c:	e006      	b.n	800b9ac <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b99e:	bf00      	nop
 800b9a0:	e004      	b.n	800b9ac <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b9a2:	bf00      	nop
 800b9a4:	e002      	b.n	800b9ac <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b9a6:	bf00      	nop
 800b9a8:	e000      	b.n	800b9ac <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b9aa:	bf00      	nop
		}
	}

	return res;
 800b9ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d907      	bls.n	800b9d6 <remove_chain+0x20>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d302      	bcc.n	800b9dc <remove_chain+0x26>
		res = FR_INT_ERR;
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	73fb      	strb	r3, [r7, #15]
 800b9da:	e04f      	b.n	800ba7c <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b9e0:	e040      	b.n	800ba64 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff fd81 	bl	800b4ec <get_fat>
 800b9ea:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d041      	beq.n	800ba76 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d102      	bne.n	800b9fe <remove_chain+0x48>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	73fb      	strb	r3, [r7, #15]
 800b9fc:	e03e      	b.n	800ba7c <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d102      	bne.n	800ba0c <remove_chain+0x56>
 800ba06:	2301      	movs	r3, #1
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	e037      	b.n	800ba7c <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff fe70 	bl	800b6f6 <put_fat>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d12c      	bne.n	800ba7a <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba26:	3310      	adds	r3, #16
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d017      	beq.n	800ba60 <remove_chain+0xaa>
				fs->free_clust++;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba36:	3310      	adds	r3, #16
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba42:	3310      	adds	r3, #16
 800ba44:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4c:	3305      	adds	r3, #5
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f043 0301 	orr.w	r3, r3, #1
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba5c:	3305      	adds	r3, #5
 800ba5e:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6a:	3314      	adds	r3, #20
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d3b6      	bcc.n	800b9e2 <remove_chain+0x2c>
 800ba74:	e002      	b.n	800ba7c <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800ba76:	bf00      	nop
 800ba78:	e000      	b.n	800ba7c <remove_chain+0xc6>
			if (res != FR_OK) break;
 800ba7a:	bf00      	nop
		}
	}

	return res;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b086      	sub	sp, #24
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d113      	bne.n	800babe <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9c:	330c      	adds	r3, #12
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <create_chain+0x32>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baae:	3314      	adds	r3, #20
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d31e      	bcc.n	800baf6 <create_chain+0x70>
 800bab8:	2301      	movs	r3, #1
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	e01b      	b.n	800baf6 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff fd13 	bl	800b4ec <get_fat>
 800bac6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d801      	bhi.n	800bad2 <create_chain+0x4c>
 800bace:	2301      	movs	r3, #1
 800bad0:	e086      	b.n	800bbe0 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d101      	bne.n	800bade <create_chain+0x58>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	e080      	b.n	800bbe0 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae4:	3314      	adds	r3, #20
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	429a      	cmp	r2, r3
 800baec:	d201      	bcs.n	800baf2 <create_chain+0x6c>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	e076      	b.n	800bbe0 <create_chain+0x15a>
		scl = clst;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	3301      	adds	r3, #1
 800bafe:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb06:	3314      	adds	r3, #20
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d307      	bcc.n	800bb20 <create_chain+0x9a>
			ncl = 2;
 800bb10:	2302      	movs	r3, #2
 800bb12:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d901      	bls.n	800bb20 <create_chain+0x9a>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e05f      	b.n	800bbe0 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800bb20:	6979      	ldr	r1, [r7, #20]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fce2 	bl	800b4ec <get_fat>
 800bb28:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00e      	beq.n	800bb4e <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb36:	d002      	beq.n	800bb3e <create_chain+0xb8>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d101      	bne.n	800bb42 <create_chain+0xbc>
			return cs;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	e04e      	b.n	800bbe0 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d1d7      	bne.n	800bafa <create_chain+0x74>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e048      	b.n	800bbe0 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800bb4e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800bb50:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800bb54:	6979      	ldr	r1, [r7, #20]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff fdcd 	bl	800b6f6 <put_fat>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <create_chain+0xf4>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d006      	beq.n	800bb7a <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff fdc0 	bl	800b6f6 <put_fat>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d126      	bne.n	800bbce <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb86:	330c      	adds	r3, #12
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb92:	3310      	adds	r3, #16
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9a:	d020      	beq.n	800bbde <create_chain+0x158>
			fs->free_clust--;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba2:	3310      	adds	r3, #16
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	1e5a      	subs	r2, r3, #1
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbae:	3310      	adds	r3, #16
 800bbb0:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb8:	3305      	adds	r3, #5
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f043 0301 	orr.w	r3, r3, #1
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc8:	3305      	adds	r3, #5
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	e007      	b.n	800bbde <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d102      	bne.n	800bbda <create_chain+0x154>
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd8:	e000      	b.n	800bbdc <create_chain+0x156>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0c:	330a      	adds	r3, #10
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	461a      	mov	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc24:	3302      	adds	r3, #2
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	1d1a      	adds	r2, r3, #4
 800bc32:	613a      	str	r2, [r7, #16]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <clmt_clust+0x5a>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e010      	b.n	800bc64 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d307      	bcc.n	800bc5a <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	3304      	adds	r3, #4
 800bc56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc58:	e7e9      	b.n	800bc2e <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800bc5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	4413      	add	r3, r2
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	371c      	adds	r7, #28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bc80      	pop	{r7}
 800bc6c:	4770      	bx	lr

0800bc6e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b086      	sub	sp, #24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc82:	3306      	adds	r3, #6
 800bc84:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d00a      	beq.n	800bcae <dir_sdi+0x40>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca4:	3314      	adds	r3, #20
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d301      	bcc.n	800bcb2 <dir_sdi+0x44>
		return FR_INT_ERR;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e0b4      	b.n	800be1c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d111      	bne.n	800bcdc <dir_sdi+0x6e>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b03      	cmp	r3, #3
 800bcc8:	d108      	bne.n	800bcdc <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d117      	bne.n	800bd12 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcee:	3308      	adds	r3, #8
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d301      	bcc.n	800bcfe <dir_sdi+0x90>
			return FR_INT_ERR;
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e08e      	b.n	800be1c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	613b      	str	r3, [r7, #16]
 800bd10:	e046      	b.n	800bda0 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1e:	330a      	adds	r3, #10
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	095b      	lsrs	r3, r3, #5
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd34:	3302      	adds	r3, #2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	fb03 f302 	mul.w	r3, r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800bd3e:	e022      	b.n	800bd86 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6979      	ldr	r1, [r7, #20]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff fbce 	bl	800b4ec <get_fat>
 800bd50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd58:	d101      	bne.n	800bd5e <dir_sdi+0xf0>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e05e      	b.n	800be1c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d90a      	bls.n	800bd7a <dir_sdi+0x10c>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	3314      	adds	r3, #20
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d301      	bcc.n	800bd7e <dir_sdi+0x110>
				return FR_INT_ERR;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e04e      	b.n	800be1c <dir_sdi+0x1ae>
			idx -= ic;
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d2d8      	bcs.n	800bd40 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	6979      	ldr	r1, [r7, #20]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fb80 	bl	800b49e <clust2sect>
 800bd9e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda6:	330c      	adds	r3, #12
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <dir_sdi+0x148>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e032      	b.n	800be1c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc2:	330a      	adds	r3, #10
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	095b      	lsrs	r3, r3, #5
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	461a      	mov	r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bddc:	3310      	adds	r3, #16
 800bdde:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4618      	mov	r0, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	330a      	adds	r3, #10
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	fbb3 f1f2 	udiv	r1, r3, r2
 800be06:	fb02 f201 	mul.w	r2, r2, r1
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	015b      	lsls	r3, r3, #5
 800be0e:	18c2      	adds	r2, r0, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be16:	3314      	adds	r3, #20
 800be18:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be34:	3306      	adds	r3, #6
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	b29b      	uxth	r3, r3
 800be40:	2b00      	cmp	r3, #0
 800be42:	d006      	beq.n	800be52 <dir_next+0x2e>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be4a:	3310      	adds	r3, #16
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <dir_next+0x32>
		return FR_NO_FILE;
 800be52:	2304      	movs	r3, #4
 800be54:	e144      	b.n	800c0e0 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be62:	330a      	adds	r3, #10
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	095b      	lsrs	r3, r3, #5
 800be68:	b29b      	uxth	r3, r3
 800be6a:	461a      	mov	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800be72:	fb02 f201 	mul.w	r2, r2, r1
 800be76:	1a9b      	subs	r3, r3, r2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f040 810c 	bne.w	800c096 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be84:	3310      	adds	r3, #16
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be90:	3310      	adds	r3, #16
 800be92:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9a:	330c      	adds	r3, #12
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10e      	bne.n	800bec0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beae:	3308      	adds	r3, #8
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f0c0 80ed 	bcc.w	800c096 <dir_next+0x272>
				return FR_NO_FILE;
 800bebc:	2304      	movs	r3, #4
 800bebe:	e10f      	b.n	800c0e0 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800becc:	330a      	adds	r3, #10
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	095b      	lsrs	r3, r3, #5
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	461a      	mov	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	fbb3 f2f2 	udiv	r2, r3, r2
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee8:	3302      	adds	r3, #2
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	3b01      	subs	r3, #1
 800beee:	4013      	ands	r3, r2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 80d0 	bne.w	800c096 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf04:	330c      	adds	r3, #12
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7ff faee 	bl	800b4ec <get_fat>
 800bf10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d801      	bhi.n	800bf1c <dir_next+0xf8>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e0e1      	b.n	800c0e0 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d101      	bne.n	800bf28 <dir_next+0x104>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e0db      	b.n	800c0e0 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf34:	3314      	adds	r3, #20
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	f0c0 8097 	bcc.w	800c06e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <dir_next+0x126>
 800bf46:	2304      	movs	r3, #4
 800bf48:	e0ca      	b.n	800c0e0 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf58:	330c      	adds	r3, #12
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7ff fd91 	bl	800ba86 <create_chain>
 800bf64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <dir_next+0x14c>
 800bf6c:	2307      	movs	r3, #7
 800bf6e:	e0b7      	b.n	800c0e0 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <dir_next+0x156>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e0b2      	b.n	800c0e0 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf80:	d101      	bne.n	800bf86 <dir_next+0x162>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e0ac      	b.n	800c0e0 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff f928 	bl	800b1e4 <sync_window>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <dir_next+0x17a>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e0a0      	b.n	800c0e0 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb4:	330a      	adds	r3, #10
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	2100      	movs	r1, #0
 800bfbc:	f7fe fef4 	bl	800ada8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfce:	681c      	ldr	r4, [r3, #0]
 800bfd0:	6979      	ldr	r1, [r7, #20]
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7ff fa63 	bl	800b49e <clust2sect>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800bfde:	330c      	adds	r3, #12
 800bfe0:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
 800bfe6:	e024      	b.n	800c032 <dir_next+0x20e>
						dp->fs->wflag = 1;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bff4:	3304      	adds	r3, #4
 800bff6:	2201      	movs	r2, #1
 800bff8:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff f8ee 	bl	800b1e4 <sync_window>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <dir_next+0x1ee>
 800c00e:	2301      	movs	r3, #1
 800c010:	e066      	b.n	800c0e0 <dir_next+0x2bc>
						dp->fs->winsect++;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800c01e:	330c      	adds	r3, #12
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	1c59      	adds	r1, r3, #1
 800c024:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800c028:	330c      	adds	r3, #12
 800c02a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	3301      	adds	r3, #1
 800c030:	613b      	str	r3, [r7, #16]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03e:	3302      	adds	r3, #2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	4293      	cmp	r3, r2
 800c048:	d3ce      	bcc.n	800bfe8 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c056:	330c      	adds	r3, #12
 800c058:	6819      	ldr	r1, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	1a8a      	subs	r2, r1, r2
 800c066:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c06a:	330c      	adds	r3, #12
 800c06c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c074:	330c      	adds	r3, #12
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6979      	ldr	r1, [r7, #20]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff fa0a 	bl	800b49e <clust2sect>
 800c08a:	4602      	mov	r2, r0
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c092:	3310      	adds	r3, #16
 800c094:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a0:	3306      	adds	r3, #6
 800c0a2:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ba:	330a      	adds	r3, #10
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	095b      	lsrs	r3, r3, #5
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0ca:	fb02 f201 	mul.w	r2, r2, r1
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	015b      	lsls	r3, r3, #5
 800c0d2:	18c2      	adds	r2, r0, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0da:	3314      	adds	r3, #20
 800c0dc:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	371c      	adds	r7, #28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd90      	pop	{r4, r7, pc}

0800c0e8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff fdba 	bl	800bc6e <dir_sdi>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d138      	bne.n	800c176 <dir_alloc+0x8e>
		n = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c116:	3310      	adds	r3, #16
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f7ff f8bb 	bl	800b298 <move_window>
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d123      	bne.n	800c174 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c132:	3314      	adds	r3, #20
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2be5      	cmp	r3, #229	; 0xe5
 800c13a:	d007      	beq.n	800c14c <dir_alloc+0x64>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c142:	3314      	adds	r3, #20
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d107      	bne.n	800c15c <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	3301      	adds	r3, #1
 800c150:	60bb      	str	r3, [r7, #8]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	d102      	bne.n	800c160 <dir_alloc+0x78>
 800c15a:	e00c      	b.n	800c176 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c15c:	2300      	movs	r3, #0
 800c15e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c160:	2101      	movs	r1, #1
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fe5e 	bl	800be24 <dir_next>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0ca      	beq.n	800c108 <dir_alloc+0x20>
 800c172:	e000      	b.n	800c176 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800c174:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c176:	7bfb      	ldrb	r3, [r7, #15]
 800c178:	2b04      	cmp	r3, #4
 800c17a:	d101      	bne.n	800c180 <dir_alloc+0x98>
 800c17c:	2307      	movs	r3, #7
 800c17e:	73fb      	strb	r3, [r7, #15]
	return res;
 800c180:	7bfb      	ldrb	r3, [r7, #15]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	331b      	adds	r3, #27
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	021b      	lsls	r3, r3, #8
 800c19c:	b21a      	sxth	r2, r3
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	331a      	adds	r3, #26
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	b21b      	sxth	r3, r3
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	d10f      	bne.n	800c1da <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	3315      	adds	r3, #21
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	021b      	lsls	r3, r3, #8
 800c1c2:	b21a      	sxth	r2, r3
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	b21b      	sxth	r3, r3
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	041b      	lsls	r3, r3, #16
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	60fb      	str	r3, [r7, #12]

	return cl;
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bc80      	pop	{r7}
 800c1e4:	4770      	bx	lr

0800c1e6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	331a      	adds	r3, #26
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	b2d2      	uxtb	r2, r2
 800c1f8:	701a      	strb	r2, [r3, #0]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	b29a      	uxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	331b      	adds	r3, #27
 800c206:	b2d2      	uxtb	r2, r2
 800c208:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	0c1a      	lsrs	r2, r3, #16
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3314      	adds	r3, #20
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	0c1b      	lsrs	r3, r3, #16
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	0a1b      	lsrs	r3, r3, #8
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3315      	adds	r3, #21
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bc80      	pop	{r7}
 800c230:	4770      	bx	lr
	...

0800c234 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c246:	1e5a      	subs	r2, r3, #1
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
 800c258:	2301      	movs	r3, #1
 800c25a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800c25c:	4a2b      	ldr	r2, [pc, #172]	; (800c30c <cmp_lfn+0xd8>)
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	4413      	add	r3, r2
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	3301      	adds	r3, #1
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	4413      	add	r3, r2
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	b21a      	sxth	r2, r3
 800c270:	4926      	ldr	r1, [pc, #152]	; (800c30c <cmp_lfn+0xd8>)
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	440b      	add	r3, r1
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	4619      	mov	r1, r3
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	440b      	add	r3, r1
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	b21b      	sxth	r3, r3
 800c282:	4313      	orrs	r3, r2
 800c284:	b21b      	sxth	r3, r3
 800c286:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800c288:	89fb      	ldrh	r3, [r7, #14]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d019      	beq.n	800c2c2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800c28e:	89bb      	ldrh	r3, [r7, #12]
 800c290:	4618      	mov	r0, r3
 800c292:	f002 f925 	bl	800e4e0 <ff_wtoupper>
 800c296:	4603      	mov	r3, r0
 800c298:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2bfe      	cmp	r3, #254	; 0xfe
 800c29e:	d80e      	bhi.n	800c2be <cmp_lfn+0x8a>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	617a      	str	r2, [r7, #20]
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f002 f916 	bl	800e4e0 <ff_wtoupper>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	89fb      	ldrh	r3, [r7, #14]
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d008      	beq.n	800c2d0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e01f      	b.n	800c302 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800c2c2:	89bb      	ldrh	r3, [r7, #12]
 800c2c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d001      	beq.n	800c2d0 <cmp_lfn+0x9c>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e018      	b.n	800c302 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	613b      	str	r3, [r7, #16]
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b0c      	cmp	r3, #12
 800c2da:	d9bf      	bls.n	800c25c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00b      	beq.n	800c300 <cmp_lfn+0xcc>
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <cmp_lfn+0xcc>
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <cmp_lfn+0xcc>
		return 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e000      	b.n	800c302 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800c300:	2301      	movs	r3, #1
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	0802efc8 	.word	0x0802efc8

0800c310 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800c310:	b480      	push	{r7}
 800c312:	b089      	sub	sp, #36	; 0x24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4611      	mov	r1, r2
 800c31c:	461a      	mov	r2, r3
 800c31e:	460b      	mov	r3, r1
 800c320:	71fb      	strb	r3, [r7, #7]
 800c322:	4613      	mov	r3, r2
 800c324:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	330d      	adds	r3, #13
 800c32a:	79ba      	ldrb	r2, [r7, #6]
 800c32c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	330b      	adds	r3, #11
 800c332:	220f      	movs	r2, #15
 800c334:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	330c      	adds	r3, #12
 800c33a:	2200      	movs	r2, #0
 800c33c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	331a      	adds	r3, #26
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	331b      	adds	r3, #27
 800c34a:	2200      	movs	r2, #0
 800c34c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	1e5a      	subs	r2, r3, #1
 800c352:	4613      	mov	r3, r2
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	82fb      	strh	r3, [r7, #22]
 800c362:	2300      	movs	r3, #0
 800c364:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800c366:	8afb      	ldrh	r3, [r7, #22]
 800c368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d007      	beq.n	800c380 <fit_lfn+0x70>
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	61fa      	str	r2, [r7, #28]
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800c380:	4a1c      	ldr	r2, [pc, #112]	; (800c3f4 <fit_lfn+0xe4>)
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	4413      	add	r3, r2
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	4413      	add	r3, r2
 800c38e:	8afa      	ldrh	r2, [r7, #22]
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	8afb      	ldrh	r3, [r7, #22]
 800c396:	0a1b      	lsrs	r3, r3, #8
 800c398:	b299      	uxth	r1, r3
 800c39a:	4a16      	ldr	r2, [pc, #88]	; (800c3f4 <fit_lfn+0xe4>)
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	4413      	add	r3, r2
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	b2ca      	uxtb	r2, r1
 800c3aa:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800c3ac:	8afb      	ldrh	r3, [r7, #22]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d102      	bne.n	800c3b8 <fit_lfn+0xa8>
 800c3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b0c      	cmp	r3, #12
 800c3c2:	d9d0      	bls.n	800c366 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800c3c4:	8afb      	ldrh	r3, [r7, #22]
 800c3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d006      	beq.n	800c3dc <fit_lfn+0xcc>
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <fit_lfn+0xd4>
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	79fa      	ldrb	r2, [r7, #7]
 800c3e8:	701a      	strb	r2, [r3, #0]
}
 800c3ea:	bf00      	nop
 800c3ec:	3724      	adds	r7, #36	; 0x24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr
 800c3f4:	0802efc8 	.word	0x0802efc8

0800c3f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08c      	sub	sp, #48	; 0x30
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c406:	220b      	movs	r2, #11
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f7fe fcae 	bl	800ad6c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b05      	cmp	r3, #5
 800c414:	d92b      	bls.n	800c46e <gen_numname+0x76>
		sr = seq;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c41a:	e022      	b.n	800c462 <gen_numname+0x6a>
			wc = *lfn++;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	1c9a      	adds	r2, r3, #2
 800c420:	607a      	str	r2, [r7, #4]
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c426:	2300      	movs	r3, #0
 800c428:	62bb      	str	r3, [r7, #40]	; 0x28
 800c42a:	e017      	b.n	800c45c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	005a      	lsls	r2, r3, #1
 800c430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	4413      	add	r3, r2
 800c438:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c43a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c43c:	085b      	lsrs	r3, r3, #1
 800c43e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d005      	beq.n	800c456 <gen_numname+0x5e>
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c450:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c454:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c458:	3301      	adds	r3, #1
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	d9e4      	bls.n	800c42c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1d8      	bne.n	800c41c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c46e:	2307      	movs	r3, #7
 800c470:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	b2db      	uxtb	r3, r3
 800c476:	f003 030f 	and.w	r3, r3, #15
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	3330      	adds	r3, #48	; 0x30
 800c47e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c486:	2b39      	cmp	r3, #57	; 0x39
 800c488:	d904      	bls.n	800c494 <gen_numname+0x9c>
 800c48a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c48e:	3307      	adds	r3, #7
 800c490:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	1e5a      	subs	r2, r3, #1
 800c498:	62ba      	str	r2, [r7, #40]	; 0x28
 800c49a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c49e:	4413      	add	r3, r2
 800c4a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c4a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	091b      	lsrs	r3, r3, #4
 800c4ac:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1de      	bne.n	800c472 <gen_numname+0x7a>
	ns[i] = '~';
 800c4b4:	f107 0214 	add.w	r2, r7, #20
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	4413      	add	r3, r2
 800c4bc:	227e      	movs	r2, #126	; 0x7e
 800c4be:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c4c4:	e002      	b.n	800c4cc <gen_numname+0xd4>
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d205      	bcs.n	800c4e0 <gen_numname+0xe8>
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	4413      	add	r3, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d1f2      	bne.n	800c4c6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	2b07      	cmp	r3, #7
 800c4e4:	d808      	bhi.n	800c4f8 <gen_numname+0x100>
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	62ba      	str	r2, [r7, #40]	; 0x28
 800c4ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c4f6:	e000      	b.n	800c4fa <gen_numname+0x102>
 800c4f8:	2120      	movs	r1, #32
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	627a      	str	r2, [r7, #36]	; 0x24
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	4413      	add	r3, r2
 800c504:	460a      	mov	r2, r1
 800c506:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	2b07      	cmp	r3, #7
 800c50c:	d9e8      	bls.n	800c4e0 <gen_numname+0xe8>
}
 800c50e:	bf00      	nop
 800c510:	bf00      	nop
 800c512:	3730      	adds	r7, #48	; 0x30
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c524:	230b      	movs	r3, #11
 800c526:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	0852      	lsrs	r2, r2, #1
 800c52e:	01db      	lsls	r3, r3, #7
 800c530:	4313      	orrs	r3, r2
 800c532:	b2da      	uxtb	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	1c59      	adds	r1, r3, #1
 800c538:	6079      	str	r1, [r7, #4]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	4413      	add	r3, r2
 800c53e:	73fb      	strb	r3, [r7, #15]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	60bb      	str	r3, [r7, #8]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1ed      	bne.n	800c528 <sum_sfn+0x10>
	return sum;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	bc80      	pop	{r7}
 800c556:	4770      	bx	lr

0800c558 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c560:	2100      	movs	r1, #0
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fb83 	bl	800bc6e <dir_sdi>
 800c568:	4603      	mov	r3, r0
 800c56a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d001      	beq.n	800c576 <dir_find+0x1e>
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	e0c1      	b.n	800c6fa <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c576:	23ff      	movs	r3, #255	; 0xff
 800c578:	753b      	strb	r3, [r7, #20]
 800c57a:	7d3b      	ldrb	r3, [r7, #20]
 800c57c:	757b      	strb	r3, [r7, #21]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c584:	3304      	adds	r3, #4
 800c586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c58a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c59a:	3310      	adds	r3, #16
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7fe fe79 	bl	800b298 <move_window>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 809e 	bne.w	800c6ee <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c5c4:	7dbb      	ldrb	r3, [r7, #22]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <dir_find+0x78>
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	75fb      	strb	r3, [r7, #23]
 800c5ce:	e093      	b.n	800c6f8 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	330b      	adds	r3, #11
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5da:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c5dc:	7dbb      	ldrb	r3, [r7, #22]
 800c5de:	2be5      	cmp	r3, #229	; 0xe5
 800c5e0:	d007      	beq.n	800c5f2 <dir_find+0x9a>
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	f003 0308 	and.w	r3, r3, #8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00c      	beq.n	800c606 <dir_find+0xae>
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2b0f      	cmp	r3, #15
 800c5f0:	d009      	beq.n	800c606 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c5f2:	23ff      	movs	r3, #255	; 0xff
 800c5f4:	757b      	strb	r3, [r7, #21]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c602:	801a      	strh	r2, [r3, #0]
 800c604:	e068      	b.n	800c6d8 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	2b0f      	cmp	r3, #15
 800c60a:	d139      	bne.n	800c680 <dir_find+0x128>
				if (dp->lfn) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d05f      	beq.n	800c6d8 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c618:	7dbb      	ldrb	r3, [r7, #22]
 800c61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d012      	beq.n	800c648 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	7b5b      	ldrb	r3, [r3, #13]
 800c626:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800c628:	7dbb      	ldrb	r3, [r7, #22]
 800c62a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c62e:	75bb      	strb	r3, [r7, #22]
 800c630:	7dbb      	ldrb	r3, [r7, #22]
 800c632:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c63a:	3306      	adds	r3, #6
 800c63c:	881a      	ldrh	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c644:	3304      	adds	r3, #4
 800c646:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800c648:	7dba      	ldrb	r2, [r7, #22]
 800c64a:	7d7b      	ldrb	r3, [r7, #21]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d114      	bne.n	800c67a <dir_find+0x122>
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	330d      	adds	r3, #13
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	7d3a      	ldrb	r2, [r7, #20]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d10e      	bne.n	800c67a <dir_find+0x122>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6939      	ldr	r1, [r7, #16]
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fde4 	bl	800c234 <cmp_lfn>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <dir_find+0x122>
 800c672:	7d7b      	ldrb	r3, [r7, #21]
 800c674:	3b01      	subs	r3, #1
 800c676:	b2db      	uxtb	r3, r3
 800c678:	e000      	b.n	800c67c <dir_find+0x124>
 800c67a:	23ff      	movs	r3, #255	; 0xff
 800c67c:	757b      	strb	r3, [r7, #21]
 800c67e:	e02b      	b.n	800c6d8 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c680:	7d7b      	ldrb	r3, [r7, #21]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d107      	bne.n	800c696 <dir_find+0x13e>
 800c686:	6938      	ldr	r0, [r7, #16]
 800c688:	f7ff ff46 	bl	800c518 <sum_sfn>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	7d3b      	ldrb	r3, [r7, #20]
 800c692:	4293      	cmp	r3, r2
 800c694:	d02d      	beq.n	800c6f2 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69c:	3318      	adds	r3, #24
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	330b      	adds	r3, #11
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10c      	bne.n	800c6c6 <dir_find+0x16e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	220b      	movs	r2, #11
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6938      	ldr	r0, [r7, #16]
 800c6bc:	f7fe fb8e 	bl	800addc <mem_cmp>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d017      	beq.n	800c6f6 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c6c6:	23ff      	movs	r3, #255	; 0xff
 800c6c8:	757b      	strb	r3, [r7, #21]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d6:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c6d8:	2100      	movs	r1, #0
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff fba2 	bl	800be24 <dir_next>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f43f af50 	beq.w	800c58c <dir_find+0x34>
 800c6ec:	e004      	b.n	800c6f8 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800c6ee:	bf00      	nop
 800c6f0:	e002      	b.n	800c6f8 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c6f2:	bf00      	nop
 800c6f4:	e000      	b.n	800c6f8 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c6f6:	bf00      	nop

	return res;
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08c      	sub	sp, #48	; 0x30
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c712:	3318      	adds	r3, #24
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	623b      	str	r3, [r7, #32]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c722:	f107 030c 	add.w	r3, r7, #12
 800c726:	220c      	movs	r2, #12
 800c728:	6a39      	ldr	r1, [r7, #32]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe fb1e 	bl	800ad6c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c730:	7dfb      	ldrb	r3, [r7, #23]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d039      	beq.n	800c7ae <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	330b      	adds	r3, #11
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800c74c:	2301      	movs	r3, #1
 800c74e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c750:	e013      	b.n	800c77a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c752:	f107 010c 	add.w	r1, r7, #12
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	69fa      	ldr	r2, [r7, #28]
 800c75a:	6a38      	ldr	r0, [r7, #32]
 800c75c:	f7ff fe4c 	bl	800c3f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fef9 	bl	800c558 <dir_find>
 800c766:	4603      	mov	r3, r0
 800c768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c76c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c770:	2b00      	cmp	r3, #0
 800c772:	d106      	bne.n	800c782 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	3301      	adds	r3, #1
 800c778:	62bb      	str	r3, [r7, #40]	; 0x28
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	2b63      	cmp	r3, #99	; 0x63
 800c77e:	d9e8      	bls.n	800c752 <dir_register+0x4e>
 800c780:	e000      	b.n	800c784 <dir_register+0x80>
			if (res != FR_OK) break;
 800c782:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b64      	cmp	r3, #100	; 0x64
 800c788:	d101      	bne.n	800c78e <dir_register+0x8a>
 800c78a:	2307      	movs	r3, #7
 800c78c:	e0e3      	b.n	800c956 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c792:	2b04      	cmp	r3, #4
 800c794:	d002      	beq.n	800c79c <dir_register+0x98>
 800c796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c79a:	e0dc      	b.n	800c956 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	330b      	adds	r3, #11
 800c7a0:	7dfa      	ldrb	r2, [r7, #23]
 800c7a2:	701a      	strb	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c7aa:	69fa      	ldr	r2, [r7, #28]
 800c7ac:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d014      	beq.n	800c7e2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7bc:	e002      	b.n	800c7c4 <dir_register+0xc0>
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	69fa      	ldr	r2, [r7, #28]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f5      	bne.n	800c7be <dir_register+0xba>
		nent = (n + 25) / 13;
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	3319      	adds	r3, #25
 800c7d6:	4a62      	ldr	r2, [pc, #392]	; (800c960 <dir_register+0x25c>)
 800c7d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7dc:	089b      	lsrs	r3, r3, #2
 800c7de:	627b      	str	r3, [r7, #36]	; 0x24
 800c7e0:	e001      	b.n	800c7e6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c7e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff fc7d 	bl	800c0e8 <dir_alloc>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c7f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d160      	bne.n	800c8be <dir_register+0x1ba>
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	3b01      	subs	r3, #1
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	2b00      	cmp	r3, #0
 800c806:	d05a      	beq.n	800c8be <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c80e:	3306      	adds	r3, #6
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fa27 	bl	800bc6e <dir_sdi>
 800c820:	4603      	mov	r3, r0
 800c822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d147      	bne.n	800c8be <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c834:	3318      	adds	r3, #24
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fe6d 	bl	800c518 <sum_sfn>
 800c83e:	4603      	mov	r3, r0
 800c840:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c850:	3310      	adds	r3, #16
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4619      	mov	r1, r3
 800c856:	4610      	mov	r0, r2
 800c858:	f7fe fd1e 	bl	800b298 <move_window>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c866:	2b00      	cmp	r3, #0
 800c868:	d128      	bne.n	800c8bc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c878:	3314      	adds	r3, #20
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	7efb      	ldrb	r3, [r7, #27]
 800c882:	f7ff fd45 	bl	800c310 <fit_lfn>
				dp->fs->wflag = 1;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c892:	3304      	adds	r3, #4
 800c894:	2201      	movs	r2, #1
 800c896:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800c898:	2100      	movs	r1, #0
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7ff fac2 	bl	800be24 <dir_next>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d107      	bne.n	800c8be <dir_register+0x1ba>
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1c3      	bne.n	800c842 <dir_register+0x13e>
 800c8ba:	e000      	b.n	800c8be <dir_register+0x1ba>
				if (res != FR_OK) break;
 800c8bc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c8be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d145      	bne.n	800c952 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d4:	3310      	adds	r3, #16
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7fe fcdc 	bl	800b298 <move_window>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c8e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d131      	bne.n	800c952 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f4:	3314      	adds	r3, #20
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe fa53 	bl	800ada8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c908:	3314      	adds	r3, #20
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c912:	3318      	adds	r3, #24
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	220b      	movs	r2, #11
 800c918:	4619      	mov	r1, r3
 800c91a:	f7fe fa27 	bl	800ad6c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c924:	3318      	adds	r3, #24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	330b      	adds	r3, #11
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c932:	3314      	adds	r3, #20
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	330c      	adds	r3, #12
 800c938:	f002 0218 	and.w	r2, r2, #24
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c94c:	3304      	adds	r3, #4
 800c94e:	2201      	movs	r2, #1
 800c950:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800c952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c956:	4618      	mov	r0, r3
 800c958:	3730      	adds	r7, #48	; 0x30
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	4ec4ec4f 	.word	0x4ec4ec4f

0800c964 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08a      	sub	sp, #40	; 0x28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	e002      	b.n	800c97c <create_name+0x18>
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	3301      	adds	r3, #1
 800c97a:	613b      	str	r3, [r7, #16]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b2f      	cmp	r3, #47	; 0x2f
 800c982:	d0f8      	beq.n	800c976 <create_name+0x12>
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b5c      	cmp	r3, #92	; 0x5c
 800c98a:	d0f4      	beq.n	800c976 <create_name+0x12>
	lfn = dp->lfn;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	61ba      	str	r2, [r7, #24]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800c9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ae:	2b1f      	cmp	r3, #31
 800c9b0:	d92f      	bls.n	800ca12 <create_name+0xae>
 800c9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9b4:	2b2f      	cmp	r3, #47	; 0x2f
 800c9b6:	d02c      	beq.n	800ca12 <create_name+0xae>
 800c9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ba:	2b5c      	cmp	r3, #92	; 0x5c
 800c9bc:	d029      	beq.n	800ca12 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2bfe      	cmp	r3, #254	; 0xfe
 800c9c2:	d901      	bls.n	800c9c8 <create_name+0x64>
			return FR_INVALID_NAME;
 800c9c4:	2306      	movs	r3, #6
 800c9c6:	e18b      	b.n	800cce0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c9c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f001 fd4a 	bl	800e46c <ff_convert>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <create_name+0x82>
 800c9e2:	2306      	movs	r3, #6
 800c9e4:	e17c      	b.n	800cce0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800c9e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c9ea:	d809      	bhi.n	800ca00 <create_name+0x9c>
 800c9ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	488f      	ldr	r0, [pc, #572]	; (800cc30 <create_name+0x2cc>)
 800c9f2:	f7fe fa19 	bl	800ae28 <chk_chr>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <create_name+0x9c>
			return FR_INVALID_NAME;
 800c9fc:	2306      	movs	r3, #6
 800c9fe:	e16f      	b.n	800cce0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	617a      	str	r2, [r7, #20]
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ca10:	e7c5      	b.n	800c99e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	441a      	add	r2, r3
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ca1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca1e:	2b1f      	cmp	r3, #31
 800ca20:	d801      	bhi.n	800ca26 <create_name+0xc2>
 800ca22:	2304      	movs	r3, #4
 800ca24:	e000      	b.n	800ca28 <create_name+0xc4>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800ca2c:	e011      	b.n	800ca52 <create_name+0xee>
		w = lfn[di - 1];
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca34:	3b01      	subs	r3, #1
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ca40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d002      	beq.n	800ca4c <create_name+0xe8>
 800ca46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca48:	2b2e      	cmp	r3, #46	; 0x2e
 800ca4a:	d106      	bne.n	800ca5a <create_name+0xf6>
		di--;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1ea      	bne.n	800ca2e <create_name+0xca>
 800ca58:	e000      	b.n	800ca5c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800ca5a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <create_name+0x102>
 800ca62:	2306      	movs	r3, #6
 800ca64:	e13c      	b.n	800cce0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	2200      	movs	r2, #0
 800ca70:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca78:	3318      	adds	r3, #24
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	220b      	movs	r2, #11
 800ca7e:	2120      	movs	r1, #32
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe f991 	bl	800ada8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ca86:	2300      	movs	r3, #0
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	e002      	b.n	800ca92 <create_name+0x12e>
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	61bb      	str	r3, [r7, #24]
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	2b20      	cmp	r3, #32
 800ca9e:	d0f5      	beq.n	800ca8c <create_name+0x128>
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	2b2e      	cmp	r3, #46	; 0x2e
 800caac:	d0ee      	beq.n	800ca8c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d009      	beq.n	800cac8 <create_name+0x164>
 800cab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab8:	f043 0303 	orr.w	r3, r3, #3
 800cabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cac0:	e002      	b.n	800cac8 <create_name+0x164>
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	617b      	str	r3, [r7, #20]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <create_name+0x17e>
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cad4:	3b01      	subs	r3, #1
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	4413      	add	r3, r2
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	2b2e      	cmp	r3, #46	; 0x2e
 800cae0:	d1ef      	bne.n	800cac2 <create_name+0x15e>

	b = i = 0; ni = 8;
 800cae2:	2300      	movs	r3, #0
 800cae4:	623b      	str	r3, [r7, #32]
 800cae6:	2300      	movs	r3, #0
 800cae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800caec:	2308      	movs	r3, #8
 800caee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	61ba      	str	r2, [r7, #24]
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	4413      	add	r3, r2
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cb00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8092 	beq.w	800cc2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	d006      	beq.n	800cb1c <create_name+0x1b8>
 800cb0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb10:	2b2e      	cmp	r3, #46	; 0x2e
 800cb12:	d10a      	bne.n	800cb2a <create_name+0x1c6>
 800cb14:	69ba      	ldr	r2, [r7, #24]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d006      	beq.n	800cb2a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800cb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb20:	f043 0303 	orr.w	r3, r3, #3
 800cb24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb28:	e07f      	b.n	800cc2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cb2a:	6a3a      	ldr	r2, [r7, #32]
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d203      	bcs.n	800cb3a <create_name+0x1d6>
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d123      	bne.n	800cb82 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	2b0b      	cmp	r3, #11
 800cb3e:	d106      	bne.n	800cb4e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800cb40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb44:	f043 0303 	orr.w	r3, r3, #3
 800cb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb4c:	e077      	b.n	800cc3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d005      	beq.n	800cb62 <create_name+0x1fe>
 800cb56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb5a:	f043 0303 	orr.w	r3, r3, #3
 800cb5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cb62:	69ba      	ldr	r2, [r7, #24]
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d868      	bhi.n	800cc3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	2308      	movs	r3, #8
 800cb70:	623b      	str	r3, [r7, #32]
 800cb72:	230b      	movs	r3, #11
 800cb74:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cb76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb80:	e053      	b.n	800cc2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cb82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb84:	2b7f      	cmp	r3, #127	; 0x7f
 800cb86:	d914      	bls.n	800cbb2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 fc6d 	bl	800e46c <ff_convert>
 800cb92:	4603      	mov	r3, r0
 800cb94:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cb96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <create_name+0x242>
 800cb9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb9e:	3b80      	subs	r3, #128	; 0x80
 800cba0:	4a24      	ldr	r2, [pc, #144]	; (800cc34 <create_name+0x2d0>)
 800cba2:	5cd3      	ldrb	r3, [r2, r3]
 800cba4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbaa:	f043 0302 	orr.w	r3, r3, #2
 800cbae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cbb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d007      	beq.n	800cbc8 <create_name+0x264>
 800cbb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbba:	4619      	mov	r1, r3
 800cbbc:	481e      	ldr	r0, [pc, #120]	; (800cc38 <create_name+0x2d4>)
 800cbbe:	f7fe f933 	bl	800ae28 <chk_chr>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d008      	beq.n	800cbda <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cbc8:	235f      	movs	r3, #95	; 0x5f
 800cbca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd0:	f043 0303 	orr.w	r3, r3, #3
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbd8:	e01b      	b.n	800cc12 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbdc:	2b40      	cmp	r3, #64	; 0x40
 800cbde:	d909      	bls.n	800cbf4 <create_name+0x290>
 800cbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe2:	2b5a      	cmp	r3, #90	; 0x5a
 800cbe4:	d806      	bhi.n	800cbf4 <create_name+0x290>
					b |= 2;
 800cbe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbea:	f043 0302 	orr.w	r3, r3, #2
 800cbee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbf2:	e00e      	b.n	800cc12 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cbf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf6:	2b60      	cmp	r3, #96	; 0x60
 800cbf8:	d90b      	bls.n	800cc12 <create_name+0x2ae>
 800cbfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbfc:	2b7a      	cmp	r3, #122	; 0x7a
 800cbfe:	d808      	bhi.n	800cc12 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800cc00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc0e:	3b20      	subs	r3, #32
 800cc10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc18:	3318      	adds	r3, #24
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	1c59      	adds	r1, r3, #1
 800cc20:	6239      	str	r1, [r7, #32]
 800cc22:	4413      	add	r3, r2
 800cc24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc26:	b2d2      	uxtb	r2, r2
 800cc28:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800cc2a:	e761      	b.n	800caf0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800cc2c:	bf00      	nop
 800cc2e:	e006      	b.n	800cc3e <create_name+0x2da>
 800cc30:	08010770 	.word	0x08010770
 800cc34:	0802ef48 	.word	0x0802ef48
 800cc38:	0801077c 	.word	0x0801077c
			if (si > di) break;			/* No extension */
 800cc3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc44:	3318      	adds	r3, #24
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2be5      	cmp	r3, #229	; 0xe5
 800cc4c:	d106      	bne.n	800cc5c <create_name+0x2f8>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc54:	3318      	adds	r3, #24
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2205      	movs	r2, #5
 800cc5a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	2b08      	cmp	r3, #8
 800cc60:	d104      	bne.n	800cc6c <create_name+0x308>
 800cc62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800cc6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc70:	f003 030c 	and.w	r3, r3, #12
 800cc74:	2b0c      	cmp	r3, #12
 800cc76:	d005      	beq.n	800cc84 <create_name+0x320>
 800cc78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	2b03      	cmp	r3, #3
 800cc82:	d105      	bne.n	800cc90 <create_name+0x32c>
		cf |= NS_LFN;
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc88:	f043 0302 	orr.w	r3, r3, #2
 800cc8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d117      	bne.n	800cccc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cc9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cca0:	f003 0303 	and.w	r3, r3, #3
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d105      	bne.n	800ccb4 <create_name+0x350>
 800cca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccac:	f043 0310 	orr.w	r3, r3, #16
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ccb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccb8:	f003 030c 	and.w	r3, r3, #12
 800ccbc:	2b04      	cmp	r3, #4
 800ccbe:	d105      	bne.n	800cccc <create_name+0x368>
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	f043 0308 	orr.w	r3, r3, #8
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd2:	3318      	adds	r3, #24
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	330b      	adds	r3, #11
 800ccd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ccdc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ccde:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3728      	adds	r7, #40	; 0x28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b2f      	cmp	r3, #47	; 0x2f
 800ccf8:	d003      	beq.n	800cd02 <follow_path+0x1a>
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b5c      	cmp	r3, #92	; 0x5c
 800cd00:	d102      	bne.n	800cd08 <follow_path+0x20>
		path++;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3301      	adds	r3, #1
 800cd06:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0e:	3308      	adds	r3, #8
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b1f      	cmp	r3, #31
 800cd1a:	d80c      	bhi.n	800cd36 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7fe ffa5 	bl	800bc6e <dir_sdi>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd2e:	3314      	adds	r3, #20
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	e04c      	b.n	800cdd0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd36:	463b      	mov	r3, r7
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fe12 	bl	800c964 <create_name>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d13d      	bne.n	800cdc6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fc04 	bl	800c558 <dir_find>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5a:	3318      	adds	r3, #24
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	7adb      	ldrb	r3, [r3, #11]
 800cd60:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00a      	beq.n	800cd7e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d12d      	bne.n	800cdca <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
 800cd70:	f003 0304 	and.w	r3, r3, #4
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d128      	bne.n	800cdca <follow_path+0xe2>
 800cd78:	2305      	movs	r3, #5
 800cd7a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800cd7c:	e025      	b.n	800cdca <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd7e:	7bbb      	ldrb	r3, [r7, #14]
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d122      	bne.n	800cdce <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd8e:	3314      	adds	r3, #20
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	330b      	adds	r3, #11
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	f003 0310 	and.w	r3, r3, #16
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800cda2:	2305      	movs	r3, #5
 800cda4:	73fb      	strb	r3, [r7, #15]
 800cda6:	e013      	b.n	800cdd0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7ff f9e9 	bl	800c18a <ld_clust>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc0:	3308      	adds	r3, #8
 800cdc2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdc4:	e7b7      	b.n	800cd36 <follow_path+0x4e>
			if (res != FR_OK) break;
 800cdc6:	bf00      	nop
 800cdc8:	e002      	b.n	800cdd0 <follow_path+0xe8>
				break;
 800cdca:	bf00      	nop
 800cdcc:	e000      	b.n	800cdd0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cdce:	bf00      	nop
		}
	}

	return res;
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cdda:	b480      	push	{r7}
 800cddc:	b087      	sub	sp, #28
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cde2:	f04f 33ff 	mov.w	r3, #4294967295
 800cde6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d031      	beq.n	800ce54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	617b      	str	r3, [r7, #20]
 800cdf6:	e002      	b.n	800cdfe <get_ldnumber+0x24>
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	2b1f      	cmp	r3, #31
 800ce04:	d903      	bls.n	800ce0e <get_ldnumber+0x34>
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b3a      	cmp	r3, #58	; 0x3a
 800ce0c:	d1f4      	bne.n	800cdf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b3a      	cmp	r3, #58	; 0x3a
 800ce14:	d11c      	bne.n	800ce50 <get_ldnumber+0x76>
			tp = *path;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	60fa      	str	r2, [r7, #12]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	3b30      	subs	r3, #48	; 0x30
 800ce26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	2b09      	cmp	r3, #9
 800ce2c:	d80e      	bhi.n	800ce4c <get_ldnumber+0x72>
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d10a      	bne.n	800ce4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d107      	bne.n	800ce4c <get_ldnumber+0x72>
					vol = (int)i;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	3301      	adds	r3, #1
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	e002      	b.n	800ce56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce50:	2300      	movs	r3, #0
 800ce52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ce54:	693b      	ldr	r3, [r7, #16]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	371c      	adds	r7, #28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bc80      	pop	{r7}
 800ce5e:	4770      	bx	lr

0800ce60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce70:	3304      	adds	r3, #4
 800ce72:	2200      	movs	r2, #0
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce7c:	330c      	adds	r3, #12
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7fe fa06 	bl	800b298 <move_window>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <check_fs+0x36>
		return 3;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e04a      	b.n	800cf2c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	021b      	lsls	r3, r3, #8
 800cea2:	b21a      	sxth	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ceaa:	b21b      	sxth	r3, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	b21b      	sxth	r3, r3
 800ceb0:	4a20      	ldr	r2, [pc, #128]	; (800cf34 <check_fs+0xd4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d001      	beq.n	800ceba <check_fs+0x5a>
		return 2;
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	e038      	b.n	800cf2c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3336      	adds	r3, #54	; 0x36
 800cebe:	3303      	adds	r3, #3
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	061a      	lsls	r2, r3, #24
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3336      	adds	r3, #54	; 0x36
 800cec8:	3302      	adds	r3, #2
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	041b      	lsls	r3, r3, #16
 800cece:	4313      	orrs	r3, r2
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	3236      	adds	r2, #54	; 0x36
 800ced4:	3201      	adds	r2, #1
 800ced6:	7812      	ldrb	r2, [r2, #0]
 800ced8:	0212      	lsls	r2, r2, #8
 800ceda:	4313      	orrs	r3, r2
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800cee2:	4313      	orrs	r3, r2
 800cee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cee8:	4a13      	ldr	r2, [pc, #76]	; (800cf38 <check_fs+0xd8>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d101      	bne.n	800cef2 <check_fs+0x92>
		return 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e01c      	b.n	800cf2c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3352      	adds	r3, #82	; 0x52
 800cef6:	3303      	adds	r3, #3
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	061a      	lsls	r2, r3, #24
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3352      	adds	r3, #82	; 0x52
 800cf00:	3302      	adds	r3, #2
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	041b      	lsls	r3, r3, #16
 800cf06:	4313      	orrs	r3, r2
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	3252      	adds	r2, #82	; 0x52
 800cf0c:	3201      	adds	r2, #1
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	0212      	lsls	r2, r2, #8
 800cf12:	4313      	orrs	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf20:	4a05      	ldr	r2, [pc, #20]	; (800cf38 <check_fs+0xd8>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d101      	bne.n	800cf2a <check_fs+0xca>
		return 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e000      	b.n	800cf2c <check_fs+0xcc>

	return 1;
 800cf2a:	2301      	movs	r3, #1
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	ffffaa55 	.word	0xffffaa55
 800cf38:	00544146 	.word	0x00544146

0800cf3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b096      	sub	sp, #88	; 0x58
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf50:	68b8      	ldr	r0, [r7, #8]
 800cf52:	f7ff ff42 	bl	800cdda <get_ldnumber>
 800cf56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da01      	bge.n	800cf62 <find_volume+0x26>
 800cf5e:	230b      	movs	r3, #11
 800cf60:	e33c      	b.n	800d5dc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf62:	4ab3      	ldr	r2, [pc, #716]	; (800d230 <find_volume+0x2f4>)
 800cf64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <find_volume+0x3a>
 800cf72:	230c      	movs	r3, #12
 800cf74:	e332      	b.n	800d5dc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf7a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01d      	beq.n	800cfc4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf8e:	3301      	adds	r3, #1
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fd fe4c 	bl	800ac30 <disk_status>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10c      	bne.n	800cfc4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d007      	beq.n	800cfc0 <find_volume+0x84>
 800cfb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cfbc:	230a      	movs	r3, #10
 800cfbe:	e30d      	b.n	800d5dc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	e30b      	b.n	800d5dc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfca:	2200      	movs	r2, #0
 800cfcc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd8:	3301      	adds	r3, #1
 800cfda:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fd fe3c 	bl	800ac64 <disk_initialize>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800cff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cffe:	2303      	movs	r3, #3
 800d000:	e2ec      	b.n	800d5dc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d007      	beq.n	800d018 <find_volume+0xdc>
 800d008:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800d014:	230a      	movs	r3, #10
 800d016:	e2e1      	b.n	800d5dc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01e:	3301      	adds	r3, #1
 800d020:	7818      	ldrb	r0, [r3, #0]
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d028:	330a      	adds	r3, #10
 800d02a:	461a      	mov	r2, r3
 800d02c:	2102      	movs	r1, #2
 800d02e:	f7fd fe7f 	bl	800ad30 <disk_ioctl>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10f      	bne.n	800d058 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03e:	330a      	adds	r3, #10
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d046:	d307      	bcc.n	800d058 <find_volume+0x11c>
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d04e:	330a      	adds	r3, #10
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d056:	d901      	bls.n	800d05c <find_volume+0x120>
 800d058:	2301      	movs	r3, #1
 800d05a:	e2bf      	b.n	800d5dc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d060:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d064:	f7ff fefc 	bl	800ce60 <check_fs>
 800d068:	4603      	mov	r3, r0
 800d06a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d06e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d072:	2b01      	cmp	r3, #1
 800d074:	d155      	bne.n	800d122 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d076:	2300      	movs	r3, #0
 800d078:	643b      	str	r3, [r7, #64]	; 0x40
 800d07a:	e029      	b.n	800d0d0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d080:	011b      	lsls	r3, r3, #4
 800d082:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d086:	4413      	add	r3, r2
 800d088:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	3304      	adds	r3, #4
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d012      	beq.n	800d0ba <find_volume+0x17e>
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	330b      	adds	r3, #11
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	061a      	lsls	r2, r3, #24
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	330a      	adds	r3, #10
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	041b      	lsls	r3, r3, #16
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0a8:	3209      	adds	r2, #9
 800d0aa:	7812      	ldrb	r2, [r2, #0]
 800d0ac:	0212      	lsls	r2, r2, #8
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0b2:	3208      	adds	r2, #8
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	e000      	b.n	800d0bc <find_volume+0x180>
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d0c4:	440b      	add	r3, r1
 800d0c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	643b      	str	r3, [r7, #64]	; 0x40
 800d0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d9d2      	bls.n	800d07c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <find_volume+0x1aa>
 800d0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0f4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <find_volume+0x1cc>
 800d0fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d100:	f7ff feae 	bl	800ce60 <check_fs>
 800d104:	4603      	mov	r3, r0
 800d106:	e000      	b.n	800d10a <find_volume+0x1ce>
 800d108:	2302      	movs	r3, #2
 800d10a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d10e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d112:	2b00      	cmp	r3, #0
 800d114:	d005      	beq.n	800d122 <find_volume+0x1e6>
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	3301      	adds	r3, #1
 800d11a:	643b      	str	r3, [r7, #64]	; 0x40
 800d11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d9e1      	bls.n	800d0e6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d126:	2b03      	cmp	r3, #3
 800d128:	d101      	bne.n	800d12e <find_volume+0x1f2>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e256      	b.n	800d5dc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d12e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <find_volume+0x1fe>
 800d136:	230d      	movs	r3, #13
 800d138:	e250      	b.n	800d5dc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	7b1b      	ldrb	r3, [r3, #12]
 800d13e:	021b      	lsls	r3, r3, #8
 800d140:	b21a      	sxth	r2, r3
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	7adb      	ldrb	r3, [r3, #11]
 800d146:	b21b      	sxth	r3, r3
 800d148:	4313      	orrs	r3, r2
 800d14a:	b21a      	sxth	r2, r3
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d152:	330a      	adds	r3, #10
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	b21b      	sxth	r3, r3
 800d158:	429a      	cmp	r2, r3
 800d15a:	d001      	beq.n	800d160 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800d15c:	230d      	movs	r3, #13
 800d15e:	e23d      	b.n	800d5dc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	7ddb      	ldrb	r3, [r3, #23]
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	b21a      	sxth	r2, r3
 800d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16a:	7d9b      	ldrb	r3, [r3, #22]
 800d16c:	b21b      	sxth	r3, r3
 800d16e:	4313      	orrs	r3, r2
 800d170:	b21b      	sxth	r3, r3
 800d172:	b29b      	uxth	r3, r3
 800d174:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d112      	bne.n	800d1a2 <find_volume+0x266>
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d182:	061a      	lsls	r2, r3, #24
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d18a:	041b      	lsls	r3, r3, #16
 800d18c:	4313      	orrs	r3, r2
 800d18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d190:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d194:	0212      	lsls	r2, r2, #8
 800d196:	4313      	orrs	r3, r2
 800d198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d19a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1a8:	3318      	adds	r3, #24
 800d1aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1ac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	7c1a      	ldrb	r2, [r3, #16]
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b8:	3303      	adds	r3, #3
 800d1ba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c2:	3303      	adds	r3, #3
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d008      	beq.n	800d1dc <find_volume+0x2a0>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d0:	3303      	adds	r3, #3
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d001      	beq.n	800d1dc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800d1d8:	230d      	movs	r3, #13
 800d1da:	e1ff      	b.n	800d5dc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1e2:	3303      	adds	r3, #3
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ea:	fb02 f303 	mul.w	r3, r2, r3
 800d1ee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f2:	7b5a      	ldrb	r2, [r3, #13]
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fa:	3302      	adds	r3, #2
 800d1fc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d204:	3302      	adds	r3, #2
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00e      	beq.n	800d22a <find_volume+0x2ee>
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d212:	3302      	adds	r3, #2
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d21e:	3302      	adds	r3, #2
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	3b01      	subs	r3, #1
 800d224:	4013      	ands	r3, r2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d004      	beq.n	800d234 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800d22a:	230d      	movs	r3, #13
 800d22c:	e1d6      	b.n	800d5dc <find_volume+0x6a0>
 800d22e:	bf00      	nop
 800d230:	2000a1d4 	.word	0x2000a1d4

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d236:	7c9b      	ldrb	r3, [r3, #18]
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	b21a      	sxth	r2, r3
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	7c5b      	ldrb	r3, [r3, #17]
 800d240:	b21b      	sxth	r3, r3
 800d242:	4313      	orrs	r3, r2
 800d244:	b21b      	sxth	r3, r3
 800d246:	b29a      	uxth	r2, r3
 800d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24e:	3308      	adds	r3, #8
 800d250:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	3308      	adds	r3, #8
 800d25a:	881a      	ldrh	r2, [r3, #0]
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d262:	330a      	adds	r3, #10
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	095b      	lsrs	r3, r3, #5
 800d268:	b29b      	uxth	r3, r3
 800d26a:	fbb2 f1f3 	udiv	r1, r2, r3
 800d26e:	fb03 f301 	mul.w	r3, r3, r1
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	b29b      	uxth	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800d27a:	230d      	movs	r3, #13
 800d27c:	e1ae      	b.n	800d5dc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	7d1b      	ldrb	r3, [r3, #20]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	b21a      	sxth	r2, r3
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	7cdb      	ldrb	r3, [r3, #19]
 800d28a:	b21b      	sxth	r3, r3
 800d28c:	4313      	orrs	r3, r2
 800d28e:	b21b      	sxth	r3, r3
 800d290:	b29b      	uxth	r3, r3
 800d292:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d296:	2b00      	cmp	r3, #0
 800d298:	d112      	bne.n	800d2c0 <find_volume+0x384>
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d2a0:	061a      	lsls	r2, r3, #24
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d2b2:	0212      	lsls	r2, r2, #8
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	7bdb      	ldrb	r3, [r3, #15]
 800d2c4:	021b      	lsls	r3, r3, #8
 800d2c6:	b21a      	sxth	r2, r3
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	7b9b      	ldrb	r3, [r3, #14]
 800d2cc:	b21b      	sxth	r3, r3
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	b21b      	sxth	r3, r3
 800d2d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d2d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <find_volume+0x3a2>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e17e      	b.n	800d5dc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d2de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	441a      	add	r2, r3
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	8819      	ldrh	r1, [r3, #0]
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2f4:	330a      	adds	r3, #10
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	095b      	lsrs	r3, r3, #5
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800d300:	b29b      	uxth	r3, r3
 800d302:	4413      	add	r3, r2
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d201      	bcs.n	800d312 <find_volume+0x3d6>
 800d30e:	230d      	movs	r3, #13
 800d310:	e164      	b.n	800d5dc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	1ad2      	subs	r2, r2, r3
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d31e:	3302      	adds	r3, #2
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	fbb2 f3f3 	udiv	r3, r2, r3
 800d326:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <find_volume+0x3f6>
 800d32e:	230d      	movs	r3, #13
 800d330:	e154      	b.n	800d5dc <find_volume+0x6a0>
	fmt = FS_FAT12;
 800d332:	2301      	movs	r3, #1
 800d334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d33e:	4293      	cmp	r3, r2
 800d340:	d902      	bls.n	800d348 <find_volume+0x40c>
 800d342:	2302      	movs	r3, #2
 800d344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d34e:	4293      	cmp	r3, r2
 800d350:	d902      	bls.n	800d358 <find_volume+0x41c>
 800d352:	2303      	movs	r3, #3
 800d354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	1c9a      	adds	r2, r3, #2
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d362:	3314      	adds	r3, #20
 800d364:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36c:	331c      	adds	r3, #28
 800d36e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d370:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d372:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d376:	441a      	add	r2, r3
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d37e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800d380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	441a      	add	r2, r3
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d38c:	3308      	adds	r3, #8
 800d38e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800d390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d394:	2b03      	cmp	r3, #3
 800d396:	d127      	bne.n	800d3e8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d39e:	3308      	adds	r3, #8
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <find_volume+0x46e>
 800d3a6:	230d      	movs	r3, #13
 800d3a8:	e118      	b.n	800d5dc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3b0:	061a      	lsls	r2, r3, #24
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d3b8:	041b      	lsls	r3, r3, #16
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d3c2:	0212      	lsls	r2, r2, #8
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d3cc:	431a      	orrs	r2, r3
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3de:	3314      	adds	r3, #20
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d3e6:	e030      	b.n	800d44a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d101      	bne.n	800d3fa <find_volume+0x4be>
 800d3f6:	230d      	movs	r3, #13
 800d3f8:	e0f0      	b.n	800d5dc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d404:	441a      	add	r2, r3
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d40c:	3304      	adds	r3, #4
 800d40e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d414:	2b02      	cmp	r3, #2
 800d416:	d106      	bne.n	800d426 <find_volume+0x4ea>
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41e:	3314      	adds	r3, #20
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	e010      	b.n	800d448 <find_volume+0x50c>
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d42c:	3314      	adds	r3, #20
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	4613      	mov	r3, r2
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	4413      	add	r3, r2
 800d436:	085a      	lsrs	r2, r3, #1
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43e:	3314      	adds	r3, #20
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d448:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d450:	3318      	adds	r3, #24
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45a:	330a      	adds	r3, #10
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	4619      	mov	r1, r3
 800d460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d462:	440b      	add	r3, r1
 800d464:	1e59      	subs	r1, r3, #1
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d46c:	330a      	adds	r3, #10
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	fbb1 f3f3 	udiv	r3, r1, r3
 800d474:	429a      	cmp	r2, r3
 800d476:	d201      	bcs.n	800d47c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800d478:	230d      	movs	r3, #13
 800d47a:	e0af      	b.n	800d5dc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d482:	3310      	adds	r3, #16
 800d484:	f04f 32ff 	mov.w	r2, #4294967295
 800d488:	601a      	str	r2, [r3, #0]
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d490:	3310      	adds	r3, #16
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	330c      	adds	r3, #12
 800d49c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a4:	3305      	adds	r3, #5
 800d4a6:	2280      	movs	r2, #128	; 0x80
 800d4a8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d4aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d17d      	bne.n	800d5ae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4b8:	021b      	lsls	r3, r3, #8
 800d4ba:	b21a      	sxth	r2, r3
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	b21b      	sxth	r3, r3
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d170      	bne.n	800d5ae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4d4:	f7fd fee0 	bl	800b298 <move_window>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d167      	bne.n	800d5ae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e4:	3305      	adds	r3, #5
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800d4f0:	021b      	lsls	r3, r3, #8
 800d4f2:	b21a      	sxth	r2, r3
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	b21b      	sxth	r3, r3
 800d500:	4a38      	ldr	r2, [pc, #224]	; (800d5e4 <find_volume+0x6a8>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d153      	bne.n	800d5ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	78db      	ldrb	r3, [r3, #3]
 800d50a:	061a      	lsls	r2, r3, #24
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	789b      	ldrb	r3, [r3, #2]
 800d510:	041b      	lsls	r3, r3, #16
 800d512:	4313      	orrs	r3, r2
 800d514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d516:	7852      	ldrb	r2, [r2, #1]
 800d518:	0212      	lsls	r2, r2, #8
 800d51a:	4313      	orrs	r3, r2
 800d51c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d51e:	7812      	ldrb	r2, [r2, #0]
 800d520:	4313      	orrs	r3, r2
 800d522:	4a31      	ldr	r2, [pc, #196]	; (800d5e8 <find_volume+0x6ac>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d142      	bne.n	800d5ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800d52e:	061a      	lsls	r2, r3, #24
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800d536:	041b      	lsls	r3, r3, #16
 800d538:	4313      	orrs	r3, r2
 800d53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d53c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800d540:	0212      	lsls	r2, r2, #8
 800d542:	4313      	orrs	r3, r2
 800d544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d546:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800d54a:	4313      	orrs	r3, r2
 800d54c:	4a27      	ldr	r2, [pc, #156]	; (800d5ec <find_volume+0x6b0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d12d      	bne.n	800d5ae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800d558:	061a      	lsls	r2, r3, #24
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800d560:	041b      	lsls	r3, r3, #16
 800d562:	4313      	orrs	r3, r2
 800d564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d566:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800d56a:	0212      	lsls	r2, r2, #8
 800d56c:	4313      	orrs	r3, r2
 800d56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d570:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800d574:	431a      	orrs	r2, r3
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57c:	3310      	adds	r3, #16
 800d57e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800d586:	061a      	lsls	r2, r3, #24
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800d58e:	041b      	lsls	r3, r3, #16
 800d590:	4313      	orrs	r3, r2
 800d592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d594:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800d598:	0212      	lsls	r2, r2, #8
 800d59a:	4313      	orrs	r3, r2
 800d59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d59e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5aa:	330c      	adds	r3, #12
 800d5ac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d5b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800d5ba:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <find_volume+0x6b4>)
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	4b0b      	ldr	r3, [pc, #44]	; (800d5f0 <find_volume+0x6b4>)
 800d5c4:	801a      	strh	r2, [r3, #0]
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <find_volume+0x6b4>)
 800d5c8:	881a      	ldrh	r2, [r3, #0]
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d0:	3306      	adds	r3, #6
 800d5d2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d5d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5d6:	f7fd fddb 	bl	800b190 <clear_lock>
#endif

	return FR_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3758      	adds	r7, #88	; 0x58
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	ffffaa55 	.word	0xffffaa55
 800d5e8:	41615252 	.word	0x41615252
 800d5ec:	61417272 	.word	0x61417272
 800d5f0:	2000a1d8 	.word	0x2000a1d8

0800d5f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d02d      	beq.n	800d662 <validate+0x6e>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d027      	beq.n	800d662 <validate+0x6e>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01e      	beq.n	800d662 <validate+0x6e>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d630:	3306      	adds	r3, #6
 800d632:	881a      	ldrh	r2, [r3, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d63a:	3304      	adds	r3, #4
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d10f      	bne.n	800d662 <validate+0x6e>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64e:	3301      	adds	r3, #1
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	f7fd faec 	bl	800ac30 <disk_status>
 800d658:	4603      	mov	r3, r0
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <validate+0x72>
		return FR_INVALID_OBJECT;
 800d662:	2309      	movs	r3, #9
 800d664:	e000      	b.n	800d668 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	4613      	mov	r3, r2
 800d67c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fba7 	bl	800cdda <get_ldnumber>
 800d68c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	2b00      	cmp	r3, #0
 800d692:	da01      	bge.n	800d698 <f_mount+0x28>
 800d694:	230b      	movs	r3, #11
 800d696:	e02f      	b.n	800d6f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d698:	4a19      	ldr	r2, [pc, #100]	; (800d700 <f_mount+0x90>)
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d007      	beq.n	800d6b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800d6a8:	69b8      	ldr	r0, [r7, #24]
 800d6aa:	f7fd fd71 	bl	800b190 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d004      	beq.n	800d6c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	490d      	ldr	r1, [pc, #52]	; (800d700 <f_mount+0x90>)
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <f_mount+0x6e>
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d001      	beq.n	800d6e2 <f_mount+0x72>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e00a      	b.n	800d6f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d6e2:	f107 0108 	add.w	r1, r7, #8
 800d6e6:	f107 030c 	add.w	r3, r7, #12
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fc25 	bl	800cf3c <find_volume>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	2000a1d4 	.word	0x2000a1d4

0800d704 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	f107 0318 	add.w	r3, r7, #24
 800d712:	3b0c      	subs	r3, #12
 800d714:	6018      	str	r0, [r3, #0]
 800d716:	f107 0318 	add.w	r3, r7, #24
 800d71a:	3b10      	subs	r3, #16
 800d71c:	6019      	str	r1, [r3, #0]
 800d71e:	f107 0318 	add.w	r3, r7, #24
 800d722:	3b11      	subs	r3, #17
 800d724:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800d726:	f107 0318 	add.w	r3, r7, #24
 800d72a:	3b0c      	subs	r3, #12
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <f_open+0x32>
 800d732:	2309      	movs	r3, #9
 800d734:	e319      	b.n	800dd6a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800d736:	f107 0318 	add.w	r3, r7, #24
 800d73a:	3b0c      	subs	r3, #12
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d742:	2200      	movs	r2, #0
 800d744:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800d746:	f107 0318 	add.w	r3, r7, #24
 800d74a:	3b11      	subs	r3, #17
 800d74c:	f107 0218 	add.w	r2, r7, #24
 800d750:	3a11      	subs	r2, #17
 800d752:	7812      	ldrb	r2, [r2, #0]
 800d754:	f002 021f 	and.w	r2, r2, #31
 800d758:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800d75a:	f107 0318 	add.w	r3, r7, #24
 800d75e:	3b11      	subs	r3, #17
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f023 0301 	bic.w	r3, r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	f107 0118 	add.w	r1, r7, #24
 800d76c:	3910      	subs	r1, #16
 800d76e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d772:	3b18      	subs	r3, #24
 800d774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff fbdf 	bl	800cf3c <find_volume>
 800d77e:	4603      	mov	r3, r0
 800d780:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d784:	f102 0217 	add.w	r2, r2, #23
 800d788:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800d78a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d78e:	f103 0317 	add.w	r3, r3, #23
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f040 82e3 	bne.w	800dd60 <f_open+0x65c>
		INIT_BUF(dj);
 800d79a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d79e:	3b18      	subs	r3, #24
 800d7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a4:	3318      	adds	r3, #24
 800d7a6:	f107 0218 	add.w	r2, r7, #24
 800d7aa:	3a04      	subs	r2, #4
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7b2:	3b18      	subs	r3, #24
 800d7b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d7b8:	4ad1      	ldr	r2, [pc, #836]	; (800db00 <f_open+0x3fc>)
 800d7ba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d7bc:	f107 0318 	add.w	r3, r7, #24
 800d7c0:	3b10      	subs	r3, #16
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7c8:	3b18      	subs	r3, #24
 800d7ca:	4611      	mov	r1, r2
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7ff fa8b 	bl	800cce8 <follow_path>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d7d8:	f102 0217 	add.w	r2, r2, #23
 800d7dc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800d7de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7e2:	3b18      	subs	r3, #24
 800d7e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e8:	3314      	adds	r3, #20
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d7f0:	f102 0210 	add.w	r2, r2, #16
 800d7f4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d7f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d7fa:	f103 0317 	add.w	r3, r3, #23
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d126      	bne.n	800d852 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800d804:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d808:	f103 0310 	add.w	r3, r3, #16
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800d812:	2306      	movs	r3, #6
 800d814:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d818:	f102 0217 	add.w	r2, r2, #23
 800d81c:	7013      	strb	r3, [r2, #0]
 800d81e:	e018      	b.n	800d852 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d820:	f107 0318 	add.w	r3, r7, #24
 800d824:	3b11      	subs	r3, #17
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f023 0301 	bic.w	r3, r3, #1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	bf14      	ite	ne
 800d830:	2301      	movne	r3, #1
 800d832:	2300      	moveq	r3, #0
 800d834:	b2db      	uxtb	r3, r3
 800d836:	461a      	mov	r2, r3
 800d838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d83c:	3b18      	subs	r3, #24
 800d83e:	4611      	mov	r1, r2
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd fb0b 	bl	800ae5c <chk_lock>
 800d846:	4603      	mov	r3, r0
 800d848:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d84c:	f102 0217 	add.w	r2, r2, #23
 800d850:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d852:	f107 0318 	add.w	r3, r7, #24
 800d856:	3b11      	subs	r3, #17
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	f003 031c 	and.w	r3, r3, #28
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 8150 	beq.w	800db04 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800d864:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d868:	f103 0317 	add.w	r3, r3, #23
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d030      	beq.n	800d8d4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800d872:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d876:	f103 0317 	add.w	r3, r3, #23
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d112      	bne.n	800d8a6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d880:	f7fd fb5e 	bl	800af40 <enq_lock>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <f_open+0x196>
 800d88a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d88e:	3b18      	subs	r3, #24
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe ff37 	bl	800c704 <dir_register>
 800d896:	4603      	mov	r3, r0
 800d898:	e000      	b.n	800d89c <f_open+0x198>
 800d89a:	2312      	movs	r3, #18
 800d89c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d8a0:	f102 0217 	add.w	r2, r2, #23
 800d8a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8a6:	f107 0318 	add.w	r3, r7, #24
 800d8aa:	3b11      	subs	r3, #17
 800d8ac:	f107 0218 	add.w	r2, r7, #24
 800d8b0:	3a11      	subs	r2, #17
 800d8b2:	7812      	ldrb	r2, [r2, #0]
 800d8b4:	f042 0208 	orr.w	r2, r2, #8
 800d8b8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800d8ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d8be:	3b18      	subs	r3, #24
 800d8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8c4:	3314      	adds	r3, #20
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d8cc:	f102 0210 	add.w	r2, r2, #16
 800d8d0:	6013      	str	r3, [r2, #0]
 800d8d2:	e01f      	b.n	800d914 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d8d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d8d8:	f103 0310 	add.w	r3, r3, #16
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	330b      	adds	r3, #11
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	f003 0311 	and.w	r3, r3, #17
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <f_open+0x1f4>
					res = FR_DENIED;
 800d8ea:	2307      	movs	r3, #7
 800d8ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d8f0:	f102 0217 	add.w	r2, r2, #23
 800d8f4:	7013      	strb	r3, [r2, #0]
 800d8f6:	e00d      	b.n	800d914 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800d8f8:	f107 0318 	add.w	r3, r7, #24
 800d8fc:	3b11      	subs	r3, #17
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	f003 0304 	and.w	r3, r3, #4
 800d904:	2b00      	cmp	r3, #0
 800d906:	d005      	beq.n	800d914 <f_open+0x210>
						res = FR_EXIST;
 800d908:	2308      	movs	r3, #8
 800d90a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d90e:	f102 0217 	add.w	r2, r2, #23
 800d912:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d914:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d918:	f103 0317 	add.w	r3, r3, #23
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f040 8122 	bne.w	800db68 <f_open+0x464>
 800d924:	f107 0318 	add.w	r3, r7, #24
 800d928:	3b11      	subs	r3, #17
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	f003 0308 	and.w	r3, r3, #8
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 8119 	beq.w	800db68 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800d936:	f7fc f8d1 	bl	8009adc <get_fattime>
 800d93a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d93e:	f103 030c 	add.w	r3, r3, #12
 800d942:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800d944:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d948:	f103 0310 	add.w	r3, r3, #16
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	330e      	adds	r3, #14
 800d950:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d954:	f102 020c 	add.w	r2, r2, #12
 800d958:	6812      	ldr	r2, [r2, #0]
 800d95a:	b2d2      	uxtb	r2, r2
 800d95c:	701a      	strb	r2, [r3, #0]
 800d95e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d962:	f103 030c 	add.w	r3, r3, #12
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	b29b      	uxth	r3, r3
 800d96a:	0a1b      	lsrs	r3, r3, #8
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d972:	f103 0310 	add.w	r3, r3, #16
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	330f      	adds	r3, #15
 800d97a:	b2d2      	uxtb	r2, r2
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d982:	f103 030c 	add.w	r3, r3, #12
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	0c1a      	lsrs	r2, r3, #16
 800d98a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d98e:	f103 0310 	add.w	r3, r3, #16
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3310      	adds	r3, #16
 800d996:	b2d2      	uxtb	r2, r2
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d99e:	f103 030c 	add.w	r3, r3, #12
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	0e1a      	lsrs	r2, r3, #24
 800d9a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9aa:	f103 0310 	add.w	r3, r3, #16
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3311      	adds	r3, #17
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d9b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9ba:	f103 0310 	add.w	r3, r3, #16
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	330b      	adds	r3, #11
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d9c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9ca:	f103 0310 	add.w	r3, r3, #16
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	331c      	adds	r3, #28
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	701a      	strb	r2, [r3, #0]
 800d9d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9da:	f103 0310 	add.w	r3, r3, #16
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	331d      	adds	r3, #29
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9ea:	f103 0310 	add.w	r3, r3, #16
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	331e      	adds	r3, #30
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d9fa:	f103 0310 	add.w	r3, r3, #16
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	331f      	adds	r3, #31
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800da06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da0a:	3b18      	subs	r3, #24
 800da0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800da16:	f102 0210 	add.w	r2, r2, #16
 800da1a:	6811      	ldr	r1, [r2, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fbb4 	bl	800c18a <ld_clust>
 800da22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800da26:	f103 0308 	add.w	r3, r3, #8
 800da2a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800da2c:	2100      	movs	r1, #0
 800da2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800da32:	f103 0310 	add.w	r3, r3, #16
 800da36:	6818      	ldr	r0, [r3, #0]
 800da38:	f7fe fbd5 	bl	800c1e6 <st_clust>
				dj.fs->wflag = 1;
 800da3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da40:	3b18      	subs	r3, #24
 800da42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da4c:	3304      	adds	r3, #4
 800da4e:	2201      	movs	r2, #1
 800da50:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800da52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800da56:	f103 0308 	add.w	r3, r3, #8
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 8083 	beq.w	800db68 <f_open+0x464>
					dw = dj.fs->winsect;
 800da62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da66:	3b18      	subs	r3, #24
 800da68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da72:	330c      	adds	r3, #12
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800da7a:	f102 020c 	add.w	r2, r2, #12
 800da7e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800da80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da84:	3b18      	subs	r3, #24
 800da86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800da90:	f102 0208 	add.w	r2, r2, #8
 800da94:	6811      	ldr	r1, [r2, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f7fd ff8d 	bl	800b9b6 <remove_chain>
 800da9c:	4603      	mov	r3, r0
 800da9e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800daa2:	f102 0217 	add.w	r2, r2, #23
 800daa6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800daa8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800daac:	f103 0317 	add.w	r3, r3, #23
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d158      	bne.n	800db68 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800dab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800daba:	3b18      	subs	r3, #24
 800dabc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dac6:	f102 0208 	add.w	r2, r2, #8
 800daca:	6812      	ldr	r2, [r2, #0]
 800dacc:	3a01      	subs	r2, #1
 800dace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dad2:	330c      	adds	r3, #12
 800dad4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800dad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dada:	3b18      	subs	r3, #24
 800dadc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dae6:	f102 020c 	add.w	r2, r2, #12
 800daea:	6811      	ldr	r1, [r2, #0]
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fbd3 	bl	800b298 <move_window>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800daf8:	f102 0217 	add.w	r2, r2, #23
 800dafc:	7013      	strb	r3, [r2, #0]
 800dafe:	e033      	b.n	800db68 <f_open+0x464>
 800db00:	2000a1f4 	.word	0x2000a1f4
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800db04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db08:	f103 0317 	add.w	r3, r3, #23
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d12a      	bne.n	800db68 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800db12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db16:	f103 0310 	add.w	r3, r3, #16
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	330b      	adds	r3, #11
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f003 0310 	and.w	r3, r3, #16
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <f_open+0x432>
					res = FR_NO_FILE;
 800db28:	2304      	movs	r3, #4
 800db2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800db2e:	f102 0217 	add.w	r2, r2, #23
 800db32:	7013      	strb	r3, [r2, #0]
 800db34:	e018      	b.n	800db68 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800db36:	f107 0318 	add.w	r3, r7, #24
 800db3a:	3b11      	subs	r3, #17
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d010      	beq.n	800db68 <f_open+0x464>
 800db46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db4a:	f103 0310 	add.w	r3, r3, #16
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	330b      	adds	r3, #11
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 0301 	and.w	r3, r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d005      	beq.n	800db68 <f_open+0x464>
						res = FR_DENIED;
 800db5c:	2307      	movs	r3, #7
 800db5e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800db62:	f102 0217 	add.w	r2, r2, #23
 800db66:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800db68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db6c:	f103 0317 	add.w	r3, r3, #23
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d15b      	bne.n	800dc2e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db76:	f107 0318 	add.w	r3, r7, #24
 800db7a:	3b11      	subs	r3, #17
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	f003 0308 	and.w	r3, r3, #8
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <f_open+0x496>
				mode |= FA__WRITTEN;
 800db86:	f107 0318 	add.w	r3, r7, #24
 800db8a:	3b11      	subs	r3, #17
 800db8c:	f107 0218 	add.w	r2, r7, #24
 800db90:	3a11      	subs	r2, #17
 800db92:	7812      	ldrb	r2, [r2, #0]
 800db94:	f042 0220 	orr.w	r2, r2, #32
 800db98:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800db9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800db9e:	3b18      	subs	r3, #24
 800dba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dbaa:	330c      	adds	r3, #12
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	f107 0318 	add.w	r3, r7, #24
 800dbb2:	3b0c      	subs	r3, #12
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbba:	331c      	adds	r3, #28
 800dbbc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800dbbe:	f107 0318 	add.w	r3, r7, #24
 800dbc2:	3b0c      	subs	r3, #12
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dbca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dbce:	f102 0210 	add.w	r2, r2, #16
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbd6:	f107 0318 	add.w	r3, r7, #24
 800dbda:	3b11      	subs	r3, #17
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	f023 0301 	bic.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	bf14      	ite	ne
 800dbe6:	2301      	movne	r3, #1
 800dbe8:	2300      	moveq	r3, #0
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	461a      	mov	r2, r3
 800dbee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dbf2:	3b18      	subs	r3, #24
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd f9c6 	bl	800af88 <inc_lock>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	f107 0318 	add.w	r3, r7, #24
 800dc02:	3b0c      	subs	r3, #12
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800dc0e:	f107 0318 	add.w	r3, r7, #24
 800dc12:	3b0c      	subs	r3, #12
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d105      	bne.n	800dc2e <f_open+0x52a>
 800dc22:	2302      	movs	r3, #2
 800dc24:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dc28:	f102 0217 	add.w	r2, r2, #23
 800dc2c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800dc2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dc32:	f103 0317 	add.w	r3, r3, #23
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f040 8091 	bne.w	800dd60 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800dc3e:	f107 0318 	add.w	r3, r7, #24
 800dc42:	3b0c      	subs	r3, #12
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc4a:	3306      	adds	r3, #6
 800dc4c:	f107 0218 	add.w	r2, r7, #24
 800dc50:	3a11      	subs	r2, #17
 800dc52:	7812      	ldrb	r2, [r2, #0]
 800dc54:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800dc56:	f107 0318 	add.w	r3, r7, #24
 800dc5a:	3b0c      	subs	r3, #12
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc62:	3307      	adds	r3, #7
 800dc64:	2200      	movs	r2, #0
 800dc66:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800dc68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dc6c:	3b18      	subs	r3, #24
 800dc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dc78:	f102 0210 	add.w	r2, r2, #16
 800dc7c:	6811      	ldr	r1, [r2, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fa83 	bl	800c18a <ld_clust>
 800dc84:	4602      	mov	r2, r0
 800dc86:	f107 0318 	add.w	r3, r7, #24
 800dc8a:	3b0c      	subs	r3, #12
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc92:	3310      	adds	r3, #16
 800dc94:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800dc96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dc9a:	f103 0310 	add.w	r3, r3, #16
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	331f      	adds	r3, #31
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	061a      	lsls	r2, r3, #24
 800dca6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dcaa:	f103 0310 	add.w	r3, r3, #16
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	331e      	adds	r3, #30
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	041b      	lsls	r3, r3, #16
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dcbc:	f102 0210 	add.w	r2, r2, #16
 800dcc0:	6812      	ldr	r2, [r2, #0]
 800dcc2:	321d      	adds	r2, #29
 800dcc4:	7812      	ldrb	r2, [r2, #0]
 800dcc6:	0212      	lsls	r2, r2, #8
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dcce:	f102 0210 	add.w	r2, r2, #16
 800dcd2:	6812      	ldr	r2, [r2, #0]
 800dcd4:	321c      	adds	r2, #28
 800dcd6:	7812      	ldrb	r2, [r2, #0]
 800dcd8:	431a      	orrs	r2, r3
 800dcda:	f107 0318 	add.w	r3, r7, #24
 800dcde:	3b0c      	subs	r3, #12
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dce6:	330c      	adds	r3, #12
 800dce8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800dcea:	f107 0318 	add.w	r3, r7, #24
 800dcee:	3b0c      	subs	r3, #12
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800dcfc:	f107 0318 	add.w	r3, r7, #24
 800dd00:	3b0c      	subs	r3, #12
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd08:	3318      	adds	r3, #24
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800dd0e:	f107 0318 	add.w	r3, r7, #24
 800dd12:	3b0c      	subs	r3, #12
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800dd20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dd24:	3b18      	subs	r3, #24
 800dd26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	f107 0318 	add.w	r3, r7, #24
 800dd30:	3b0c      	subs	r3, #12
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd38:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800dd3a:	f107 0318 	add.w	r3, r7, #24
 800dd3e:	3b0c      	subs	r3, #12
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4c:	3306      	adds	r3, #6
 800dd4e:	881a      	ldrh	r2, [r3, #0]
 800dd50:	f107 0318 	add.w	r3, r7, #24
 800dd54:	3b0c      	subs	r3, #12
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800dd60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dd64:	f103 0317 	add.w	r3, r3, #23
 800dd68:	781b      	ldrb	r3, [r3, #0]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop

0800dd78 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08c      	sub	sp, #48	; 0x30
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f7ff fc2f 	bl	800d5f4 <validate>
 800dd96:	4603      	mov	r3, r0
 800dd98:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800dd9a:	7ffb      	ldrb	r3, [r7, #31]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <f_read+0x2c>
 800dda0:	7ffb      	ldrb	r3, [r7, #31]
 800dda2:	e1fb      	b.n	800e19c <f_read+0x424>
	if (fp->err)								/* Check error */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddaa:	3307      	adds	r3, #7
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d005      	beq.n	800ddbe <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb8:	3307      	adds	r3, #7
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	e1ee      	b.n	800e19c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc4:	3306      	adds	r3, #6
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ddd0:	2307      	movs	r3, #7
 800ddd2:	e1e3      	b.n	800e19c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddda:	330c      	adds	r3, #12
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dde4:	3308      	adds	r3, #8
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	f240 81ce 	bls.w	800e192 <f_read+0x41a>
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ddfa:	e1ca      	b.n	800e192 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de02:	3308      	adds	r3, #8
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de12:	330a      	adds	r3, #10
 800de14:	881b      	ldrh	r3, [r3, #0]
 800de16:	fbb2 f1f3 	udiv	r1, r2, r3
 800de1a:	fb03 f301 	mul.w	r3, r3, r1
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	f040 8160 	bne.w	800e0e6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de2c:	3308      	adds	r3, #8
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de3c:	330a      	adds	r3, #10
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	fbb2 f3f3 	udiv	r3, r2, r3
 800de44:	b2da      	uxtb	r2, r3
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de52:	3302      	adds	r3, #2
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	3b01      	subs	r3, #1
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	4013      	ands	r3, r2
 800de5c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d14a      	bne.n	800defa <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de6a:	3308      	adds	r3, #8
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d106      	bne.n	800de80 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de78:	3310      	adds	r3, #16
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de7e:	e01f      	b.n	800dec0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de86:	3304      	adds	r3, #4
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00a      	beq.n	800dea4 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de94:	3308      	adds	r3, #8
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4619      	mov	r1, r3
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7fd fea4 	bl	800bbe8 <clmt_clust>
 800dea0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dea2:	e00d      	b.n	800dec0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deb2:	3314      	adds	r3, #20
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f7fd fb17 	bl	800b4ec <get_fat>
 800debe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d807      	bhi.n	800ded6 <f_read+0x15e>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800decc:	3307      	adds	r3, #7
 800dece:	2202      	movs	r2, #2
 800ded0:	701a      	strb	r2, [r3, #0]
 800ded2:	2302      	movs	r3, #2
 800ded4:	e162      	b.n	800e19c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dedc:	d107      	bne.n	800deee <f_read+0x176>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dee4:	3307      	adds	r3, #7
 800dee6:	2201      	movs	r2, #1
 800dee8:	701a      	strb	r2, [r3, #0]
 800deea:	2301      	movs	r3, #1
 800deec:	e156      	b.n	800e19c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800def4:	3314      	adds	r3, #20
 800def6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800def8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df08:	3314      	adds	r3, #20
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4619      	mov	r1, r3
 800df0e:	4610      	mov	r0, r2
 800df10:	f7fd fac5 	bl	800b49e <clust2sect>
 800df14:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d107      	bne.n	800df2c <f_read+0x1b4>
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df22:	3307      	adds	r3, #7
 800df24:	2202      	movs	r2, #2
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	2302      	movs	r3, #2
 800df2a:	e137      	b.n	800e19c <f_read+0x424>
			sect += csect;
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	4413      	add	r3, r2
 800df32:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df40:	330a      	adds	r3, #10
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	fbb3 f3f2 	udiv	r3, r3, r2
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	2b00      	cmp	r3, #0
 800df52:	d070      	beq.n	800e036 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800df54:	7dfa      	ldrb	r2, [r7, #23]
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	441a      	add	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df66:	3302      	adds	r3, #2
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d90b      	bls.n	800df86 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7a:	3302      	adds	r3, #2
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df92:	3301      	adds	r3, #1
 800df94:	7818      	ldrb	r0, [r3, #0]
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	6a39      	ldr	r1, [r7, #32]
 800df9c:	f7fc fe88 	bl	800acb0 <disk_read>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d007      	beq.n	800dfb6 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfac:	3307      	adds	r3, #7
 800dfae:	2201      	movs	r2, #1
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e0f2      	b.n	800e19c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfbc:	3306      	adds	r3, #6
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d028      	beq.n	800e01a <f_read+0x2a2>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfce:	3318      	adds	r3, #24
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d91e      	bls.n	800e01a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe2:	3318      	adds	r3, #24
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	1ad2      	subs	r2, r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff6:	330a      	adds	r3, #10
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	fb03 f302 	mul.w	r3, r3, r2
 800dffe:	6a3a      	ldr	r2, [r7, #32]
 800e000:	18d0      	adds	r0, r2, r3
 800e002:	68f9      	ldr	r1, [r7, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e010:	330a      	adds	r3, #10
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	f7fc fea9 	bl	800ad6c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e026:	330a      	adds	r3, #10
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	fb02 f303 	mul.w	r3, r2, r3
 800e032:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800e034:	e093      	b.n	800e15e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03c:	3318      	adds	r3, #24
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	429a      	cmp	r2, r3
 800e044:	d049      	beq.n	800e0da <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e04c:	3306      	adds	r3, #6
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e054:	2b00      	cmp	r3, #0
 800e056:	d028      	beq.n	800e0aa <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e064:	3301      	adds	r3, #1
 800e066:	7818      	ldrb	r0, [r3, #0]
 800e068:	68f9      	ldr	r1, [r7, #12]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e070:	3318      	adds	r3, #24
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	2301      	movs	r3, #1
 800e076:	f7fc fe3b 	bl	800acf0 <disk_write>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e086:	3307      	adds	r3, #7
 800e088:	2201      	movs	r2, #1
 800e08a:	701a      	strb	r2, [r3, #0]
 800e08c:	2301      	movs	r3, #1
 800e08e:	e085      	b.n	800e19c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e096:	3306      	adds	r3, #6
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a6:	3306      	adds	r3, #6
 800e0a8:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	7818      	ldrb	r0, [r3, #0]
 800e0ba:	68f9      	ldr	r1, [r7, #12]
 800e0bc:	2301      	movs	r3, #1
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	f7fc fdf6 	bl	800acb0 <disk_read>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e060      	b.n	800e19c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e0:	3318      	adds	r3, #24
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f2:	330a      	adds	r3, #10
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0fe:	3308      	adds	r3, #8
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	330a      	adds	r3, #10
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	fbb2 f1f3 	udiv	r1, r2, r3
 800e116:	fb03 f301 	mul.w	r3, r3, r1
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	1ac3      	subs	r3, r0, r3
 800e11e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800e120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d901      	bls.n	800e12c <f_read+0x3b4>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e132:	3308      	adds	r3, #8
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e142:	330a      	adds	r3, #10
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	fbb2 f1f3 	udiv	r1, r2, r3
 800e14a:	fb03 f301 	mul.w	r3, r3, r1
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4413      	add	r3, r2
 800e154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e156:	4619      	mov	r1, r3
 800e158:	6a38      	ldr	r0, [r7, #32]
 800e15a:	f7fc fe07 	bl	800ad6c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e15e:	6a3a      	ldr	r2, [r7, #32]
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	4413      	add	r3, r2
 800e164:	623b      	str	r3, [r7, #32]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16c:	3308      	adds	r3, #8
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	441a      	add	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17a:	3308      	adds	r3, #8
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	441a      	add	r2, r3
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f ae31 	bne.w	800ddfc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3730      	adds	r7, #48	; 0x30
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff fa21 	bl	800d5f4 <validate>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f040 80cc 	bne.w	800e356 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c4:	3306      	adds	r3, #6
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	f003 0320 	and.w	r3, r3, #32
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 80c2 	beq.w	800e356 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1d8:	3306      	adds	r3, #6
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d022      	beq.n	800e22a <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	7818      	ldrb	r0, [r3, #0]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1fc:	3318      	adds	r3, #24
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	2301      	movs	r3, #1
 800e202:	f7fc fd75 	bl	800acf0 <disk_write>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800e20c:	2301      	movs	r3, #1
 800e20e:	e0a3      	b.n	800e358 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e216:	3306      	adds	r3, #6
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e226:	3306      	adds	r3, #6
 800e228:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e238:	331c      	adds	r3, #28
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4619      	mov	r1, r3
 800e23e:	4610      	mov	r0, r2
 800e240:	f7fd f82a 	bl	800b298 <move_window>
 800e244:	4603      	mov	r3, r0
 800e246:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800e248:	7dfb      	ldrb	r3, [r7, #23]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 8083 	bne.w	800e356 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	330b      	adds	r3, #11
 800e25e:	781a      	ldrb	r2, [r3, #0]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	330b      	adds	r3, #11
 800e264:	f042 0220 	orr.w	r2, r2, #32
 800e268:	b2d2      	uxtb	r2, r2
 800e26a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e272:	330c      	adds	r3, #12
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	331c      	adds	r3, #28
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e284:	330c      	adds	r3, #12
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	0a1b      	lsrs	r3, r3, #8
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	331d      	adds	r3, #29
 800e292:	b2d2      	uxtb	r2, r2
 800e294:	701a      	strb	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e29c:	330c      	adds	r3, #12
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	0c1a      	lsrs	r2, r3, #16
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	331e      	adds	r3, #30
 800e2a6:	b2d2      	uxtb	r2, r2
 800e2a8:	701a      	strb	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b0:	330c      	adds	r3, #12
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	0e1a      	lsrs	r2, r3, #24
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	331f      	adds	r3, #31
 800e2ba:	b2d2      	uxtb	r2, r2
 800e2bc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c4:	3310      	adds	r3, #16
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6938      	ldr	r0, [r7, #16]
 800e2cc:	f7fd ff8b 	bl	800c1e6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800e2d0:	f7fb fc04 	bl	8009adc <get_fattime>
 800e2d4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	3316      	adds	r3, #22
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	b2d2      	uxtb	r2, r2
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	0a1b      	lsrs	r3, r3, #8
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3317      	adds	r3, #23
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	0c1a      	lsrs	r2, r3, #16
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3318      	adds	r3, #24
 800e2f8:	b2d2      	uxtb	r2, r2
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	0e1a      	lsrs	r2, r3, #24
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	3319      	adds	r3, #25
 800e304:	b2d2      	uxtb	r2, r2
 800e306:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3312      	adds	r3, #18
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	3313      	adds	r3, #19
 800e314:	2200      	movs	r2, #0
 800e316:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e31e:	3306      	adds	r3, #6
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	f023 0320 	bic.w	r3, r3, #32
 800e326:	b2da      	uxtb	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32e:	3306      	adds	r3, #6
 800e330:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33e:	3304      	adds	r3, #4
 800e340:	2201      	movs	r2, #1
 800e342:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fc ffd7 	bl	800b300 <sync_fs>
 800e352:	4603      	mov	r3, r0
 800e354:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800e356:	7dfb      	ldrb	r3, [r7, #23]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3718      	adds	r7, #24
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ff1b 	bl	800e1a4 <f_sync>
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d119      	bne.n	800e3ac <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff f93b 	bl	800d5f4 <validate>
 800e37e:	4603      	mov	r3, r0
 800e380:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e382:	7bfb      	ldrb	r3, [r7, #15]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d111      	bne.n	800e3ac <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e38e:	3308      	adds	r3, #8
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4618      	mov	r0, r3
 800e394:	f7fc feb8 	bl	800b108 <dec_lock>
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d104      	bne.n	800e3ac <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e3ce:	4b1e      	ldr	r3, [pc, #120]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3d0:	7a5b      	ldrb	r3, [r3, #9]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d831      	bhi.n	800e43c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3d8:	4b1b      	ldr	r3, [pc, #108]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3da:	7a5b      	ldrb	r3, [r3, #9]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4b19      	ldr	r3, [pc, #100]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e3e6:	4b18      	ldr	r3, [pc, #96]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3e8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	4a16      	ldr	r2, [pc, #88]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e3f6:	4b14      	ldr	r3, [pc, #80]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e3f8:	7a5b      	ldrb	r3, [r3, #9]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	4b12      	ldr	r3, [pc, #72]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e400:	4413      	add	r3, r2
 800e402:	79fa      	ldrb	r2, [r7, #7]
 800e404:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e406:	4b10      	ldr	r3, [pc, #64]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e408:	7a5b      	ldrb	r3, [r3, #9]
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	b2d1      	uxtb	r1, r2
 800e410:	4a0d      	ldr	r2, [pc, #52]	; (800e448 <FATFS_LinkDriverEx+0x90>)
 800e412:	7251      	strb	r1, [r2, #9]
 800e414:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e416:	7dbb      	ldrb	r3, [r7, #22]
 800e418:	3330      	adds	r3, #48	; 0x30
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	3301      	adds	r3, #1
 800e424:	223a      	movs	r2, #58	; 0x3a
 800e426:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	3302      	adds	r3, #2
 800e42c:	222f      	movs	r2, #47	; 0x2f
 800e42e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	3303      	adds	r3, #3
 800e434:	2200      	movs	r2, #0
 800e436:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	371c      	adds	r7, #28
 800e442:	46bd      	mov	sp, r7
 800e444:	bc80      	pop	{r7}
 800e446:	4770      	bx	lr
 800e448:	2000a3f4 	.word	0x2000a3f4

0800e44c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e456:	2200      	movs	r2, #0
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff ffac 	bl	800e3b8 <FATFS_LinkDriverEx>
 800e460:	4603      	mov	r3, r0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	4603      	mov	r3, r0
 800e474:	6039      	str	r1, [r7, #0]
 800e476:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e478:	88fb      	ldrh	r3, [r7, #6]
 800e47a:	2b7f      	cmp	r3, #127	; 0x7f
 800e47c:	d802      	bhi.n	800e484 <ff_convert+0x18>
		c = chr;
 800e47e:	88fb      	ldrh	r3, [r7, #6]
 800e480:	81fb      	strh	r3, [r7, #14]
 800e482:	e025      	b.n	800e4d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00b      	beq.n	800e4a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e48a:	88fb      	ldrh	r3, [r7, #6]
 800e48c:	2bff      	cmp	r3, #255	; 0xff
 800e48e:	d805      	bhi.n	800e49c <ff_convert+0x30>
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	3b80      	subs	r3, #128	; 0x80
 800e494:	4a11      	ldr	r2, [pc, #68]	; (800e4dc <ff_convert+0x70>)
 800e496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e49a:	e000      	b.n	800e49e <ff_convert+0x32>
 800e49c:	2300      	movs	r3, #0
 800e49e:	81fb      	strh	r3, [r7, #14]
 800e4a0:	e016      	b.n	800e4d0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	81fb      	strh	r3, [r7, #14]
 800e4a6:	e009      	b.n	800e4bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	4a0c      	ldr	r2, [pc, #48]	; (800e4dc <ff_convert+0x70>)
 800e4ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4b0:	88fa      	ldrh	r2, [r7, #6]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d006      	beq.n	800e4c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e4b6:	89fb      	ldrh	r3, [r7, #14]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	81fb      	strh	r3, [r7, #14]
 800e4bc:	89fb      	ldrh	r3, [r7, #14]
 800e4be:	2b7f      	cmp	r3, #127	; 0x7f
 800e4c0:	d9f2      	bls.n	800e4a8 <ff_convert+0x3c>
 800e4c2:	e000      	b.n	800e4c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e4c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e4c6:	89fb      	ldrh	r3, [r7, #14]
 800e4c8:	3380      	adds	r3, #128	; 0x80
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e4d0:	89fb      	ldrh	r3, [r7, #14]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bc80      	pop	{r7}
 800e4da:	4770      	bx	lr
 800e4dc:	0802efd8 	.word	0x0802efd8

0800e4e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	e002      	b.n	800e4f6 <ff_wtoupper+0x16>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	60fb      	str	r3, [r7, #12]
 800e4f6:	4a0f      	ldr	r2, [pc, #60]	; (800e534 <ff_wtoupper+0x54>)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d006      	beq.n	800e510 <ff_wtoupper+0x30>
 800e502:	4a0c      	ldr	r2, [pc, #48]	; (800e534 <ff_wtoupper+0x54>)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e50a:	88fa      	ldrh	r2, [r7, #6]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d1ef      	bne.n	800e4f0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e510:	4a08      	ldr	r2, [pc, #32]	; (800e534 <ff_wtoupper+0x54>)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d004      	beq.n	800e526 <ff_wtoupper+0x46>
 800e51c:	4a06      	ldr	r2, [pc, #24]	; (800e538 <ff_wtoupper+0x58>)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e524:	e000      	b.n	800e528 <ff_wtoupper+0x48>
 800e526:	88fb      	ldrh	r3, [r7, #6]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bc80      	pop	{r7}
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	0802f0d8 	.word	0x0802f0d8
 800e538:	0802f2b8 	.word	0x0802f2b8

0800e53c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e540:	2201      	movs	r2, #1
 800e542:	490e      	ldr	r1, [pc, #56]	; (800e57c <MX_USB_HOST_Init+0x40>)
 800e544:	480e      	ldr	r0, [pc, #56]	; (800e580 <MX_USB_HOST_Init+0x44>)
 800e546:	f7fb fec7 	bl	800a2d8 <USBH_Init>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e550:	f7f4 fefc 	bl	800334c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e554:	490b      	ldr	r1, [pc, #44]	; (800e584 <MX_USB_HOST_Init+0x48>)
 800e556:	480a      	ldr	r0, [pc, #40]	; (800e580 <MX_USB_HOST_Init+0x44>)
 800e558:	f7fb ff42 	bl	800a3e0 <USBH_RegisterClass>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e562:	f7f4 fef3 	bl	800334c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e566:	4806      	ldr	r0, [pc, #24]	; (800e580 <MX_USB_HOST_Init+0x44>)
 800e568:	f7fb ffc4 	bl	800a4f4 <USBH_Start>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e572:	f7f4 feeb 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e576:	bf00      	nop
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0800e589 	.word	0x0800e589
 800e580:	2000e6fc 	.word	0x2000e6fc
 800e584:	20000120 	.word	0x20000120

0800e588 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e594:	78fb      	ldrb	r3, [r7, #3]
 800e596:	3b01      	subs	r3, #1
 800e598:	2b04      	cmp	r3, #4
 800e59a:	d819      	bhi.n	800e5d0 <USBH_UserProcess+0x48>
 800e59c:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <USBH_UserProcess+0x1c>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e5d1 	.word	0x0800e5d1
 800e5a8:	0800e5c1 	.word	0x0800e5c1
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e5c9 	.word	0x0800e5c9
 800e5b4:	0800e5b9 	.word	0x0800e5b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e5b8:	4b08      	ldr	r3, [pc, #32]	; (800e5dc <USBH_UserProcess+0x54>)
 800e5ba:	2203      	movs	r2, #3
 800e5bc:	701a      	strb	r2, [r3, #0]
  break;
 800e5be:	e008      	b.n	800e5d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e5c0:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <USBH_UserProcess+0x54>)
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	701a      	strb	r2, [r3, #0]
  break;
 800e5c6:	e004      	b.n	800e5d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e5c8:	4b04      	ldr	r3, [pc, #16]	; (800e5dc <USBH_UserProcess+0x54>)
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	701a      	strb	r2, [r3, #0]
  break;
 800e5ce:	e000      	b.n	800e5d2 <USBH_UserProcess+0x4a>

  default:
  break;
 800e5d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e5d2:	bf00      	nop
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bc80      	pop	{r7}
 800e5da:	4770      	bx	lr
 800e5dc:	2000a400 	.word	0x2000a400

0800e5e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5e8:	f107 0310 	add.w	r3, r7, #16
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	605a      	str	r2, [r3, #4]
 800e5f2:	609a      	str	r2, [r3, #8]
 800e5f4:	60da      	str	r2, [r3, #12]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5fe:	d12c      	bne.n	800e65a <HAL_HCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e600:	4b18      	ldr	r3, [pc, #96]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e602:	699b      	ldr	r3, [r3, #24]
 800e604:	4a17      	ldr	r2, [pc, #92]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e606:	f043 0304 	orr.w	r3, r3, #4
 800e60a:	6193      	str	r3, [r2, #24]
 800e60c:	4b15      	ldr	r3, [pc, #84]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e60e:	699b      	ldr	r3, [r3, #24]
 800e610:	f003 0304 	and.w	r3, r3, #4
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_VBUS_Pin|USB_ID_Pin;
 800e618:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e61c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e622:	2300      	movs	r3, #0
 800e624:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e626:	f107 0310 	add.w	r3, r7, #16
 800e62a:	4619      	mov	r1, r3
 800e62c:	480e      	ldr	r0, [pc, #56]	; (800e668 <HAL_HCD_MspInit+0x88>)
 800e62e:	f7f6 fe23 	bl	8005278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e632:	4b0c      	ldr	r3, [pc, #48]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e634:	695b      	ldr	r3, [r3, #20]
 800e636:	4a0b      	ldr	r2, [pc, #44]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e63c:	6153      	str	r3, [r2, #20]
 800e63e:	4b09      	ldr	r3, [pc, #36]	; (800e664 <HAL_HCD_MspInit+0x84>)
 800e640:	695b      	ldr	r3, [r3, #20]
 800e642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e646:	60bb      	str	r3, [r7, #8]
 800e648:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e64a:	2200      	movs	r2, #0
 800e64c:	2100      	movs	r1, #0
 800e64e:	2043      	movs	r0, #67	; 0x43
 800e650:	f7f6 fa61 	bl	8004b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e654:	2043      	movs	r0, #67	; 0x43
 800e656:	f7f6 fa7a 	bl	8004b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e65a:	bf00      	nop
 800e65c:	3720      	adds	r7, #32
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	40021000 	.word	0x40021000
 800e668:	40010800 	.word	0x40010800

0800e66c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fb ff58 	bl	800a530 <USBH_LL_IncTimer>
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e696:	4618      	mov	r0, r3
 800e698:	f7fb ff8e 	bl	800a5b8 <USBH_LL_Connect>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fb ff96 	bl	800a5e4 <USBH_LL_Disconnect>
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bc80      	pop	{r7}
 800e6d8:	4770      	bx	lr

0800e6da <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b082      	sub	sp, #8
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fb ff4b 	bl	800a584 <USBH_LL_PortEnabled>
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e704:	4618      	mov	r0, r3
 800e706:	f7fb ff4a 	bl	800a59e <USBH_LL_PortDisabled>
}
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800e722:	2b01      	cmp	r3, #1
 800e724:	d127      	bne.n	800e776 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e726:	4a16      	ldr	r2, [pc, #88]	; (800e780 <USBH_LL_Init+0x6c>)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a13      	ldr	r2, [pc, #76]	; (800e780 <USBH_LL_Init+0x6c>)
 800e732:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e736:	4b12      	ldr	r3, [pc, #72]	; (800e780 <USBH_LL_Init+0x6c>)
 800e738:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e73c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e73e:	4b10      	ldr	r3, [pc, #64]	; (800e780 <USBH_LL_Init+0x6c>)
 800e740:	2208      	movs	r2, #8
 800e742:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e744:	4b0e      	ldr	r3, [pc, #56]	; (800e780 <USBH_LL_Init+0x6c>)
 800e746:	2201      	movs	r2, #1
 800e748:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e74a:	4b0d      	ldr	r3, [pc, #52]	; (800e780 <USBH_LL_Init+0x6c>)
 800e74c:	2202      	movs	r2, #2
 800e74e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e750:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <USBH_LL_Init+0x6c>)
 800e752:	2200      	movs	r2, #0
 800e754:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e756:	480a      	ldr	r0, [pc, #40]	; (800e780 <USBH_LL_Init+0x6c>)
 800e758:	f7f6 ff64 	bl	8005624 <HAL_HCD_Init>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800e762:	f7f4 fdf3 	bl	800334c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e766:	4806      	ldr	r0, [pc, #24]	; (800e780 <USBH_LL_Init+0x6c>)
 800e768:	f7f7 fb54 	bl	8005e14 <HAL_HCD_GetCurrentFrame>
 800e76c:	4603      	mov	r3, r0
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7fb fecf 	bl	800a514 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	2000eacc 	.word	0x2000eacc

0800e784 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e78c:	2300      	movs	r3, #0
 800e78e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e790:	2300      	movs	r3, #0
 800e792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f7 fad2 	bl	8005d44 <HAL_HCD_Start>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 f910 	bl	800e9cc <USBH_Get_USB_Status>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f7 fada 	bl	8005d8a <HAL_HCD_Stop>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f8f5 	bl	800e9cc <USBH_Get_USB_Status>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e802:	78fa      	ldrb	r2, [r7, #3]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7f7 faf0 	bl	8005dec <HAL_HCD_HC_GetXferCount>
 800e80c:	4603      	mov	r3, r0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e816:	b590      	push	{r4, r7, lr}
 800e818:	b089      	sub	sp, #36	; 0x24
 800e81a:	af04      	add	r7, sp, #16
 800e81c:	6078      	str	r0, [r7, #4]
 800e81e:	4608      	mov	r0, r1
 800e820:	4611      	mov	r1, r2
 800e822:	461a      	mov	r2, r3
 800e824:	4603      	mov	r3, r0
 800e826:	70fb      	strb	r3, [r7, #3]
 800e828:	460b      	mov	r3, r1
 800e82a:	70bb      	strb	r3, [r7, #2]
 800e82c:	4613      	mov	r3, r2
 800e82e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e83e:	787c      	ldrb	r4, [r7, #1]
 800e840:	78ba      	ldrb	r2, [r7, #2]
 800e842:	78f9      	ldrb	r1, [r7, #3]
 800e844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e846:	9302      	str	r3, [sp, #8]
 800e848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	4623      	mov	r3, r4
 800e856:	f7f6 ff47 	bl	80056e8 <HAL_HCD_HC_Init>
 800e85a:	4603      	mov	r3, r0
 800e85c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	4618      	mov	r0, r3
 800e862:	f000 f8b3 	bl	800e9cc <USBH_Get_USB_Status>
 800e866:	4603      	mov	r3, r0
 800e868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	bd90      	pop	{r4, r7, pc}

0800e874 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e880:	2300      	movs	r3, #0
 800e882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e88e:	78fa      	ldrb	r2, [r7, #3]
 800e890:	4611      	mov	r1, r2
 800e892:	4618      	mov	r0, r3
 800e894:	f7f6 ffc0 	bl	8005818 <HAL_HCD_HC_Halt>
 800e898:	4603      	mov	r3, r0
 800e89a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 f894 	bl	800e9cc <USBH_Get_USB_Status>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e8b2:	b590      	push	{r4, r7, lr}
 800e8b4:	b089      	sub	sp, #36	; 0x24
 800e8b6:	af04      	add	r7, sp, #16
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	4608      	mov	r0, r1
 800e8bc:	4611      	mov	r1, r2
 800e8be:	461a      	mov	r2, r3
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	70fb      	strb	r3, [r7, #3]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70bb      	strb	r3, [r7, #2]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e8da:	787c      	ldrb	r4, [r7, #1]
 800e8dc:	78ba      	ldrb	r2, [r7, #2]
 800e8de:	78f9      	ldrb	r1, [r7, #3]
 800e8e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	4623      	mov	r3, r4
 800e8f6:	f7f6 ffb3 	bl	8005860 <HAL_HCD_HC_SubmitRequest>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	4618      	mov	r0, r3
 800e902:	f000 f863 	bl	800e9cc <USBH_Get_USB_Status>
 800e906:	4603      	mov	r3, r0
 800e908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	bd90      	pop	{r4, r7, pc}

0800e914 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e926:	78fa      	ldrb	r2, [r7, #3]
 800e928:	4611      	mov	r1, r2
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7f7 fa4a 	bl	8005dc4 <HAL_HCD_HC_GetURBState>
 800e930:	4603      	mov	r3, r0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b082      	sub	sp, #8
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	460b      	mov	r3, r1
 800e944:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d103      	bne.n	800e958 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	4618      	mov	r0, r3
 800e954:	f000 f866 	bl	800ea24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e958:	20c8      	movs	r0, #200	; 0xc8
 800e95a:	f7f5 fdd7 	bl	800450c <HAL_Delay>
  return USBH_OK;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	460b      	mov	r3, r1
 800e972:	70fb      	strb	r3, [r7, #3]
 800e974:	4613      	mov	r3, r2
 800e976:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e97e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e980:	78fa      	ldrb	r2, [r7, #3]
 800e982:	68f9      	ldr	r1, [r7, #12]
 800e984:	4613      	mov	r3, r2
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	333b      	adds	r3, #59	; 0x3b
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00a      	beq.n	800e9ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e996:	78fa      	ldrb	r2, [r7, #3]
 800e998:	68f9      	ldr	r1, [r7, #12]
 800e99a:	4613      	mov	r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	4413      	add	r3, r2
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	440b      	add	r3, r1
 800e9a4:	3350      	adds	r3, #80	; 0x50
 800e9a6:	78ba      	ldrb	r2, [r7, #2]
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	e009      	b.n	800e9c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	68f9      	ldr	r1, [r7, #12]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	4413      	add	r3, r2
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	440b      	add	r3, r1
 800e9ba:	3351      	adds	r3, #81	; 0x51
 800e9bc:	78ba      	ldrb	r2, [r7, #2]
 800e9be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3714      	adds	r7, #20
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bc80      	pop	{r7}
 800e9ca:	4770      	bx	lr

0800e9cc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	2b03      	cmp	r3, #3
 800e9de:	d817      	bhi.n	800ea10 <USBH_Get_USB_Status+0x44>
 800e9e0:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <USBH_Get_USB_Status+0x1c>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800e9f9 	.word	0x0800e9f9
 800e9ec:	0800e9ff 	.word	0x0800e9ff
 800e9f0:	0800ea05 	.word	0x0800ea05
 800e9f4:	0800ea0b 	.word	0x0800ea0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e9fc:	e00b      	b.n	800ea16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e9fe:	2302      	movs	r3, #2
 800ea00:	73fb      	strb	r3, [r7, #15]
    break;
 800ea02:	e008      	b.n	800ea16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ea04:	2301      	movs	r3, #1
 800ea06:	73fb      	strb	r3, [r7, #15]
    break;
 800ea08:	e005      	b.n	800ea16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea0e:	e002      	b.n	800ea16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ea10:	2302      	movs	r3, #2
 800ea12:	73fb      	strb	r3, [r7, #15]
    break;
 800ea14:	bf00      	nop
  }
  return usb_status;
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bc80      	pop	{r7}
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop

0800ea24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ea32:	79fb      	ldrb	r3, [r7, #7]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d102      	bne.n	800ea3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	73fb      	strb	r3, [r7, #15]
 800ea3c:	e001      	b.n	800ea42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	461a      	mov	r2, r3
 800ea46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea4a:	4803      	ldr	r0, [pc, #12]	; (800ea58 <MX_DriverVbusFS+0x34>)
 800ea4c:	f7f6 fdaf 	bl	80055ae <HAL_GPIO_WritePin>
}
 800ea50:	bf00      	nop
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	40011000 	.word	0x40011000

0800ea5c <__errno>:
 800ea5c:	4b01      	ldr	r3, [pc, #4]	; (800ea64 <__errno+0x8>)
 800ea5e:	6818      	ldr	r0, [r3, #0]
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20000140 	.word	0x20000140

0800ea68 <__libc_init_array>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	2600      	movs	r6, #0
 800ea6c:	4d0c      	ldr	r5, [pc, #48]	; (800eaa0 <__libc_init_array+0x38>)
 800ea6e:	4c0d      	ldr	r4, [pc, #52]	; (800eaa4 <__libc_init_array+0x3c>)
 800ea70:	1b64      	subs	r4, r4, r5
 800ea72:	10a4      	asrs	r4, r4, #2
 800ea74:	42a6      	cmp	r6, r4
 800ea76:	d109      	bne.n	800ea8c <__libc_init_array+0x24>
 800ea78:	f001 fc2c 	bl	80102d4 <_init>
 800ea7c:	2600      	movs	r6, #0
 800ea7e:	4d0a      	ldr	r5, [pc, #40]	; (800eaa8 <__libc_init_array+0x40>)
 800ea80:	4c0a      	ldr	r4, [pc, #40]	; (800eaac <__libc_init_array+0x44>)
 800ea82:	1b64      	subs	r4, r4, r5
 800ea84:	10a4      	asrs	r4, r4, #2
 800ea86:	42a6      	cmp	r6, r4
 800ea88:	d105      	bne.n	800ea96 <__libc_init_array+0x2e>
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea90:	4798      	blx	r3
 800ea92:	3601      	adds	r6, #1
 800ea94:	e7ee      	b.n	800ea74 <__libc_init_array+0xc>
 800ea96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea9a:	4798      	blx	r3
 800ea9c:	3601      	adds	r6, #1
 800ea9e:	e7f2      	b.n	800ea86 <__libc_init_array+0x1e>
 800eaa0:	0802f518 	.word	0x0802f518
 800eaa4:	0802f518 	.word	0x0802f518
 800eaa8:	0802f518 	.word	0x0802f518
 800eaac:	0802f51c 	.word	0x0802f51c

0800eab0 <malloc>:
 800eab0:	4b02      	ldr	r3, [pc, #8]	; (800eabc <malloc+0xc>)
 800eab2:	4601      	mov	r1, r0
 800eab4:	6818      	ldr	r0, [r3, #0]
 800eab6:	f000 b86d 	b.w	800eb94 <_malloc_r>
 800eaba:	bf00      	nop
 800eabc:	20000140 	.word	0x20000140

0800eac0 <free>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <free+0xc>)
 800eac2:	4601      	mov	r1, r0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f000 b819 	b.w	800eafc <_free_r>
 800eaca:	bf00      	nop
 800eacc:	20000140 	.word	0x20000140

0800ead0 <memcpy>:
 800ead0:	440a      	add	r2, r1
 800ead2:	4291      	cmp	r1, r2
 800ead4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ead8:	d100      	bne.n	800eadc <memcpy+0xc>
 800eada:	4770      	bx	lr
 800eadc:	b510      	push	{r4, lr}
 800eade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eae2:	4291      	cmp	r1, r2
 800eae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eae8:	d1f9      	bne.n	800eade <memcpy+0xe>
 800eaea:	bd10      	pop	{r4, pc}

0800eaec <memset>:
 800eaec:	4603      	mov	r3, r0
 800eaee:	4402      	add	r2, r0
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d100      	bne.n	800eaf6 <memset+0xa>
 800eaf4:	4770      	bx	lr
 800eaf6:	f803 1b01 	strb.w	r1, [r3], #1
 800eafa:	e7f9      	b.n	800eaf0 <memset+0x4>

0800eafc <_free_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	4605      	mov	r5, r0
 800eb00:	2900      	cmp	r1, #0
 800eb02:	d043      	beq.n	800eb8c <_free_r+0x90>
 800eb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb08:	1f0c      	subs	r4, r1, #4
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bfb8      	it	lt
 800eb0e:	18e4      	addlt	r4, r4, r3
 800eb10:	f000 f8ca 	bl	800eca8 <__malloc_lock>
 800eb14:	4a1e      	ldr	r2, [pc, #120]	; (800eb90 <_free_r+0x94>)
 800eb16:	6813      	ldr	r3, [r2, #0]
 800eb18:	4610      	mov	r0, r2
 800eb1a:	b933      	cbnz	r3, 800eb2a <_free_r+0x2e>
 800eb1c:	6063      	str	r3, [r4, #4]
 800eb1e:	6014      	str	r4, [r2, #0]
 800eb20:	4628      	mov	r0, r5
 800eb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb26:	f000 b8c5 	b.w	800ecb4 <__malloc_unlock>
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	d90a      	bls.n	800eb44 <_free_r+0x48>
 800eb2e:	6821      	ldr	r1, [r4, #0]
 800eb30:	1862      	adds	r2, r4, r1
 800eb32:	4293      	cmp	r3, r2
 800eb34:	bf01      	itttt	eq
 800eb36:	681a      	ldreq	r2, [r3, #0]
 800eb38:	685b      	ldreq	r3, [r3, #4]
 800eb3a:	1852      	addeq	r2, r2, r1
 800eb3c:	6022      	streq	r2, [r4, #0]
 800eb3e:	6063      	str	r3, [r4, #4]
 800eb40:	6004      	str	r4, [r0, #0]
 800eb42:	e7ed      	b.n	800eb20 <_free_r+0x24>
 800eb44:	461a      	mov	r2, r3
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	b10b      	cbz	r3, 800eb4e <_free_r+0x52>
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	d9fa      	bls.n	800eb44 <_free_r+0x48>
 800eb4e:	6811      	ldr	r1, [r2, #0]
 800eb50:	1850      	adds	r0, r2, r1
 800eb52:	42a0      	cmp	r0, r4
 800eb54:	d10b      	bne.n	800eb6e <_free_r+0x72>
 800eb56:	6820      	ldr	r0, [r4, #0]
 800eb58:	4401      	add	r1, r0
 800eb5a:	1850      	adds	r0, r2, r1
 800eb5c:	4283      	cmp	r3, r0
 800eb5e:	6011      	str	r1, [r2, #0]
 800eb60:	d1de      	bne.n	800eb20 <_free_r+0x24>
 800eb62:	6818      	ldr	r0, [r3, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	4401      	add	r1, r0
 800eb68:	6011      	str	r1, [r2, #0]
 800eb6a:	6053      	str	r3, [r2, #4]
 800eb6c:	e7d8      	b.n	800eb20 <_free_r+0x24>
 800eb6e:	d902      	bls.n	800eb76 <_free_r+0x7a>
 800eb70:	230c      	movs	r3, #12
 800eb72:	602b      	str	r3, [r5, #0]
 800eb74:	e7d4      	b.n	800eb20 <_free_r+0x24>
 800eb76:	6820      	ldr	r0, [r4, #0]
 800eb78:	1821      	adds	r1, r4, r0
 800eb7a:	428b      	cmp	r3, r1
 800eb7c:	bf01      	itttt	eq
 800eb7e:	6819      	ldreq	r1, [r3, #0]
 800eb80:	685b      	ldreq	r3, [r3, #4]
 800eb82:	1809      	addeq	r1, r1, r0
 800eb84:	6021      	streq	r1, [r4, #0]
 800eb86:	6063      	str	r3, [r4, #4]
 800eb88:	6054      	str	r4, [r2, #4]
 800eb8a:	e7c9      	b.n	800eb20 <_free_r+0x24>
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000a404 	.word	0x2000a404

0800eb94 <_malloc_r>:
 800eb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb96:	1ccd      	adds	r5, r1, #3
 800eb98:	f025 0503 	bic.w	r5, r5, #3
 800eb9c:	3508      	adds	r5, #8
 800eb9e:	2d0c      	cmp	r5, #12
 800eba0:	bf38      	it	cc
 800eba2:	250c      	movcc	r5, #12
 800eba4:	2d00      	cmp	r5, #0
 800eba6:	4606      	mov	r6, r0
 800eba8:	db01      	blt.n	800ebae <_malloc_r+0x1a>
 800ebaa:	42a9      	cmp	r1, r5
 800ebac:	d903      	bls.n	800ebb6 <_malloc_r+0x22>
 800ebae:	230c      	movs	r3, #12
 800ebb0:	6033      	str	r3, [r6, #0]
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb6:	f000 f877 	bl	800eca8 <__malloc_lock>
 800ebba:	4921      	ldr	r1, [pc, #132]	; (800ec40 <_malloc_r+0xac>)
 800ebbc:	680a      	ldr	r2, [r1, #0]
 800ebbe:	4614      	mov	r4, r2
 800ebc0:	b99c      	cbnz	r4, 800ebea <_malloc_r+0x56>
 800ebc2:	4f20      	ldr	r7, [pc, #128]	; (800ec44 <_malloc_r+0xb0>)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	b923      	cbnz	r3, 800ebd2 <_malloc_r+0x3e>
 800ebc8:	4621      	mov	r1, r4
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f000 f83c 	bl	800ec48 <_sbrk_r>
 800ebd0:	6038      	str	r0, [r7, #0]
 800ebd2:	4629      	mov	r1, r5
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	f000 f837 	bl	800ec48 <_sbrk_r>
 800ebda:	1c43      	adds	r3, r0, #1
 800ebdc:	d123      	bne.n	800ec26 <_malloc_r+0x92>
 800ebde:	230c      	movs	r3, #12
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	6033      	str	r3, [r6, #0]
 800ebe4:	f000 f866 	bl	800ecb4 <__malloc_unlock>
 800ebe8:	e7e3      	b.n	800ebb2 <_malloc_r+0x1e>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	1b5b      	subs	r3, r3, r5
 800ebee:	d417      	bmi.n	800ec20 <_malloc_r+0x8c>
 800ebf0:	2b0b      	cmp	r3, #11
 800ebf2:	d903      	bls.n	800ebfc <_malloc_r+0x68>
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	441c      	add	r4, r3
 800ebf8:	6025      	str	r5, [r4, #0]
 800ebfa:	e004      	b.n	800ec06 <_malloc_r+0x72>
 800ebfc:	6863      	ldr	r3, [r4, #4]
 800ebfe:	42a2      	cmp	r2, r4
 800ec00:	bf0c      	ite	eq
 800ec02:	600b      	streq	r3, [r1, #0]
 800ec04:	6053      	strne	r3, [r2, #4]
 800ec06:	4630      	mov	r0, r6
 800ec08:	f000 f854 	bl	800ecb4 <__malloc_unlock>
 800ec0c:	f104 000b 	add.w	r0, r4, #11
 800ec10:	1d23      	adds	r3, r4, #4
 800ec12:	f020 0007 	bic.w	r0, r0, #7
 800ec16:	1ac2      	subs	r2, r0, r3
 800ec18:	d0cc      	beq.n	800ebb4 <_malloc_r+0x20>
 800ec1a:	1a1b      	subs	r3, r3, r0
 800ec1c:	50a3      	str	r3, [r4, r2]
 800ec1e:	e7c9      	b.n	800ebb4 <_malloc_r+0x20>
 800ec20:	4622      	mov	r2, r4
 800ec22:	6864      	ldr	r4, [r4, #4]
 800ec24:	e7cc      	b.n	800ebc0 <_malloc_r+0x2c>
 800ec26:	1cc4      	adds	r4, r0, #3
 800ec28:	f024 0403 	bic.w	r4, r4, #3
 800ec2c:	42a0      	cmp	r0, r4
 800ec2e:	d0e3      	beq.n	800ebf8 <_malloc_r+0x64>
 800ec30:	1a21      	subs	r1, r4, r0
 800ec32:	4630      	mov	r0, r6
 800ec34:	f000 f808 	bl	800ec48 <_sbrk_r>
 800ec38:	3001      	adds	r0, #1
 800ec3a:	d1dd      	bne.n	800ebf8 <_malloc_r+0x64>
 800ec3c:	e7cf      	b.n	800ebde <_malloc_r+0x4a>
 800ec3e:	bf00      	nop
 800ec40:	2000a404 	.word	0x2000a404
 800ec44:	2000a408 	.word	0x2000a408

0800ec48 <_sbrk_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4d05      	ldr	r5, [pc, #20]	; (800ec64 <_sbrk_r+0x1c>)
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	f7f5 fb96 	bl	8004384 <_sbrk>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_sbrk_r+0x1a>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_sbrk_r+0x1a>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	2000ed90 	.word	0x2000ed90

0800ec68 <siprintf>:
 800ec68:	b40e      	push	{r1, r2, r3}
 800ec6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec6e:	b500      	push	{lr}
 800ec70:	b09c      	sub	sp, #112	; 0x70
 800ec72:	ab1d      	add	r3, sp, #116	; 0x74
 800ec74:	9002      	str	r0, [sp, #8]
 800ec76:	9006      	str	r0, [sp, #24]
 800ec78:	9107      	str	r1, [sp, #28]
 800ec7a:	9104      	str	r1, [sp, #16]
 800ec7c:	4808      	ldr	r0, [pc, #32]	; (800eca0 <siprintf+0x38>)
 800ec7e:	4909      	ldr	r1, [pc, #36]	; (800eca4 <siprintf+0x3c>)
 800ec80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec84:	9105      	str	r1, [sp, #20]
 800ec86:	6800      	ldr	r0, [r0, #0]
 800ec88:	a902      	add	r1, sp, #8
 800ec8a:	9301      	str	r3, [sp, #4]
 800ec8c:	f000 f874 	bl	800ed78 <_svfiprintf_r>
 800ec90:	2200      	movs	r2, #0
 800ec92:	9b02      	ldr	r3, [sp, #8]
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	b01c      	add	sp, #112	; 0x70
 800ec98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec9c:	b003      	add	sp, #12
 800ec9e:	4770      	bx	lr
 800eca0:	20000140 	.word	0x20000140
 800eca4:	ffff0208 	.word	0xffff0208

0800eca8 <__malloc_lock>:
 800eca8:	4801      	ldr	r0, [pc, #4]	; (800ecb0 <__malloc_lock+0x8>)
 800ecaa:	f000 bafb 	b.w	800f2a4 <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	2000ed98 	.word	0x2000ed98

0800ecb4 <__malloc_unlock>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	; (800ecbc <__malloc_unlock+0x8>)
 800ecb6:	f000 baf6 	b.w	800f2a6 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	2000ed98 	.word	0x2000ed98

0800ecc0 <__ssputs_r>:
 800ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	688e      	ldr	r6, [r1, #8]
 800ecc6:	4682      	mov	sl, r0
 800ecc8:	429e      	cmp	r6, r3
 800ecca:	460c      	mov	r4, r1
 800eccc:	4690      	mov	r8, r2
 800ecce:	461f      	mov	r7, r3
 800ecd0:	d838      	bhi.n	800ed44 <__ssputs_r+0x84>
 800ecd2:	898a      	ldrh	r2, [r1, #12]
 800ecd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecd8:	d032      	beq.n	800ed40 <__ssputs_r+0x80>
 800ecda:	6825      	ldr	r5, [r4, #0]
 800ecdc:	6909      	ldr	r1, [r1, #16]
 800ecde:	3301      	adds	r3, #1
 800ece0:	eba5 0901 	sub.w	r9, r5, r1
 800ece4:	6965      	ldr	r5, [r4, #20]
 800ece6:	444b      	add	r3, r9
 800ece8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ecf0:	106d      	asrs	r5, r5, #1
 800ecf2:	429d      	cmp	r5, r3
 800ecf4:	bf38      	it	cc
 800ecf6:	461d      	movcc	r5, r3
 800ecf8:	0553      	lsls	r3, r2, #21
 800ecfa:	d531      	bpl.n	800ed60 <__ssputs_r+0xa0>
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	f7ff ff49 	bl	800eb94 <_malloc_r>
 800ed02:	4606      	mov	r6, r0
 800ed04:	b950      	cbnz	r0, 800ed1c <__ssputs_r+0x5c>
 800ed06:	230c      	movs	r3, #12
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	f8ca 3000 	str.w	r3, [sl]
 800ed10:	89a3      	ldrh	r3, [r4, #12]
 800ed12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed16:	81a3      	strh	r3, [r4, #12]
 800ed18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed1c:	464a      	mov	r2, r9
 800ed1e:	6921      	ldr	r1, [r4, #16]
 800ed20:	f7ff fed6 	bl	800ead0 <memcpy>
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed2e:	81a3      	strh	r3, [r4, #12]
 800ed30:	6126      	str	r6, [r4, #16]
 800ed32:	444e      	add	r6, r9
 800ed34:	6026      	str	r6, [r4, #0]
 800ed36:	463e      	mov	r6, r7
 800ed38:	6165      	str	r5, [r4, #20]
 800ed3a:	eba5 0509 	sub.w	r5, r5, r9
 800ed3e:	60a5      	str	r5, [r4, #8]
 800ed40:	42be      	cmp	r6, r7
 800ed42:	d900      	bls.n	800ed46 <__ssputs_r+0x86>
 800ed44:	463e      	mov	r6, r7
 800ed46:	4632      	mov	r2, r6
 800ed48:	4641      	mov	r1, r8
 800ed4a:	6820      	ldr	r0, [r4, #0]
 800ed4c:	f000 faba 	bl	800f2c4 <memmove>
 800ed50:	68a3      	ldr	r3, [r4, #8]
 800ed52:	6822      	ldr	r2, [r4, #0]
 800ed54:	1b9b      	subs	r3, r3, r6
 800ed56:	4432      	add	r2, r6
 800ed58:	2000      	movs	r0, #0
 800ed5a:	60a3      	str	r3, [r4, #8]
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	e7db      	b.n	800ed18 <__ssputs_r+0x58>
 800ed60:	462a      	mov	r2, r5
 800ed62:	f000 fac9 	bl	800f2f8 <_realloc_r>
 800ed66:	4606      	mov	r6, r0
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d1e1      	bne.n	800ed30 <__ssputs_r+0x70>
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	6921      	ldr	r1, [r4, #16]
 800ed70:	f7ff fec4 	bl	800eafc <_free_r>
 800ed74:	e7c7      	b.n	800ed06 <__ssputs_r+0x46>
	...

0800ed78 <_svfiprintf_r>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	4698      	mov	r8, r3
 800ed7e:	898b      	ldrh	r3, [r1, #12]
 800ed80:	4607      	mov	r7, r0
 800ed82:	061b      	lsls	r3, r3, #24
 800ed84:	460d      	mov	r5, r1
 800ed86:	4614      	mov	r4, r2
 800ed88:	b09d      	sub	sp, #116	; 0x74
 800ed8a:	d50e      	bpl.n	800edaa <_svfiprintf_r+0x32>
 800ed8c:	690b      	ldr	r3, [r1, #16]
 800ed8e:	b963      	cbnz	r3, 800edaa <_svfiprintf_r+0x32>
 800ed90:	2140      	movs	r1, #64	; 0x40
 800ed92:	f7ff feff 	bl	800eb94 <_malloc_r>
 800ed96:	6028      	str	r0, [r5, #0]
 800ed98:	6128      	str	r0, [r5, #16]
 800ed9a:	b920      	cbnz	r0, 800eda6 <_svfiprintf_r+0x2e>
 800ed9c:	230c      	movs	r3, #12
 800ed9e:	603b      	str	r3, [r7, #0]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	e0d1      	b.n	800ef4a <_svfiprintf_r+0x1d2>
 800eda6:	2340      	movs	r3, #64	; 0x40
 800eda8:	616b      	str	r3, [r5, #20]
 800edaa:	2300      	movs	r3, #0
 800edac:	9309      	str	r3, [sp, #36]	; 0x24
 800edae:	2320      	movs	r3, #32
 800edb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edb4:	2330      	movs	r3, #48	; 0x30
 800edb6:	f04f 0901 	mov.w	r9, #1
 800edba:	f8cd 800c 	str.w	r8, [sp, #12]
 800edbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ef64 <_svfiprintf_r+0x1ec>
 800edc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edc6:	4623      	mov	r3, r4
 800edc8:	469a      	mov	sl, r3
 800edca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edce:	b10a      	cbz	r2, 800edd4 <_svfiprintf_r+0x5c>
 800edd0:	2a25      	cmp	r2, #37	; 0x25
 800edd2:	d1f9      	bne.n	800edc8 <_svfiprintf_r+0x50>
 800edd4:	ebba 0b04 	subs.w	fp, sl, r4
 800edd8:	d00b      	beq.n	800edf2 <_svfiprintf_r+0x7a>
 800edda:	465b      	mov	r3, fp
 800eddc:	4622      	mov	r2, r4
 800edde:	4629      	mov	r1, r5
 800ede0:	4638      	mov	r0, r7
 800ede2:	f7ff ff6d 	bl	800ecc0 <__ssputs_r>
 800ede6:	3001      	adds	r0, #1
 800ede8:	f000 80aa 	beq.w	800ef40 <_svfiprintf_r+0x1c8>
 800edec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edee:	445a      	add	r2, fp
 800edf0:	9209      	str	r2, [sp, #36]	; 0x24
 800edf2:	f89a 3000 	ldrb.w	r3, [sl]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 80a2 	beq.w	800ef40 <_svfiprintf_r+0x1c8>
 800edfc:	2300      	movs	r3, #0
 800edfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ee02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee06:	f10a 0a01 	add.w	sl, sl, #1
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	9307      	str	r3, [sp, #28]
 800ee0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee12:	931a      	str	r3, [sp, #104]	; 0x68
 800ee14:	4654      	mov	r4, sl
 800ee16:	2205      	movs	r2, #5
 800ee18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1c:	4851      	ldr	r0, [pc, #324]	; (800ef64 <_svfiprintf_r+0x1ec>)
 800ee1e:	f000 fa43 	bl	800f2a8 <memchr>
 800ee22:	9a04      	ldr	r2, [sp, #16]
 800ee24:	b9d8      	cbnz	r0, 800ee5e <_svfiprintf_r+0xe6>
 800ee26:	06d0      	lsls	r0, r2, #27
 800ee28:	bf44      	itt	mi
 800ee2a:	2320      	movmi	r3, #32
 800ee2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee30:	0711      	lsls	r1, r2, #28
 800ee32:	bf44      	itt	mi
 800ee34:	232b      	movmi	r3, #43	; 0x2b
 800ee36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee40:	d015      	beq.n	800ee6e <_svfiprintf_r+0xf6>
 800ee42:	4654      	mov	r4, sl
 800ee44:	2000      	movs	r0, #0
 800ee46:	f04f 0c0a 	mov.w	ip, #10
 800ee4a:	9a07      	ldr	r2, [sp, #28]
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee52:	3b30      	subs	r3, #48	; 0x30
 800ee54:	2b09      	cmp	r3, #9
 800ee56:	d94e      	bls.n	800eef6 <_svfiprintf_r+0x17e>
 800ee58:	b1b0      	cbz	r0, 800ee88 <_svfiprintf_r+0x110>
 800ee5a:	9207      	str	r2, [sp, #28]
 800ee5c:	e014      	b.n	800ee88 <_svfiprintf_r+0x110>
 800ee5e:	eba0 0308 	sub.w	r3, r0, r8
 800ee62:	fa09 f303 	lsl.w	r3, r9, r3
 800ee66:	4313      	orrs	r3, r2
 800ee68:	46a2      	mov	sl, r4
 800ee6a:	9304      	str	r3, [sp, #16]
 800ee6c:	e7d2      	b.n	800ee14 <_svfiprintf_r+0x9c>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	1d19      	adds	r1, r3, #4
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	9103      	str	r1, [sp, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	bfbb      	ittet	lt
 800ee7a:	425b      	neglt	r3, r3
 800ee7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ee80:	9307      	strge	r3, [sp, #28]
 800ee82:	9307      	strlt	r3, [sp, #28]
 800ee84:	bfb8      	it	lt
 800ee86:	9204      	strlt	r2, [sp, #16]
 800ee88:	7823      	ldrb	r3, [r4, #0]
 800ee8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee8c:	d10c      	bne.n	800eea8 <_svfiprintf_r+0x130>
 800ee8e:	7863      	ldrb	r3, [r4, #1]
 800ee90:	2b2a      	cmp	r3, #42	; 0x2a
 800ee92:	d135      	bne.n	800ef00 <_svfiprintf_r+0x188>
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	3402      	adds	r4, #2
 800ee98:	1d1a      	adds	r2, r3, #4
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	9203      	str	r2, [sp, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfb8      	it	lt
 800eea2:	f04f 33ff 	movlt.w	r3, #4294967295
 800eea6:	9305      	str	r3, [sp, #20]
 800eea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef74 <_svfiprintf_r+0x1fc>
 800eeac:	2203      	movs	r2, #3
 800eeae:	4650      	mov	r0, sl
 800eeb0:	7821      	ldrb	r1, [r4, #0]
 800eeb2:	f000 f9f9 	bl	800f2a8 <memchr>
 800eeb6:	b140      	cbz	r0, 800eeca <_svfiprintf_r+0x152>
 800eeb8:	2340      	movs	r3, #64	; 0x40
 800eeba:	eba0 000a 	sub.w	r0, r0, sl
 800eebe:	fa03 f000 	lsl.w	r0, r3, r0
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	3401      	adds	r4, #1
 800eec6:	4303      	orrs	r3, r0
 800eec8:	9304      	str	r3, [sp, #16]
 800eeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eece:	2206      	movs	r2, #6
 800eed0:	4825      	ldr	r0, [pc, #148]	; (800ef68 <_svfiprintf_r+0x1f0>)
 800eed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eed6:	f000 f9e7 	bl	800f2a8 <memchr>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d038      	beq.n	800ef50 <_svfiprintf_r+0x1d8>
 800eede:	4b23      	ldr	r3, [pc, #140]	; (800ef6c <_svfiprintf_r+0x1f4>)
 800eee0:	bb1b      	cbnz	r3, 800ef2a <_svfiprintf_r+0x1b2>
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	3307      	adds	r3, #7
 800eee6:	f023 0307 	bic.w	r3, r3, #7
 800eeea:	3308      	adds	r3, #8
 800eeec:	9303      	str	r3, [sp, #12]
 800eeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef0:	4433      	add	r3, r6
 800eef2:	9309      	str	r3, [sp, #36]	; 0x24
 800eef4:	e767      	b.n	800edc6 <_svfiprintf_r+0x4e>
 800eef6:	460c      	mov	r4, r1
 800eef8:	2001      	movs	r0, #1
 800eefa:	fb0c 3202 	mla	r2, ip, r2, r3
 800eefe:	e7a5      	b.n	800ee4c <_svfiprintf_r+0xd4>
 800ef00:	2300      	movs	r3, #0
 800ef02:	f04f 0c0a 	mov.w	ip, #10
 800ef06:	4619      	mov	r1, r3
 800ef08:	3401      	adds	r4, #1
 800ef0a:	9305      	str	r3, [sp, #20]
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef12:	3a30      	subs	r2, #48	; 0x30
 800ef14:	2a09      	cmp	r2, #9
 800ef16:	d903      	bls.n	800ef20 <_svfiprintf_r+0x1a8>
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d0c5      	beq.n	800eea8 <_svfiprintf_r+0x130>
 800ef1c:	9105      	str	r1, [sp, #20]
 800ef1e:	e7c3      	b.n	800eea8 <_svfiprintf_r+0x130>
 800ef20:	4604      	mov	r4, r0
 800ef22:	2301      	movs	r3, #1
 800ef24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef28:	e7f0      	b.n	800ef0c <_svfiprintf_r+0x194>
 800ef2a:	ab03      	add	r3, sp, #12
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4638      	mov	r0, r7
 800ef32:	4b0f      	ldr	r3, [pc, #60]	; (800ef70 <_svfiprintf_r+0x1f8>)
 800ef34:	a904      	add	r1, sp, #16
 800ef36:	f3af 8000 	nop.w
 800ef3a:	1c42      	adds	r2, r0, #1
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	d1d6      	bne.n	800eeee <_svfiprintf_r+0x176>
 800ef40:	89ab      	ldrh	r3, [r5, #12]
 800ef42:	065b      	lsls	r3, r3, #25
 800ef44:	f53f af2c 	bmi.w	800eda0 <_svfiprintf_r+0x28>
 800ef48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef4a:	b01d      	add	sp, #116	; 0x74
 800ef4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef50:	ab03      	add	r3, sp, #12
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	462a      	mov	r2, r5
 800ef56:	4638      	mov	r0, r7
 800ef58:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <_svfiprintf_r+0x1f8>)
 800ef5a:	a904      	add	r1, sp, #16
 800ef5c:	f000 f87c 	bl	800f058 <_printf_i>
 800ef60:	e7eb      	b.n	800ef3a <_svfiprintf_r+0x1c2>
 800ef62:	bf00      	nop
 800ef64:	0802f498 	.word	0x0802f498
 800ef68:	0802f4a2 	.word	0x0802f4a2
 800ef6c:	00000000 	.word	0x00000000
 800ef70:	0800ecc1 	.word	0x0800ecc1
 800ef74:	0802f49e 	.word	0x0802f49e

0800ef78 <_printf_common>:
 800ef78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef7c:	4616      	mov	r6, r2
 800ef7e:	4699      	mov	r9, r3
 800ef80:	688a      	ldr	r2, [r1, #8]
 800ef82:	690b      	ldr	r3, [r1, #16]
 800ef84:	4607      	mov	r7, r0
 800ef86:	4293      	cmp	r3, r2
 800ef88:	bfb8      	it	lt
 800ef8a:	4613      	movlt	r3, r2
 800ef8c:	6033      	str	r3, [r6, #0]
 800ef8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef92:	460c      	mov	r4, r1
 800ef94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef98:	b10a      	cbz	r2, 800ef9e <_printf_common+0x26>
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	6033      	str	r3, [r6, #0]
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	0699      	lsls	r1, r3, #26
 800efa2:	bf42      	ittt	mi
 800efa4:	6833      	ldrmi	r3, [r6, #0]
 800efa6:	3302      	addmi	r3, #2
 800efa8:	6033      	strmi	r3, [r6, #0]
 800efaa:	6825      	ldr	r5, [r4, #0]
 800efac:	f015 0506 	ands.w	r5, r5, #6
 800efb0:	d106      	bne.n	800efc0 <_printf_common+0x48>
 800efb2:	f104 0a19 	add.w	sl, r4, #25
 800efb6:	68e3      	ldr	r3, [r4, #12]
 800efb8:	6832      	ldr	r2, [r6, #0]
 800efba:	1a9b      	subs	r3, r3, r2
 800efbc:	42ab      	cmp	r3, r5
 800efbe:	dc28      	bgt.n	800f012 <_printf_common+0x9a>
 800efc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efc4:	1e13      	subs	r3, r2, #0
 800efc6:	6822      	ldr	r2, [r4, #0]
 800efc8:	bf18      	it	ne
 800efca:	2301      	movne	r3, #1
 800efcc:	0692      	lsls	r2, r2, #26
 800efce:	d42d      	bmi.n	800f02c <_printf_common+0xb4>
 800efd0:	4649      	mov	r1, r9
 800efd2:	4638      	mov	r0, r7
 800efd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efd8:	47c0      	blx	r8
 800efda:	3001      	adds	r0, #1
 800efdc:	d020      	beq.n	800f020 <_printf_common+0xa8>
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	68e5      	ldr	r5, [r4, #12]
 800efe2:	f003 0306 	and.w	r3, r3, #6
 800efe6:	2b04      	cmp	r3, #4
 800efe8:	bf18      	it	ne
 800efea:	2500      	movne	r5, #0
 800efec:	6832      	ldr	r2, [r6, #0]
 800efee:	f04f 0600 	mov.w	r6, #0
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	bf08      	it	eq
 800eff6:	1aad      	subeq	r5, r5, r2
 800eff8:	6922      	ldr	r2, [r4, #16]
 800effa:	bf08      	it	eq
 800effc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f000:	4293      	cmp	r3, r2
 800f002:	bfc4      	itt	gt
 800f004:	1a9b      	subgt	r3, r3, r2
 800f006:	18ed      	addgt	r5, r5, r3
 800f008:	341a      	adds	r4, #26
 800f00a:	42b5      	cmp	r5, r6
 800f00c:	d11a      	bne.n	800f044 <_printf_common+0xcc>
 800f00e:	2000      	movs	r0, #0
 800f010:	e008      	b.n	800f024 <_printf_common+0xac>
 800f012:	2301      	movs	r3, #1
 800f014:	4652      	mov	r2, sl
 800f016:	4649      	mov	r1, r9
 800f018:	4638      	mov	r0, r7
 800f01a:	47c0      	blx	r8
 800f01c:	3001      	adds	r0, #1
 800f01e:	d103      	bne.n	800f028 <_printf_common+0xb0>
 800f020:	f04f 30ff 	mov.w	r0, #4294967295
 800f024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f028:	3501      	adds	r5, #1
 800f02a:	e7c4      	b.n	800efb6 <_printf_common+0x3e>
 800f02c:	2030      	movs	r0, #48	; 0x30
 800f02e:	18e1      	adds	r1, r4, r3
 800f030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f034:	1c5a      	adds	r2, r3, #1
 800f036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f03a:	4422      	add	r2, r4
 800f03c:	3302      	adds	r3, #2
 800f03e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f042:	e7c5      	b.n	800efd0 <_printf_common+0x58>
 800f044:	2301      	movs	r3, #1
 800f046:	4622      	mov	r2, r4
 800f048:	4649      	mov	r1, r9
 800f04a:	4638      	mov	r0, r7
 800f04c:	47c0      	blx	r8
 800f04e:	3001      	adds	r0, #1
 800f050:	d0e6      	beq.n	800f020 <_printf_common+0xa8>
 800f052:	3601      	adds	r6, #1
 800f054:	e7d9      	b.n	800f00a <_printf_common+0x92>
	...

0800f058 <_printf_i>:
 800f058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f05c:	460c      	mov	r4, r1
 800f05e:	7e27      	ldrb	r7, [r4, #24]
 800f060:	4691      	mov	r9, r2
 800f062:	2f78      	cmp	r7, #120	; 0x78
 800f064:	4680      	mov	r8, r0
 800f066:	469a      	mov	sl, r3
 800f068:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f06a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f06e:	d807      	bhi.n	800f080 <_printf_i+0x28>
 800f070:	2f62      	cmp	r7, #98	; 0x62
 800f072:	d80a      	bhi.n	800f08a <_printf_i+0x32>
 800f074:	2f00      	cmp	r7, #0
 800f076:	f000 80d9 	beq.w	800f22c <_printf_i+0x1d4>
 800f07a:	2f58      	cmp	r7, #88	; 0x58
 800f07c:	f000 80a4 	beq.w	800f1c8 <_printf_i+0x170>
 800f080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f088:	e03a      	b.n	800f100 <_printf_i+0xa8>
 800f08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f08e:	2b15      	cmp	r3, #21
 800f090:	d8f6      	bhi.n	800f080 <_printf_i+0x28>
 800f092:	a001      	add	r0, pc, #4	; (adr r0, 800f098 <_printf_i+0x40>)
 800f094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f098:	0800f0f1 	.word	0x0800f0f1
 800f09c:	0800f105 	.word	0x0800f105
 800f0a0:	0800f081 	.word	0x0800f081
 800f0a4:	0800f081 	.word	0x0800f081
 800f0a8:	0800f081 	.word	0x0800f081
 800f0ac:	0800f081 	.word	0x0800f081
 800f0b0:	0800f105 	.word	0x0800f105
 800f0b4:	0800f081 	.word	0x0800f081
 800f0b8:	0800f081 	.word	0x0800f081
 800f0bc:	0800f081 	.word	0x0800f081
 800f0c0:	0800f081 	.word	0x0800f081
 800f0c4:	0800f213 	.word	0x0800f213
 800f0c8:	0800f135 	.word	0x0800f135
 800f0cc:	0800f1f5 	.word	0x0800f1f5
 800f0d0:	0800f081 	.word	0x0800f081
 800f0d4:	0800f081 	.word	0x0800f081
 800f0d8:	0800f235 	.word	0x0800f235
 800f0dc:	0800f081 	.word	0x0800f081
 800f0e0:	0800f135 	.word	0x0800f135
 800f0e4:	0800f081 	.word	0x0800f081
 800f0e8:	0800f081 	.word	0x0800f081
 800f0ec:	0800f1fd 	.word	0x0800f1fd
 800f0f0:	680b      	ldr	r3, [r1, #0]
 800f0f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0f6:	1d1a      	adds	r2, r3, #4
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	600a      	str	r2, [r1, #0]
 800f0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f100:	2301      	movs	r3, #1
 800f102:	e0a4      	b.n	800f24e <_printf_i+0x1f6>
 800f104:	6825      	ldr	r5, [r4, #0]
 800f106:	6808      	ldr	r0, [r1, #0]
 800f108:	062e      	lsls	r6, r5, #24
 800f10a:	f100 0304 	add.w	r3, r0, #4
 800f10e:	d50a      	bpl.n	800f126 <_printf_i+0xce>
 800f110:	6805      	ldr	r5, [r0, #0]
 800f112:	600b      	str	r3, [r1, #0]
 800f114:	2d00      	cmp	r5, #0
 800f116:	da03      	bge.n	800f120 <_printf_i+0xc8>
 800f118:	232d      	movs	r3, #45	; 0x2d
 800f11a:	426d      	negs	r5, r5
 800f11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f120:	230a      	movs	r3, #10
 800f122:	485e      	ldr	r0, [pc, #376]	; (800f29c <_printf_i+0x244>)
 800f124:	e019      	b.n	800f15a <_printf_i+0x102>
 800f126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f12a:	6805      	ldr	r5, [r0, #0]
 800f12c:	600b      	str	r3, [r1, #0]
 800f12e:	bf18      	it	ne
 800f130:	b22d      	sxthne	r5, r5
 800f132:	e7ef      	b.n	800f114 <_printf_i+0xbc>
 800f134:	680b      	ldr	r3, [r1, #0]
 800f136:	6825      	ldr	r5, [r4, #0]
 800f138:	1d18      	adds	r0, r3, #4
 800f13a:	6008      	str	r0, [r1, #0]
 800f13c:	0628      	lsls	r0, r5, #24
 800f13e:	d501      	bpl.n	800f144 <_printf_i+0xec>
 800f140:	681d      	ldr	r5, [r3, #0]
 800f142:	e002      	b.n	800f14a <_printf_i+0xf2>
 800f144:	0669      	lsls	r1, r5, #25
 800f146:	d5fb      	bpl.n	800f140 <_printf_i+0xe8>
 800f148:	881d      	ldrh	r5, [r3, #0]
 800f14a:	2f6f      	cmp	r7, #111	; 0x6f
 800f14c:	bf0c      	ite	eq
 800f14e:	2308      	moveq	r3, #8
 800f150:	230a      	movne	r3, #10
 800f152:	4852      	ldr	r0, [pc, #328]	; (800f29c <_printf_i+0x244>)
 800f154:	2100      	movs	r1, #0
 800f156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f15a:	6866      	ldr	r6, [r4, #4]
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	bfa8      	it	ge
 800f160:	6821      	ldrge	r1, [r4, #0]
 800f162:	60a6      	str	r6, [r4, #8]
 800f164:	bfa4      	itt	ge
 800f166:	f021 0104 	bicge.w	r1, r1, #4
 800f16a:	6021      	strge	r1, [r4, #0]
 800f16c:	b90d      	cbnz	r5, 800f172 <_printf_i+0x11a>
 800f16e:	2e00      	cmp	r6, #0
 800f170:	d04d      	beq.n	800f20e <_printf_i+0x1b6>
 800f172:	4616      	mov	r6, r2
 800f174:	fbb5 f1f3 	udiv	r1, r5, r3
 800f178:	fb03 5711 	mls	r7, r3, r1, r5
 800f17c:	5dc7      	ldrb	r7, [r0, r7]
 800f17e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f182:	462f      	mov	r7, r5
 800f184:	42bb      	cmp	r3, r7
 800f186:	460d      	mov	r5, r1
 800f188:	d9f4      	bls.n	800f174 <_printf_i+0x11c>
 800f18a:	2b08      	cmp	r3, #8
 800f18c:	d10b      	bne.n	800f1a6 <_printf_i+0x14e>
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	07df      	lsls	r7, r3, #31
 800f192:	d508      	bpl.n	800f1a6 <_printf_i+0x14e>
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	6861      	ldr	r1, [r4, #4]
 800f198:	4299      	cmp	r1, r3
 800f19a:	bfde      	ittt	le
 800f19c:	2330      	movle	r3, #48	; 0x30
 800f19e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1a6:	1b92      	subs	r2, r2, r6
 800f1a8:	6122      	str	r2, [r4, #16]
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4640      	mov	r0, r8
 800f1b0:	f8cd a000 	str.w	sl, [sp]
 800f1b4:	aa03      	add	r2, sp, #12
 800f1b6:	f7ff fedf 	bl	800ef78 <_printf_common>
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	d14c      	bne.n	800f258 <_printf_i+0x200>
 800f1be:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c2:	b004      	add	sp, #16
 800f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c8:	4834      	ldr	r0, [pc, #208]	; (800f29c <_printf_i+0x244>)
 800f1ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1ce:	680e      	ldr	r6, [r1, #0]
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1d6:	061f      	lsls	r7, r3, #24
 800f1d8:	600e      	str	r6, [r1, #0]
 800f1da:	d514      	bpl.n	800f206 <_printf_i+0x1ae>
 800f1dc:	07d9      	lsls	r1, r3, #31
 800f1de:	bf44      	itt	mi
 800f1e0:	f043 0320 	orrmi.w	r3, r3, #32
 800f1e4:	6023      	strmi	r3, [r4, #0]
 800f1e6:	b91d      	cbnz	r5, 800f1f0 <_printf_i+0x198>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	f023 0320 	bic.w	r3, r3, #32
 800f1ee:	6023      	str	r3, [r4, #0]
 800f1f0:	2310      	movs	r3, #16
 800f1f2:	e7af      	b.n	800f154 <_printf_i+0xfc>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	f043 0320 	orr.w	r3, r3, #32
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	2378      	movs	r3, #120	; 0x78
 800f1fe:	4828      	ldr	r0, [pc, #160]	; (800f2a0 <_printf_i+0x248>)
 800f200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f204:	e7e3      	b.n	800f1ce <_printf_i+0x176>
 800f206:	065e      	lsls	r6, r3, #25
 800f208:	bf48      	it	mi
 800f20a:	b2ad      	uxthmi	r5, r5
 800f20c:	e7e6      	b.n	800f1dc <_printf_i+0x184>
 800f20e:	4616      	mov	r6, r2
 800f210:	e7bb      	b.n	800f18a <_printf_i+0x132>
 800f212:	680b      	ldr	r3, [r1, #0]
 800f214:	6826      	ldr	r6, [r4, #0]
 800f216:	1d1d      	adds	r5, r3, #4
 800f218:	6960      	ldr	r0, [r4, #20]
 800f21a:	600d      	str	r5, [r1, #0]
 800f21c:	0635      	lsls	r5, r6, #24
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	d501      	bpl.n	800f226 <_printf_i+0x1ce>
 800f222:	6018      	str	r0, [r3, #0]
 800f224:	e002      	b.n	800f22c <_printf_i+0x1d4>
 800f226:	0671      	lsls	r1, r6, #25
 800f228:	d5fb      	bpl.n	800f222 <_printf_i+0x1ca>
 800f22a:	8018      	strh	r0, [r3, #0]
 800f22c:	2300      	movs	r3, #0
 800f22e:	4616      	mov	r6, r2
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	e7ba      	b.n	800f1aa <_printf_i+0x152>
 800f234:	680b      	ldr	r3, [r1, #0]
 800f236:	1d1a      	adds	r2, r3, #4
 800f238:	600a      	str	r2, [r1, #0]
 800f23a:	681e      	ldr	r6, [r3, #0]
 800f23c:	2100      	movs	r1, #0
 800f23e:	4630      	mov	r0, r6
 800f240:	6862      	ldr	r2, [r4, #4]
 800f242:	f000 f831 	bl	800f2a8 <memchr>
 800f246:	b108      	cbz	r0, 800f24c <_printf_i+0x1f4>
 800f248:	1b80      	subs	r0, r0, r6
 800f24a:	6060      	str	r0, [r4, #4]
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	2300      	movs	r3, #0
 800f252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f256:	e7a8      	b.n	800f1aa <_printf_i+0x152>
 800f258:	4632      	mov	r2, r6
 800f25a:	4649      	mov	r1, r9
 800f25c:	4640      	mov	r0, r8
 800f25e:	6923      	ldr	r3, [r4, #16]
 800f260:	47d0      	blx	sl
 800f262:	3001      	adds	r0, #1
 800f264:	d0ab      	beq.n	800f1be <_printf_i+0x166>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	079b      	lsls	r3, r3, #30
 800f26a:	d413      	bmi.n	800f294 <_printf_i+0x23c>
 800f26c:	68e0      	ldr	r0, [r4, #12]
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	4298      	cmp	r0, r3
 800f272:	bfb8      	it	lt
 800f274:	4618      	movlt	r0, r3
 800f276:	e7a4      	b.n	800f1c2 <_printf_i+0x16a>
 800f278:	2301      	movs	r3, #1
 800f27a:	4632      	mov	r2, r6
 800f27c:	4649      	mov	r1, r9
 800f27e:	4640      	mov	r0, r8
 800f280:	47d0      	blx	sl
 800f282:	3001      	adds	r0, #1
 800f284:	d09b      	beq.n	800f1be <_printf_i+0x166>
 800f286:	3501      	adds	r5, #1
 800f288:	68e3      	ldr	r3, [r4, #12]
 800f28a:	9903      	ldr	r1, [sp, #12]
 800f28c:	1a5b      	subs	r3, r3, r1
 800f28e:	42ab      	cmp	r3, r5
 800f290:	dcf2      	bgt.n	800f278 <_printf_i+0x220>
 800f292:	e7eb      	b.n	800f26c <_printf_i+0x214>
 800f294:	2500      	movs	r5, #0
 800f296:	f104 0619 	add.w	r6, r4, #25
 800f29a:	e7f5      	b.n	800f288 <_printf_i+0x230>
 800f29c:	0802f4a9 	.word	0x0802f4a9
 800f2a0:	0802f4ba 	.word	0x0802f4ba

0800f2a4 <__retarget_lock_acquire_recursive>:
 800f2a4:	4770      	bx	lr

0800f2a6 <__retarget_lock_release_recursive>:
 800f2a6:	4770      	bx	lr

0800f2a8 <memchr>:
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	b510      	push	{r4, lr}
 800f2ac:	b2c9      	uxtb	r1, r1
 800f2ae:	4402      	add	r2, r0
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	d101      	bne.n	800f2ba <memchr+0x12>
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	e003      	b.n	800f2c2 <memchr+0x1a>
 800f2ba:	7804      	ldrb	r4, [r0, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	428c      	cmp	r4, r1
 800f2c0:	d1f6      	bne.n	800f2b0 <memchr+0x8>
 800f2c2:	bd10      	pop	{r4, pc}

0800f2c4 <memmove>:
 800f2c4:	4288      	cmp	r0, r1
 800f2c6:	b510      	push	{r4, lr}
 800f2c8:	eb01 0402 	add.w	r4, r1, r2
 800f2cc:	d902      	bls.n	800f2d4 <memmove+0x10>
 800f2ce:	4284      	cmp	r4, r0
 800f2d0:	4623      	mov	r3, r4
 800f2d2:	d807      	bhi.n	800f2e4 <memmove+0x20>
 800f2d4:	1e43      	subs	r3, r0, #1
 800f2d6:	42a1      	cmp	r1, r4
 800f2d8:	d008      	beq.n	800f2ec <memmove+0x28>
 800f2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2e2:	e7f8      	b.n	800f2d6 <memmove+0x12>
 800f2e4:	4601      	mov	r1, r0
 800f2e6:	4402      	add	r2, r0
 800f2e8:	428a      	cmp	r2, r1
 800f2ea:	d100      	bne.n	800f2ee <memmove+0x2a>
 800f2ec:	bd10      	pop	{r4, pc}
 800f2ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2f6:	e7f7      	b.n	800f2e8 <memmove+0x24>

0800f2f8 <_realloc_r>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	4607      	mov	r7, r0
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	460e      	mov	r6, r1
 800f300:	b921      	cbnz	r1, 800f30c <_realloc_r+0x14>
 800f302:	4611      	mov	r1, r2
 800f304:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f308:	f7ff bc44 	b.w	800eb94 <_malloc_r>
 800f30c:	b922      	cbnz	r2, 800f318 <_realloc_r+0x20>
 800f30e:	f7ff fbf5 	bl	800eafc <_free_r>
 800f312:	4625      	mov	r5, r4
 800f314:	4628      	mov	r0, r5
 800f316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f318:	f000 f814 	bl	800f344 <_malloc_usable_size_r>
 800f31c:	42a0      	cmp	r0, r4
 800f31e:	d20f      	bcs.n	800f340 <_realloc_r+0x48>
 800f320:	4621      	mov	r1, r4
 800f322:	4638      	mov	r0, r7
 800f324:	f7ff fc36 	bl	800eb94 <_malloc_r>
 800f328:	4605      	mov	r5, r0
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d0f2      	beq.n	800f314 <_realloc_r+0x1c>
 800f32e:	4631      	mov	r1, r6
 800f330:	4622      	mov	r2, r4
 800f332:	f7ff fbcd 	bl	800ead0 <memcpy>
 800f336:	4631      	mov	r1, r6
 800f338:	4638      	mov	r0, r7
 800f33a:	f7ff fbdf 	bl	800eafc <_free_r>
 800f33e:	e7e9      	b.n	800f314 <_realloc_r+0x1c>
 800f340:	4635      	mov	r5, r6
 800f342:	e7e7      	b.n	800f314 <_realloc_r+0x1c>

0800f344 <_malloc_usable_size_r>:
 800f344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f348:	1f18      	subs	r0, r3, #4
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	bfbc      	itt	lt
 800f34e:	580b      	ldrlt	r3, [r1, r0]
 800f350:	18c0      	addlt	r0, r0, r3
 800f352:	4770      	bx	lr

0800f354 <trunc>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f35a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800f35e:	2a13      	cmp	r2, #19
 800f360:	4603      	mov	r3, r0
 800f362:	460c      	mov	r4, r1
 800f364:	dc10      	bgt.n	800f388 <trunc+0x34>
 800f366:	2a00      	cmp	r2, #0
 800f368:	bfb3      	iteet	lt
 800f36a:	2000      	movlt	r0, #0
 800f36c:	2000      	movge	r0, #0
 800f36e:	4b10      	ldrge	r3, [pc, #64]	; (800f3b0 <trunc+0x5c>)
 800f370:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800f374:	bfa4      	itt	ge
 800f376:	fa43 f202 	asrge.w	r2, r3, r2
 800f37a:	ea24 0102 	bicge.w	r1, r4, r2
 800f37e:	4603      	mov	r3, r0
 800f380:	460c      	mov	r4, r1
 800f382:	4618      	mov	r0, r3
 800f384:	4621      	mov	r1, r4
 800f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f388:	2a33      	cmp	r2, #51	; 0x33
 800f38a:	dd07      	ble.n	800f39c <trunc+0x48>
 800f38c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f390:	d1f7      	bne.n	800f382 <trunc+0x2e>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	f7f0 ff55 	bl	8000244 <__adddf3>
 800f39a:	e7f0      	b.n	800f37e <trunc+0x2a>
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a0:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800f3a4:	fa22 f505 	lsr.w	r5, r2, r5
 800f3a8:	ea20 0005 	bic.w	r0, r0, r5
 800f3ac:	e7e7      	b.n	800f37e <trunc+0x2a>
 800f3ae:	bf00      	nop
 800f3b0:	000fffff 	.word	0x000fffff

0800f3b4 <pow>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	461f      	mov	r7, r3
 800f3ba:	4680      	mov	r8, r0
 800f3bc:	4689      	mov	r9, r1
 800f3be:	4616      	mov	r6, r2
 800f3c0:	f000 f8a6 	bl	800f510 <__ieee754_pow>
 800f3c4:	4b4d      	ldr	r3, [pc, #308]	; (800f4fc <pow+0x148>)
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	f993 3000 	ldrsb.w	r3, [r3]
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	d015      	beq.n	800f3fe <pow+0x4a>
 800f3d2:	4632      	mov	r2, r6
 800f3d4:	463b      	mov	r3, r7
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	4639      	mov	r1, r7
 800f3da:	f7f1 fb83 	bl	8000ae4 <__aeabi_dcmpun>
 800f3de:	b970      	cbnz	r0, 800f3fe <pow+0x4a>
 800f3e0:	4642      	mov	r2, r8
 800f3e2:	464b      	mov	r3, r9
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	f7f1 fb7c 	bl	8000ae4 <__aeabi_dcmpun>
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	b148      	cbz	r0, 800f406 <pow+0x52>
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	4639      	mov	r1, r7
 800f3f6:	f7f1 fb43 	bl	8000a80 <__aeabi_dcmpeq>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d17b      	bne.n	800f4f6 <pow+0x142>
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f406:	4640      	mov	r0, r8
 800f408:	4649      	mov	r1, r9
 800f40a:	f7f1 fb39 	bl	8000a80 <__aeabi_dcmpeq>
 800f40e:	b1e0      	cbz	r0, 800f44a <pow+0x96>
 800f410:	2200      	movs	r2, #0
 800f412:	2300      	movs	r3, #0
 800f414:	4630      	mov	r0, r6
 800f416:	4639      	mov	r1, r7
 800f418:	f7f1 fb32 	bl	8000a80 <__aeabi_dcmpeq>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d16a      	bne.n	800f4f6 <pow+0x142>
 800f420:	4630      	mov	r0, r6
 800f422:	4639      	mov	r1, r7
 800f424:	f000 fe39 	bl	801009a <finite>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d0e8      	beq.n	800f3fe <pow+0x4a>
 800f42c:	2200      	movs	r2, #0
 800f42e:	2300      	movs	r3, #0
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f1 fb2e 	bl	8000a94 <__aeabi_dcmplt>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d0e0      	beq.n	800f3fe <pow+0x4a>
 800f43c:	f7ff fb0e 	bl	800ea5c <__errno>
 800f440:	2321      	movs	r3, #33	; 0x21
 800f442:	2400      	movs	r4, #0
 800f444:	6003      	str	r3, [r0, #0]
 800f446:	4d2e      	ldr	r5, [pc, #184]	; (800f500 <pow+0x14c>)
 800f448:	e7d9      	b.n	800f3fe <pow+0x4a>
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	f000 fe24 	bl	801009a <finite>
 800f452:	bba8      	cbnz	r0, 800f4c0 <pow+0x10c>
 800f454:	4640      	mov	r0, r8
 800f456:	4649      	mov	r1, r9
 800f458:	f000 fe1f 	bl	801009a <finite>
 800f45c:	b380      	cbz	r0, 800f4c0 <pow+0x10c>
 800f45e:	4630      	mov	r0, r6
 800f460:	4639      	mov	r1, r7
 800f462:	f000 fe1a 	bl	801009a <finite>
 800f466:	b358      	cbz	r0, 800f4c0 <pow+0x10c>
 800f468:	4622      	mov	r2, r4
 800f46a:	462b      	mov	r3, r5
 800f46c:	4620      	mov	r0, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f1 fb38 	bl	8000ae4 <__aeabi_dcmpun>
 800f474:	b160      	cbz	r0, 800f490 <pow+0xdc>
 800f476:	f7ff faf1 	bl	800ea5c <__errno>
 800f47a:	2321      	movs	r3, #33	; 0x21
 800f47c:	2200      	movs	r2, #0
 800f47e:	6003      	str	r3, [r0, #0]
 800f480:	2300      	movs	r3, #0
 800f482:	4610      	mov	r0, r2
 800f484:	4619      	mov	r1, r3
 800f486:	f7f1 f9bd 	bl	8000804 <__aeabi_ddiv>
 800f48a:	4604      	mov	r4, r0
 800f48c:	460d      	mov	r5, r1
 800f48e:	e7b6      	b.n	800f3fe <pow+0x4a>
 800f490:	f7ff fae4 	bl	800ea5c <__errno>
 800f494:	2322      	movs	r3, #34	; 0x22
 800f496:	2200      	movs	r2, #0
 800f498:	6003      	str	r3, [r0, #0]
 800f49a:	4649      	mov	r1, r9
 800f49c:	2300      	movs	r3, #0
 800f49e:	4640      	mov	r0, r8
 800f4a0:	f7f1 faf8 	bl	8000a94 <__aeabi_dcmplt>
 800f4a4:	2400      	movs	r4, #0
 800f4a6:	b148      	cbz	r0, 800f4bc <pow+0x108>
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	f000 fe02 	bl	80100b4 <rint>
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	463b      	mov	r3, r7
 800f4b4:	f7f1 fae4 	bl	8000a80 <__aeabi_dcmpeq>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d0c4      	beq.n	800f446 <pow+0x92>
 800f4bc:	4d11      	ldr	r5, [pc, #68]	; (800f504 <pow+0x150>)
 800f4be:	e79e      	b.n	800f3fe <pow+0x4a>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f7f1 fada 	bl	8000a80 <__aeabi_dcmpeq>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d096      	beq.n	800f3fe <pow+0x4a>
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	f000 fde1 	bl	801009a <finite>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d090      	beq.n	800f3fe <pow+0x4a>
 800f4dc:	4630      	mov	r0, r6
 800f4de:	4639      	mov	r1, r7
 800f4e0:	f000 fddb 	bl	801009a <finite>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d08a      	beq.n	800f3fe <pow+0x4a>
 800f4e8:	f7ff fab8 	bl	800ea5c <__errno>
 800f4ec:	2322      	movs	r3, #34	; 0x22
 800f4ee:	2400      	movs	r4, #0
 800f4f0:	2500      	movs	r5, #0
 800f4f2:	6003      	str	r3, [r0, #0]
 800f4f4:	e783      	b.n	800f3fe <pow+0x4a>
 800f4f6:	2400      	movs	r4, #0
 800f4f8:	4d03      	ldr	r5, [pc, #12]	; (800f508 <pow+0x154>)
 800f4fa:	e780      	b.n	800f3fe <pow+0x4a>
 800f4fc:	200001a4 	.word	0x200001a4
 800f500:	fff00000 	.word	0xfff00000
 800f504:	7ff00000 	.word	0x7ff00000
 800f508:	3ff00000 	.word	0x3ff00000
 800f50c:	00000000 	.word	0x00000000

0800f510 <__ieee754_pow>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	b093      	sub	sp, #76	; 0x4c
 800f516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f51a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800f51e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f522:	ea55 0302 	orrs.w	r3, r5, r2
 800f526:	4607      	mov	r7, r0
 800f528:	4688      	mov	r8, r1
 800f52a:	f000 84bf 	beq.w	800feac <__ieee754_pow+0x99c>
 800f52e:	4b7e      	ldr	r3, [pc, #504]	; (800f728 <__ieee754_pow+0x218>)
 800f530:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800f534:	429c      	cmp	r4, r3
 800f536:	4689      	mov	r9, r1
 800f538:	4682      	mov	sl, r0
 800f53a:	dc09      	bgt.n	800f550 <__ieee754_pow+0x40>
 800f53c:	d103      	bne.n	800f546 <__ieee754_pow+0x36>
 800f53e:	b978      	cbnz	r0, 800f560 <__ieee754_pow+0x50>
 800f540:	42a5      	cmp	r5, r4
 800f542:	dd02      	ble.n	800f54a <__ieee754_pow+0x3a>
 800f544:	e00c      	b.n	800f560 <__ieee754_pow+0x50>
 800f546:	429d      	cmp	r5, r3
 800f548:	dc02      	bgt.n	800f550 <__ieee754_pow+0x40>
 800f54a:	429d      	cmp	r5, r3
 800f54c:	d10e      	bne.n	800f56c <__ieee754_pow+0x5c>
 800f54e:	b16a      	cbz	r2, 800f56c <__ieee754_pow+0x5c>
 800f550:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f554:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f558:	ea54 030a 	orrs.w	r3, r4, sl
 800f55c:	f000 84a6 	beq.w	800feac <__ieee754_pow+0x99c>
 800f560:	4872      	ldr	r0, [pc, #456]	; (800f72c <__ieee754_pow+0x21c>)
 800f562:	b013      	add	sp, #76	; 0x4c
 800f564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	f000 bd9e 	b.w	80100a8 <nan>
 800f56c:	f1b9 0f00 	cmp.w	r9, #0
 800f570:	da39      	bge.n	800f5e6 <__ieee754_pow+0xd6>
 800f572:	4b6f      	ldr	r3, [pc, #444]	; (800f730 <__ieee754_pow+0x220>)
 800f574:	429d      	cmp	r5, r3
 800f576:	dc54      	bgt.n	800f622 <__ieee754_pow+0x112>
 800f578:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f57c:	429d      	cmp	r5, r3
 800f57e:	f340 84a6 	ble.w	800fece <__ieee754_pow+0x9be>
 800f582:	152b      	asrs	r3, r5, #20
 800f584:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f588:	2b14      	cmp	r3, #20
 800f58a:	dd0f      	ble.n	800f5ac <__ieee754_pow+0x9c>
 800f58c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f590:	fa22 f103 	lsr.w	r1, r2, r3
 800f594:	fa01 f303 	lsl.w	r3, r1, r3
 800f598:	4293      	cmp	r3, r2
 800f59a:	f040 8498 	bne.w	800fece <__ieee754_pow+0x9be>
 800f59e:	f001 0101 	and.w	r1, r1, #1
 800f5a2:	f1c1 0302 	rsb	r3, r1, #2
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	b182      	cbz	r2, 800f5cc <__ieee754_pow+0xbc>
 800f5aa:	e05e      	b.n	800f66a <__ieee754_pow+0x15a>
 800f5ac:	2a00      	cmp	r2, #0
 800f5ae:	d15a      	bne.n	800f666 <__ieee754_pow+0x156>
 800f5b0:	f1c3 0314 	rsb	r3, r3, #20
 800f5b4:	fa45 f103 	asr.w	r1, r5, r3
 800f5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5bc:	42ab      	cmp	r3, r5
 800f5be:	f040 8483 	bne.w	800fec8 <__ieee754_pow+0x9b8>
 800f5c2:	f001 0101 	and.w	r1, r1, #1
 800f5c6:	f1c1 0302 	rsb	r3, r1, #2
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	4b59      	ldr	r3, [pc, #356]	; (800f734 <__ieee754_pow+0x224>)
 800f5ce:	429d      	cmp	r5, r3
 800f5d0:	d130      	bne.n	800f634 <__ieee754_pow+0x124>
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	f280 8474 	bge.w	800fec0 <__ieee754_pow+0x9b0>
 800f5d8:	463a      	mov	r2, r7
 800f5da:	4643      	mov	r3, r8
 800f5dc:	2000      	movs	r0, #0
 800f5de:	4955      	ldr	r1, [pc, #340]	; (800f734 <__ieee754_pow+0x224>)
 800f5e0:	f7f1 f910 	bl	8000804 <__aeabi_ddiv>
 800f5e4:	e02f      	b.n	800f646 <__ieee754_pow+0x136>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	d13d      	bne.n	800f66a <__ieee754_pow+0x15a>
 800f5ee:	4b4e      	ldr	r3, [pc, #312]	; (800f728 <__ieee754_pow+0x218>)
 800f5f0:	429d      	cmp	r5, r3
 800f5f2:	d1eb      	bne.n	800f5cc <__ieee754_pow+0xbc>
 800f5f4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f5f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f5fc:	ea53 030a 	orrs.w	r3, r3, sl
 800f600:	f000 8454 	beq.w	800feac <__ieee754_pow+0x99c>
 800f604:	4b4c      	ldr	r3, [pc, #304]	; (800f738 <__ieee754_pow+0x228>)
 800f606:	429c      	cmp	r4, r3
 800f608:	dd0d      	ble.n	800f626 <__ieee754_pow+0x116>
 800f60a:	2e00      	cmp	r6, #0
 800f60c:	f280 8454 	bge.w	800feb8 <__ieee754_pow+0x9a8>
 800f610:	f04f 0b00 	mov.w	fp, #0
 800f614:	f04f 0c00 	mov.w	ip, #0
 800f618:	4658      	mov	r0, fp
 800f61a:	4661      	mov	r1, ip
 800f61c:	b013      	add	sp, #76	; 0x4c
 800f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f622:	2302      	movs	r3, #2
 800f624:	e7e0      	b.n	800f5e8 <__ieee754_pow+0xd8>
 800f626:	2e00      	cmp	r6, #0
 800f628:	daf2      	bge.n	800f610 <__ieee754_pow+0x100>
 800f62a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800f62e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800f632:	e7f1      	b.n	800f618 <__ieee754_pow+0x108>
 800f634:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800f638:	d108      	bne.n	800f64c <__ieee754_pow+0x13c>
 800f63a:	463a      	mov	r2, r7
 800f63c:	4643      	mov	r3, r8
 800f63e:	4638      	mov	r0, r7
 800f640:	4641      	mov	r1, r8
 800f642:	f7f0 ffb5 	bl	80005b0 <__aeabi_dmul>
 800f646:	4683      	mov	fp, r0
 800f648:	468c      	mov	ip, r1
 800f64a:	e7e5      	b.n	800f618 <__ieee754_pow+0x108>
 800f64c:	4b3b      	ldr	r3, [pc, #236]	; (800f73c <__ieee754_pow+0x22c>)
 800f64e:	429e      	cmp	r6, r3
 800f650:	d10b      	bne.n	800f66a <__ieee754_pow+0x15a>
 800f652:	f1b9 0f00 	cmp.w	r9, #0
 800f656:	db08      	blt.n	800f66a <__ieee754_pow+0x15a>
 800f658:	4638      	mov	r0, r7
 800f65a:	4641      	mov	r1, r8
 800f65c:	b013      	add	sp, #76	; 0x4c
 800f65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f662:	f000 bc6b 	b.w	800ff3c <__ieee754_sqrt>
 800f666:	2300      	movs	r3, #0
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	4638      	mov	r0, r7
 800f66c:	4641      	mov	r1, r8
 800f66e:	f000 fd11 	bl	8010094 <fabs>
 800f672:	4683      	mov	fp, r0
 800f674:	468c      	mov	ip, r1
 800f676:	f1ba 0f00 	cmp.w	sl, #0
 800f67a:	d129      	bne.n	800f6d0 <__ieee754_pow+0x1c0>
 800f67c:	b124      	cbz	r4, 800f688 <__ieee754_pow+0x178>
 800f67e:	4b2d      	ldr	r3, [pc, #180]	; (800f734 <__ieee754_pow+0x224>)
 800f680:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800f684:	429a      	cmp	r2, r3
 800f686:	d123      	bne.n	800f6d0 <__ieee754_pow+0x1c0>
 800f688:	2e00      	cmp	r6, #0
 800f68a:	da07      	bge.n	800f69c <__ieee754_pow+0x18c>
 800f68c:	465a      	mov	r2, fp
 800f68e:	4663      	mov	r3, ip
 800f690:	2000      	movs	r0, #0
 800f692:	4928      	ldr	r1, [pc, #160]	; (800f734 <__ieee754_pow+0x224>)
 800f694:	f7f1 f8b6 	bl	8000804 <__aeabi_ddiv>
 800f698:	4683      	mov	fp, r0
 800f69a:	468c      	mov	ip, r1
 800f69c:	f1b9 0f00 	cmp.w	r9, #0
 800f6a0:	daba      	bge.n	800f618 <__ieee754_pow+0x108>
 800f6a2:	9b00      	ldr	r3, [sp, #0]
 800f6a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f6a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f6ac:	4323      	orrs	r3, r4
 800f6ae:	d108      	bne.n	800f6c2 <__ieee754_pow+0x1b2>
 800f6b0:	465a      	mov	r2, fp
 800f6b2:	4663      	mov	r3, ip
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	4661      	mov	r1, ip
 800f6b8:	f7f0 fdc2 	bl	8000240 <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	e78e      	b.n	800f5e0 <__ieee754_pow+0xd0>
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d1a7      	bne.n	800f618 <__ieee754_pow+0x108>
 800f6c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800f6cc:	469c      	mov	ip, r3
 800f6ce:	e7a3      	b.n	800f618 <__ieee754_pow+0x108>
 800f6d0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6da:	9b00      	ldr	r3, [sp, #0]
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	d104      	bne.n	800f6ea <__ieee754_pow+0x1da>
 800f6e0:	463a      	mov	r2, r7
 800f6e2:	4643      	mov	r3, r8
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	4641      	mov	r1, r8
 800f6e8:	e7e6      	b.n	800f6b8 <__ieee754_pow+0x1a8>
 800f6ea:	4b15      	ldr	r3, [pc, #84]	; (800f740 <__ieee754_pow+0x230>)
 800f6ec:	429d      	cmp	r5, r3
 800f6ee:	f340 80f9 	ble.w	800f8e4 <__ieee754_pow+0x3d4>
 800f6f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f6f6:	429d      	cmp	r5, r3
 800f6f8:	4b0f      	ldr	r3, [pc, #60]	; (800f738 <__ieee754_pow+0x228>)
 800f6fa:	dd09      	ble.n	800f710 <__ieee754_pow+0x200>
 800f6fc:	429c      	cmp	r4, r3
 800f6fe:	dc0c      	bgt.n	800f71a <__ieee754_pow+0x20a>
 800f700:	2e00      	cmp	r6, #0
 800f702:	da85      	bge.n	800f610 <__ieee754_pow+0x100>
 800f704:	a306      	add	r3, pc, #24	; (adr r3, 800f720 <__ieee754_pow+0x210>)
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	4610      	mov	r0, r2
 800f70c:	4619      	mov	r1, r3
 800f70e:	e798      	b.n	800f642 <__ieee754_pow+0x132>
 800f710:	429c      	cmp	r4, r3
 800f712:	dbf5      	blt.n	800f700 <__ieee754_pow+0x1f0>
 800f714:	4b07      	ldr	r3, [pc, #28]	; (800f734 <__ieee754_pow+0x224>)
 800f716:	429c      	cmp	r4, r3
 800f718:	dd14      	ble.n	800f744 <__ieee754_pow+0x234>
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	dcf2      	bgt.n	800f704 <__ieee754_pow+0x1f4>
 800f71e:	e777      	b.n	800f610 <__ieee754_pow+0x100>
 800f720:	8800759c 	.word	0x8800759c
 800f724:	7e37e43c 	.word	0x7e37e43c
 800f728:	7ff00000 	.word	0x7ff00000
 800f72c:	0802f49d 	.word	0x0802f49d
 800f730:	433fffff 	.word	0x433fffff
 800f734:	3ff00000 	.word	0x3ff00000
 800f738:	3fefffff 	.word	0x3fefffff
 800f73c:	3fe00000 	.word	0x3fe00000
 800f740:	41e00000 	.word	0x41e00000
 800f744:	4661      	mov	r1, ip
 800f746:	2200      	movs	r2, #0
 800f748:	4658      	mov	r0, fp
 800f74a:	4b61      	ldr	r3, [pc, #388]	; (800f8d0 <__ieee754_pow+0x3c0>)
 800f74c:	f7f0 fd78 	bl	8000240 <__aeabi_dsub>
 800f750:	a355      	add	r3, pc, #340	; (adr r3, 800f8a8 <__ieee754_pow+0x398>)
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	4604      	mov	r4, r0
 800f758:	460d      	mov	r5, r1
 800f75a:	f7f0 ff29 	bl	80005b0 <__aeabi_dmul>
 800f75e:	a354      	add	r3, pc, #336	; (adr r3, 800f8b0 <__ieee754_pow+0x3a0>)
 800f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f764:	4606      	mov	r6, r0
 800f766:	460f      	mov	r7, r1
 800f768:	4620      	mov	r0, r4
 800f76a:	4629      	mov	r1, r5
 800f76c:	f7f0 ff20 	bl	80005b0 <__aeabi_dmul>
 800f770:	2200      	movs	r2, #0
 800f772:	4682      	mov	sl, r0
 800f774:	468b      	mov	fp, r1
 800f776:	4620      	mov	r0, r4
 800f778:	4629      	mov	r1, r5
 800f77a:	4b56      	ldr	r3, [pc, #344]	; (800f8d4 <__ieee754_pow+0x3c4>)
 800f77c:	f7f0 ff18 	bl	80005b0 <__aeabi_dmul>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	a14c      	add	r1, pc, #304	; (adr r1, 800f8b8 <__ieee754_pow+0x3a8>)
 800f786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f78a:	f7f0 fd59 	bl	8000240 <__aeabi_dsub>
 800f78e:	4622      	mov	r2, r4
 800f790:	462b      	mov	r3, r5
 800f792:	f7f0 ff0d 	bl	80005b0 <__aeabi_dmul>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	2000      	movs	r0, #0
 800f79c:	494e      	ldr	r1, [pc, #312]	; (800f8d8 <__ieee754_pow+0x3c8>)
 800f79e:	f7f0 fd4f 	bl	8000240 <__aeabi_dsub>
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	462b      	mov	r3, r5
 800f7a6:	4680      	mov	r8, r0
 800f7a8:	4689      	mov	r9, r1
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f0 feff 	bl	80005b0 <__aeabi_dmul>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f0 fef9 	bl	80005b0 <__aeabi_dmul>
 800f7be:	a340      	add	r3, pc, #256	; (adr r3, 800f8c0 <__ieee754_pow+0x3b0>)
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	f7f0 fef4 	bl	80005b0 <__aeabi_dmul>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	4650      	mov	r0, sl
 800f7ce:	4659      	mov	r1, fp
 800f7d0:	f7f0 fd36 	bl	8000240 <__aeabi_dsub>
 800f7d4:	f04f 0a00 	mov.w	sl, #0
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	4604      	mov	r4, r0
 800f7de:	460d      	mov	r5, r1
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	4639      	mov	r1, r7
 800f7e4:	f7f0 fd2e 	bl	8000244 <__adddf3>
 800f7e8:	4632      	mov	r2, r6
 800f7ea:	463b      	mov	r3, r7
 800f7ec:	4650      	mov	r0, sl
 800f7ee:	468b      	mov	fp, r1
 800f7f0:	f7f0 fd26 	bl	8000240 <__aeabi_dsub>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	f7f0 fd20 	bl	8000240 <__aeabi_dsub>
 800f800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f804:	9b00      	ldr	r3, [sp, #0]
 800f806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f808:	3b01      	subs	r3, #1
 800f80a:	4313      	orrs	r3, r2
 800f80c:	f04f 0600 	mov.w	r6, #0
 800f810:	f04f 0200 	mov.w	r2, #0
 800f814:	bf0c      	ite	eq
 800f816:	4b31      	ldreq	r3, [pc, #196]	; (800f8dc <__ieee754_pow+0x3cc>)
 800f818:	4b2d      	ldrne	r3, [pc, #180]	; (800f8d0 <__ieee754_pow+0x3c0>)
 800f81a:	4604      	mov	r4, r0
 800f81c:	460d      	mov	r5, r1
 800f81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f822:	e9cd 2300 	strd	r2, r3, [sp]
 800f826:	4632      	mov	r2, r6
 800f828:	463b      	mov	r3, r7
 800f82a:	f7f0 fd09 	bl	8000240 <__aeabi_dsub>
 800f82e:	4652      	mov	r2, sl
 800f830:	465b      	mov	r3, fp
 800f832:	f7f0 febd 	bl	80005b0 <__aeabi_dmul>
 800f836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f83a:	4680      	mov	r8, r0
 800f83c:	4689      	mov	r9, r1
 800f83e:	4620      	mov	r0, r4
 800f840:	4629      	mov	r1, r5
 800f842:	f7f0 feb5 	bl	80005b0 <__aeabi_dmul>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4640      	mov	r0, r8
 800f84c:	4649      	mov	r1, r9
 800f84e:	f7f0 fcf9 	bl	8000244 <__adddf3>
 800f852:	4632      	mov	r2, r6
 800f854:	463b      	mov	r3, r7
 800f856:	4680      	mov	r8, r0
 800f858:	4689      	mov	r9, r1
 800f85a:	4650      	mov	r0, sl
 800f85c:	4659      	mov	r1, fp
 800f85e:	f7f0 fea7 	bl	80005b0 <__aeabi_dmul>
 800f862:	4604      	mov	r4, r0
 800f864:	460d      	mov	r5, r1
 800f866:	460b      	mov	r3, r1
 800f868:	4602      	mov	r2, r0
 800f86a:	4649      	mov	r1, r9
 800f86c:	4640      	mov	r0, r8
 800f86e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f872:	f7f0 fce7 	bl	8000244 <__adddf3>
 800f876:	4b1a      	ldr	r3, [pc, #104]	; (800f8e0 <__ieee754_pow+0x3d0>)
 800f878:	4682      	mov	sl, r0
 800f87a:	4299      	cmp	r1, r3
 800f87c:	460f      	mov	r7, r1
 800f87e:	460e      	mov	r6, r1
 800f880:	f340 82ed 	ble.w	800fe5e <__ieee754_pow+0x94e>
 800f884:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f888:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f88c:	4303      	orrs	r3, r0
 800f88e:	f000 81e7 	beq.w	800fc60 <__ieee754_pow+0x750>
 800f892:	a30d      	add	r3, pc, #52	; (adr r3, 800f8c8 <__ieee754_pow+0x3b8>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f89c:	f7f0 fe88 	bl	80005b0 <__aeabi_dmul>
 800f8a0:	a309      	add	r3, pc, #36	; (adr r3, 800f8c8 <__ieee754_pow+0x3b8>)
 800f8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a6:	e6cc      	b.n	800f642 <__ieee754_pow+0x132>
 800f8a8:	60000000 	.word	0x60000000
 800f8ac:	3ff71547 	.word	0x3ff71547
 800f8b0:	f85ddf44 	.word	0xf85ddf44
 800f8b4:	3e54ae0b 	.word	0x3e54ae0b
 800f8b8:	55555555 	.word	0x55555555
 800f8bc:	3fd55555 	.word	0x3fd55555
 800f8c0:	652b82fe 	.word	0x652b82fe
 800f8c4:	3ff71547 	.word	0x3ff71547
 800f8c8:	8800759c 	.word	0x8800759c
 800f8cc:	7e37e43c 	.word	0x7e37e43c
 800f8d0:	3ff00000 	.word	0x3ff00000
 800f8d4:	3fd00000 	.word	0x3fd00000
 800f8d8:	3fe00000 	.word	0x3fe00000
 800f8dc:	bff00000 	.word	0xbff00000
 800f8e0:	408fffff 	.word	0x408fffff
 800f8e4:	4bd4      	ldr	r3, [pc, #848]	; (800fc38 <__ieee754_pow+0x728>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	ea09 0303 	and.w	r3, r9, r3
 800f8ec:	b943      	cbnz	r3, 800f900 <__ieee754_pow+0x3f0>
 800f8ee:	4658      	mov	r0, fp
 800f8f0:	4661      	mov	r1, ip
 800f8f2:	4bd2      	ldr	r3, [pc, #840]	; (800fc3c <__ieee754_pow+0x72c>)
 800f8f4:	f7f0 fe5c 	bl	80005b0 <__aeabi_dmul>
 800f8f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f8fc:	4683      	mov	fp, r0
 800f8fe:	460c      	mov	r4, r1
 800f900:	1523      	asrs	r3, r4, #20
 800f902:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f906:	4413      	add	r3, r2
 800f908:	930b      	str	r3, [sp, #44]	; 0x2c
 800f90a:	4bcd      	ldr	r3, [pc, #820]	; (800fc40 <__ieee754_pow+0x730>)
 800f90c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f910:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f914:	429c      	cmp	r4, r3
 800f916:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f91a:	dd08      	ble.n	800f92e <__ieee754_pow+0x41e>
 800f91c:	4bc9      	ldr	r3, [pc, #804]	; (800fc44 <__ieee754_pow+0x734>)
 800f91e:	429c      	cmp	r4, r3
 800f920:	f340 819c 	ble.w	800fc5c <__ieee754_pow+0x74c>
 800f924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f926:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f92a:	3301      	adds	r3, #1
 800f92c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92e:	2600      	movs	r6, #0
 800f930:	00f3      	lsls	r3, r6, #3
 800f932:	930d      	str	r3, [sp, #52]	; 0x34
 800f934:	4bc4      	ldr	r3, [pc, #784]	; (800fc48 <__ieee754_pow+0x738>)
 800f936:	4658      	mov	r0, fp
 800f938:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f93c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f940:	4629      	mov	r1, r5
 800f942:	461a      	mov	r2, r3
 800f944:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800f948:	4623      	mov	r3, r4
 800f94a:	f7f0 fc79 	bl	8000240 <__aeabi_dsub>
 800f94e:	46da      	mov	sl, fp
 800f950:	462b      	mov	r3, r5
 800f952:	4652      	mov	r2, sl
 800f954:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f95c:	f7f0 fc72 	bl	8000244 <__adddf3>
 800f960:	4602      	mov	r2, r0
 800f962:	460b      	mov	r3, r1
 800f964:	2000      	movs	r0, #0
 800f966:	49b9      	ldr	r1, [pc, #740]	; (800fc4c <__ieee754_pow+0x73c>)
 800f968:	f7f0 ff4c 	bl	8000804 <__aeabi_ddiv>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f978:	f7f0 fe1a 	bl	80005b0 <__aeabi_dmul>
 800f97c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f980:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f984:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f988:	2300      	movs	r3, #0
 800f98a:	2200      	movs	r2, #0
 800f98c:	46ab      	mov	fp, r5
 800f98e:	106d      	asrs	r5, r5, #1
 800f990:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f994:	9304      	str	r3, [sp, #16]
 800f996:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f99a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f99e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	4614      	mov	r4, r2
 800f9a8:	461d      	mov	r5, r3
 800f9aa:	f7f0 fe01 	bl	80005b0 <__aeabi_dmul>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f9b6:	f7f0 fc43 	bl	8000240 <__aeabi_dsub>
 800f9ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f9be:	4606      	mov	r6, r0
 800f9c0:	460f      	mov	r7, r1
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	f7f0 fc3b 	bl	8000240 <__aeabi_dsub>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4650      	mov	r0, sl
 800f9d0:	4659      	mov	r1, fp
 800f9d2:	f7f0 fc35 	bl	8000240 <__aeabi_dsub>
 800f9d6:	4642      	mov	r2, r8
 800f9d8:	464b      	mov	r3, r9
 800f9da:	f7f0 fde9 	bl	80005b0 <__aeabi_dmul>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f0 fc2b 	bl	8000240 <__aeabi_dsub>
 800f9ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f9ee:	f7f0 fddf 	bl	80005b0 <__aeabi_dmul>
 800f9f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	f7f0 fdd7 	bl	80005b0 <__aeabi_dmul>
 800fa02:	a37b      	add	r3, pc, #492	; (adr r3, 800fbf0 <__ieee754_pow+0x6e0>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	4604      	mov	r4, r0
 800fa0a:	460d      	mov	r5, r1
 800fa0c:	f7f0 fdd0 	bl	80005b0 <__aeabi_dmul>
 800fa10:	a379      	add	r3, pc, #484	; (adr r3, 800fbf8 <__ieee754_pow+0x6e8>)
 800fa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa16:	f7f0 fc15 	bl	8000244 <__adddf3>
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	462b      	mov	r3, r5
 800fa1e:	f7f0 fdc7 	bl	80005b0 <__aeabi_dmul>
 800fa22:	a377      	add	r3, pc, #476	; (adr r3, 800fc00 <__ieee754_pow+0x6f0>)
 800fa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa28:	f7f0 fc0c 	bl	8000244 <__adddf3>
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	462b      	mov	r3, r5
 800fa30:	f7f0 fdbe 	bl	80005b0 <__aeabi_dmul>
 800fa34:	a374      	add	r3, pc, #464	; (adr r3, 800fc08 <__ieee754_pow+0x6f8>)
 800fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3a:	f7f0 fc03 	bl	8000244 <__adddf3>
 800fa3e:	4622      	mov	r2, r4
 800fa40:	462b      	mov	r3, r5
 800fa42:	f7f0 fdb5 	bl	80005b0 <__aeabi_dmul>
 800fa46:	a372      	add	r3, pc, #456	; (adr r3, 800fc10 <__ieee754_pow+0x700>)
 800fa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4c:	f7f0 fbfa 	bl	8000244 <__adddf3>
 800fa50:	4622      	mov	r2, r4
 800fa52:	462b      	mov	r3, r5
 800fa54:	f7f0 fdac 	bl	80005b0 <__aeabi_dmul>
 800fa58:	a36f      	add	r3, pc, #444	; (adr r3, 800fc18 <__ieee754_pow+0x708>)
 800fa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5e:	f7f0 fbf1 	bl	8000244 <__adddf3>
 800fa62:	4622      	mov	r2, r4
 800fa64:	4606      	mov	r6, r0
 800fa66:	460f      	mov	r7, r1
 800fa68:	462b      	mov	r3, r5
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	f7f0 fd9f 	bl	80005b0 <__aeabi_dmul>
 800fa72:	4602      	mov	r2, r0
 800fa74:	460b      	mov	r3, r1
 800fa76:	4630      	mov	r0, r6
 800fa78:	4639      	mov	r1, r7
 800fa7a:	f7f0 fd99 	bl	80005b0 <__aeabi_dmul>
 800fa7e:	4604      	mov	r4, r0
 800fa80:	460d      	mov	r5, r1
 800fa82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa86:	4642      	mov	r2, r8
 800fa88:	464b      	mov	r3, r9
 800fa8a:	f7f0 fbdb 	bl	8000244 <__adddf3>
 800fa8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fa92:	f7f0 fd8d 	bl	80005b0 <__aeabi_dmul>
 800fa96:	4622      	mov	r2, r4
 800fa98:	462b      	mov	r3, r5
 800fa9a:	f7f0 fbd3 	bl	8000244 <__adddf3>
 800fa9e:	4642      	mov	r2, r8
 800faa0:	4606      	mov	r6, r0
 800faa2:	460f      	mov	r7, r1
 800faa4:	464b      	mov	r3, r9
 800faa6:	4640      	mov	r0, r8
 800faa8:	4649      	mov	r1, r9
 800faaa:	f7f0 fd81 	bl	80005b0 <__aeabi_dmul>
 800faae:	2200      	movs	r2, #0
 800fab0:	4b67      	ldr	r3, [pc, #412]	; (800fc50 <__ieee754_pow+0x740>)
 800fab2:	4682      	mov	sl, r0
 800fab4:	468b      	mov	fp, r1
 800fab6:	f7f0 fbc5 	bl	8000244 <__adddf3>
 800faba:	4632      	mov	r2, r6
 800fabc:	463b      	mov	r3, r7
 800fabe:	f7f0 fbc1 	bl	8000244 <__adddf3>
 800fac2:	9c04      	ldr	r4, [sp, #16]
 800fac4:	460d      	mov	r5, r1
 800fac6:	4622      	mov	r2, r4
 800fac8:	460b      	mov	r3, r1
 800faca:	4640      	mov	r0, r8
 800facc:	4649      	mov	r1, r9
 800face:	f7f0 fd6f 	bl	80005b0 <__aeabi_dmul>
 800fad2:	2200      	movs	r2, #0
 800fad4:	4680      	mov	r8, r0
 800fad6:	4689      	mov	r9, r1
 800fad8:	4620      	mov	r0, r4
 800fada:	4629      	mov	r1, r5
 800fadc:	4b5c      	ldr	r3, [pc, #368]	; (800fc50 <__ieee754_pow+0x740>)
 800fade:	f7f0 fbaf 	bl	8000240 <__aeabi_dsub>
 800fae2:	4652      	mov	r2, sl
 800fae4:	465b      	mov	r3, fp
 800fae6:	f7f0 fbab 	bl	8000240 <__aeabi_dsub>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4630      	mov	r0, r6
 800faf0:	4639      	mov	r1, r7
 800faf2:	f7f0 fba5 	bl	8000240 <__aeabi_dsub>
 800faf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fafa:	f7f0 fd59 	bl	80005b0 <__aeabi_dmul>
 800fafe:	4622      	mov	r2, r4
 800fb00:	4606      	mov	r6, r0
 800fb02:	460f      	mov	r7, r1
 800fb04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb08:	462b      	mov	r3, r5
 800fb0a:	f7f0 fd51 	bl	80005b0 <__aeabi_dmul>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	460b      	mov	r3, r1
 800fb12:	4630      	mov	r0, r6
 800fb14:	4639      	mov	r1, r7
 800fb16:	f7f0 fb95 	bl	8000244 <__adddf3>
 800fb1a:	4606      	mov	r6, r0
 800fb1c:	460f      	mov	r7, r1
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4640      	mov	r0, r8
 800fb24:	4649      	mov	r1, r9
 800fb26:	f7f0 fb8d 	bl	8000244 <__adddf3>
 800fb2a:	a33d      	add	r3, pc, #244	; (adr r3, 800fc20 <__ieee754_pow+0x710>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	9c04      	ldr	r4, [sp, #16]
 800fb32:	460d      	mov	r5, r1
 800fb34:	4620      	mov	r0, r4
 800fb36:	f7f0 fd3b 	bl	80005b0 <__aeabi_dmul>
 800fb3a:	4642      	mov	r2, r8
 800fb3c:	464b      	mov	r3, r9
 800fb3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb42:	4620      	mov	r0, r4
 800fb44:	4629      	mov	r1, r5
 800fb46:	f7f0 fb7b 	bl	8000240 <__aeabi_dsub>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	4630      	mov	r0, r6
 800fb50:	4639      	mov	r1, r7
 800fb52:	f7f0 fb75 	bl	8000240 <__aeabi_dsub>
 800fb56:	a334      	add	r3, pc, #208	; (adr r3, 800fc28 <__ieee754_pow+0x718>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	f7f0 fd28 	bl	80005b0 <__aeabi_dmul>
 800fb60:	a333      	add	r3, pc, #204	; (adr r3, 800fc30 <__ieee754_pow+0x720>)
 800fb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb66:	4606      	mov	r6, r0
 800fb68:	460f      	mov	r7, r1
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	f7f0 fd1f 	bl	80005b0 <__aeabi_dmul>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	4630      	mov	r0, r6
 800fb78:	4639      	mov	r1, r7
 800fb7a:	f7f0 fb63 	bl	8000244 <__adddf3>
 800fb7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb80:	4b34      	ldr	r3, [pc, #208]	; (800fc54 <__ieee754_pow+0x744>)
 800fb82:	4413      	add	r3, r2
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f7f0 fb5c 	bl	8000244 <__adddf3>
 800fb8c:	4680      	mov	r8, r0
 800fb8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb90:	4689      	mov	r9, r1
 800fb92:	f7f0 fca3 	bl	80004dc <__aeabi_i2d>
 800fb96:	4604      	mov	r4, r0
 800fb98:	460d      	mov	r5, r1
 800fb9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb9c:	4b2e      	ldr	r3, [pc, #184]	; (800fc58 <__ieee754_pow+0x748>)
 800fb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fba2:	4413      	add	r3, r2
 800fba4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fba8:	4642      	mov	r2, r8
 800fbaa:	464b      	mov	r3, r9
 800fbac:	f7f0 fb4a 	bl	8000244 <__adddf3>
 800fbb0:	4632      	mov	r2, r6
 800fbb2:	463b      	mov	r3, r7
 800fbb4:	f7f0 fb46 	bl	8000244 <__adddf3>
 800fbb8:	4622      	mov	r2, r4
 800fbba:	462b      	mov	r3, r5
 800fbbc:	f7f0 fb42 	bl	8000244 <__adddf3>
 800fbc0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	4650      	mov	r0, sl
 800fbca:	468b      	mov	fp, r1
 800fbcc:	f7f0 fb38 	bl	8000240 <__aeabi_dsub>
 800fbd0:	4632      	mov	r2, r6
 800fbd2:	463b      	mov	r3, r7
 800fbd4:	f7f0 fb34 	bl	8000240 <__aeabi_dsub>
 800fbd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbdc:	f7f0 fb30 	bl	8000240 <__aeabi_dsub>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4640      	mov	r0, r8
 800fbe6:	4649      	mov	r1, r9
 800fbe8:	e608      	b.n	800f7fc <__ieee754_pow+0x2ec>
 800fbea:	bf00      	nop
 800fbec:	f3af 8000 	nop.w
 800fbf0:	4a454eef 	.word	0x4a454eef
 800fbf4:	3fca7e28 	.word	0x3fca7e28
 800fbf8:	93c9db65 	.word	0x93c9db65
 800fbfc:	3fcd864a 	.word	0x3fcd864a
 800fc00:	a91d4101 	.word	0xa91d4101
 800fc04:	3fd17460 	.word	0x3fd17460
 800fc08:	518f264d 	.word	0x518f264d
 800fc0c:	3fd55555 	.word	0x3fd55555
 800fc10:	db6fabff 	.word	0xdb6fabff
 800fc14:	3fdb6db6 	.word	0x3fdb6db6
 800fc18:	33333303 	.word	0x33333303
 800fc1c:	3fe33333 	.word	0x3fe33333
 800fc20:	e0000000 	.word	0xe0000000
 800fc24:	3feec709 	.word	0x3feec709
 800fc28:	dc3a03fd 	.word	0xdc3a03fd
 800fc2c:	3feec709 	.word	0x3feec709
 800fc30:	145b01f5 	.word	0x145b01f5
 800fc34:	be3e2fe0 	.word	0xbe3e2fe0
 800fc38:	7ff00000 	.word	0x7ff00000
 800fc3c:	43400000 	.word	0x43400000
 800fc40:	0003988e 	.word	0x0003988e
 800fc44:	000bb679 	.word	0x000bb679
 800fc48:	0802f4d0 	.word	0x0802f4d0
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	40080000 	.word	0x40080000
 800fc54:	0802f4f0 	.word	0x0802f4f0
 800fc58:	0802f4e0 	.word	0x0802f4e0
 800fc5c:	2601      	movs	r6, #1
 800fc5e:	e667      	b.n	800f930 <__ieee754_pow+0x420>
 800fc60:	a39d      	add	r3, pc, #628	; (adr r3, 800fed8 <__ieee754_pow+0x9c8>)
 800fc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 faeb 	bl	8000244 <__adddf3>
 800fc6e:	4622      	mov	r2, r4
 800fc70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc74:	462b      	mov	r3, r5
 800fc76:	4650      	mov	r0, sl
 800fc78:	4639      	mov	r1, r7
 800fc7a:	f7f0 fae1 	bl	8000240 <__aeabi_dsub>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc86:	f7f0 ff23 	bl	8000ad0 <__aeabi_dcmpgt>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f47f ae01 	bne.w	800f892 <__ieee754_pow+0x382>
 800fc90:	4aa5      	ldr	r2, [pc, #660]	; (800ff28 <__ieee754_pow+0xa18>)
 800fc92:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800fc96:	4293      	cmp	r3, r2
 800fc98:	f340 8103 	ble.w	800fea2 <__ieee754_pow+0x992>
 800fc9c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fca0:	2000      	movs	r0, #0
 800fca2:	151b      	asrs	r3, r3, #20
 800fca4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fca8:	fa4a f303 	asr.w	r3, sl, r3
 800fcac:	4433      	add	r3, r6
 800fcae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fcb2:	4f9e      	ldr	r7, [pc, #632]	; (800ff2c <__ieee754_pow+0xa1c>)
 800fcb4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fcb8:	4117      	asrs	r7, r2
 800fcba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fcbe:	ea23 0107 	bic.w	r1, r3, r7
 800fcc2:	f1c2 0214 	rsb	r2, r2, #20
 800fcc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fcca:	460b      	mov	r3, r1
 800fccc:	fa4a fa02 	asr.w	sl, sl, r2
 800fcd0:	2e00      	cmp	r6, #0
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	bfb8      	it	lt
 800fcda:	f1ca 0a00 	rsblt	sl, sl, #0
 800fcde:	f7f0 faaf 	bl	8000240 <__aeabi_dsub>
 800fce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcea:	2400      	movs	r4, #0
 800fcec:	4642      	mov	r2, r8
 800fcee:	464b      	mov	r3, r9
 800fcf0:	f7f0 faa8 	bl	8000244 <__adddf3>
 800fcf4:	a37a      	add	r3, pc, #488	; (adr r3, 800fee0 <__ieee754_pow+0x9d0>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	460d      	mov	r5, r1
 800fcfe:	f7f0 fc57 	bl	80005b0 <__aeabi_dmul>
 800fd02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd06:	4606      	mov	r6, r0
 800fd08:	460f      	mov	r7, r1
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7f0 fa97 	bl	8000240 <__aeabi_dsub>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4640      	mov	r0, r8
 800fd18:	4649      	mov	r1, r9
 800fd1a:	f7f0 fa91 	bl	8000240 <__aeabi_dsub>
 800fd1e:	a372      	add	r3, pc, #456	; (adr r3, 800fee8 <__ieee754_pow+0x9d8>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	f7f0 fc44 	bl	80005b0 <__aeabi_dmul>
 800fd28:	a371      	add	r3, pc, #452	; (adr r3, 800fef0 <__ieee754_pow+0x9e0>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	4680      	mov	r8, r0
 800fd30:	4689      	mov	r9, r1
 800fd32:	4620      	mov	r0, r4
 800fd34:	4629      	mov	r1, r5
 800fd36:	f7f0 fc3b 	bl	80005b0 <__aeabi_dmul>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4640      	mov	r0, r8
 800fd40:	4649      	mov	r1, r9
 800fd42:	f7f0 fa7f 	bl	8000244 <__adddf3>
 800fd46:	4604      	mov	r4, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4630      	mov	r0, r6
 800fd50:	4639      	mov	r1, r7
 800fd52:	f7f0 fa77 	bl	8000244 <__adddf3>
 800fd56:	4632      	mov	r2, r6
 800fd58:	463b      	mov	r3, r7
 800fd5a:	4680      	mov	r8, r0
 800fd5c:	4689      	mov	r9, r1
 800fd5e:	f7f0 fa6f 	bl	8000240 <__aeabi_dsub>
 800fd62:	4602      	mov	r2, r0
 800fd64:	460b      	mov	r3, r1
 800fd66:	4620      	mov	r0, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 fa69 	bl	8000240 <__aeabi_dsub>
 800fd6e:	4642      	mov	r2, r8
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	464b      	mov	r3, r9
 800fd76:	4640      	mov	r0, r8
 800fd78:	4649      	mov	r1, r9
 800fd7a:	f7f0 fc19 	bl	80005b0 <__aeabi_dmul>
 800fd7e:	a35e      	add	r3, pc, #376	; (adr r3, 800fef8 <__ieee754_pow+0x9e8>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	4604      	mov	r4, r0
 800fd86:	460d      	mov	r5, r1
 800fd88:	f7f0 fc12 	bl	80005b0 <__aeabi_dmul>
 800fd8c:	a35c      	add	r3, pc, #368	; (adr r3, 800ff00 <__ieee754_pow+0x9f0>)
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	f7f0 fa55 	bl	8000240 <__aeabi_dsub>
 800fd96:	4622      	mov	r2, r4
 800fd98:	462b      	mov	r3, r5
 800fd9a:	f7f0 fc09 	bl	80005b0 <__aeabi_dmul>
 800fd9e:	a35a      	add	r3, pc, #360	; (adr r3, 800ff08 <__ieee754_pow+0x9f8>)
 800fda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda4:	f7f0 fa4e 	bl	8000244 <__adddf3>
 800fda8:	4622      	mov	r2, r4
 800fdaa:	462b      	mov	r3, r5
 800fdac:	f7f0 fc00 	bl	80005b0 <__aeabi_dmul>
 800fdb0:	a357      	add	r3, pc, #348	; (adr r3, 800ff10 <__ieee754_pow+0xa00>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 fa43 	bl	8000240 <__aeabi_dsub>
 800fdba:	4622      	mov	r2, r4
 800fdbc:	462b      	mov	r3, r5
 800fdbe:	f7f0 fbf7 	bl	80005b0 <__aeabi_dmul>
 800fdc2:	a355      	add	r3, pc, #340	; (adr r3, 800ff18 <__ieee754_pow+0xa08>)
 800fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc8:	f7f0 fa3c 	bl	8000244 <__adddf3>
 800fdcc:	4622      	mov	r2, r4
 800fdce:	462b      	mov	r3, r5
 800fdd0:	f7f0 fbee 	bl	80005b0 <__aeabi_dmul>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	4640      	mov	r0, r8
 800fdda:	4649      	mov	r1, r9
 800fddc:	f7f0 fa30 	bl	8000240 <__aeabi_dsub>
 800fde0:	4604      	mov	r4, r0
 800fde2:	460d      	mov	r5, r1
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 fbe0 	bl	80005b0 <__aeabi_dmul>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	f7f0 fa1f 	bl	8000240 <__aeabi_dsub>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe0a:	f7f0 fcfb 	bl	8000804 <__aeabi_ddiv>
 800fe0e:	4632      	mov	r2, r6
 800fe10:	4604      	mov	r4, r0
 800fe12:	460d      	mov	r5, r1
 800fe14:	463b      	mov	r3, r7
 800fe16:	4640      	mov	r0, r8
 800fe18:	4649      	mov	r1, r9
 800fe1a:	f7f0 fbc9 	bl	80005b0 <__aeabi_dmul>
 800fe1e:	4632      	mov	r2, r6
 800fe20:	463b      	mov	r3, r7
 800fe22:	f7f0 fa0f 	bl	8000244 <__adddf3>
 800fe26:	4602      	mov	r2, r0
 800fe28:	460b      	mov	r3, r1
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	f7f0 fa07 	bl	8000240 <__aeabi_dsub>
 800fe32:	4642      	mov	r2, r8
 800fe34:	464b      	mov	r3, r9
 800fe36:	f7f0 fa03 	bl	8000240 <__aeabi_dsub>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	2000      	movs	r0, #0
 800fe40:	493b      	ldr	r1, [pc, #236]	; (800ff30 <__ieee754_pow+0xa20>)
 800fe42:	f7f0 f9fd 	bl	8000240 <__aeabi_dsub>
 800fe46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800fe4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800fe4e:	da2b      	bge.n	800fea8 <__ieee754_pow+0x998>
 800fe50:	4652      	mov	r2, sl
 800fe52:	f000 f9b9 	bl	80101c8 <scalbn>
 800fe56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe5a:	f7ff bbf2 	b.w	800f642 <__ieee754_pow+0x132>
 800fe5e:	4b35      	ldr	r3, [pc, #212]	; (800ff34 <__ieee754_pow+0xa24>)
 800fe60:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800fe64:	429f      	cmp	r7, r3
 800fe66:	f77f af13 	ble.w	800fc90 <__ieee754_pow+0x780>
 800fe6a:	4b33      	ldr	r3, [pc, #204]	; (800ff38 <__ieee754_pow+0xa28>)
 800fe6c:	440b      	add	r3, r1
 800fe6e:	4303      	orrs	r3, r0
 800fe70:	d00b      	beq.n	800fe8a <__ieee754_pow+0x97a>
 800fe72:	a32b      	add	r3, pc, #172	; (adr r3, 800ff20 <__ieee754_pow+0xa10>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe7c:	f7f0 fb98 	bl	80005b0 <__aeabi_dmul>
 800fe80:	a327      	add	r3, pc, #156	; (adr r3, 800ff20 <__ieee754_pow+0xa10>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	f7ff bbdc 	b.w	800f642 <__ieee754_pow+0x132>
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	f7f0 f9d7 	bl	8000240 <__aeabi_dsub>
 800fe92:	4642      	mov	r2, r8
 800fe94:	464b      	mov	r3, r9
 800fe96:	f7f0 fe11 	bl	8000abc <__aeabi_dcmpge>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	f43f aef8 	beq.w	800fc90 <__ieee754_pow+0x780>
 800fea0:	e7e7      	b.n	800fe72 <__ieee754_pow+0x962>
 800fea2:	f04f 0a00 	mov.w	sl, #0
 800fea6:	e71e      	b.n	800fce6 <__ieee754_pow+0x7d6>
 800fea8:	4621      	mov	r1, r4
 800feaa:	e7d4      	b.n	800fe56 <__ieee754_pow+0x946>
 800feac:	f04f 0b00 	mov.w	fp, #0
 800feb0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ff30 <__ieee754_pow+0xa20>
 800feb4:	f7ff bbb0 	b.w	800f618 <__ieee754_pow+0x108>
 800feb8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800febc:	f7ff bbac 	b.w	800f618 <__ieee754_pow+0x108>
 800fec0:	4638      	mov	r0, r7
 800fec2:	4641      	mov	r1, r8
 800fec4:	f7ff bbbf 	b.w	800f646 <__ieee754_pow+0x136>
 800fec8:	9200      	str	r2, [sp, #0]
 800feca:	f7ff bb7f 	b.w	800f5cc <__ieee754_pow+0xbc>
 800fece:	2300      	movs	r3, #0
 800fed0:	f7ff bb69 	b.w	800f5a6 <__ieee754_pow+0x96>
 800fed4:	f3af 8000 	nop.w
 800fed8:	652b82fe 	.word	0x652b82fe
 800fedc:	3c971547 	.word	0x3c971547
 800fee0:	00000000 	.word	0x00000000
 800fee4:	3fe62e43 	.word	0x3fe62e43
 800fee8:	fefa39ef 	.word	0xfefa39ef
 800feec:	3fe62e42 	.word	0x3fe62e42
 800fef0:	0ca86c39 	.word	0x0ca86c39
 800fef4:	be205c61 	.word	0xbe205c61
 800fef8:	72bea4d0 	.word	0x72bea4d0
 800fefc:	3e663769 	.word	0x3e663769
 800ff00:	c5d26bf1 	.word	0xc5d26bf1
 800ff04:	3ebbbd41 	.word	0x3ebbbd41
 800ff08:	af25de2c 	.word	0xaf25de2c
 800ff0c:	3f11566a 	.word	0x3f11566a
 800ff10:	16bebd93 	.word	0x16bebd93
 800ff14:	3f66c16c 	.word	0x3f66c16c
 800ff18:	5555553e 	.word	0x5555553e
 800ff1c:	3fc55555 	.word	0x3fc55555
 800ff20:	c2f8f359 	.word	0xc2f8f359
 800ff24:	01a56e1f 	.word	0x01a56e1f
 800ff28:	3fe00000 	.word	0x3fe00000
 800ff2c:	000fffff 	.word	0x000fffff
 800ff30:	3ff00000 	.word	0x3ff00000
 800ff34:	4090cbff 	.word	0x4090cbff
 800ff38:	3f6f3400 	.word	0x3f6f3400

0800ff3c <__ieee754_sqrt>:
 800ff3c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8010090 <__ieee754_sqrt+0x154>
 800ff40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff44:	ea3c 0c01 	bics.w	ip, ip, r1
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	460d      	mov	r5, r1
 800ff4e:	460a      	mov	r2, r1
 800ff50:	4607      	mov	r7, r0
 800ff52:	4604      	mov	r4, r0
 800ff54:	d10e      	bne.n	800ff74 <__ieee754_sqrt+0x38>
 800ff56:	4602      	mov	r2, r0
 800ff58:	f7f0 fb2a 	bl	80005b0 <__aeabi_dmul>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	4630      	mov	r0, r6
 800ff62:	4629      	mov	r1, r5
 800ff64:	f7f0 f96e 	bl	8000244 <__adddf3>
 800ff68:	4606      	mov	r6, r0
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	4629      	mov	r1, r5
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff74:	2900      	cmp	r1, #0
 800ff76:	dc0d      	bgt.n	800ff94 <__ieee754_sqrt+0x58>
 800ff78:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ff7c:	ea5c 0707 	orrs.w	r7, ip, r7
 800ff80:	d0f4      	beq.n	800ff6c <__ieee754_sqrt+0x30>
 800ff82:	b139      	cbz	r1, 800ff94 <__ieee754_sqrt+0x58>
 800ff84:	4602      	mov	r2, r0
 800ff86:	f7f0 f95b 	bl	8000240 <__aeabi_dsub>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	f7f0 fc39 	bl	8000804 <__aeabi_ddiv>
 800ff92:	e7e9      	b.n	800ff68 <__ieee754_sqrt+0x2c>
 800ff94:	1512      	asrs	r2, r2, #20
 800ff96:	d074      	beq.n	8010082 <__ieee754_sqrt+0x146>
 800ff98:	2000      	movs	r0, #0
 800ff9a:	07d5      	lsls	r5, r2, #31
 800ff9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffa0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ffa4:	bf5e      	ittt	pl
 800ffa6:	0fe3      	lsrpl	r3, r4, #31
 800ffa8:	0064      	lslpl	r4, r4, #1
 800ffaa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ffae:	0fe3      	lsrs	r3, r4, #31
 800ffb0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ffb4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ffb8:	2516      	movs	r5, #22
 800ffba:	4601      	mov	r1, r0
 800ffbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ffc0:	1076      	asrs	r6, r6, #1
 800ffc2:	0064      	lsls	r4, r4, #1
 800ffc4:	188f      	adds	r7, r1, r2
 800ffc6:	429f      	cmp	r7, r3
 800ffc8:	bfde      	ittt	le
 800ffca:	1bdb      	suble	r3, r3, r7
 800ffcc:	18b9      	addle	r1, r7, r2
 800ffce:	1880      	addle	r0, r0, r2
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	3d01      	subs	r5, #1
 800ffd4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ffd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ffdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ffe0:	d1f0      	bne.n	800ffc4 <__ieee754_sqrt+0x88>
 800ffe2:	462a      	mov	r2, r5
 800ffe4:	f04f 0e20 	mov.w	lr, #32
 800ffe8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ffec:	428b      	cmp	r3, r1
 800ffee:	eb07 0c05 	add.w	ip, r7, r5
 800fff2:	dc02      	bgt.n	800fffa <__ieee754_sqrt+0xbe>
 800fff4:	d113      	bne.n	801001e <__ieee754_sqrt+0xe2>
 800fff6:	45a4      	cmp	ip, r4
 800fff8:	d811      	bhi.n	801001e <__ieee754_sqrt+0xe2>
 800fffa:	f1bc 0f00 	cmp.w	ip, #0
 800fffe:	eb0c 0507 	add.w	r5, ip, r7
 8010002:	da43      	bge.n	801008c <__ieee754_sqrt+0x150>
 8010004:	2d00      	cmp	r5, #0
 8010006:	db41      	blt.n	801008c <__ieee754_sqrt+0x150>
 8010008:	f101 0801 	add.w	r8, r1, #1
 801000c:	1a5b      	subs	r3, r3, r1
 801000e:	4641      	mov	r1, r8
 8010010:	45a4      	cmp	ip, r4
 8010012:	bf88      	it	hi
 8010014:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010018:	eba4 040c 	sub.w	r4, r4, ip
 801001c:	443a      	add	r2, r7
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	f1be 0e01 	subs.w	lr, lr, #1
 8010024:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8010028:	ea4f 0757 	mov.w	r7, r7, lsr #1
 801002c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010030:	d1dc      	bne.n	800ffec <__ieee754_sqrt+0xb0>
 8010032:	4323      	orrs	r3, r4
 8010034:	d006      	beq.n	8010044 <__ieee754_sqrt+0x108>
 8010036:	1c54      	adds	r4, r2, #1
 8010038:	bf0b      	itete	eq
 801003a:	4672      	moveq	r2, lr
 801003c:	3201      	addne	r2, #1
 801003e:	3001      	addeq	r0, #1
 8010040:	f022 0201 	bicne.w	r2, r2, #1
 8010044:	1043      	asrs	r3, r0, #1
 8010046:	07c1      	lsls	r1, r0, #31
 8010048:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801004c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010050:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010054:	bf48      	it	mi
 8010056:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801005a:	4610      	mov	r0, r2
 801005c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8010060:	e782      	b.n	800ff68 <__ieee754_sqrt+0x2c>
 8010062:	0ae3      	lsrs	r3, r4, #11
 8010064:	3915      	subs	r1, #21
 8010066:	0564      	lsls	r4, r4, #21
 8010068:	2b00      	cmp	r3, #0
 801006a:	d0fa      	beq.n	8010062 <__ieee754_sqrt+0x126>
 801006c:	02de      	lsls	r6, r3, #11
 801006e:	d50a      	bpl.n	8010086 <__ieee754_sqrt+0x14a>
 8010070:	f1c2 0020 	rsb	r0, r2, #32
 8010074:	fa24 f000 	lsr.w	r0, r4, r0
 8010078:	1e55      	subs	r5, r2, #1
 801007a:	4094      	lsls	r4, r2
 801007c:	4303      	orrs	r3, r0
 801007e:	1b4a      	subs	r2, r1, r5
 8010080:	e78a      	b.n	800ff98 <__ieee754_sqrt+0x5c>
 8010082:	4611      	mov	r1, r2
 8010084:	e7f0      	b.n	8010068 <__ieee754_sqrt+0x12c>
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	3201      	adds	r2, #1
 801008a:	e7ef      	b.n	801006c <__ieee754_sqrt+0x130>
 801008c:	4688      	mov	r8, r1
 801008e:	e7bd      	b.n	801000c <__ieee754_sqrt+0xd0>
 8010090:	7ff00000 	.word	0x7ff00000

08010094 <fabs>:
 8010094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010098:	4770      	bx	lr

0801009a <finite>:
 801009a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801009e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80100a2:	0fc0      	lsrs	r0, r0, #31
 80100a4:	4770      	bx	lr
	...

080100a8 <nan>:
 80100a8:	2000      	movs	r0, #0
 80100aa:	4901      	ldr	r1, [pc, #4]	; (80100b0 <nan+0x8>)
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	7ff80000 	.word	0x7ff80000

080100b4 <rint>:
 80100b4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80100b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80100be:	2f13      	cmp	r7, #19
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	460c      	mov	r4, r1
 80100c6:	4605      	mov	r5, r0
 80100c8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80100cc:	dc59      	bgt.n	8010182 <rint+0xce>
 80100ce:	2f00      	cmp	r7, #0
 80100d0:	da2a      	bge.n	8010128 <rint+0x74>
 80100d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80100d6:	4301      	orrs	r1, r0
 80100d8:	d022      	beq.n	8010120 <rint+0x6c>
 80100da:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80100de:	4301      	orrs	r1, r0
 80100e0:	424d      	negs	r5, r1
 80100e2:	430d      	orrs	r5, r1
 80100e4:	4936      	ldr	r1, [pc, #216]	; (80101c0 <rint+0x10c>)
 80100e6:	0c5c      	lsrs	r4, r3, #17
 80100e8:	0b2d      	lsrs	r5, r5, #12
 80100ea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80100ee:	0464      	lsls	r4, r4, #17
 80100f0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80100f4:	ea45 0304 	orr.w	r3, r5, r4
 80100f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80100fc:	4620      	mov	r0, r4
 80100fe:	4629      	mov	r1, r5
 8010100:	f7f0 f8a0 	bl	8000244 <__adddf3>
 8010104:	e9cd 0100 	strd	r0, r1, [sp]
 8010108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801010c:	462b      	mov	r3, r5
 801010e:	4622      	mov	r2, r4
 8010110:	f7f0 f896 	bl	8000240 <__aeabi_dsub>
 8010114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010118:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4610      	mov	r0, r2
 8010122:	4619      	mov	r1, r3
 8010124:	b003      	add	sp, #12
 8010126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010128:	4926      	ldr	r1, [pc, #152]	; (80101c4 <rint+0x110>)
 801012a:	4139      	asrs	r1, r7
 801012c:	ea03 0001 	and.w	r0, r3, r1
 8010130:	4310      	orrs	r0, r2
 8010132:	d0f5      	beq.n	8010120 <rint+0x6c>
 8010134:	084b      	lsrs	r3, r1, #1
 8010136:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 801013a:	ea52 0501 	orrs.w	r5, r2, r1
 801013e:	d00c      	beq.n	801015a <rint+0xa6>
 8010140:	ea24 0303 	bic.w	r3, r4, r3
 8010144:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8010148:	2f13      	cmp	r7, #19
 801014a:	bf0c      	ite	eq
 801014c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8010150:	2500      	movne	r5, #0
 8010152:	fa44 f707 	asr.w	r7, r4, r7
 8010156:	ea43 0407 	orr.w	r4, r3, r7
 801015a:	4919      	ldr	r1, [pc, #100]	; (80101c0 <rint+0x10c>)
 801015c:	4623      	mov	r3, r4
 801015e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8010162:	462a      	mov	r2, r5
 8010164:	e9d6 4500 	ldrd	r4, r5, [r6]
 8010168:	4620      	mov	r0, r4
 801016a:	4629      	mov	r1, r5
 801016c:	f7f0 f86a 	bl	8000244 <__adddf3>
 8010170:	e9cd 0100 	strd	r0, r1, [sp]
 8010174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010178:	4622      	mov	r2, r4
 801017a:	462b      	mov	r3, r5
 801017c:	f7f0 f860 	bl	8000240 <__aeabi_dsub>
 8010180:	e7cc      	b.n	801011c <rint+0x68>
 8010182:	2f33      	cmp	r7, #51	; 0x33
 8010184:	dd05      	ble.n	8010192 <rint+0xde>
 8010186:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801018a:	d1c9      	bne.n	8010120 <rint+0x6c>
 801018c:	f7f0 f85a 	bl	8000244 <__adddf3>
 8010190:	e7c4      	b.n	801011c <rint+0x68>
 8010192:	f04f 31ff 	mov.w	r1, #4294967295
 8010196:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 801019a:	fa21 f10c 	lsr.w	r1, r1, ip
 801019e:	4208      	tst	r0, r1
 80101a0:	d0be      	beq.n	8010120 <rint+0x6c>
 80101a2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80101a6:	bf18      	it	ne
 80101a8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80101ac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80101b0:	bf1e      	ittt	ne
 80101b2:	ea20 0303 	bicne.w	r3, r0, r3
 80101b6:	fa45 fc0c 	asrne.w	ip, r5, ip
 80101ba:	ea43 050c 	orrne.w	r5, r3, ip
 80101be:	e7cc      	b.n	801015a <rint+0xa6>
 80101c0:	0802f500 	.word	0x0802f500
 80101c4:	000fffff 	.word	0x000fffff

080101c8 <scalbn>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80101ce:	4604      	mov	r4, r0
 80101d0:	460d      	mov	r5, r1
 80101d2:	4617      	mov	r7, r2
 80101d4:	460b      	mov	r3, r1
 80101d6:	b996      	cbnz	r6, 80101fe <scalbn+0x36>
 80101d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101dc:	4303      	orrs	r3, r0
 80101de:	d039      	beq.n	8010254 <scalbn+0x8c>
 80101e0:	4b35      	ldr	r3, [pc, #212]	; (80102b8 <scalbn+0xf0>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	f7f0 f9e4 	bl	80005b0 <__aeabi_dmul>
 80101e8:	4b34      	ldr	r3, [pc, #208]	; (80102bc <scalbn+0xf4>)
 80101ea:	4604      	mov	r4, r0
 80101ec:	429f      	cmp	r7, r3
 80101ee:	460d      	mov	r5, r1
 80101f0:	da0f      	bge.n	8010212 <scalbn+0x4a>
 80101f2:	a32d      	add	r3, pc, #180	; (adr r3, 80102a8 <scalbn+0xe0>)
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	f7f0 f9da 	bl	80005b0 <__aeabi_dmul>
 80101fc:	e006      	b.n	801020c <scalbn+0x44>
 80101fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010202:	4296      	cmp	r6, r2
 8010204:	d10a      	bne.n	801021c <scalbn+0x54>
 8010206:	4602      	mov	r2, r0
 8010208:	f7f0 f81c 	bl	8000244 <__adddf3>
 801020c:	4604      	mov	r4, r0
 801020e:	460d      	mov	r5, r1
 8010210:	e020      	b.n	8010254 <scalbn+0x8c>
 8010212:	460b      	mov	r3, r1
 8010214:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010218:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801021c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8010220:	19b9      	adds	r1, r7, r6
 8010222:	4291      	cmp	r1, r2
 8010224:	dd0e      	ble.n	8010244 <scalbn+0x7c>
 8010226:	a322      	add	r3, pc, #136	; (adr r3, 80102b0 <scalbn+0xe8>)
 8010228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8010230:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8010234:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8010238:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801023c:	4820      	ldr	r0, [pc, #128]	; (80102c0 <scalbn+0xf8>)
 801023e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8010242:	e7d9      	b.n	80101f8 <scalbn+0x30>
 8010244:	2900      	cmp	r1, #0
 8010246:	dd08      	ble.n	801025a <scalbn+0x92>
 8010248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801024c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010250:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010254:	4620      	mov	r0, r4
 8010256:	4629      	mov	r1, r5
 8010258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801025a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801025e:	da16      	bge.n	801028e <scalbn+0xc6>
 8010260:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010264:	429f      	cmp	r7, r3
 8010266:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801026a:	dd08      	ble.n	801027e <scalbn+0xb6>
 801026c:	4c15      	ldr	r4, [pc, #84]	; (80102c4 <scalbn+0xfc>)
 801026e:	4814      	ldr	r0, [pc, #80]	; (80102c0 <scalbn+0xf8>)
 8010270:	f363 74df 	bfi	r4, r3, #31, #1
 8010274:	a30e      	add	r3, pc, #56	; (adr r3, 80102b0 <scalbn+0xe8>)
 8010276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027a:	4621      	mov	r1, r4
 801027c:	e7bc      	b.n	80101f8 <scalbn+0x30>
 801027e:	4c12      	ldr	r4, [pc, #72]	; (80102c8 <scalbn+0x100>)
 8010280:	4812      	ldr	r0, [pc, #72]	; (80102cc <scalbn+0x104>)
 8010282:	f363 74df 	bfi	r4, r3, #31, #1
 8010286:	a308      	add	r3, pc, #32	; (adr r3, 80102a8 <scalbn+0xe0>)
 8010288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028c:	e7f5      	b.n	801027a <scalbn+0xb2>
 801028e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010292:	3136      	adds	r1, #54	; 0x36
 8010294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010298:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	2200      	movs	r2, #0
 80102a2:	4b0b      	ldr	r3, [pc, #44]	; (80102d0 <scalbn+0x108>)
 80102a4:	e7a8      	b.n	80101f8 <scalbn+0x30>
 80102a6:	bf00      	nop
 80102a8:	c2f8f359 	.word	0xc2f8f359
 80102ac:	01a56e1f 	.word	0x01a56e1f
 80102b0:	8800759c 	.word	0x8800759c
 80102b4:	7e37e43c 	.word	0x7e37e43c
 80102b8:	43500000 	.word	0x43500000
 80102bc:	ffff3cb0 	.word	0xffff3cb0
 80102c0:	8800759c 	.word	0x8800759c
 80102c4:	7e37e43c 	.word	0x7e37e43c
 80102c8:	01a56e1f 	.word	0x01a56e1f
 80102cc:	c2f8f359 	.word	0xc2f8f359
 80102d0:	3c900000 	.word	0x3c900000

080102d4 <_init>:
 80102d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d6:	bf00      	nop
 80102d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102da:	bc08      	pop	{r3}
 80102dc:	469e      	mov	lr, r3
 80102de:	4770      	bx	lr

080102e0 <_fini>:
 80102e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e2:	bf00      	nop
 80102e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102e6:	bc08      	pop	{r3}
 80102e8:	469e      	mov	lr, r3
 80102ea:	4770      	bx	lr
