
GPDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001079c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015280  08010988  08010988  00020988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025c08  08025c08  00040278  2**0
                  CONTENTS
  4 .ARM          00000008  08025c08  08025c08  00035c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025c10  08025c10  00040278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025c10  08025c10  00035c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025c14  08025c14  00035c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08025c18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ebf8  20000278  08025e90  00040278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ee70  08025e90  0004ee70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY
 12 .debug_info   000356fc  00000000  00000000  000402a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b76  00000000  00000000  0007599d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0007c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  0007de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027eff  00000000  00000000  0007f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025439  00000000  00000000  000a746f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f0b  00000000  00000000  000cc8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001907b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fbc  00000000  00000000  00190808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000278 	.word	0x20000278
 8000204:	00000000 	.word	0x00000000
 8000208:	0801096c 	.word	0x0801096c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000027c 	.word	0x2000027c
 8000224:	0801096c 	.word	0x0801096c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2iz>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b0:	d30f      	bcc.n	80011d2 <__aeabi_f2iz+0x2a>
 80011b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d90d      	bls.n	80011d8 <__aeabi_f2iz+0x30>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	bf18      	it	ne
 80011ce:	4240      	negne	r0, r0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr
 80011d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011dc:	d101      	bne.n	80011e2 <__aeabi_f2iz+0x3a>
 80011de:	0242      	lsls	r2, r0, #9
 80011e0:	d105      	bne.n	80011ee <__aeabi_f2iz+0x46>
 80011e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011e6:	bf08      	it	eq
 80011e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <__aeabi_f2uiz>:
 80011f4:	0042      	lsls	r2, r0, #1
 80011f6:	d20e      	bcs.n	8001216 <__aeabi_f2uiz+0x22>
 80011f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011fc:	d30b      	bcc.n	8001216 <__aeabi_f2uiz+0x22>
 80011fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001202:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001206:	d409      	bmi.n	800121c <__aeabi_f2uiz+0x28>
 8001208:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800120c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	f04f 0000 	mov.w	r0, #0
 800121a:	4770      	bx	lr
 800121c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001220:	d101      	bne.n	8001226 <__aeabi_f2uiz+0x32>
 8001222:	0242      	lsls	r2, r0, #9
 8001224:	d102      	bne.n	800122c <__aeabi_f2uiz+0x38>
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	4770      	bx	lr
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__aeabi_uldivmod>:
 8001234:	b953      	cbnz	r3, 800124c <__aeabi_uldivmod+0x18>
 8001236:	b94a      	cbnz	r2, 800124c <__aeabi_uldivmod+0x18>
 8001238:	2900      	cmp	r1, #0
 800123a:	bf08      	it	eq
 800123c:	2800      	cmpeq	r0, #0
 800123e:	bf1c      	itt	ne
 8001240:	f04f 31ff 	movne.w	r1, #4294967295
 8001244:	f04f 30ff 	movne.w	r0, #4294967295
 8001248:	f000 b96e 	b.w	8001528 <__aeabi_idiv0>
 800124c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001254:	f000 f806 	bl	8001264 <__udivmoddi4>
 8001258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800125c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr

08001264 <__udivmoddi4>:
 8001264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001268:	9e08      	ldr	r6, [sp, #32]
 800126a:	460d      	mov	r5, r1
 800126c:	4604      	mov	r4, r0
 800126e:	468e      	mov	lr, r1
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 8083 	bne.w	800137c <__udivmoddi4+0x118>
 8001276:	428a      	cmp	r2, r1
 8001278:	4617      	mov	r7, r2
 800127a:	d947      	bls.n	800130c <__udivmoddi4+0xa8>
 800127c:	fab2 f382 	clz	r3, r2
 8001280:	b14b      	cbz	r3, 8001296 <__udivmoddi4+0x32>
 8001282:	f1c3 0120 	rsb	r1, r3, #32
 8001286:	fa05 fe03 	lsl.w	lr, r5, r3
 800128a:	fa20 f101 	lsr.w	r1, r0, r1
 800128e:	409f      	lsls	r7, r3
 8001290:	ea41 0e0e 	orr.w	lr, r1, lr
 8001294:	409c      	lsls	r4, r3
 8001296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800129a:	fbbe fcf8 	udiv	ip, lr, r8
 800129e:	fa1f f987 	uxth.w	r9, r7
 80012a2:	fb08 e21c 	mls	r2, r8, ip, lr
 80012a6:	fb0c f009 	mul.w	r0, ip, r9
 80012aa:	0c21      	lsrs	r1, r4, #16
 80012ac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012b0:	4290      	cmp	r0, r2
 80012b2:	d90a      	bls.n	80012ca <__udivmoddi4+0x66>
 80012b4:	18ba      	adds	r2, r7, r2
 80012b6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012ba:	f080 8118 	bcs.w	80014ee <__udivmoddi4+0x28a>
 80012be:	4290      	cmp	r0, r2
 80012c0:	f240 8115 	bls.w	80014ee <__udivmoddi4+0x28a>
 80012c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80012c8:	443a      	add	r2, r7
 80012ca:	1a12      	subs	r2, r2, r0
 80012cc:	fbb2 f0f8 	udiv	r0, r2, r8
 80012d0:	fb08 2210 	mls	r2, r8, r0, r2
 80012d4:	fb00 f109 	mul.w	r1, r0, r9
 80012d8:	b2a4      	uxth	r4, r4
 80012da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012de:	42a1      	cmp	r1, r4
 80012e0:	d909      	bls.n	80012f6 <__udivmoddi4+0x92>
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012e8:	f080 8103 	bcs.w	80014f2 <__udivmoddi4+0x28e>
 80012ec:	42a1      	cmp	r1, r4
 80012ee:	f240 8100 	bls.w	80014f2 <__udivmoddi4+0x28e>
 80012f2:	3802      	subs	r0, #2
 80012f4:	443c      	add	r4, r7
 80012f6:	1a64      	subs	r4, r4, r1
 80012f8:	2100      	movs	r1, #0
 80012fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012fe:	b11e      	cbz	r6, 8001308 <__udivmoddi4+0xa4>
 8001300:	2200      	movs	r2, #0
 8001302:	40dc      	lsrs	r4, r3
 8001304:	e9c6 4200 	strd	r4, r2, [r6]
 8001308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130c:	b902      	cbnz	r2, 8001310 <__udivmoddi4+0xac>
 800130e:	deff      	udf	#255	; 0xff
 8001310:	fab2 f382 	clz	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d14f      	bne.n	80013b8 <__udivmoddi4+0x154>
 8001318:	1a8d      	subs	r5, r1, r2
 800131a:	2101      	movs	r1, #1
 800131c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001320:	fa1f f882 	uxth.w	r8, r2
 8001324:	fbb5 fcfe 	udiv	ip, r5, lr
 8001328:	fb0e 551c 	mls	r5, lr, ip, r5
 800132c:	fb08 f00c 	mul.w	r0, r8, ip
 8001330:	0c22      	lsrs	r2, r4, #16
 8001332:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001336:	42a8      	cmp	r0, r5
 8001338:	d907      	bls.n	800134a <__udivmoddi4+0xe6>
 800133a:	197d      	adds	r5, r7, r5
 800133c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001340:	d202      	bcs.n	8001348 <__udivmoddi4+0xe4>
 8001342:	42a8      	cmp	r0, r5
 8001344:	f200 80e9 	bhi.w	800151a <__udivmoddi4+0x2b6>
 8001348:	4694      	mov	ip, r2
 800134a:	1a2d      	subs	r5, r5, r0
 800134c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001350:	fb0e 5510 	mls	r5, lr, r0, r5
 8001354:	fb08 f800 	mul.w	r8, r8, r0
 8001358:	b2a4      	uxth	r4, r4
 800135a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800135e:	45a0      	cmp	r8, r4
 8001360:	d907      	bls.n	8001372 <__udivmoddi4+0x10e>
 8001362:	193c      	adds	r4, r7, r4
 8001364:	f100 32ff 	add.w	r2, r0, #4294967295
 8001368:	d202      	bcs.n	8001370 <__udivmoddi4+0x10c>
 800136a:	45a0      	cmp	r8, r4
 800136c:	f200 80d9 	bhi.w	8001522 <__udivmoddi4+0x2be>
 8001370:	4610      	mov	r0, r2
 8001372:	eba4 0408 	sub.w	r4, r4, r8
 8001376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800137a:	e7c0      	b.n	80012fe <__udivmoddi4+0x9a>
 800137c:	428b      	cmp	r3, r1
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0x12e>
 8001380:	2e00      	cmp	r6, #0
 8001382:	f000 80b1 	beq.w	80014e8 <__udivmoddi4+0x284>
 8001386:	2100      	movs	r1, #0
 8001388:	e9c6 0500 	strd	r0, r5, [r6]
 800138c:	4608      	mov	r0, r1
 800138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001392:	fab3 f183 	clz	r1, r3
 8001396:	2900      	cmp	r1, #0
 8001398:	d14b      	bne.n	8001432 <__udivmoddi4+0x1ce>
 800139a:	42ab      	cmp	r3, r5
 800139c:	d302      	bcc.n	80013a4 <__udivmoddi4+0x140>
 800139e:	4282      	cmp	r2, r0
 80013a0:	f200 80b9 	bhi.w	8001516 <__udivmoddi4+0x2b2>
 80013a4:	1a84      	subs	r4, r0, r2
 80013a6:	eb65 0303 	sbc.w	r3, r5, r3
 80013aa:	2001      	movs	r0, #1
 80013ac:	469e      	mov	lr, r3
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d0aa      	beq.n	8001308 <__udivmoddi4+0xa4>
 80013b2:	e9c6 4e00 	strd	r4, lr, [r6]
 80013b6:	e7a7      	b.n	8001308 <__udivmoddi4+0xa4>
 80013b8:	409f      	lsls	r7, r3
 80013ba:	f1c3 0220 	rsb	r2, r3, #32
 80013be:	40d1      	lsrs	r1, r2
 80013c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80013c8:	fa1f f887 	uxth.w	r8, r7
 80013cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80013d0:	fa24 f202 	lsr.w	r2, r4, r2
 80013d4:	409d      	lsls	r5, r3
 80013d6:	fb00 fc08 	mul.w	ip, r0, r8
 80013da:	432a      	orrs	r2, r5
 80013dc:	0c15      	lsrs	r5, r2, #16
 80013de:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013e2:	45ac      	cmp	ip, r5
 80013e4:	fa04 f403 	lsl.w	r4, r4, r3
 80013e8:	d909      	bls.n	80013fe <__udivmoddi4+0x19a>
 80013ea:	197d      	adds	r5, r7, r5
 80013ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80013f0:	f080 808f 	bcs.w	8001512 <__udivmoddi4+0x2ae>
 80013f4:	45ac      	cmp	ip, r5
 80013f6:	f240 808c 	bls.w	8001512 <__udivmoddi4+0x2ae>
 80013fa:	3802      	subs	r0, #2
 80013fc:	443d      	add	r5, r7
 80013fe:	eba5 050c 	sub.w	r5, r5, ip
 8001402:	fbb5 f1fe 	udiv	r1, r5, lr
 8001406:	fb0e 5c11 	mls	ip, lr, r1, r5
 800140a:	fb01 f908 	mul.w	r9, r1, r8
 800140e:	b295      	uxth	r5, r2
 8001410:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001414:	45a9      	cmp	r9, r5
 8001416:	d907      	bls.n	8001428 <__udivmoddi4+0x1c4>
 8001418:	197d      	adds	r5, r7, r5
 800141a:	f101 32ff 	add.w	r2, r1, #4294967295
 800141e:	d274      	bcs.n	800150a <__udivmoddi4+0x2a6>
 8001420:	45a9      	cmp	r9, r5
 8001422:	d972      	bls.n	800150a <__udivmoddi4+0x2a6>
 8001424:	3902      	subs	r1, #2
 8001426:	443d      	add	r5, r7
 8001428:	eba5 0509 	sub.w	r5, r5, r9
 800142c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001430:	e778      	b.n	8001324 <__udivmoddi4+0xc0>
 8001432:	f1c1 0720 	rsb	r7, r1, #32
 8001436:	408b      	lsls	r3, r1
 8001438:	fa22 fc07 	lsr.w	ip, r2, r7
 800143c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001440:	fa25 f407 	lsr.w	r4, r5, r7
 8001444:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001448:	fbb4 f9fe 	udiv	r9, r4, lr
 800144c:	fa1f f88c 	uxth.w	r8, ip
 8001450:	fb0e 4419 	mls	r4, lr, r9, r4
 8001454:	fa20 f307 	lsr.w	r3, r0, r7
 8001458:	fb09 fa08 	mul.w	sl, r9, r8
 800145c:	408d      	lsls	r5, r1
 800145e:	431d      	orrs	r5, r3
 8001460:	0c2b      	lsrs	r3, r5, #16
 8001462:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001466:	45a2      	cmp	sl, r4
 8001468:	fa02 f201 	lsl.w	r2, r2, r1
 800146c:	fa00 f301 	lsl.w	r3, r0, r1
 8001470:	d909      	bls.n	8001486 <__udivmoddi4+0x222>
 8001472:	eb1c 0404 	adds.w	r4, ip, r4
 8001476:	f109 30ff 	add.w	r0, r9, #4294967295
 800147a:	d248      	bcs.n	800150e <__udivmoddi4+0x2aa>
 800147c:	45a2      	cmp	sl, r4
 800147e:	d946      	bls.n	800150e <__udivmoddi4+0x2aa>
 8001480:	f1a9 0902 	sub.w	r9, r9, #2
 8001484:	4464      	add	r4, ip
 8001486:	eba4 040a 	sub.w	r4, r4, sl
 800148a:	fbb4 f0fe 	udiv	r0, r4, lr
 800148e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001492:	fb00 fa08 	mul.w	sl, r0, r8
 8001496:	b2ad      	uxth	r5, r5
 8001498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800149c:	45a2      	cmp	sl, r4
 800149e:	d908      	bls.n	80014b2 <__udivmoddi4+0x24e>
 80014a0:	eb1c 0404 	adds.w	r4, ip, r4
 80014a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80014a8:	d22d      	bcs.n	8001506 <__udivmoddi4+0x2a2>
 80014aa:	45a2      	cmp	sl, r4
 80014ac:	d92b      	bls.n	8001506 <__udivmoddi4+0x2a2>
 80014ae:	3802      	subs	r0, #2
 80014b0:	4464      	add	r4, ip
 80014b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014b6:	fba0 8902 	umull	r8, r9, r0, r2
 80014ba:	eba4 040a 	sub.w	r4, r4, sl
 80014be:	454c      	cmp	r4, r9
 80014c0:	46c6      	mov	lr, r8
 80014c2:	464d      	mov	r5, r9
 80014c4:	d319      	bcc.n	80014fa <__udivmoddi4+0x296>
 80014c6:	d016      	beq.n	80014f6 <__udivmoddi4+0x292>
 80014c8:	b15e      	cbz	r6, 80014e2 <__udivmoddi4+0x27e>
 80014ca:	ebb3 020e 	subs.w	r2, r3, lr
 80014ce:	eb64 0405 	sbc.w	r4, r4, r5
 80014d2:	fa04 f707 	lsl.w	r7, r4, r7
 80014d6:	fa22 f301 	lsr.w	r3, r2, r1
 80014da:	431f      	orrs	r7, r3
 80014dc:	40cc      	lsrs	r4, r1
 80014de:	e9c6 7400 	strd	r7, r4, [r6]
 80014e2:	2100      	movs	r1, #0
 80014e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e8:	4631      	mov	r1, r6
 80014ea:	4630      	mov	r0, r6
 80014ec:	e70c      	b.n	8001308 <__udivmoddi4+0xa4>
 80014ee:	468c      	mov	ip, r1
 80014f0:	e6eb      	b.n	80012ca <__udivmoddi4+0x66>
 80014f2:	4610      	mov	r0, r2
 80014f4:	e6ff      	b.n	80012f6 <__udivmoddi4+0x92>
 80014f6:	4543      	cmp	r3, r8
 80014f8:	d2e6      	bcs.n	80014c8 <__udivmoddi4+0x264>
 80014fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80014fe:	eb69 050c 	sbc.w	r5, r9, ip
 8001502:	3801      	subs	r0, #1
 8001504:	e7e0      	b.n	80014c8 <__udivmoddi4+0x264>
 8001506:	4628      	mov	r0, r5
 8001508:	e7d3      	b.n	80014b2 <__udivmoddi4+0x24e>
 800150a:	4611      	mov	r1, r2
 800150c:	e78c      	b.n	8001428 <__udivmoddi4+0x1c4>
 800150e:	4681      	mov	r9, r0
 8001510:	e7b9      	b.n	8001486 <__udivmoddi4+0x222>
 8001512:	4608      	mov	r0, r1
 8001514:	e773      	b.n	80013fe <__udivmoddi4+0x19a>
 8001516:	4608      	mov	r0, r1
 8001518:	e749      	b.n	80013ae <__udivmoddi4+0x14a>
 800151a:	f1ac 0c02 	sub.w	ip, ip, #2
 800151e:	443d      	add	r5, r7
 8001520:	e713      	b.n	800134a <__udivmoddi4+0xe6>
 8001522:	3802      	subs	r0, #2
 8001524:	443c      	add	r4, r7
 8001526:	e724      	b.n	8001372 <__udivmoddi4+0x10e>

08001528 <__aeabi_idiv0>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <XPT2046_TouchSelect>:

#define READ_X 0xD2
#define READ_Y 0x92

static void XPT2046_TouchSelect()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <XPT2046_TouchSelect+0x14>)
 8001538:	f004 fb87 	bl	8005c4a <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40011800 	.word	0x40011800

08001544 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <XPT2046_TouchUnselect+0x14>)
 8001550:	f004 fb7b 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40011800 	.word	0x40011800

0800155c <XPT2046_TouchGetCoordinates>:
{
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
}

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 8001566:	f7ff ffe1 	bl	800152c <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	77bb      	strb	r3, [r7, #30]
 800157a:	e037      	b.n	80015ec <XPT2046_TouchGetCoordinates+0x90>
    {


        nsamples++;
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	3301      	adds	r3, #1
 8001580:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	2201      	movs	r2, #1
 8001588:	4940      	ldr	r1, [pc, #256]	; (800168c <XPT2046_TouchGetCoordinates+0x130>)
 800158a:	4841      	ldr	r0, [pc, #260]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 800158c:	f007 f9e6 	bl	800895c <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	493d      	ldr	r1, [pc, #244]	; (8001694 <XPT2046_TouchGetCoordinates+0x138>)
 800159e:	483c      	ldr	r0, [pc, #240]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015a0:	f007 fb18 	bl	8008bd4 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2201      	movs	r2, #1
 80015aa:	493b      	ldr	r1, [pc, #236]	; (8001698 <XPT2046_TouchGetCoordinates+0x13c>)
 80015ac:	4838      	ldr	r0, [pc, #224]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015ae:	f007 f9d5 	bl	800895c <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2302      	movs	r3, #2
 80015be:	4935      	ldr	r1, [pc, #212]	; (8001694 <XPT2046_TouchGetCoordinates+0x138>)
 80015c0:	4833      	ldr	r0, [pc, #204]	; (8001690 <XPT2046_TouchGetCoordinates+0x134>)
 80015c2:	f007 fb07 	bl	8008bd4 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80015c6:	7b3b      	ldrb	r3, [r7, #12]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	7b7a      	ldrb	r2, [r7, #13]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	4413      	add	r3, r2
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80015d6:	7c3b      	ldrb	r3, [r7, #16]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	7c7a      	ldrb	r2, [r7, #17]
 80015dc:	4313      	orrs	r3, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	4413      	add	r3, r2
 80015e4:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	3301      	adds	r3, #1
 80015ea:	77bb      	strb	r3, [r7, #30]
 80015ec:	7fbb      	ldrb	r3, [r7, #30]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d9c4      	bls.n	800157c <XPT2046_TouchGetCoordinates+0x20>
    }

    XPT2046_TouchUnselect();
 80015f2:	f7ff ffa7 	bl	8001544 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d801      	bhi.n	8001600 <XPT2046_TouchGetCoordinates+0xa4>
        return false;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e041      	b.n	8001684 <XPT2046_TouchGetCoordinates+0x128>

    uint32_t raw_x = (avg_x / 16);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f640 5247 	movw	r2, #3399	; 0xd47
 800160c:	4293      	cmp	r3, r2
 800160e:	d802      	bhi.n	8001616 <XPT2046_TouchGetCoordinates+0xba>
 8001610:	f640 5348 	movw	r3, #3400	; 0xd48
 8001614:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f247 1248 	movw	r2, #29000	; 0x7148
 800161c:	4293      	cmp	r3, r2
 800161e:	d902      	bls.n	8001626 <XPT2046_TouchGetCoordinates+0xca>
 8001620:	f247 1348 	movw	r3, #29000	; 0x7148
 8001624:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f640 42e3 	movw	r2, #3299	; 0xce3
 8001632:	4293      	cmp	r3, r2
 8001634:	d802      	bhi.n	800163c <XPT2046_TouchGetCoordinates+0xe0>
 8001636:	f640 43e4 	movw	r3, #3300	; 0xce4
 800163a:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001642:	4293      	cmp	r3, r2
 8001644:	d902      	bls.n	800164c <XPT2046_TouchGetCoordinates+0xf0>
 8001646:	f247 5330 	movw	r3, #30000	; 0x7530
 800164a:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    //printf("raw_x = %d, raw_y = %d\r\n", (int) raw_x, (int) raw_y);

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f6a3 5348 	subw	r3, r3, #3400	; 0xd48
 8001652:	01db      	lsls	r3, r3, #7
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <XPT2046_TouchGetCoordinates+0x140>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0b5b      	lsrs	r3, r3, #13
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001670:	f5a3 6368 	sub.w	r3, r3, #3712	; 0xe80
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <XPT2046_TouchGetCoordinates+0x144>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0b5b      	lsrs	r3, r3, #13
 800167c:	b29a      	uxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	801a      	strh	r2, [r3, #0]

    return true;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08010eb4 	.word	0x08010eb4
 8001690:	2000b614 	.word	0x2000b614
 8001694:	08010eb8 	.word	0x08010eb8
 8001698:	08010ebc 	.word	0x08010ebc
 800169c:	51eb851f 	.word	0x51eb851f
 80016a0:	4e8b8659 	.word	0x4e8b8659

080016a4 <methodHandler>:
#include "numpad.h"
const uint16_t expImage[] ={0xd292,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc208,0xcc51,0xd693,0xd693,0xd4aa,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc628,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc838,0xd079,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd8c3,0xf17d,0xf59e,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xef65,0xd28a,0xd28a,0xd28a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc428,0xf17d,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd4a2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xc420,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xe93c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc841,0xd28a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca49,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf386,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc218,0xc000,0xc000,0xc000,0xc000,0xd8c3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe72c,0xd6b2,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xe93c,0xe734,0xf59e,0xf59e,0xed55,0xe51c,0xf59e,0xe0fb,0xf38e,0xdeeb,0xd6b2,0xe314,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xd6aa,0xd49a,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xed65,0xef6d,0xef6d,0xef6d,0xf59e,0xef75,0xc638,0xef6d,0xf396,0xc849,0xe93c,0xf59e,0xc218,0xce79,0xdce3,0xe104,0xcc61,0xd6b2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8ba,0xd4a2,0xd49a,0xd49a,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xc638,0xc638,0xc638,0xc638,0xf396,0xf59e,0xe51c,0xce71,0xd8c3,0xdacb,0xf59e,0xf59e,0xc008,0xe945,0xf59e,0xf59e,0xf38e,0xc638,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdcdb,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd292,0xca49,0xf396,0xf59e,0xf59e,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe734,0xd6aa,0xd49a,0xd49a,0xd49a,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xca49,0xc841,0xed65,0xf59e,0xf59e,0xc218,0xf396,0xf59e,0xf59e,0xf59e,0xd082,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe945,0xd6aa,0xd49a,0xd49a,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xdce3,0xe734,0xca59,0xf396,0xf59e,0xc008,0xd8c3,0xf59e,0xf59e,0xe93c,0xc630,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xd8b2,0xd4a2,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xc000,0xc000,0xc000,0xc000,0xd8c3,0xe314,0xcc61,0xf59e,0xf59e,0xd6aa,0xd8cb,0xf59e,0xc420,0xdceb,0xc849,0xca59,0xc630,0xe93c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe30c,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc420,0xf59e,0xf38e,0xed65,0xf596,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed65,0xf386,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc420,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8cb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca49,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe314,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc61,0xd282,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc210,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc420,0xf186,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xce69,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xdef3,0xf386,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xed5d,0xc000,0xd082,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xc420,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc841,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc428,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc638,0xd079,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd49a,0xe72c,0xe945,0xe734,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe93c,0xe51c,0xce71,0xd082,0xd28a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc420,0xe72c,0xe734,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc000,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd082,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe93c,0xc218,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca49,0xe0fb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc638,0xd28a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce69,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xe30c,0xd079,0xce69,0xdad3,0xf17d,0xf38e,0xd6b2,0xd4a2,0xd4a2,0xd4a2,0xd4a2,0xd4a2,0xe945,0xf396,0xf396,0xd8c3,0xe73c,0xf396,0xf396,0xf396,0xef7d,0xd4a2,0xd4a2,0xd4a2,0xd6b2,0xe72c,0xf38e,0xe945,0xd4a2,0xd4a2,0xd49a,0xd49a,0xd49a,0xd6aa,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xe30c,0xc638,0xe314,0xe734,0xd08a,0xd292,0xf396,0xe30c,0xe104,0xd6b2,0xc849,0xe104,0xe104,0xed6d,0xf396,0xeb4d,0xc210,0xd082,0xf39e,0xf396,0xf396,0xef6d,0xc218,0xe104,0xe104,0xdceb,0xc630,0xe314,0xed65,0xe104,0xe0fb,0xca51,0xd6b2,0xe0fb,0xe104,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf38e,0xd4aa,0xdce3,0xf396,0xf396,0xf186,0xd49a,0xf396,0xf396,0xf39e,0xe524,0xce79,0xf59e,0xf59e,0xf59e,0xf59e,0xd4aa,0xdef3,0xc630,0xef75,0xf59e,0xf59e,0xef75,0xc630,0xf59e,0xf59e,0xf39e,0xe72c,0xcc69,0xf396,0xf396,0xf396,0xd079,0xe314,0xf38e,0xf38e,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf38e,0xf38e,0xf38e,0xe104,0xc841,0xe93c,0xf396,0xf396,0xf396,0xf39e,0xf59e,0xf59e,0xe524,0xce79,0xf5ae,0xf7b6,0xf7be,0xf7b6,0xc428,0xf7be,0xdce3,0xdceb,0xf9cf,0xf9c7,0xf38e,0xc630,0xf5ae,0xf5a6,0xf59e,0xe73c,0xcc61,0xf39e,0xf396,0xf396,0xd082,0xe314,0xf396,0xf396,0xf38e,0xf38e,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf38e,0xf38e,0xf38e,0xf396,0xdefb,0xca59,0xc428,0xd4aa,0xef6d,0xf59e,0xf59e,0xf59e,0xe52c,0xd082,0xf7be,0xf9c7,0xfbd7,0xe31c,0xd6ba,0xfff7,0xf9c7,0xc638,0xfde7,0xfddf,0xf5a6,0xc420,0xe945,0xe73c,0xe51c,0xc849,0xe10c,0xf59e,0xf39e,0xf396,0xd082,0xe31c,0xf396,0xf396,0xf38e,0xf38e,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf38e,0xf38e,0xf38e,0xf396,0xf396,0xf396,0xef75,0xd8c3,0xc638,0xf396,0xf59e,0xf59e,0xe524,0xce79,0xf5ae,0xf7b6,0xf7be,0xca51,0xed6d,0xfbcf,0xfbcf,0xd082,0xe73c,0xf9c7,0xf38e,0xc210,0xd29a,0xd292,0xc008,0xe51c,0xf59e,0xf39e,0xf396,0xf396,0xd082,0xe314,0xf396,0xf396,0xf38e,0xf38e,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf38e,0xdef3,0xf186,0xf396,0xf396,0xf396,0xc628,0xeb5d,0xf396,0xf39e,0xe524,0xce79,0xf59e,0xf59e,0xe945,0xc000,0xc841,0xc841,0xc841,0xc420,0xce71,0xf59e,0xef75,0xc630,0xf59e,0xf59e,0xd29a,0xdceb,0xf396,0xf396,0xf396,0xf396,0xd079,0xe314,0xf38e,0xf38e,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xce69,0xdad3,0xf38e,0xf38e,0xe93c,0xc420,0xf17d,0xf396,0xf396,0xe51c,0xce79,0xf396,0xf396,0xd29a,0xdcdb,0xf17d,0xf17d,0xf17d,0xef7d,0xc420,0xed65,0xef6d,0xc628,0xf396,0xf396,0xef6d,0xc628,0xef6d,0xf396,0xf396,0xf38e,0xd079,0xe314,0xf38e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xeb55,0xcc59,0xc428,0xc841,0xc628,0xe51c,0xf38e,0xf38e,0xf38e,0xe31c,0xce79,0xf38e,0xef75,0xc218,0xef75,0xf396,0xf396,0xf396,0xf396,0xd6ba,0xd6ba,0xed6d,0xc428,0xf38e,0xf38e,0xf38e,0xdadb,0xd292,0xf38e,0xf38e,0xf18e,0xce79,0xe30c,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xed65,0xeb4d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf18e,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf186,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef75,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xef6d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xdcdb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed65,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xca51,0xd282,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xed55,0xed55,0xed55,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed55,0xed55,0xed55,0xed55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc210,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc418,0xe734,0xe734,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb55,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd49a,0xce69,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xd8c3,0xe734,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xeb45,0xeb45,0xeb45,0xeb45,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb45,0xeb45,0xeb45,0xeb45,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe314,0xc000,0xd082,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xc420,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc838,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc628,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc838,0xd079,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd8c3,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xef65,0xd28a,0xd28a,0xd28a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc428,0xf17d,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd4a2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xc420,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xe93c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc841,0xd28a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca49,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xca49,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe314,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc61,0xd282,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc210,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc420,0xf186,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xce69,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xdef3,0xf386,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xed5d,0xc000,0xd082,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xc420,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc210,0xc841,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc000,0xe314,0xe93c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xd8ba,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc000,0xe314,0xe93c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xd8ba,0xcc61,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd6b2,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd079,0xc428,0xc428,0xc428,0xc428,0xc428,0xc428,0xd8c3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe72c,0xe51c,0xc428,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd6b2,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8cb,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xdef3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe72c,0xe51c,0xc428,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc000,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xcc61,0xe30c,0xe30c,0xe30c,0xe30c,0xe30c,0xe72c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xd28a,0xd49a,0xd49a,0xd49a,0xc000,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc630,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xdef3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xd28a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd079,0xce71,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8c3,0xcc61,0xd49a,0xd49a,0xd079,0xce71,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8c3,0xcc61,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce69,0xe524,0xe524,0xe524,0xe524,0xe524,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc000,0xc210,0xc210,0xc210,0xc210,0xc210,0xe72c,0xe945,0xe945,0xe945,0xe524,0xe524,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc638,0xd4a2,0xd4a2,0xd4a2,0xd4a2,0xd4a2,0xe934,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe524,0xc630,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc428,0xce79,0xce79,0xce79,0xce79,0xce79,0xe734,0xe945,0xd6b2,0xcc69,0xd49a,0xe93c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdeeb,0xc638,0xc849,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8c3,0xd292,0xe93c,0xd6aa,0xd4a2,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce71,0xe734,0xe734,0xe734,0xe734,0xe734,0xe93c,0xe945,0xe51c,0xe93c,0xd082,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe314,0xe72c,0xe945,0xdce3,0xd082,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xcc61,0xe945,0xe945,0xe945,0xd082,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xcc69,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe72c,0xe945,0xe945,0xe72c,0xc838,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd082,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xcc61,0xe945,0xe314,0xc841,0xe0fb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd082,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe51c,0xc841,0xe314,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd082,0xdad3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xce71,0xc420,0xc841,0xc841,0xd49a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd082,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdce3,0xca51,0xd49a,0xd49a,0xce71,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdce3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc008,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc69,0xd079,0xd49a,0xd49a,0xd49a,0xc008,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc69,0xd079,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xd4a2,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe514,0xc630,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xd4a2,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe72c,0xe514,0xc630,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xce79,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd49a,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xce79,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe314,0xd49a,0xce69,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc630,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xc008,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc841,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc630,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc841,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc000,0xe314,0xe93c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xd8ba,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc000,0xe314,0xe93c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xd8ba,0xcc61,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd6b2,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd4aa,0xd292,0xd292,0xd292,0xd292,0xd292,0xdacb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe72c,0xe51c,0xc428,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd6b2,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe72c,0xe51c,0xc428,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc000,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xcc61,0xd28a,0xd28a,0xd28a,0xd28a,0xdacb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xd28a,0xd49a,0xd49a,0xd49a,0xc000,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xd28a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd079,0xce71,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xdcdb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8c3,0xcc61,0xd49a,0xd49a,0xd079,0xce71,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8c3,0xcc61,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xdcdb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xce69,0xd4a2,0xd4a2,0xd4a2,0xd4a2,0xe30c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd292,0xd8ba,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8ba,0xd292,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xca51,0xce79,0xce79,0xce79,0xce79,0xe104,0xe945,0xe945,0xe0fb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdeeb,0xc420,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xdeeb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xdcdb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd292,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc630,0xdcdb,0xe945,0xe945,0xe945,0xdcdb,0xc630,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xdcdb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe0fb,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd8ba,0xca51,0xe945,0xe945,0xe945,0xca51,0xd8ba,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xd8c3,0xe51c,0xe51c,0xe51c,0xe51c,0xe524,0xe945,0xe945,0xc849,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xc210,0xe314,0xe945,0xe314,0xc210,0xe734,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc420,0xc000,0xc000,0xc000,0xc000,0xc000,0xc420,0xe945,0xe945,0xc849,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xd28a,0xd08a,0xe945,0xd08a,0xd292,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe51c,0xc210,0xe524,0xc210,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc61,0xc841,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xc849,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdeeb,0xc000,0xdef3,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xd49a,0xce71,0xd28a,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdef3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd082,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdce3,0xca51,0xd49a,0xd49a,0xce71,0xcc61,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xdce3,0xca51,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xc008,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc69,0xd079,0xd49a,0xd49a,0xd49a,0xc008,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xcc69,0xd079,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xd4a2,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe514,0xc630,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xd4a2,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe514,0xc630,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xce79,0xe51c,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe314,0xd49a,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xce79,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe724,0xe524,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe945,0xe734,0xe314,0xd49a,0xce69,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd4aa,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc630,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc841,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xc630,0xc210,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc000,0xc841,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xc839,0xd89b,0xdec4,0xdec4,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xd292,0xcc59,0xc638,0xc638,0xdec4,0xdec4,0xc638,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xca51,0xca41,0xd8a3,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd292,0xca59,0xc841,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xca49,0xca51,0xcc61,0xd492,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd292,0xca59,0xc841,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xca49,0xca51,0xcc61,0xd492,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc630,0xe51c,0xed5d,0xeb55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xe945,0xe0fb,0xc218,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc630,0xe51c,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xe945,0xe0fb,0xc218,0xce69,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd8ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc841,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xd8ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc841,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd492,0xc418,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed65,0xe945,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc841,0xd49a,0xd49a,0xd49a,0xd492,0xc418,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe31c,0xe104,0xe104,0xe30c,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc841,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xdad3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xeb55,0xca51,0xc630,0xca59,0xc218,0xd292,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xdeeb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xd082,0xd49a,0xd49a,0xce69,0xdad3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xce71,0xd082,0xd082,0xc428,0xd6aa,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xd082,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc428,0xe30c,0xf59e,0xf59e,0xf38e,0xd4a2,0xd079,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xdeeb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xca59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xf59e,0xf186,0xc428,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4aa,0xdacb,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc838,0xe945,0xe104,0xef65,0xf59e,0xf59e,0xf59e,0xdefb,0xef75,0xf59e,0xe734,0xd4aa,0xd6aa,0xe93c,0xf59e,0xf59e,0xd8c3,0xdeeb,0xf59e,0xf59e,0xe734,0xd6aa,0xd6aa,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xf59e,0xf59e,0xd082,0xe30c,0xf59e,0xf17d,0xd4a2,0xc841,0xcc69,0xe72c,0xf59e,0xf59e,0xeb55,0xce71,0xc838,0xd29a,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc638,0xed5d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xf17d,0xdadb,0xd6ba,0xf59e,0xf59e,0xed65,0xc630,0xf596,0xdef3,0xc638,0xdefb,0xdeeb,0xc630,0xe314,0xf59e,0xd8c3,0xdeeb,0xf59e,0xe104,0xca49,0xe51c,0xe51c,0xc841,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xf59e,0xf386,0xc428,0xeb4d,0xf396,0xc849,0xdcdb,0xf17d,0xe945,0xc638,0xe945,0xf59e,0xca59,0xe0fb,0xf38e,0xd6ba,0xd6b2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc218,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xc428,0xf396,0xf59e,0xd8cb,0xdad3,0xf396,0xc420,0xef6d,0xf59e,0xf59e,0xeb4d,0xc630,0xf59e,0xd8c3,0xdeeb,0xf59e,0xc630,0xef75,0xf59e,0xf59e,0xe945,0xcc61,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xce79,0xd292,0xd292,0xc630,0xd6aa,0xf59e,0xe314,0xd082,0xf59e,0xf59e,0xf59e,0xe314,0xd08a,0xf59e,0xca59,0xdce3,0xf396,0xf596,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc638,0xed55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xef75,0xf59e,0xd08a,0xe314,0xf596,0xc630,0xef75,0xed65,0xca49,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xf59e,0xd8c3,0xdeeb,0xf17d,0xc210,0xd292,0xd292,0xd292,0xd292,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xdce3,0xe30c,0xce79,0xd6b2,0xf59e,0xf59e,0xdadb,0xc630,0xcc61,0xcc61,0xcc61,0xca51,0xc849,0xf59e,0xed55,0xce71,0xc420,0xd4a2,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd6b2,0xd8ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc630,0xeb4d,0xf59e,0xe734,0xce71,0xe524,0xd08a,0xf59e,0xf17d,0xc428,0xf59e,0xf59e,0xf59e,0xf38e,0xdcdb,0xf59e,0xd8c3,0xdeeb,0xf38e,0xc420,0xef75,0xef75,0xef75,0xef75,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xef6d,0xc420,0xef75,0xf59e,0xdefb,0xd4aa,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xd6b2,0xd08a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xc428,0xdef3,0xf596,0xf59e,0xf186,0xd292,0xd08a,0xf59e,0xf59e,0xf59e,0xc841,0xca59,0xe734,0xf59e,0xf59e,0xcc69,0xdce3,0xf59e,0xf59e,0xd8c3,0xd082,0xf59e,0xd8c3,0xdeeb,0xf59e,0xce79,0xe104,0xf59e,0xf59e,0xe0fb,0xd8c3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xf59e,0xdacb,0xd29a,0xf59e,0xef75,0xc428,0xed5d,0xf59e,0xf59e,0xd4aa,0xdeeb,0xf596,0xc638,0xf186,0xf59e,0xe734,0xca59,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed65,0xce69,0xc218,0xc841,0xc218,0xd6b2,0xf38e,0xf59e,0xf59e,0xf59e,0xdcdb,0xc838,0xf59e,0xf59e,0xf59e,0xef6d,0xca59,0xc630,0xc428,0xcc61,0xf17d,0xf59e,0xd8c3,0xdeeb,0xf59e,0xef75,0xcc61,0xcc61,0xca59,0xcc69,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed5d,0xf59e,0xf59e,0xf38e,0xc428,0xe945,0xf59e,0xe524,0xc638,0xcc69,0xc638,0xd49a,0xf396,0xf59e,0xdce3,0xc630,0xce71,0xc630,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xed5d,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4aa,0xdef3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf596,0xed65,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xed5d,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xd8ba,0xca59,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf386,0xe104,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd6b2,0xce71,0xd49a,0xd49a,0xca49,0xdcdb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd6b2,0xce71,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xd082,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xca51,0xd28a,0xd49a,0xd49a,0xd079,0xd082,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xca51,0xd28a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xed5d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xc638,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xed5d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xc638,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc428,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc428,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xcc61,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc000,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce71,0xc000,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc000,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce71,0xc000,0xce69,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd492,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd28a,0xd492,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc420,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc428,0xc210,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xc420,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc841,0xc428,0xc210,0xcc61,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xdcdb,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xdeeb,0xcc69,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xdcdb,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xdeeb,0xcc69,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xdef3,0xce69,0xd49a,0xd49a,0xd49a,0xd49a,0xc849,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xdef3,0xce69,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd282,0xcc61,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xe93c,0xe30c,0xe734,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc008,0xd49a,0xd49a,0xd49a,0xd282,0xcc61,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xe734,0xdefb,0xe314,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xe0fb,0xf59e,0xf386,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc008,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe945,0xc638,0xca51,0xd292,0xca59,0xc630,0xe93c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xdacb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xd079,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xeb4d,0xc638,0xca59,0xd4a2,0xd079,0xc218,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xd079,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc420,0xe51c,0xf59e,0xf59e,0xf59e,0xe72c,0xc420,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xc420,0xe30c,0xf59e,0xf59e,0xf59e,0xed5d,0xc428,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd6b2,0xd6ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8cb,0xd4a2,0xf59e,0xd8c3,0xf38e,0xf59e,0xf59e,0xe945,0xe30c,0xf59e,0xe524,0xe72c,0xf59e,0xf59e,0xe734,0xd28a,0xce79,0xdef3,0xf59e,0xf59e,0xd6aa,0xc008,0xd6aa,0xdadb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8c3,0xd4a2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe30c,0xcc61,0xf59e,0xf59e,0xe734,0xd08a,0xcc61,0xd8c3,0xf38e,0xf59e,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc849,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xeb4d,0xc638,0xf59e,0xc420,0xf186,0xf59e,0xf59e,0xe104,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xe51c,0xc841,0xe72c,0xeb4d,0xd082,0xd6ba,0xf59e,0xe30c,0xc210,0xe30c,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xca59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xf59e,0xe72c,0xc638,0xe72c,0xed65,0xd8ba,0xcc69,0xf59e,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc428,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xc420,0xf59e,0xc420,0xf186,0xf59e,0xf59e,0xe104,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xc849,0xeb4d,0xf59e,0xf59e,0xf38e,0xc428,0xf186,0xf38e,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc841,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc59,0xe734,0xf59e,0xf59e,0xf59e,0xca59,0xe93c,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xca59,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe93c,0xc849,0xf59e,0xc420,0xf186,0xf59e,0xf59e,0xe104,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xc008,0xd082,0xd082,0xd082,0xd082,0xc218,0xe945,0xf38e,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce69,0xe314,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xe72c,0xf59e,0xc218,0xce69,0xce71,0xce71,0xce71,0xc428,0xe0fb,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xd28a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd49a,0xd8c3,0xf59e,0xc428,0xf17d,0xf59e,0xf59e,0xdce3,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xc420,0xef6d,0xf186,0xf186,0xf186,0xf186,0xf596,0xf38e,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdeeb,0xcc69,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdadb,0xd082,0xf59e,0xc638,0xed5d,0xf38e,0xf38e,0xf38e,0xf38e,0xf596,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xc638,0xd8cb,0xf38e,0xf59e,0xf396,0xdad3,0xc630,0xf186,0xf59e,0xcc61,0xe30c,0xf59e,0xf38e,0xca49,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xd4aa,0xd8c3,0xf59e,0xf59e,0xe945,0xce69,0xf596,0xf59e,0xc210,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xca51,0xd4a2,0xf186,0xf59e,0xf59e,0xe104,0xc420,0xed5d,0xf59e,0xd8c3,0xd4a2,0xf59e,0xf59e,0xed65,0xca59,0xf17d,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xd082,0xc218,0xc638,0xc218,0xc428,0xd8c3,0xf59e,0xf59e,0xe93c,0xc420,0xca59,0xc849,0xd6b2,0xd4aa,0xf59e,0xdad3,0xdadb,0xf59e,0xf38e,0xd082,0xc849,0xcc61,0xc841,0xeb4d,0xf59e,0xf59e,0xdacb,0xc420,0xca59,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xd49a,0xc218,0xc638,0xc218,0xca59,0xeb4d,0xf59e,0xf59e,0xf396,0xd29a,0xc841,0xcc69,0xc630,0xe524,0xf59e,0xf186,0xc218,0xf59e,0xef6d,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf386,0xed5d,0xf186,0xf17d,0xc638,0xe31c,0xf59e,0xf59e,0xf38e,0xed5d,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf386,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xed5d,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xed5d,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe51c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xd49a,0xd49a,0xcc59,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd6ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xd49a,0xd49a,0xce71,0xd6ba,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xd079,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd292,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc218,0xd49a,0xd49a,0xd49a,0xd292,0xc630,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xc218,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xd6ba,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd079,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xd6ba,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd079,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd292,0xcc61,0xe31c,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xe314,0xc000,0xd6a2,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd292,0xcc61,0xe31c,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xf17d,0xe314,0xc000,0xd6a2,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd28a,0xcc61,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd28a,0xcc61,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xc630,0xcc61,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdeeb,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xe51c,0xdcd3,0xd4a2,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd4a2,0xe945,0xf17d,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xf38e,0xef6d,0xe93c,0xdacb,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdad3,0xeb45,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf596,0xeb45,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xe945,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe945,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdac3,0xed5d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xdadb,0xca59,0xc630,0xce71,0xe524,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd082,0xce71,0xce71,0xce79,0xdadb,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xeb55,0xd8ba,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf175,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xca59,0xd29a,0xeb4d,0xf17d,0xe72c,0xc849,0xdce3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdce3,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xe72c,0xe93c,0xe72c,0xd082,0xd29a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xd292,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xc420,0xef6d,0xf186,0xed5d,0xf59e,0xf59e,0xf59e,0xeb4d,0xf396,0xf596,0xe945,0xf59e,0xe93c,0xf186,0xef65,0xef75,0xf17d,0xe945,0xf59e,0xf59e,0xed65,0xe104,0xe72c,0xf59e,0xf59e,0xf59e,0xe945,0xf396,0xe524,0xe30c,0xf186,0xf59e,0xed65,0xcc69,0xdce3,0xe93c,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf186,0xf59e,0xf59e,0xf38e,0xc210,0xf596,0xf59e,0xf17d,0xe30c,0xe51c,0xf38e,0xed5d,0xf17d,0xf59e,0xeb4d,0xf38e,0xe72c,0xe30c,0xf17d,0xf59e,0xf59e,0xf59e,0xf386,0xe31c,0xe314,0xf17d,0xef6d,0xef75,0xf59e,0xf59e,0xf186,0xe314,0xe314,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc849,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe72c,0xed65,0xe734,0xd079,0xf59e,0xf59e,0xf59e,0xc838,0xef75,0xf186,0xc428,0xd08a,0xcc61,0xef75,0xd8c3,0xd49a,0xc838,0xdcdb,0xf59e,0xdcdb,0xca49,0xdad3,0xd292,0xce71,0xf396,0xf59e,0xc218,0xd08a,0xd6ba,0xd49a,0xc638,0xf186,0xe104,0xc630,0xcc69,0xd292,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf186,0xf59e,0xf59e,0xf186,0xc210,0xf59e,0xe734,0xc428,0xd6aa,0xd8ba,0xca59,0xcc69,0xe524,0xf59e,0xc838,0xd082,0xd6b2,0xd4aa,0xc428,0xef75,0xf59e,0xed5d,0xc630,0xd49a,0xd8c3,0xca59,0xd082,0xdce3,0xf59e,0xe945,0xc638,0xd8c3,0xd8c3,0xc841,0xed5d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf386,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe734,0xd079,0xf59e,0xf59e,0xf59e,0xc838,0xef75,0xf186,0xc000,0xe104,0xf59e,0xf59e,0xd8c3,0xc841,0xf186,0xf59e,0xed65,0xc838,0xf38e,0xf59e,0xf59e,0xd4aa,0xdef3,0xf59e,0xc218,0xe524,0xf59e,0xf59e,0xd082,0xe30c,0xf59e,0xd08a,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xe104,0xe314,0xe30c,0xcc69,0xd6ba,0xf59e,0xc630,0xe945,0xf59e,0xf59e,0xef75,0xc420,0xe524,0xf59e,0xc838,0xe104,0xf59e,0xf59e,0xd4a2,0xdeeb,0xf59e,0xce69,0xe30c,0xf59e,0xf59e,0xf38e,0xc849,0xdce3,0xf59e,0xc849,0xeb4d,0xf59e,0xf59e,0xe524,0xce79,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc630,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xf38e,0xe734,0xd079,0xf59e,0xf59e,0xf59e,0xc838,0xef75,0xf186,0xc218,0xf59e,0xf59e,0xf59e,0xd8c3,0xdce3,0xf59e,0xf59e,0xe10c,0xca51,0xdacb,0xdacb,0xdacb,0xd28a,0xd292,0xf59e,0xc218,0xf396,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xd08a,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xd49a,0xd4a2,0xc420,0xdce3,0xf59e,0xef65,0xc849,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xe524,0xf59e,0xc838,0xef6d,0xf59e,0xf59e,0xdce3,0xdad3,0xf59e,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xdcdb,0xdce3,0xf186,0xc210,0xdacb,0xdacb,0xdacb,0xd8cb,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xdad3,0xf59e,0xf59e,0xf59e,0xf59e,0xf596,0xc838,0xe945,0xe734,0xce79,0xf59e,0xf59e,0xf59e,0xc428,0xef75,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xf59e,0xe314,0xd079,0xe945,0xe945,0xe945,0xe945,0xed65,0xf59e,0xc218,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xd08a,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf186,0xf59e,0xe0fb,0xd08a,0xf59e,0xef75,0xc638,0xf59e,0xf59e,0xf59e,0xf59e,0xd28a,0xe524,0xf59e,0xc838,0xef75,0xf59e,0xf59e,0xdce3,0xdad3,0xf59e,0xc218,0xf38e,0xf59e,0xf59e,0xf59e,0xdacb,0xdce3,0xf38e,0xc218,0xe945,0xe945,0xe945,0xe945,0xeb4d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xc428,0xe30c,0xf59e,0xf59e,0xf38e,0xd49a,0xd082,0xf59e,0xed65,0xc428,0xf38e,0xf59e,0xe72c,0xc000,0xef75,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xf59e,0xf17d,0xc630,0xef6d,0xf59e,0xf59e,0xd6ba,0xe734,0xf59e,0xc218,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xd4a2,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf186,0xf59e,0xf59e,0xca51,0xe72c,0xf59e,0xca59,0xe0fb,0xf59e,0xf59e,0xe93c,0xc210,0xe524,0xf59e,0xc838,0xef75,0xf59e,0xf59e,0xdce3,0xdad3,0xf59e,0xd29a,0xd8c3,0xf59e,0xf59e,0xed5d,0xc428,0xdce3,0xf59e,0xce71,0xe314,0xf59e,0xf59e,0xe314,0xdad3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xcc61,0xc428,0xca51,0xc420,0xd6aa,0xf38e,0xf59e,0xf59e,0xd6b2,0xc630,0xcc69,0xd292,0xc638,0xef75,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xf59e,0xf59e,0xe72c,0xc841,0xce79,0xc849,0xd6b2,0xf59e,0xf59e,0xc218,0xf59e,0xf59e,0xf59e,0xd8c3,0xdef3,0xf59e,0xe945,0xc420,0xca51,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xf186,0xf59e,0xf59e,0xe93c,0xc838,0xf396,0xed65,0xca51,0xca49,0xcc59,0xd28a,0xd08a,0xe524,0xf59e,0xc838,0xef75,0xf59e,0xf59e,0xdce3,0xdad3,0xf59e,0xf186,0xce71,0xc841,0xcc61,0xcc69,0xd6aa,0xdce3,0xf59e,0xef75,0xcc61,0xcc69,0xcc61,0xcc61,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xed65,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xed65,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xf17d,0xf17d,0xef75,0xf59e,0xd4aa,0xe0fb,0xf59e,0xf59e,0xf59e,0xef75,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe10c,0xcc61,0xf17d,0xf59e,0xe734,0xc630,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdce3,0xc638,0xc428,0xcc61,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdcdb,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xdcdb,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xdce3,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xdad3,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd6aa,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe945,0xd8b2,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xe0f3,0xf175,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xe72c,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xe72c,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xe72c,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xe104,0xe945,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xeb4d,0xe945,0xdeeb,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd8b2,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc841,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc841,0xce69,0xd292,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd4a2,0xc420,0xe51c,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xdce3,0xc628,0xce71,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xc630,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xc210,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc000,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xe51c,0xdef3,0xe72c,0xf396,0xf59e,0xf59e,0xf396,0xe93c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdefb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd6b2,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe72c,0xc428,0xce71,0xd4a2,0xcc59,0xc841,0xed55,0xf59e,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd292,0xd079,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xc420,0xe93c,0xf59e,0xf59e,0xf59e,0xe104,0xc630,0xf38e,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd49a,0xdadb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd079,0xe0fb,0xf186,0xc428,0xe93c,0xce79,0xce71,0xe72c,0xf59e,0xf59e,0xf59e,0xe104,0xce71,0xce71,0xe314,0xe314,0xe734,0xf59e,0xdceb,0xe945,0xd4a2,0xcc61,0xdad3,0xf596,0xf59e,0xe51c,0xe524,0xd8cb,0xcc61,0xd6b2,0xf186,0xf59e,0xf59e,0xef6d,0xd4a2,0xcc61,0xd4aa,0xef75,0xf59e,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc638,0xeb55,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xf396,0xf186,0xc210,0xd08a,0xeb4d,0xe31c,0xc218,0xef75,0xf59e,0xdce3,0xca49,0xe72c,0xeb4d,0xd49a,0xc838,0xdef3,0xf59e,0xce71,0xc849,0xe524,0xeb4d,0xca59,0xdef3,0xf59e,0xd8c3,0xc630,0xe0fb,0xeb55,0xd292,0xd4a2,0xf59e,0xf17d,0xc638,0xe0fb,0xed65,0xdeeb,0xc849,0xf396,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc420,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xc000,0xf17d,0xf59e,0xf59e,0xd28a,0xe314,0xf596,0xc420,0xef75,0xf59e,0xf59e,0xf59e,0xcc69,0xdef3,0xf59e,0xce71,0xdef3,0xf59e,0xf59e,0xe51c,0xd082,0xf59e,0xd8c3,0xd4a2,0xf59e,0xf59e,0xef6d,0xc638,0xf59e,0xdce3,0xd8c3,0xf59e,0xf59e,0xf59e,0xd292,0xe314,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc849,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xed5d,0xed5d,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd4a2,0xe10c,0xef6d,0xc841,0xf59e,0xf59e,0xf59e,0xf59e,0xdad3,0xdef3,0xf59e,0xce71,0xe734,0xf59e,0xf59e,0xe734,0xce79,0xf59e,0xd8c3,0xdce3,0xf59e,0xf59e,0xf186,0xc428,0xf59e,0xd49a,0xc849,0xce71,0xce71,0xce71,0xc638,0xdad3,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd8cb,0xd49a,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xca51,0xe524,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd4a2,0xe10c,0xf386,0xc420,0xf396,0xf59e,0xf59e,0xf59e,0xd4aa,0xdef3,0xf59e,0xce71,0xe734,0xf59e,0xf59e,0xe734,0xce79,0xf59e,0xd8c3,0xdceb,0xf59e,0xf59e,0xf186,0xc428,0xf59e,0xd8ba,0xdeeb,0xf38e,0xf38e,0xf38e,0xf38e,0xf396,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xc630,0xdadb,0xf396,0xf59e,0xf386,0xd4a2,0xce69,0xf59e,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd4a2,0xe10c,0xf59e,0xd079,0xd8cb,0xf59e,0xf59e,0xe93c,0xc218,0xdef3,0xf59e,0xce71,0xe734,0xf59e,0xf59e,0xe734,0xce79,0xf59e,0xd8c3,0xdceb,0xf59e,0xf59e,0xf186,0xc428,0xf59e,0xe945,0xc849,0xf186,0xf59e,0xf186,0xcc69,0xed5d,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xce79,0xc218,0xc638,0xc210,0xd49a,0xf186,0xf59e,0xf186,0xc428,0xf59e,0xf59e,0xf59e,0xd4a2,0xe10c,0xf59e,0xef75,0xcc61,0xc630,0xca49,0xce71,0xd4aa,0xdef3,0xf59e,0xce71,0xe734,0xf59e,0xf59e,0xe734,0xce79,0xf59e,0xd8c3,0xdceb,0xf59e,0xf59e,0xf186,0xc428,0xf59e,0xf59e,0xdef3,0xc630,0xce69,0xc630,0xe0fb,0xf59e,0xf596,0xc218,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xed5d,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xed5d,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd6aa,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdadb,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd28a,0xc849,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xd082,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xe0fb,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xc628,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xc849,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc000,0xce71,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce71,0xc000,0xce71,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc841,0xce69,0xd292,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca59,0xc841,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xc849,0xca49,0xc849,0xcc59,0xd292,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd4a2,0xc420,0xe51c,0xed55,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xdce3,0xc628,0xce71,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd4a2,0xc420,0xe31c,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xed5d,0xe30c,0xc630,0xd28a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xc630,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xc210,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xc630,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xeb55,0xdad3,0xcc61,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc000,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe72c,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe72c,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xe72c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc000,0xd49a,0xd49a,0xd49a,0xd49a,0xc000,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe51c,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xe104,0xed65,0xf59e,0xf59e,0xf59e,0xf59e,0xeb4d,0xe31c,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xc210,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce71,0xd6aa,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xdadb,0xf59e,0xf59e,0xf59e,0xf59e,0xe524,0xca51,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd292,0xd079,0xd49a,0xd49a,0xce71,0xd6aa,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf186,0xca59,0xdef3,0xf59e,0xf59e,0xf59e,0xf59e,0xd08a,0xdef3,0xf59e,0xf59e,0xf59e,0xf596,0xd082,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd6ba,0xce71,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xca61,0xed65,0xf59e,0xf59e,0xf396,0xce79,0xca59,0xef6d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe31c,0xd4aa,0xd082,0xf59e,0xf59e,0xf59e,0xf59e,0xdadb,0xd6b2,0xf59e,0xf59e,0xf59e,0xe72c,0xcc69,0xf38e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xdce3,0xd6b2,0xf59e,0xf59e,0xe104,0xd6ba,0xce79,0xef6d,0xf59e,0xf396,0xdefb,0xd292,0xd29a,0xe30c,0xf59e,0xf59e,0xf59e,0xed5d,0xd6b2,0xd08a,0xd8c3,0xed65,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4aa,0xe945,0xd292,0xed5d,0xf59e,0xf59e,0xf59e,0xe524,0xcc69,0xf59e,0xf59e,0xf59e,0xd292,0xdefb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef6d,0xd082,0xe945,0xf186,0xcc69,0xef6d,0xce79,0xef6d,0xf59e,0xd8cb,0xd6ba,0xed5d,0xeb55,0xd4a2,0xdeeb,0xf59e,0xef75,0xce71,0xe524,0xf17d,0xe93c,0xd4a2,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xcc71,0xf596,0xe0fb,0xdceb,0xf59e,0xf59e,0xf59e,0xef6d,0xca51,0xef6d,0xf59e,0xe945,0xcc61,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef75,0xe72c,0xd292,0xdadb,0xdce3,0xf59e,0xce79,0xef6d,0xef75,0xce71,0xf396,0xf59e,0xf59e,0xf186,0xcc69,0xf396,0xdceb,0xdefb,0xf59e,0xf59e,0xf59e,0xeb4d,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe314,0xdad3,0xf59e,0xef6d,0xce79,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xe52c,0xf59e,0xd4aa,0xdeeb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef75,0xf59e,0xd4a2,0xcc69,0xf186,0xf59e,0xce79,0xef6d,0xe945,0xd6b2,0xf59e,0xf59e,0xf59e,0xf59e,0xd292,0xef6d,0xd6b2,0xe945,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd4a2,0xe93c,0xf59e,0xf59e,0xd08a,0xeb55,0xf59e,0xf59e,0xf59e,0xd8bb,0xdce3,0xeb55,0xcc61,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef75,0xf59e,0xed65,0xe945,0xf59e,0xf59e,0xce79,0xef6d,0xed5d,0xd08a,0xf59e,0xf59e,0xf59e,0xf596,0xcc71,0xf186,0xdad3,0xe524,0xf59e,0xf59e,0xf59e,0xef75,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf17d,0xcc69,0xf396,0xf59e,0xf59e,0xdef3,0xdce3,0xf59e,0xf59e,0xf59e,0xe10c,0xd29a,0xd6ba,0xdce3,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce79,0xef6d,0xf59e,0xd08a,0xe314,0xf59e,0xf59e,0xdef3,0xd6aa,0xf59e,0xe945,0xd082,0xf17d,0xf59e,0xf38e,0xd8c3,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe30c,0xd8cb,0xf396,0xf396,0xf396,0xeb55,0xce79,0xf59e,0xf59e,0xf59e,0xeb55,0xca59,0xca61,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xcc71,0xef75,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce79,0xef6d,0xf59e,0xef6d,0xd292,0xce79,0xce71,0xd4a2,0xf17d,0xf59e,0xf59e,0xe10c,0xcc69,0xd29a,0xd082,0xe52c,0xcc71,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xd29a,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xeb4d,0xf59e,0xf59e,0xf396,0xca61,0xdadb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xf17d,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xef6d,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef6d,0xf186,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc61,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xd49a,0xd49a,0xcc59,0xe104,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xe0fb,0xcc61,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xce69,0xdcdb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdadb,0xce69,0xd49a,0xd49a,0xce69,0xdcdb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdadb,0xce69,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xce69,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xd082,0xd49a,0xd49a,0xd28a,0xc849,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xce71,0xd082,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xe0fb,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf38e,0xef75,0xc628,0xd49a,0xd49a,0xd49a,0xd49a,0xd079,0xe0fb,0xf396,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xef75,0xc628,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca59,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xc849,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xc841,0xe734,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xf59e,0xdef3,0xc849,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc218,0xce71,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce71,0xc000,0xce71,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xca51,0xc000,0xce71,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce79,0xce71,0xc000,0xce71,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xcc59,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd492,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd082,0xd49a,0xd49a,0xd49a,0xd49a,0xd49a,0xcc59,0xd27a,0xdec4,0xdec4,0xc420,0xd49a,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xca51,0xc630,0xc210,0xc839,0xc839,
};

void methodHandler() {
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

	selectedParameter = 0;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <methodHandler+0x14>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000a50d 	.word	0x2000a50d

080016bc <rangeHandler>:
void rangeHandler() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Range");
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <rangeHandler+0x34>)
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <rangeHandler+0x38>)
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	cb0c      	ldmia	r3, {r2, r3}
 80016ce:	210a      	movs	r1, #10
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f001 fcd7 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <rangeHandler+0x3c>)
 80016d8:	2202      	movs	r2, #2
 80016da:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <rangeHandler+0x40>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
	selectedParameter = 1;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <rangeHandler+0x44>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000d4 	.word	0x200000d4
 80016f4:	08010988 	.word	0x08010988
 80016f8:	2000a4fc 	.word	0x2000a4fc
 80016fc:	2000a50e 	.word	0x2000a50e
 8001700:	2000a50d 	.word	0x2000a50d

08001704 <eiHandler>:
void eiHandler() {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Ei");
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <eiHandler+0x34>)
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <eiHandler+0x38>)
 800170e:	9201      	str	r2, [sp, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	cb0c      	ldmia	r3, {r2, r3}
 8001716:	210a      	movs	r1, #10
 8001718:	2032      	movs	r0, #50	; 0x32
 800171a:	f001 fcb3 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <eiHandler+0x3c>)
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <eiHandler+0x40>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
	selectedParameter = 2;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <eiHandler+0x44>)
 800172c:	2202      	movs	r2, #2
 800172e:	701a      	strb	r2, [r3, #0]

}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200000d4 	.word	0x200000d4
 800173c:	08010990 	.word	0x08010990
 8001740:	2000a4fc 	.word	0x2000a4fc
 8001744:	2000a50e 	.word	0x2000a50e
 8001748:	2000a50d 	.word	0x2000a50d

0800174c <er1Handler>:
void er1Handler() {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Er1");
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <er1Handler+0x34>)
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <er1Handler+0x38>)
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	9200      	str	r2, [sp, #0]
 800175c:	cb0c      	ldmia	r3, {r2, r3}
 800175e:	210a      	movs	r1, #10
 8001760:	2032      	movs	r0, #50	; 0x32
 8001762:	f001 fc8f 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <er1Handler+0x3c>)
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <er1Handler+0x40>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
	selectedParameter = 3;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <er1Handler+0x44>)
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000d4 	.word	0x200000d4
 8001784:	08010994 	.word	0x08010994
 8001788:	2000a4fc 	.word	0x2000a4fc
 800178c:	2000a50e 	.word	0x2000a50e
 8001790:	2000a50d 	.word	0x2000a50d

08001794 <er2Handler>:
void er2Handler() {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Er2");
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <er2Handler+0x34>)
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <er2Handler+0x38>)
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	2204      	movs	r2, #4
 80017a2:	9200      	str	r2, [sp, #0]
 80017a4:	cb0c      	ldmia	r3, {r2, r3}
 80017a6:	210a      	movs	r1, #10
 80017a8:	2032      	movs	r0, #50	; 0x32
 80017aa:	f001 fc6b 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <er2Handler+0x3c>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <er2Handler+0x40>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
	selectedParameter = 4;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <er2Handler+0x44>)
 80017bc:	2204      	movs	r2, #4
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000d4 	.word	0x200000d4
 80017cc:	08010998 	.word	0x08010998
 80017d0:	2000a4fc 	.word	0x2000a4fc
 80017d4:	2000a50e 	.word	0x2000a50e
 80017d8:	2000a50d 	.word	0x2000a50d

080017dc <vHandler>:
void vHandler() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "V");
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <vHandler+0x34>)
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <vHandler+0x38>)
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	2204      	movs	r2, #4
 80017ea:	9200      	str	r2, [sp, #0]
 80017ec:	cb0c      	ldmia	r3, {r2, r3}
 80017ee:	210a      	movs	r1, #10
 80017f0:	2032      	movs	r0, #50	; 0x32
 80017f2:	f001 fc47 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <vHandler+0x3c>)
 80017f8:	2202      	movs	r2, #2
 80017fa:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <vHandler+0x40>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
	selectedParameter = 5;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <vHandler+0x44>)
 8001804:	2205      	movs	r2, #5
 8001806:	701a      	strb	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000d4 	.word	0x200000d4
 8001814:	0801099c 	.word	0x0801099c
 8001818:	2000a4fc 	.word	0x2000a4fc
 800181c:	2000a50e 	.word	0x2000a50e
 8001820:	2000a50d 	.word	0x2000a50d

08001824 <cycleHandler>:
void cycleHandler() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Scan");
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <cycleHandler+0x28>)
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <cycleHandler+0x2c>)
 800182e:	9201      	str	r2, [sp, #4]
 8001830:	2204      	movs	r2, #4
 8001832:	9200      	str	r2, [sp, #0]
 8001834:	cb0c      	ldmia	r3, {r2, r3}
 8001836:	210a      	movs	r1, #10
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f001 fc23 	bl	8003084 <ILI9163_drawString>
	selectedParameter = 6;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <cycleHandler+0x30>)
 8001840:	2206      	movs	r2, #6
 8001842:	701a      	strb	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000d4 	.word	0x200000d4
 8001850:	080109a0 	.word	0x080109a0
 8001854:	2000a50d 	.word	0x2000a50d

08001858 <resHandler>:
void resHandler() {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Res");
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <resHandler+0x34>)
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <resHandler+0x38>)
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	cb0c      	ldmia	r3, {r2, r3}
 800186a:	210a      	movs	r1, #10
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f001 fc09 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <resHandler+0x3c>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <resHandler+0x40>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	selectedParameter = 7;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <resHandler+0x44>)
 8001880:	2207      	movs	r2, #7
 8001882:	701a      	strb	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000d4 	.word	0x200000d4
 8001890:	080109a8 	.word	0x080109a8
 8001894:	2000a4fc 	.word	0x2000a4fc
 8001898:	2000a50e 	.word	0x2000a50e
 800189c:	2000a50d 	.word	0x2000a50d

080018a0 <qtimeHandler>:
void qtimeHandler() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "QTime");
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <qtimeHandler+0x34>)
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <qtimeHandler+0x38>)
 80018aa:	9201      	str	r2, [sp, #4]
 80018ac:	2204      	movs	r2, #4
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	cb0c      	ldmia	r3, {r2, r3}
 80018b2:	210a      	movs	r1, #10
 80018b4:	2032      	movs	r0, #50	; 0x32
 80018b6:	f001 fbe5 	bl	8003084 <ILI9163_drawString>
	state = NUMPAD;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <qtimeHandler+0x3c>)
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]

	oldState = EXPMENU;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <qtimeHandler+0x40>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
	selectedParameter = 8;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <qtimeHandler+0x44>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000d4 	.word	0x200000d4
 80018d8:	080109ac 	.word	0x080109ac
 80018dc:	2000a4fc 	.word	0x2000a4fc
 80018e0:	2000a50e 	.word	0x2000a50e
 80018e4:	2000a50d 	.word	0x2000a50d

080018e8 <cellHandler>:
void cellHandler() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Cell");
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <cellHandler+0x28>)
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <cellHandler+0x2c>)
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	cb0c      	ldmia	r3, {r2, r3}
 80018fa:	210a      	movs	r1, #10
 80018fc:	2032      	movs	r0, #50	; 0x32
 80018fe:	f001 fbc1 	bl	8003084 <ILI9163_drawString>
	selectedParameter = 9;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <cellHandler+0x30>)
 8001904:	2209      	movs	r2, #9
 8001906:	701a      	strb	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d4 	.word	0x200000d4
 8001914:	080109b4 	.word	0x080109b4
 8001918:	2000a50d 	.word	0x2000a50d

0800191c <channelHandler>:
void channelHandler() {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Chnl");
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <channelHandler+0x28>)
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <channelHandler+0x2c>)
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	2204      	movs	r2, #4
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	cb0c      	ldmia	r3, {r2, r3}
 800192e:	210a      	movs	r1, #10
 8001930:	2032      	movs	r0, #50	; 0x32
 8001932:	f001 fba7 	bl	8003084 <ILI9163_drawString>
	selectedParameter = 10;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <channelHandler+0x30>)
 8001938:	220a      	movs	r2, #10
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200000d4 	.word	0x200000d4
 8001948:	080109bc 	.word	0x080109bc
 800194c:	2000a50d 	.word	0x2000a50d

08001950 <expStartHandler>:
void expStartHandler() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af02      	add	r7, sp, #8
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Experiment");
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <expStartHandler+0x28>)
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <expStartHandler+0x2c>)
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	2204      	movs	r2, #4
 800195e:	9200      	str	r2, [sp, #0]
 8001960:	cb0c      	ldmia	r3, {r2, r3}
 8001962:	210a      	movs	r1, #10
 8001964:	2032      	movs	r0, #50	; 0x32
 8001966:	f001 fb8d 	bl	8003084 <ILI9163_drawString>
	selectedParameter = 11;
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <expStartHandler+0x30>)
 800196c:	220b      	movs	r2, #11
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000d4 	.word	0x200000d4
 800197c:	080109c4 	.word	0x080109c4
 8001980:	2000a50d 	.word	0x2000a50d

08001984 <backHandler>:
}
void modHandler() {
	ILI9163_drawString(50, 10, Font_7x10, GREEN, "Mod");
	selectedParameter = 11;
}
void backHandler() {
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	state = MAINMENU;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <backHandler+0x18>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	oldState = EXPMENU;
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <backHandler+0x1c>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	2000a4fc 	.word	0x2000a4fc
 80019a0:	2000a50e 	.word	0x2000a50e

080019a4 <checkExperimentButtons>:
Button deltaVButton = { 67, 122, 291, 316, "", 0x00f0, deltaVHandler };

Button expButton = { 8, 122, 36, 62, "", 0x00f0, expStartHandler };

//BUTTON CONTROL
void checkExperimentButtons() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if (isPressed(methodButton)) {
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <checkExperimentButtons+0x124>)
 80019aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ac:	f000 ffb6 	bl	800291c <isPressed>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <checkExperimentButtons+0x1a>
		methodButton.btnHandler();
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <checkExperimentButtons+0x124>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4798      	blx	r3
	} else if (isPressed(expButton)) {
		expButton.btnHandler();
	}else if (isPressed(backButton)) {
		backButton.btnHandler();
		}
}
 80019bc:	e082      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(rangeButton)) {
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <checkExperimentButtons+0x128>)
 80019c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c2:	f000 ffab 	bl	800291c <isPressed>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <checkExperimentButtons+0x30>
		rangeButton.btnHandler();
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <checkExperimentButtons+0x128>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4798      	blx	r3
}
 80019d2:	e077      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(eiButton)) {
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <checkExperimentButtons+0x12c>)
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	f000 ffa0 	bl	800291c <isPressed>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <checkExperimentButtons+0x46>
		eiButton.btnHandler();
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <checkExperimentButtons+0x12c>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4798      	blx	r3
}
 80019e8:	e06c      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(er1Button)) {
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <checkExperimentButtons+0x130>)
 80019ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ee:	f000 ff95 	bl	800291c <isPressed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <checkExperimentButtons+0x5c>
		er1Button.btnHandler();
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <checkExperimentButtons+0x130>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4798      	blx	r3
}
 80019fe:	e061      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(er2Button)) {
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <checkExperimentButtons+0x134>)
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	f000 ff8a 	bl	800291c <isPressed>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <checkExperimentButtons+0x72>
		er2Button.btnHandler();
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <checkExperimentButtons+0x134>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4798      	blx	r3
}
 8001a14:	e056      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(vButton)) {
 8001a16:	4b31      	ldr	r3, [pc, #196]	; (8001adc <checkExperimentButtons+0x138>)
 8001a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1a:	f000 ff7f 	bl	800291c <isPressed>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <checkExperimentButtons+0x88>
		vButton.btnHandler();
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <checkExperimentButtons+0x138>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4798      	blx	r3
}
 8001a2a:	e04b      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(cycleButton)) {
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <checkExperimentButtons+0x13c>)
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	f000 ff74 	bl	800291c <isPressed>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <checkExperimentButtons+0x9e>
		cycleButton.btnHandler();
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <checkExperimentButtons+0x13c>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4798      	blx	r3
}
 8001a40:	e040      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(resButton)) {
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <checkExperimentButtons+0x140>)
 8001a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a46:	f000 ff69 	bl	800291c <isPressed>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <checkExperimentButtons+0xb4>
		resButton.btnHandler();
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <checkExperimentButtons+0x140>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4798      	blx	r3
}
 8001a56:	e035      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(qtimeButton)) {
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <checkExperimentButtons+0x144>)
 8001a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5c:	f000 ff5e 	bl	800291c <isPressed>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <checkExperimentButtons+0xca>
		qtimeButton.btnHandler();
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <checkExperimentButtons+0x144>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4798      	blx	r3
}
 8001a6c:	e02a      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(cellButton)) {
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <checkExperimentButtons+0x148>)
 8001a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a72:	f000 ff53 	bl	800291c <isPressed>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <checkExperimentButtons+0xe0>
		cellButton.btnHandler();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <checkExperimentButtons+0x148>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4798      	blx	r3
}
 8001a82:	e01f      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(channelButton)) {
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <checkExperimentButtons+0x14c>)
 8001a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a88:	f000 ff48 	bl	800291c <isPressed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <checkExperimentButtons+0xf6>
		channelButton.btnHandler();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <checkExperimentButtons+0x14c>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4798      	blx	r3
}
 8001a98:	e014      	b.n	8001ac4 <checkExperimentButtons+0x120>
	} else if (isPressed(expButton)) {
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <checkExperimentButtons+0x150>)
 8001a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a9e:	f000 ff3d 	bl	800291c <isPressed>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <checkExperimentButtons+0x10c>
		expButton.btnHandler();
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <checkExperimentButtons+0x150>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4798      	blx	r3
}
 8001aae:	e009      	b.n	8001ac4 <checkExperimentButtons+0x120>
	}else if (isPressed(backButton)) {
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <checkExperimentButtons+0x154>)
 8001ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab4:	f000 ff32 	bl	800291c <isPressed>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <checkExperimentButtons+0x120>
		backButton.btnHandler();
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <checkExperimentButtons+0x154>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4798      	blx	r3
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000020 	.word	0x20000020
 8001ad0:	20000030 	.word	0x20000030
 8001ad4:	20000040 	.word	0x20000040
 8001ad8:	20000050 	.word	0x20000050
 8001adc:	20000060 	.word	0x20000060
 8001ae0:	20000070 	.word	0x20000070
 8001ae4:	20000080 	.word	0x20000080
 8001ae8:	20000090 	.word	0x20000090
 8001aec:	200000a0 	.word	0x200000a0
 8001af0:	200000b0 	.word	0x200000b0
 8001af4:	200000c0 	.word	0x200000c0
 8001af8:	20000010 	.word	0x20000010

08001afc <drawExperimentMenu>:
void drawExperimentMenu(uint8_t mode) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	drawImage(expImage, mode);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <drawExperimentMenu+0x1c>)
 8001b0c:	f000 ff42 	bl	8002994 <drawImage>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	08010ec0 	.word	0x08010ec0

08001b1c <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2110      	movs	r1, #16
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <SELECT+0x14>)
 8001b26:	f004 f890 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40010800 	.word	0x40010800

08001b34 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DESELECT+0x14>)
 8001b3e:	f004 f884 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010800 	.word	0x40010800

08001b4c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8001b56:	bf00      	nop
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <SPI_TxByte+0x30>)
 8001b5a:	f007 fae4 	bl	8009126 <HAL_SPI_GetState>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d1f9      	bne.n	8001b58 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8001b64:	1df9      	adds	r1, r7, #7
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <SPI_TxByte+0x30>)
 8001b6e:	f006 fef5 	bl	800895c <HAL_SPI_Transmit>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000b570 	.word	0x2000b570

08001b80 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001b86:	23ff      	movs	r3, #255	; 0xff
 8001b88:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8001b8e:	bf00      	nop
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <SPI_RxByte+0x38>)
 8001b92:	f007 fac8 	bl	8009126 <HAL_SPI_GetState>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d1f9      	bne.n	8001b90 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8001b9c:	1dba      	adds	r2, r7, #6
 8001b9e:	1df9      	adds	r1, r7, #7
 8001ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <SPI_RxByte+0x38>)
 8001baa:	f007 f813 	bl	8008bd4 <HAL_SPI_TransmitReceive>

  return data;
 8001bae:	79bb      	ldrb	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000b570 	.word	0x2000b570

08001bbc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001bc4:	f7ff ffdc 	bl	8001b80 <SPI_RxByte>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <SD_ReadyWait+0x34>)
 8001be0:	2232      	movs	r2, #50	; 0x32
 8001be2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001be4:	f7ff ffcc 	bl	8001b80 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001be8:	f7ff ffca 	bl	8001b80 <SPI_RxByte>
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d004      	beq.n	8001c00 <SD_ReadyWait+0x28>
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SD_ReadyWait+0x34>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f3      	bne.n	8001be8 <SD_ReadyWait+0x10>

  return res;
 8001c00:	79fb      	ldrb	r3, [r7, #7]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000c760 	.word	0x2000c760

08001c10 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001c16:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001c1c:	f7ff ff8a 	bl	8001b34 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e005      	b.n	8001c32 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001c26:	20ff      	movs	r0, #255	; 0xff
 8001c28:	f7ff ff90 	bl	8001b4c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	ddf6      	ble.n	8001c26 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001c38:	f7ff ff70 	bl	8001b1c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001c50:	2395      	movs	r3, #149	; 0x95
 8001c52:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e009      	b.n	8001c6e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001c5a:	1d3a      	adds	r2, r7, #4
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff72 	bl	8001b4c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	ddf2      	ble.n	8001c5a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001c74:	e002      	b.n	8001c7c <SD_PowerOn+0x6c>
  {
    Count--;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001c7c:	f7ff ff80 	bl	8001b80 <SPI_RxByte>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d002      	beq.n	8001c8c <SD_PowerOn+0x7c>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f4      	bne.n	8001c76 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001c8c:	f7ff ff52 	bl	8001b34 <DESELECT>
  SPI_TxByte(0XFF);
 8001c90:	20ff      	movs	r0, #255	; 0xff
 8001c92:	f7ff ff5b 	bl	8001b4c <SPI_TxByte>

  PowerFlag = 1;
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <SD_PowerOn+0x94>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000295 	.word	0x20000295

08001ca8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <SD_PowerOff+0x14>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000295 	.word	0x20000295

08001cc0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <SD_CheckPower+0x10>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000295 	.word	0x20000295

08001cd4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <SD_RxDataBlock+0x68>)
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001ce4:	f7ff ff4c 	bl	8001b80 <SPI_RxByte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d104      	bne.n	8001cfc <SD_RxDataBlock+0x28>
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <SD_RxDataBlock+0x68>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f3      	bne.n	8001ce4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2bfe      	cmp	r3, #254	; 0xfe
 8001d00:	d001      	beq.n	8001d06 <SD_RxDataBlock+0x32>
    return FALSE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e016      	b.n	8001d34 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff55 	bl	8001bbc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff4f 	bl	8001bbc <SPI_RxBytePtr>
  } while(btr -= 2);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3b02      	subs	r3, #2
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ed      	bne.n	8001d06 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001d2a:	f7ff ff29 	bl	8001b80 <SPI_RxByte>
  SPI_RxByte();
 8001d2e:	f7ff ff27 	bl	8001b80 <SPI_RxByte>

  return TRUE;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000c761 	.word	0x2000c761

08001d40 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001d50:	f7ff ff42 	bl	8001bd8 <SD_ReadyWait>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2bff      	cmp	r3, #255	; 0xff
 8001d58:	d001      	beq.n	8001d5e <SD_TxDataBlock+0x1e>
    return FALSE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e040      	b.n	8001de0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fef3 	bl	8001b4c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	2bfd      	cmp	r3, #253	; 0xfd
 8001d6a:	d031      	beq.n	8001dd0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fee7 	bl	8001b4c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fee0 	bl	8001b4c <SPI_TxByte>
    } while (--wc);
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	73bb      	strb	r3, [r7, #14]
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1eb      	bne.n	8001d70 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001d98:	f7ff fef2 	bl	8001b80 <SPI_RxByte>
    SPI_RxByte();
 8001d9c:	f7ff fef0 	bl	8001b80 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001da0:	e00b      	b.n	8001dba <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001da2:	f7ff feed 	bl	8001b80 <SPI_RxByte>
 8001da6:	4603      	mov	r3, r0
 8001da8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d006      	beq.n	8001dc2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001db4:	7b7b      	ldrb	r3, [r7, #13]
 8001db6:	3301      	adds	r3, #1
 8001db8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001dba:	7b7b      	ldrb	r3, [r7, #13]
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d9f0      	bls.n	8001da2 <SD_TxDataBlock+0x62>
 8001dc0:	e000      	b.n	8001dc4 <SD_TxDataBlock+0x84>
        break;
 8001dc2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001dc4:	bf00      	nop
 8001dc6:	f7ff fedb 	bl	8001b80 <SPI_RxByte>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0fa      	beq.n	8001dc6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d101      	bne.n	8001dde <SD_TxDataBlock+0x9e>
    return TRUE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001df4:	f7ff fef0 	bl	8001bd8 <SD_ReadyWait>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d001      	beq.n	8001e02 <SD_SendCmd+0x1a>
    return 0xFF;
 8001dfe:	23ff      	movs	r3, #255	; 0xff
 8001e00:	e040      	b.n	8001e84 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fea1 	bl	8001b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	0e1b      	lsrs	r3, r3, #24
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe9b 	bl	8001b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe95 	bl	8001b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fe8f 	bl	8001b4c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fe8a 	bl	8001b4c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d101      	bne.n	8001e46 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001e42:	2395      	movs	r3, #149	; 0x95
 8001e44:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b48      	cmp	r3, #72	; 0x48
 8001e4a:	d101      	bne.n	8001e50 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001e4c:	2387      	movs	r3, #135	; 0x87
 8001e4e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fe7a 	bl	8001b4c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b4c      	cmp	r3, #76	; 0x4c
 8001e5c:	d101      	bne.n	8001e62 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001e5e:	f7ff fe8f 	bl	8001b80 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001e62:	230a      	movs	r3, #10
 8001e64:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001e66:	f7ff fe8b 	bl	8001b80 <SPI_RxByte>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001e6e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da05      	bge.n	8001e82 <SD_SendCmd+0x9a>
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	73bb      	strb	r3, [r7, #14]
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f1      	bne.n	8001e66 <SD_SendCmd+0x7e>

  return res;
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d5      	b.n	800204c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <SD_disk_initialize+0x1c8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <SD_disk_initialize+0x2a>
    return Stat;
 8001eae:	4b69      	ldr	r3, [pc, #420]	; (8002054 <SD_disk_initialize+0x1c8>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	e0ca      	b.n	800204c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001eb6:	f7ff feab 	bl	8001c10 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001eba:	f7ff fe2f 	bl	8001b1c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2040      	movs	r0, #64	; 0x40
 8001ec6:	f7ff ff8f 	bl	8001de8 <SD_SendCmd>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 80a5 	bne.w	800201c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <SD_disk_initialize+0x1cc>)
 8001ed4:	2264      	movs	r2, #100	; 0x64
 8001ed6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ed8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001edc:	2048      	movs	r0, #72	; 0x48
 8001ede:	f7ff ff83 	bl	8001de8 <SD_SendCmd>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d158      	bne.n	8001f9a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e00c      	b.n	8001f08 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001eee:	7bfc      	ldrb	r4, [r7, #15]
 8001ef0:	f7ff fe46 	bl	8001b80 <SPI_RxByte>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	4423      	add	r3, r4
 8001efe:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d9ef      	bls.n	8001eee <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001f0e:	7abb      	ldrb	r3, [r7, #10]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 8083 	bne.w	800201c <SD_disk_initialize+0x190>
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	2baa      	cmp	r3, #170	; 0xaa
 8001f1a:	d17f      	bne.n	800201c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2077      	movs	r0, #119	; 0x77
 8001f20:	f7ff ff62 	bl	8001de8 <SD_SendCmd>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d807      	bhi.n	8001f3a <SD_disk_initialize+0xae>
 8001f2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f2e:	2069      	movs	r0, #105	; 0x69
 8001f30:	f7ff ff5a 	bl	8001de8 <SD_SendCmd>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <SD_disk_initialize+0x1cc>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1eb      	bne.n	8001f1c <SD_disk_initialize+0x90>
 8001f44:	e000      	b.n	8001f48 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001f46:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <SD_disk_initialize+0x1cc>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d064      	beq.n	800201c <SD_disk_initialize+0x190>
 8001f52:	2100      	movs	r1, #0
 8001f54:	207a      	movs	r0, #122	; 0x7a
 8001f56:	f7ff ff47 	bl	8001de8 <SD_SendCmd>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d15d      	bne.n	800201c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e00c      	b.n	8001f80 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001f66:	7bfc      	ldrb	r4, [r7, #15]
 8001f68:	f7ff fe0a 	bl	8001b80 <SPI_RxByte>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4423      	add	r3, r4
 8001f76:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d9ef      	bls.n	8001f66 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001f86:	7a3b      	ldrb	r3, [r7, #8]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SD_disk_initialize+0x108>
 8001f90:	2306      	movs	r3, #6
 8001f92:	e000      	b.n	8001f96 <SD_disk_initialize+0x10a>
 8001f94:	2302      	movs	r3, #2
 8001f96:	73bb      	strb	r3, [r7, #14]
 8001f98:	e040      	b.n	800201c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2077      	movs	r0, #119	; 0x77
 8001f9e:	f7ff ff23 	bl	8001de8 <SD_SendCmd>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d808      	bhi.n	8001fba <SD_disk_initialize+0x12e>
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2069      	movs	r0, #105	; 0x69
 8001fac:	f7ff ff1c 	bl	8001de8 <SD_SendCmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d801      	bhi.n	8001fba <SD_disk_initialize+0x12e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e000      	b.n	8001fbc <SD_disk_initialize+0x130>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d10e      	bne.n	8001fe2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2077      	movs	r0, #119	; 0x77
 8001fc8:	f7ff ff0e 	bl	8001de8 <SD_SendCmd>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d80e      	bhi.n	8001ff0 <SD_disk_initialize+0x164>
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2069      	movs	r0, #105	; 0x69
 8001fd6:	f7ff ff07 	bl	8001de8 <SD_SendCmd>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001fe0:	e00d      	b.n	8001ffe <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2041      	movs	r0, #65	; 0x41
 8001fe6:	f7ff feff 	bl	8001de8 <SD_SendCmd>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <SD_disk_initialize+0x1cc>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e1      	bne.n	8001fbe <SD_disk_initialize+0x132>
 8001ffa:	e000      	b.n	8001ffe <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001ffc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <SD_disk_initialize+0x1cc>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <SD_disk_initialize+0x18c>
 8002008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800200c:	2050      	movs	r0, #80	; 0x50
 800200e:	f7ff feeb 	bl	8001de8 <SD_SendCmd>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <SD_disk_initialize+0x1d0>)
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8002022:	f7ff fd87 	bl	8001b34 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002026:	f7ff fdab 	bl	8001b80 <SPI_RxByte>

  if (type)
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <SD_disk_initialize+0x1c8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SD_disk_initialize+0x1c8>)
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e001      	b.n	8002046 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002042:	f7ff fe31 	bl	8001ca8 <SD_PowerOff>
  }

  return Stat;
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <SD_disk_initialize+0x1c8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	200000d0 	.word	0x200000d0
 8002058:	2000c761 	.word	0x2000c761
 800205c:	20000294 	.word	0x20000294

08002060 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SD_disk_status+0x14>
    return STA_NOINIT;
 8002070:	2301      	movs	r3, #1
 8002072:	e002      	b.n	800207a <SD_disk_status+0x1a>

  return Stat;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <SD_disk_status+0x24>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	200000d0 	.word	0x200000d0

08002088 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <SD_disk_read+0x1c>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <SD_disk_read+0x20>
    return RES_PARERR;
 80020a4:	2304      	movs	r3, #4
 80020a6:	e054      	b.n	8002152 <SD_disk_read+0xca>

  if (Stat & STA_NOINIT)
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <SD_disk_read+0xd4>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SD_disk_read+0x32>
    return RES_NOTRDY;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e04b      	b.n	8002152 <SD_disk_read+0xca>

  if (!(CardType & 4))
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <SD_disk_read+0xd8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	607b      	str	r3, [r7, #4]

  SELECT();
 80020cc:	f7ff fd26 	bl	8001b1c <SELECT>

  if (count == 1)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d111      	bne.n	80020fa <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	2051      	movs	r0, #81	; 0x51
 80020da:	f7ff fe85 	bl	8001de8 <SD_SendCmd>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d12c      	bne.n	800213e <SD_disk_read+0xb6>
 80020e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7ff fdf3 	bl	8001cd4 <SD_RxDataBlock>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d024      	beq.n	800213e <SD_disk_read+0xb6>
      count = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	e021      	b.n	800213e <SD_disk_read+0xb6>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	2052      	movs	r0, #82	; 0x52
 80020fe:	f7ff fe73 	bl	8001de8 <SD_SendCmd>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11a      	bne.n	800213e <SD_disk_read+0xb6>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210c:	68b8      	ldr	r0, [r7, #8]
 800210e:	f7ff fde1 	bl	8001cd4 <SD_RxDataBlock>
 8002112:	4603      	mov	r3, r0
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <SD_disk_read+0xac>
          break;

        buff += 512;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002124:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3b01      	subs	r3, #1
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ea      	bne.n	8002108 <SD_disk_read+0x80>
 8002132:	e000      	b.n	8002136 <SD_disk_read+0xae>
          break;
 8002134:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002136:	2100      	movs	r1, #0
 8002138:	204c      	movs	r0, #76	; 0x4c
 800213a:	f7ff fe55 	bl	8001de8 <SD_SendCmd>
    }
  }

  DESELECT();
 800213e:	f7ff fcf9 	bl	8001b34 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002142:	f7ff fd1d 	bl	8001b80 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200000d0 	.word	0x200000d0
 8002160:	20000294 	.word	0x20000294

08002164 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <SD_disk_write+0x1c>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <SD_disk_write+0x20>
    return RES_PARERR;
 8002180:	2304      	movs	r3, #4
 8002182:	e071      	b.n	8002268 <SD_disk_write+0x104>

  if (Stat & STA_NOINIT)
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <SD_disk_write+0x10c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002192:	2303      	movs	r3, #3
 8002194:	e068      	b.n	8002268 <SD_disk_write+0x104>

  if (Stat & STA_PROTECT)
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <SD_disk_write+0x10c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80021a4:	2302      	movs	r3, #2
 80021a6:	e05f      	b.n	8002268 <SD_disk_write+0x104>

  if (!(CardType & 4))
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <SD_disk_write+0x110>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	607b      	str	r3, [r7, #4]

  SELECT();
 80021ba:	f7ff fcaf 	bl	8001b1c <SELECT>

  if (count == 1)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d110      	bne.n	80021e6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	2058      	movs	r0, #88	; 0x58
 80021c8:	f7ff fe0e 	bl	8001de8 <SD_SendCmd>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d140      	bne.n	8002254 <SD_disk_write+0xf0>
 80021d2:	21fe      	movs	r1, #254	; 0xfe
 80021d4:	68b8      	ldr	r0, [r7, #8]
 80021d6:	f7ff fdb3 	bl	8001d40 <SD_TxDataBlock>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d039      	beq.n	8002254 <SD_disk_write+0xf0>
      count = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	e036      	b.n	8002254 <SD_disk_write+0xf0>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <SD_disk_write+0x110>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80021f2:	2100      	movs	r1, #0
 80021f4:	2077      	movs	r0, #119	; 0x77
 80021f6:	f7ff fdf7 	bl	8001de8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	2057      	movs	r0, #87	; 0x57
 80021fe:	f7ff fdf3 	bl	8001de8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	2059      	movs	r0, #89	; 0x59
 8002206:	f7ff fdef 	bl	8001de8 <SD_SendCmd>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d121      	bne.n	8002254 <SD_disk_write+0xf0>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002210:	21fc      	movs	r1, #252	; 0xfc
 8002212:	68b8      	ldr	r0, [r7, #8]
 8002214:	f7ff fd94 	bl	8001d40 <SD_TxDataBlock>
 8002218:	4603      	mov	r3, r0
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <SD_disk_write+0xd6>
          break;

        buff += 512;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800222a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3b01      	subs	r3, #1
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1eb      	bne.n	8002210 <SD_disk_write+0xac>
 8002238:	e000      	b.n	800223c <SD_disk_write+0xd8>
          break;
 800223a:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800223c:	21fd      	movs	r1, #253	; 0xfd
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fd7e 	bl	8001d40 <SD_TxDataBlock>
 8002244:	4603      	mov	r3, r0
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SD_disk_write+0xf0>
      {
        count = 1;
 8002250:	2301      	movs	r3, #1
 8002252:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002254:	f7ff fc6e 	bl	8001b34 <DESELECT>
  SPI_RxByte();
 8002258:	f7ff fc92 	bl	8001b80 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200000d0 	.word	0x200000d0
 8002274:	20000294 	.word	0x20000294

08002278 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b08b      	sub	sp, #44	; 0x2c
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	603a      	str	r2, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	460b      	mov	r3, r1
 8002286:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002292:	2304      	movs	r3, #4
 8002294:	e11b      	b.n	80024ce <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d129      	bne.n	80022f6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d017      	beq.n	80022da <SD_disk_ioctl+0x62>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dc1f      	bgt.n	80022ee <SD_disk_ioctl+0x76>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <SD_disk_ioctl+0x40>
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d00b      	beq.n	80022ce <SD_disk_ioctl+0x56>
 80022b6:	e01a      	b.n	80022ee <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80022b8:	f7ff fd02 	bl	8001cc0 <SD_CheckPower>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80022c2:	f7ff fcf1 	bl	8001ca8 <SD_PowerOff>
      res = RES_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022cc:	e0fd      	b.n	80024ca <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80022ce:	f7ff fc9f 	bl	8001c10 <SD_PowerOn>
      res = RES_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022d8:	e0f7      	b.n	80024ca <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	1c5c      	adds	r4, r3, #1
 80022de:	f7ff fcef 	bl	8001cc0 <SD_CheckPower>
 80022e2:	4603      	mov	r3, r0
 80022e4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022ec:	e0ed      	b.n	80024ca <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80022ee:	2304      	movs	r3, #4
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022f4:	e0e9      	b.n	80024ca <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80022f6:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <SD_disk_ioctl+0x260>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002304:	2303      	movs	r3, #3
 8002306:	e0e2      	b.n	80024ce <SD_disk_ioctl+0x256>

    SELECT();
 8002308:	f7ff fc08 	bl	8001b1c <SELECT>

    switch (ctrl)
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	2b0d      	cmp	r3, #13
 8002310:	f200 80cc 	bhi.w	80024ac <SD_disk_ioctl+0x234>
 8002314:	a201      	add	r2, pc, #4	; (adr r2, 800231c <SD_disk_ioctl+0xa4>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	08002417 	.word	0x08002417
 8002320:	08002355 	.word	0x08002355
 8002324:	08002407 	.word	0x08002407
 8002328:	080024ad 	.word	0x080024ad
 800232c:	080024ad 	.word	0x080024ad
 8002330:	080024ad 	.word	0x080024ad
 8002334:	080024ad 	.word	0x080024ad
 8002338:	080024ad 	.word	0x080024ad
 800233c:	080024ad 	.word	0x080024ad
 8002340:	080024ad 	.word	0x080024ad
 8002344:	080024ad 	.word	0x080024ad
 8002348:	08002429 	.word	0x08002429
 800234c:	0800244d 	.word	0x0800244d
 8002350:	08002471 	.word	0x08002471
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002354:	2100      	movs	r1, #0
 8002356:	2049      	movs	r0, #73	; 0x49
 8002358:	f7ff fd46 	bl	8001de8 <SD_SendCmd>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80a8 	bne.w	80024b4 <SD_disk_ioctl+0x23c>
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2110      	movs	r1, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fcb2 	bl	8001cd4 <SD_RxDataBlock>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 809e 	beq.w	80024b4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002378:	7b3b      	ldrb	r3, [r7, #12]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10e      	bne.n	80023a0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002382:	7d7b      	ldrb	r3, [r7, #21]
 8002384:	b29a      	uxth	r2, r3
 8002386:	7d3b      	ldrb	r3, [r7, #20]
 8002388:	b29b      	uxth	r3, r3
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	4413      	add	r3, r2
 8002390:	b29b      	uxth	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002396:	8bfb      	ldrh	r3, [r7, #30]
 8002398:	029a      	lsls	r2, r3, #10
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e02e      	b.n	80023fe <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80023a0:	7c7b      	ldrb	r3, [r7, #17]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	7dbb      	ldrb	r3, [r7, #22]
 80023aa:	09db      	lsrs	r3, r3, #7
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	7d7b      	ldrb	r3, [r7, #21]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f003 0306 	and.w	r3, r3, #6
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4413      	add	r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3302      	adds	r3, #2
 80023c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80023c8:	7d3b      	ldrb	r3, [r7, #20]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4413      	add	r3, r2
 80023da:	b29a      	uxth	r2, r3
 80023dc:	7cbb      	ldrb	r3, [r7, #18]
 80023de:	029b      	lsls	r3, r3, #10
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80023f0:	8bfa      	ldrh	r2, [r7, #30]
 80023f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023f6:	3b09      	subs	r3, #9
 80023f8:	409a      	lsls	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002404:	e056      	b.n	80024b4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002414:	e055      	b.n	80024c2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002416:	f7ff fbdf 	bl	8001bd8 <SD_ReadyWait>
 800241a:	4603      	mov	r3, r0
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d14b      	bne.n	80024b8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002426:	e047      	b.n	80024b8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002428:	2100      	movs	r1, #0
 800242a:	2049      	movs	r0, #73	; 0x49
 800242c:	f7ff fcdc 	bl	8001de8 <SD_SendCmd>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d142      	bne.n	80024bc <SD_disk_ioctl+0x244>
 8002436:	2110      	movs	r1, #16
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7ff fc4b 	bl	8001cd4 <SD_RxDataBlock>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d03b      	beq.n	80024bc <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800244a:	e037      	b.n	80024bc <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800244c:	2100      	movs	r1, #0
 800244e:	204a      	movs	r0, #74	; 0x4a
 8002450:	f7ff fcca 	bl	8001de8 <SD_SendCmd>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d132      	bne.n	80024c0 <SD_disk_ioctl+0x248>
 800245a:	2110      	movs	r1, #16
 800245c:	6a38      	ldr	r0, [r7, #32]
 800245e:	f7ff fc39 	bl	8001cd4 <SD_RxDataBlock>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02b      	beq.n	80024c0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800246e:	e027      	b.n	80024c0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002470:	2100      	movs	r1, #0
 8002472:	207a      	movs	r0, #122	; 0x7a
 8002474:	f7ff fcb8 	bl	8001de8 <SD_SendCmd>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002484:	e00b      	b.n	800249e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002486:	6a3c      	ldr	r4, [r7, #32]
 8002488:	1c63      	adds	r3, r4, #1
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	f7ff fb78 	bl	8001b80 <SPI_RxByte>
 8002490:	4603      	mov	r3, r0
 8002492:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002498:	3301      	adds	r3, #1
 800249a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800249e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d9ef      	bls.n	8002486 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80024ac:	2304      	movs	r3, #4
 80024ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024b2:	e006      	b.n	80024c2 <SD_disk_ioctl+0x24a>
      break;
 80024b4:	bf00      	nop
 80024b6:	e004      	b.n	80024c2 <SD_disk_ioctl+0x24a>
      break;
 80024b8:	bf00      	nop
 80024ba:	e002      	b.n	80024c2 <SD_disk_ioctl+0x24a>
      break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <SD_disk_ioctl+0x24a>
      break;
 80024c0:	bf00      	nop
    }

    DESELECT();
 80024c2:	f7ff fb37 	bl	8001b34 <DESELECT>
    SPI_RxByte();
 80024c6:	f7ff fb5b 	bl	8001b80 <SPI_RxByte>
  }

  return res;
 80024ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	372c      	adds	r7, #44	; 0x2c
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200000d0 	.word	0x200000d0

080024dc <GUI_init>:

//BUTTON HANDLERS

// BUTTON HANDLERS

void GUI_init() {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	ILI9163_init(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f000 fb55 	bl	8002b90 <ILI9163_init>
	ILI9163_render();
 80024e6:	f000 fc3d 	bl	8002d64 <ILI9163_render>
	XPT2046_TouchGetCoordinates(&x, &y);
 80024ea:	4903      	ldr	r1, [pc, #12]	; (80024f8 <GUI_init+0x1c>)
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <GUI_init+0x20>)
 80024ee:	f7ff f835 	bl	800155c <XPT2046_TouchGetCoordinates>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000a520 	.word	0x2000a520
 80024fc:	2000a4e0 	.word	0x2000a4e0

08002500 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af02      	add	r7, sp, #8
	ILI9163_drawPixel(x, y, GREEN);
 8002506:	4b89      	ldr	r3, [pc, #548]	; (800272c <EXTI15_10_IRQHandler+0x22c>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a88      	ldr	r2, [pc, #544]	; (8002730 <EXTI15_10_IRQHandler+0x230>)
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	b2d1      	uxtb	r1, r2
 8002512:	2204      	movs	r2, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fc4b 	bl	8002db0 <ILI9163_drawPixel>
	XPT2046_TouchGetCoordinates(&x, &y);
 800251a:	4985      	ldr	r1, [pc, #532]	; (8002730 <EXTI15_10_IRQHandler+0x230>)
 800251c:	4883      	ldr	r0, [pc, #524]	; (800272c <EXTI15_10_IRQHandler+0x22c>)
 800251e:	f7ff f81d 	bl	800155c <XPT2046_TouchGetCoordinates>
	scrolling = 0;
 8002522:	4b84      	ldr	r3, [pc, #528]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
	uint8_t scrolled = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	71fb      	strb	r3, [r7, #7]
	while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) && state == EXPMENU) {
 800252c:	e062      	b.n	80025f4 <EXTI15_10_IRQHandler+0xf4>
		uint16_t xLast, yLast;
		XPT2046_TouchGetCoordinates(&xLast, &yLast);
 800252e:	1cba      	adds	r2, r7, #2
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f811 	bl	800155c <XPT2046_TouchGetCoordinates>

		// Check if scrolling
		HAL_Delay(100);
 800253a:	2064      	movs	r0, #100	; 0x64
 800253c:	f002 fb34 	bl	8004ba8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) {
 8002540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002544:	487c      	ldr	r0, [pc, #496]	; (8002738 <EXTI15_10_IRQHandler+0x238>)
 8002546:	f003 fb69 	bl	8005c1c <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15e      	bne.n	800260e <EXTI15_10_IRQHandler+0x10e>
			break;
		}
		scrolled = 1;
 8002550:	2301      	movs	r3, #1
 8002552:	71fb      	strb	r3, [r7, #7]

		scrolling = -(yLast - y - 20);
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	461a      	mov	r2, r3
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <EXTI15_10_IRQHandler+0x230>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f1c3 0314 	rsb	r3, r3, #20
 8002562:	4a74      	ldr	r2, [pc, #464]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002564:	6013      	str	r3, [r2, #0]
		if(scrolling+position > 160){
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b74      	ldr	r3, [pc, #464]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	2ba0      	cmp	r3, #160	; 0xa0
 8002572:	dd06      	ble.n	8002582 <EXTI15_10_IRQHandler+0x82>
			scrolling = 160-position;
 8002574:	4b71      	ldr	r3, [pc, #452]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800257c:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e00b      	b.n	800259a <EXTI15_10_IRQHandler+0x9a>
		}
		else if(scrolling+position < 0){
 8002582:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	da04      	bge.n	800259a <EXTI15_10_IRQHandler+0x9a>
			scrolling = -position;
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	425b      	negs	r3, r3
 8002596:	4a67      	ldr	r2, [pc, #412]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002598:	6013      	str	r3, [r2, #0]
		}

		//read_exp_menu(scrolling+position);
		drawExperimentMenu(1);
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff faae 	bl	8001afc <drawExperimentMenu>
		ILI9163_drawRect(0, ((scrolling+position)*140)/160, 4, (((scrolling+position)*140)/160)+20, 3, GREEN);
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	228c      	movs	r2, #140	; 0x8c
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <EXTI15_10_IRQHandler+0x240>)
 80025b2:	fb82 1203 	smull	r1, r2, r2, r3
 80025b6:	1192      	asrs	r2, r2, #6
 80025b8:	17db      	asrs	r3, r3, #31
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b2d9      	uxtb	r1, r3
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b5e      	ldr	r3, [pc, #376]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	228c      	movs	r2, #140	; 0x8c
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <EXTI15_10_IRQHandler+0x240>)
 80025d0:	fb82 0203 	smull	r0, r2, r2, r3
 80025d4:	1192      	asrs	r2, r2, #6
 80025d6:	17db      	asrs	r3, r3, #31
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3314      	adds	r3, #20
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2204      	movs	r2, #4
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	2204      	movs	r2, #4
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 fc2e 	bl	8002e4c <ILI9163_drawRect>
		ILI9163_render();
 80025f0:	f000 fbb8 	bl	8002d64 <ILI9163_render>
	while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) && state == EXPMENU) {
 80025f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f8:	484f      	ldr	r0, [pc, #316]	; (8002738 <EXTI15_10_IRQHandler+0x238>)
 80025fa:	f003 fb0f 	bl	8005c1c <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <EXTI15_10_IRQHandler+0x110>
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <EXTI15_10_IRQHandler+0x244>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d090      	beq.n	800252e <EXTI15_10_IRQHandler+0x2e>
 800260c:	e000      	b.n	8002610 <EXTI15_10_IRQHandler+0x110>
			break;
 800260e:	bf00      	nop

	}
	position = position + scrolling;
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b47      	ldr	r3, [pc, #284]	; (8002734 <EXTI15_10_IRQHandler+0x234>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4413      	add	r3, r2
 800261a:	4a48      	ldr	r2, [pc, #288]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 800261c:	6013      	str	r3, [r2, #0]
	if (position < 0) {
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da02      	bge.n	800262c <EXTI15_10_IRQHandler+0x12c>
		position = 0;
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
	}
	if (position > 160)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2ba0      	cmp	r3, #160	; 0xa0
 8002632:	dd02      	ble.n	800263a <EXTI15_10_IRQHandler+0x13a>
		position = 160;
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 8002636:	22a0      	movs	r2, #160	; 0xa0
 8002638:	601a      	str	r2, [r3, #0]
	if(scrolled == 1)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d071      	beq.n	8002724 <EXTI15_10_IRQHandler+0x224>
		return;
	switch (state) {
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <EXTI15_10_IRQHandler+0x244>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d818      	bhi.n	800267a <EXTI15_10_IRQHandler+0x17a>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <EXTI15_10_IRQHandler+0x150>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002669 	.word	0x08002669
 8002654:	0800266f 	.word	0x0800266f
 8002658:	08002675 	.word	0x08002675
 800265c:	0800267b 	.word	0x0800267b
 8002660:	0800267b 	.word	0x0800267b
 8002664:	0800267b 	.word	0x0800267b
	case MAINMENU:
		checkMainButtons();
 8002668:	f001 f944 	bl	80038f4 <checkMainButtons>
		break;
 800266c:	e005      	b.n	800267a <EXTI15_10_IRQHandler+0x17a>
	case EXPMENU:

		checkExperimentButtons();
 800266e:	f7ff f999 	bl	80019a4 <checkExperimentButtons>

		break;
 8002672:	e002      	b.n	800267a <EXTI15_10_IRQHandler+0x17a>
	case PLOT:
		break;
	case NUMPAD:
		checkNumpadButtons();
 8002674:	f001 fd9e 	bl	80041b4 <checkNumpadButtons>

		break;
 8002678:	bf00      	nop
		break;
	case ABOUT:
		break;

	}
	switch (state) {
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <EXTI15_10_IRQHandler+0x244>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d849      	bhi.n	8002716 <EXTI15_10_IRQHandler+0x216>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <EXTI15_10_IRQHandler+0x188>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026a7 	.word	0x080026a7
 8002690:	080026f9 	.word	0x080026f9
 8002694:	080026f3 	.word	0x080026f3
 8002698:	08002711 	.word	0x08002711
 800269c:	08002717 	.word	0x08002717
	case MAINMENU:
		drawMainButtons();
 80026a0:	f001 f952 	bl	8003948 <drawMainButtons>
		break;
 80026a4:	e037      	b.n	8002716 <EXTI15_10_IRQHandler+0x216>
	case EXPMENU:
		drawExperimentMenu(0);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff fa28 	bl	8001afc <drawExperimentMenu>
		ILI9163_drawRect(0, ((position)*140)/160, 4, (((position)*140)/160)+20, 3, GREEN);
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	228c      	movs	r2, #140	; 0x8c
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <EXTI15_10_IRQHandler+0x240>)
 80026b8:	fb82 1203 	smull	r1, r2, r2, r3
 80026bc:	1192      	asrs	r2, r2, #6
 80026be:	17db      	asrs	r3, r3, #31
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	b2d9      	uxtb	r1, r3
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	228c      	movs	r2, #140	; 0x8c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <EXTI15_10_IRQHandler+0x240>)
 80026d0:	fb82 0203 	smull	r0, r2, r2, r3
 80026d4:	1192      	asrs	r2, r2, #6
 80026d6:	17db      	asrs	r3, r3, #31
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3314      	adds	r3, #20
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2204      	movs	r2, #4
 80026e2:	9201      	str	r2, [sp, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	9200      	str	r2, [sp, #0]
 80026e8:	2204      	movs	r2, #4
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 fbae 	bl	8002e4c <ILI9163_drawRect>
		break;
 80026f0:	e011      	b.n	8002716 <EXTI15_10_IRQHandler+0x216>
	case PLOT:
		read_plot();
 80026f2:	f001 fefd 	bl	80044f0 <read_plot>
			break;
 80026f6:	e00e      	b.n	8002716 <EXTI15_10_IRQHandler+0x216>
	case NUMPAD:
		position = 0;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <EXTI15_10_IRQHandler+0x23c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
		if(	oldState != NUMPAD)
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <EXTI15_10_IRQHandler+0x248>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d001      	beq.n	800270a <EXTI15_10_IRQHandler+0x20a>
			read_numpad();
 8002706:	f001 febf 	bl	8004488 <read_numpad>
		drawNumpad();
 800270a:	f001 fdf3 	bl	80042f4 <drawNumpad>

		break;
 800270e:	e002      	b.n	8002716 <EXTI15_10_IRQHandler+0x216>
	case PASTMENU:
		drawGraph();
 8002710:	f000 f828 	bl	8002764 <drawGraph>
		break;
 8002714:	bf00      	nop
	case ABOUT:
		break;

	}

	ILI9163_render();
 8002716:	f000 fb25 	bl	8002d64 <ILI9163_render>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800271a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800271e:	f003 faad 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
 8002722:	e000      	b.n	8002726 <EXTI15_10_IRQHandler+0x226>
		return;
 8002724:	bf00      	nop
}
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000a4e0 	.word	0x2000a4e0
 8002730:	2000a520 	.word	0x2000a520
 8002734:	2000a51c 	.word	0x2000a51c
 8002738:	40011800 	.word	0x40011800
 800273c:	2000a4e4 	.word	0x2000a4e4
 8002740:	66666667 	.word	0x66666667
 8002744:	2000a4fc 	.word	0x2000a4fc
 8002748:	2000a50e 	.word	0x2000a50e

0800274c <GUI_drawGUI>:
void GUI_drawGUI(UART_HandleTypeDef huart) {
 800274c:	b084      	sub	sp, #16
 800274e:	b490      	push	{r4, r7}
 8002750:	af00      	add	r7, sp, #0
 8002752:	f107 0408 	add.w	r4, r7, #8
 8002756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// need to call for interrupts

}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	bc90      	pop	{r4, r7}
 8002760:	b004      	add	sp, #16
 8002762:	4770      	bx	lr

08002764 <drawGraph>:
				i * 128 / dataCount + 128 / dataCount,
				nextVal * 128 / (maxY - minY), BLACK);
	}
}

void drawGraph() {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 800276a:	af02      	add	r7, sp, #8

	//test data
	float data[] = { 0.0056, 0.0103961, 0.02415, 0.03572, 0.04311, 0.052359,
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	4a69      	ldr	r2, [pc, #420]	; (8002914 <drawGraph+0x1b0>)
 8002770:	4618      	mov	r0, r3
 8002772:	4611      	mov	r1, r2
 8002774:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002778:	461a      	mov	r2, r3
 800277a:	f00c fcf7 	bl	800f16c <memcpy>
			0.005624, 0.01031, 0.02418, 0.0357, 0.0431, 0.052399, 0.0573,
			0.0609, 0.062, 0.06242, 0.0608, 0.05806, 0.0540, 0.049, 0.04347,
			0.03724, 0.03062, 0.0237, 0.0168, 0.0100, 0.0035, 0.0609, 0.062,
			0.0624, 0.0608, 0.0580, 0.0540, 0.0491, 0.0434, 0.0372, 0.0306,
			0.0237 };
	float max = 0.0f, min = 999.0f;
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002786:	4b64      	ldr	r3, [pc, #400]	; (8002918 <drawGraph+0x1b4>)
 8002788:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	for (int i = 0; i < 100; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002792:	e030      	b.n	80027f6 <drawGraph+0x92>
		if (*(data + i) < min) {
 8002794:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	1d3a      	adds	r2, r7, #4
 800279c:	4413      	add	r3, r2
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f8d7 03d0 	ldr.w	r0, [r7, #976]	; 0x3d0
 80027a6:	f7fe fcf5 	bl	8001194 <__aeabi_fcmpgt>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <drawGraph+0x5c>
			min = *(data + i);
 80027b0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	1d3a      	adds	r2, r7, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		}
		if (*(data + i) > max) {
 80027c0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 80027d2:	f7fe fcc1 	bl	8001158 <__aeabi_fcmplt>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <drawGraph+0x88>
			max = *(data + i);
 80027dc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	1d3a      	adds	r2, r7, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	for (int i = 0; i < 100; i++) {
 80027ec:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027f0:	3301      	adds	r3, #1
 80027f2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80027f6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027fa:	2b63      	cmp	r3, #99	; 0x63
 80027fc:	ddca      	ble.n	8002794 <drawGraph+0x30>
		}
	}
	uint16_t pixVal = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
	uint16_t nextVal = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	f8a7 33c4 	strh.w	r3, [r7, #964]	; 0x3c4
	for (int i = 0; i < 100; i++) {
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002810:	e076      	b.n	8002900 <drawGraph+0x19c>
		pixVal = *(data + i) * 128 / (max - min);
 8002812:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	1d3a      	adds	r2, r7, #4
 800281a:	4413      	add	r3, r2
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fafa 	bl	8000e1c <__aeabi_fmul>
 8002828:	4603      	mov	r3, r0
 800282a:	461c      	mov	r4, r3
 800282c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8002830:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 8002834:	f7fe f9e8 	bl	8000c08 <__aeabi_fsub>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	4620      	mov	r0, r4
 800283e:	f7fe fba1 	bl	8000f84 <__aeabi_fdiv>
 8002842:	4603      	mov	r3, r0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fcd5 	bl	80011f4 <__aeabi_f2uiz>
 800284a:	4603      	mov	r3, r0
 800284c:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
		nextVal = *(data + i + 1) * 128 / (max - min);
 8002850:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002854:	3301      	adds	r3, #1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	1d3a      	adds	r2, r7, #4
 800285a:	4413      	add	r3, r2
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fada 	bl	8000e1c <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	461c      	mov	r4, r3
 800286c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8002870:	f8d7 03d4 	ldr.w	r0, [r7, #980]	; 0x3d4
 8002874:	f7fe f9c8 	bl	8000c08 <__aeabi_fsub>
 8002878:	4603      	mov	r3, r0
 800287a:	4619      	mov	r1, r3
 800287c:	4620      	mov	r0, r4
 800287e:	f7fe fb81 	bl	8000f84 <__aeabi_fdiv>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fcb5 	bl	80011f4 <__aeabi_f2uiz>
 800288a:	4603      	mov	r3, r0
 800288c:	f8a7 33c4 	strh.w	r3, [r7, #964]	; 0x3c4
		if (pixVal <= nextVal)
 8002890:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	; 0x3c6
 8002894:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 8002898:	429a      	cmp	r2, r3
 800289a:	d816      	bhi.n	80028ca <drawGraph+0x166>
			ILI9163_drawLine(i * 2, pixVal, (i + 1) * 2, nextVal, WHITE);
 800289c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b2d8      	uxtb	r0, r3
 80028a6:	f8b7 33c6 	ldrh.w	r3, [r7, #966]	; 0x3c6
 80028aa:	b2d9      	uxtb	r1, r3
 80028ac:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028c2:	9400      	str	r4, [sp, #0]
 80028c4:	f000 fb05 	bl	8002ed2 <ILI9163_drawLine>
 80028c8:	e015      	b.n	80028f6 <drawGraph+0x192>
		else
			ILI9163_drawLine(i * 2, pixVal, (i + 1) * 2, nextVal, WHITE);
 80028ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	b2d8      	uxtb	r0, r3
 80028d4:	f8b7 33c6 	ldrh.w	r3, [r7, #966]	; 0x3c6
 80028d8:	b2d9      	uxtb	r1, r3
 80028da:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80028de:	3301      	adds	r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	f8b7 33c4 	ldrh.w	r3, [r7, #964]	; 0x3c4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028f0:	9400      	str	r4, [sp, #0]
 80028f2:	f000 faee 	bl	8002ed2 <ILI9163_drawLine>
	for (int i = 0; i < 100; i++) {
 80028f6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002900:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002904:	2b63      	cmp	r3, #99	; 0x63
 8002906:	dd84      	ble.n	8002812 <drawGraph+0xae>
	}
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	f507 7777 	add.w	r7, r7, #988	; 0x3dc
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	080109e0 	.word	0x080109e0
 8002918:	4479c000 	.word	0x4479c000

0800291c <isPressed>:

int isPressed(Button button) {
 800291c:	b490      	push	{r4, r7}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	463c      	mov	r4, r7
 8002924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (x > button.x1 && x < button.x2 && y + position > button.y1
 8002928:	783b      	ldrb	r3, [r7, #0]
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <isPressed+0x58>)
 800292e:	881b      	ldrh	r3, [r3, #0]
			&& y + position < button.y2);
 8002930:	429a      	cmp	r2, r3
 8002932:	d219      	bcs.n	8002968 <isPressed+0x4c>
	return (x > button.x1 && x < button.x2 && y + position > button.y1
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <isPressed+0x58>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d913      	bls.n	8002968 <isPressed+0x4c>
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <isPressed+0x5c>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <isPressed+0x60>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	78ba      	ldrb	r2, [r7, #2]
 800294e:	4293      	cmp	r3, r2
 8002950:	dd0a      	ble.n	8002968 <isPressed+0x4c>
			&& y + position < button.y2);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <isPressed+0x5c>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <isPressed+0x60>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4413      	add	r3, r2
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	4293      	cmp	r3, r2
 8002962:	da01      	bge.n	8002968 <isPressed+0x4c>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <isPressed+0x4e>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bc90      	pop	{r4, r7}
 8002972:	4770      	bx	lr
 8002974:	2000a4e0 	.word	0x2000a4e0
 8002978:	2000a520 	.word	0x2000a520
 800297c:	2000a4e4 	.word	0x2000a4e4

08002980 <get_buffer>:
extern uint16_t frameBuffer[BUFSIZE] = { 0 };

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

uint16_t *get_buffer(){
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	return frameBuffer;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <get_buffer+0x10>)
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000298 	.word	0x20000298

08002994 <drawImage>:

void drawImage(const uint16_t *image, uint8_t mode) {
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
	if (mode == 0) {
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d117      	bne.n	80029d6 <drawImage+0x42>
		for (int i = 0; i < BUFSIZE; i++) {
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e00f      	b.n	80029cc <drawImage+0x38>

			frameBuffer[i] = image[i + 128 * position];
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <drawImage+0x80>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	01da      	lsls	r2, r3, #7
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	8819      	ldrh	r1, [r3, #0]
 80029be:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <drawImage+0x84>)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BUFSIZE; i++) {
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029d2:	dbeb      	blt.n	80029ac <drawImage+0x18>

			frameBuffer[i] = image[i + 128 * (scrolling+position)];
		}
	}

}
 80029d4:	e019      	b.n	8002a0a <drawImage+0x76>
		for (int i = 0; i < BUFSIZE; i++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	e012      	b.n	8002a02 <drawImage+0x6e>
			frameBuffer[i] = image[i + 128 * (scrolling+position)];
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <drawImage+0x88>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <drawImage+0x80>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	01da      	lsls	r2, r3, #7
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	8819      	ldrh	r1, [r3, #0]
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <drawImage+0x84>)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BUFSIZE; i++) {
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002a08:	dbe8      	blt.n	80029dc <drawImage+0x48>
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	2000a4e4 	.word	0x2000a4e4
 8002a18:	20000298 	.word	0x20000298
 8002a1c:	2000a51c 	.word	0x2000a51c

08002a20 <ILI9163_writeCommand>:

void ILI9163_writeCommand(uint8_t address) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	480c      	ldr	r0, [pc, #48]	; (8002a60 <ILI9163_writeCommand+0x40>)
 8002a30:	f003 f90b 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3a:	4809      	ldr	r0, [pc, #36]	; (8002a60 <ILI9163_writeCommand+0x40>)
 8002a3c:	f003 f905 	bl	8005c4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8002a40:	1df9      	adds	r1, r7, #7
 8002a42:	2300      	movs	r3, #0
 8002a44:	2201      	movs	r2, #1
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <ILI9163_writeCommand+0x44>)
 8002a48:	f005 ff88 	bl	800895c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <ILI9163_writeCommand+0x40>)
 8002a52:	f003 f8fa 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40011800 	.word	0x40011800
 8002a64:	2000b614 	.word	0x2000b614

08002a68 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <ILI9163_writeData+0x40>)
 8002a78:	f003 f8e7 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a82:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <ILI9163_writeData+0x40>)
 8002a84:	f003 f8e1 	bl	8005c4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8002a88:	1df9      	adds	r1, r7, #7
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <ILI9163_writeData+0x44>)
 8002a90:	f005 ff64 	bl	800895c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8002a94:	2201      	movs	r2, #1
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <ILI9163_writeData+0x40>)
 8002a9a:	f003 f8d6 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40011800 	.word	0x40011800
 8002aac:	2000b614 	.word	0x2000b614

08002ab0 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	4810      	ldr	r0, [pc, #64]	; (8002b00 <ILI9163_writeData16+0x50>)
 8002ac0:	f003 f8c3 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aca:	480d      	ldr	r0, [pc, #52]	; (8002b00 <ILI9163_writeData16+0x50>)
 8002acc:	f003 f8bd 	bl	8005c4a <HAL_GPIO_WritePin>

	uint8_t data[2] = { (word >> 8) & 0x00FF, word & 0x00FF };
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	733b      	strb	r3, [r7, #12]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8002ae0:	f107 010c 	add.w	r1, r7, #12
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <ILI9163_writeData16+0x54>)
 8002aea:	f005 ff37 	bl	800895c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8002aee:	2201      	movs	r2, #1
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <ILI9163_writeData16+0x50>)
 8002af4:	f003 f8a9 	bl	8005c4a <HAL_GPIO_WritePin>
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40011800 	.word	0x40011800
 8002b04:	2000b614 	.word	0x2000b614

08002b08 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8002b26:	202a      	movs	r0, #42	; 0x2a
 8002b28:	f7ff ff7a 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffbe 	bl	8002ab0 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ffba 	bl	8002ab0 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8002b3c:	202b      	movs	r0, #43	; 0x2b
 8002b3e:	f7ff ff6f 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ffb3 	bl	8002ab0 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 8002b4a:	883b      	ldrh	r3, [r7, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ffaf 	bl	8002ab0 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8002b52:	202c      	movs	r0, #44	; 0x2c
 8002b54:	f7ff ff64 	bl	8002a20 <ILI9163_writeCommand>
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}

08002b60 <ILI9163_reset>:

void ILI9163_reset(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b6a:	4808      	ldr	r0, [pc, #32]	; (8002b8c <ILI9163_reset+0x2c>)
 8002b6c:	f003 f86d 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002b70:	2032      	movs	r0, #50	; 0x32
 8002b72:	f002 f819 	bl	8004ba8 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8002b76:	2201      	movs	r2, #1
 8002b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <ILI9163_reset+0x2c>)
 8002b7e:	f003 f864 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b82:	2064      	movs	r0, #100	; 0x64
 8002b84:	f002 f810 	bl	8004ba8 <HAL_Delay>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40011800 	.word	0x40011800

08002b90 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	scrolling = 0;
 8002b98:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <ILI9163_init+0x1cc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	486f      	ldr	r0, [pc, #444]	; (8002d60 <ILI9163_init+0x1d0>)
 8002ba4:	f003 f851 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bae:	486c      	ldr	r0, [pc, #432]	; (8002d60 <ILI9163_init+0x1d0>)
 8002bb0:	f003 f84b 	bl	8005c4a <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8002bb4:	f7ff ffd4 	bl	8002b60 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8002bb8:	2011      	movs	r0, #17
 8002bba:	f7ff ff31 	bl	8002a20 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8002bbe:	2005      	movs	r0, #5
 8002bc0:	f001 fff2 	bl	8004ba8 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8002bc4:	203a      	movs	r0, #58	; 0x3a
 8002bc6:	f7ff ff2b 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8002bca:	2005      	movs	r0, #5
 8002bcc:	f7ff ff4c 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8002bd0:	2026      	movs	r0, #38	; 0x26
 8002bd2:	f7ff ff25 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 8002bd6:	2004      	movs	r0, #4
 8002bd8:	f7ff ff46 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8002bdc:	20f2      	movs	r0, #242	; 0xf2
 8002bde:	f7ff ff1f 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7ff ff40 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8002be8:	20e0      	movs	r0, #224	; 0xe0
 8002bea:	f7ff ff19 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8002bee:	203f      	movs	r0, #63	; 0x3f
 8002bf0:	f7ff ff3a 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8002bf4:	2025      	movs	r0, #37	; 0x25
 8002bf6:	f7ff ff37 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8002bfa:	201c      	movs	r0, #28
 8002bfc:	f7ff ff34 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8002c00:	201e      	movs	r0, #30
 8002c02:	f7ff ff31 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002c06:	2020      	movs	r0, #32
 8002c08:	f7ff ff2e 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8002c0c:	2012      	movs	r0, #18
 8002c0e:	f7ff ff2b 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8002c12:	202a      	movs	r0, #42	; 0x2a
 8002c14:	f7ff ff28 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8002c18:	2090      	movs	r0, #144	; 0x90
 8002c1a:	f7ff ff25 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8002c1e:	2024      	movs	r0, #36	; 0x24
 8002c20:	f7ff ff22 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 8002c24:	2011      	movs	r0, #17
 8002c26:	f7ff ff1f 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7ff ff1c 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff ff19 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7ff ff16 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff ff13 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff ff10 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8002c48:	20e1      	movs	r0, #225	; 0xe1
 8002c4a:	f7ff fee9 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8002c4e:	2020      	movs	r0, #32
 8002c50:	f7ff ff0a 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002c54:	2020      	movs	r0, #32
 8002c56:	f7ff ff07 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002c5a:	2020      	movs	r0, #32
 8002c5c:	f7ff ff04 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8002c60:	2020      	movs	r0, #32
 8002c62:	f7ff ff01 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 8002c66:	2005      	movs	r0, #5
 8002c68:	f7ff fefe 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fefb 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8002c72:	2015      	movs	r0, #21
 8002c74:	f7ff fef8 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 8002c78:	20a7      	movs	r0, #167	; 0xa7
 8002c7a:	f7ff fef5 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8002c7e:	203d      	movs	r0, #61	; 0x3d
 8002c80:	f7ff fef2 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8002c84:	2018      	movs	r0, #24
 8002c86:	f7ff feef 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8002c8a:	2025      	movs	r0, #37	; 0x25
 8002c8c:	f7ff feec 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8002c90:	202a      	movs	r0, #42	; 0x2a
 8002c92:	f7ff fee9 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8002c96:	202b      	movs	r0, #43	; 0x2b
 8002c98:	f7ff fee6 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8002c9c:	202b      	movs	r0, #43	; 0x2b
 8002c9e:	f7ff fee3 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8002ca2:	203a      	movs	r0, #58	; 0x3a
 8002ca4:	f7ff fee0 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8002ca8:	20b1      	movs	r0, #177	; 0xb1
 8002caa:	f7ff feb9 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8002cae:	2008      	movs	r0, #8
 8002cb0:	f7ff feda 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7ff fed7 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8002cba:	20b2      	movs	r0, #178	; 0xb2
 8002cbc:	f7ff feb0 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8002cc0:	2008      	movs	r0, #8
 8002cc2:	f7ff fed1 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7ff fece 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8002ccc:	20b3      	movs	r0, #179	; 0xb3
 8002cce:	f7ff fea7 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f7ff fec8 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f7ff fec5 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8002cde:	20b4      	movs	r0, #180	; 0xb4
 8002ce0:	f7ff fe9e 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8002ce4:	2007      	movs	r0, #7
 8002ce6:	f7ff febf 	bl	8002a68 <ILI9163_writeData>

	 ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	 ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	 */

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8002cea:	202a      	movs	r0, #42	; 0x2a
 8002cec:	f7ff fe98 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7ff feb9 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7ff feb6 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff feb3 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT - 1); // XEL (128 pixels x)
 8002d02:	209f      	movs	r0, #159	; 0x9f
 8002d04:	f7ff feb0 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8002d08:	202b      	movs	r0, #43	; 0x2b
 8002d0a:	f7ff fe89 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7ff feaa 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7ff fea7 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7ff fea4 	bl	8002a68 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH - 1); // 160 pixels y
 8002d20:	207f      	movs	r0, #127	; 0x7f
 8002d22:	f7ff fea1 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 8002d26:	2036      	movs	r0, #54	; 0x36
 8002d28:	f7ff fe7a 	bl	8002a20 <ILI9163_writeCommand>
	if (rotation)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <ILI9163_init+0x1aa>
		ILI9163_writeData(0xc0 | 0x08);
 8002d32:	20c8      	movs	r0, #200	; 0xc8
 8002d34:	f7ff fe98 	bl	8002a68 <ILI9163_writeData>
 8002d38:	e002      	b.n	8002d40 <ILI9163_init+0x1b0>
	else
		ILI9163_writeData(0xc0 | 0x08);
 8002d3a:	20c8      	movs	r0, #200	; 0xc8
 8002d3c:	f7ff fe94 	bl	8002a68 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8002d40:	2013      	movs	r0, #19
 8002d42:	f7ff fe6d 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 8002d46:	2029      	movs	r0, #41	; 0x29
 8002d48:	f7ff fe6a 	bl	8002a20 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8002d4c:	202c      	movs	r0, #44	; 0x2c
 8002d4e:	f7ff fe67 	bl	8002a20 <ILI9163_writeCommand>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000a51c 	.word	0x2000a51c
 8002d60:	40011800 	.word	0x40011800

08002d64 <ILI9163_render>:
void ILI9163_newFrame() {
	for (uint32_t i = 0; i < (ILI9163_WIDTH * ILI9163_HEIGHT); i++)
		frameBuffer[i] = 0xFFFF;
}

void ILI9163_render() {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8002d68:	23a0      	movs	r3, #160	; 0xa0
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff feca 	bl	8002b08 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	4809      	ldr	r0, [pc, #36]	; (8002da0 <ILI9163_render+0x3c>)
 8002d7a:	f002 ff66 	bl	8005c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <ILI9163_render+0x3c>)
 8002d86:	f002 ff60 	bl	8005c4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*) frameBuffer, BUFSIZE * 2);
 8002d8a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002d8e:	4905      	ldr	r1, [pc, #20]	; (8002da4 <ILI9163_render+0x40>)
 8002d90:	4805      	ldr	r0, [pc, #20]	; (8002da8 <ILI9163_render+0x44>)
 8002d92:	f006 f8c1 	bl	8008f18 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL = 0;
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <ILI9163_render+0x48>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
	//while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40011800 	.word	0x40011800
 8002da4:	20000298 	.word	0x20000298
 8002da8:	2000b614 	.word	0x2000b614
 8002dac:	2000a298 	.word	0x2000a298

08002db0 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	71bb      	strb	r3, [r7, #6]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80bb      	strh	r3, [r7, #4]

	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT))
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <ILI9163_drawPixel+0x32>
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	2b9f      	cmp	r3, #159	; 0x9f
 8002dce:	d808      	bhi.n	8002de2 <ILI9163_drawPixel+0x32>
		return;
	frameBuffer[((x) + (y * ILI9163_WIDTH))] = color; // >> 8;
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	79bb      	ldrb	r3, [r7, #6]
 8002dd4:	01db      	lsls	r3, r3, #7
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4904      	ldr	r1, [pc, #16]	; (8002dec <ILI9163_drawPixel+0x3c>)
 8002dda:	88ba      	ldrh	r2, [r7, #4]
 8002ddc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8002de0:	e000      	b.n	8002de4 <ILI9163_drawPixel+0x34>
		return;
 8002de2:	bf00      	nop
	//frameBuffer[((x*2)+(y*2*ILI9163_WIDTH))+1] = color & 0xFF;
}
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000298 	.word	0x20000298

08002df0 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		uint16_t color) {
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4604      	mov	r4, r0
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	71fb      	strb	r3, [r7, #7]
 8002e02:	4603      	mov	r3, r0
 8002e04:	71bb      	strb	r3, [r7, #6]
 8002e06:	460b      	mov	r3, r1
 8002e08:	717b      	strb	r3, [r7, #5]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	713b      	strb	r3, [r7, #4]
	for (uint8_t x = x1; x < x2; x++)
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	e012      	b.n	8002e3a <ILI9163_fillRect+0x4a>
		for (uint8_t y = y1; y < y2; y++)
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	73bb      	strb	r3, [r7, #14]
 8002e18:	e008      	b.n	8002e2c <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 8002e1a:	8c3a      	ldrh	r2, [r7, #32]
 8002e1c:	7bb9      	ldrb	r1, [r7, #14]
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ffc5 	bl	8002db0 <ILI9163_drawPixel>
		for (uint8_t y = y1; y < y2; y++)
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73bb      	strb	r3, [r7, #14]
 8002e2c:	7bba      	ldrb	r2, [r7, #14]
 8002e2e:	793b      	ldrb	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d3f2      	bcc.n	8002e1a <ILI9163_fillRect+0x2a>
	for (uint8_t x = x1; x < x2; x++)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	797b      	ldrb	r3, [r7, #5]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3e8      	bcc.n	8002e14 <ILI9163_fillRect+0x24>
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}

08002e4c <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
		uint8_t thickness, uint16_t color) {
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	71fb      	strb	r3, [r7, #7]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71bb      	strb	r3, [r7, #6]
 8002e62:	460b      	mov	r3, r1
 8002e64:	717b      	strb	r3, [r7, #5]
 8002e66:	4613      	mov	r3, r2
 8002e68:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1 + thickness, color);
 8002e6a:	79ba      	ldrb	r2, [r7, #6]
 8002e6c:	7e3b      	ldrb	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2dc      	uxtb	r4, r3
 8002e72:	797a      	ldrb	r2, [r7, #5]
 8002e74:	79b9      	ldrb	r1, [r7, #6]
 8002e76:	79f8      	ldrb	r0, [r7, #7]
 8002e78:	8bbb      	ldrh	r3, [r7, #28]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	f7ff ffb7 	bl	8002df0 <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2 - thickness, x2, y2, color);
 8002e82:	793a      	ldrb	r2, [r7, #4]
 8002e84:	7e3b      	ldrb	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	793c      	ldrb	r4, [r7, #4]
 8002e8c:	797a      	ldrb	r2, [r7, #5]
 8002e8e:	79f8      	ldrb	r0, [r7, #7]
 8002e90:	8bbb      	ldrh	r3, [r7, #28]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4623      	mov	r3, r4
 8002e96:	f7ff ffab 	bl	8002df0 <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1 + thickness, y2, color);
 8002e9a:	79fa      	ldrb	r2, [r7, #7]
 8002e9c:	7e3b      	ldrb	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	793c      	ldrb	r4, [r7, #4]
 8002ea4:	79b9      	ldrb	r1, [r7, #6]
 8002ea6:	79f8      	ldrb	r0, [r7, #7]
 8002ea8:	8bbb      	ldrh	r3, [r7, #28]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	4623      	mov	r3, r4
 8002eae:	f7ff ff9f 	bl	8002df0 <ILI9163_fillRect>
	ILI9163_fillRect(x2 - thickness, y1, x2, y2, color);
 8002eb2:	797a      	ldrb	r2, [r7, #5]
 8002eb4:	7e3b      	ldrb	r3, [r7, #24]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	b2d8      	uxtb	r0, r3
 8002eba:	793c      	ldrb	r4, [r7, #4]
 8002ebc:	797a      	ldrb	r2, [r7, #5]
 8002ebe:	79b9      	ldrb	r1, [r7, #6]
 8002ec0:	8bbb      	ldrh	r3, [r7, #28]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	f7ff ff93 	bl	8002df0 <ILI9163_fillRect>
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}

08002ed2 <ILI9163_drawLine>:

void ILI9163_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,
		uint16_t color) {
 8002ed2:	b590      	push	{r4, r7, lr}
 8002ed4:	b089      	sub	sp, #36	; 0x24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4608      	mov	r0, r1
 8002edc:	4611      	mov	r1, r2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	71fb      	strb	r3, [r7, #7]
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71bb      	strb	r3, [r7, #6]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	717b      	strb	r3, [r7, #5]
 8002eec:	4613      	mov	r3, r2
 8002eee:	713b      	strb	r3, [r7, #4]
	int dy = y1 - y0;
 8002ef0:	793a      	ldrb	r2, [r7, #4]
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	61fb      	str	r3, [r7, #28]
	int dx = x1 - x0;
 8002ef8:	797a      	ldrb	r2, [r7, #5]
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	61bb      	str	r3, [r7, #24]
	int stepx, stepy;

	if (dy < 0) {
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da06      	bge.n	8002f14 <ILI9163_drawLine+0x42>
		dy = -dy;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	425b      	negs	r3, r3
 8002f0a:	61fb      	str	r3, [r7, #28]
		stepy = -1;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	e001      	b.n	8002f18 <ILI9163_drawLine+0x46>
	} else
		stepy = 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]

	if (dx < 0) {
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da06      	bge.n	8002f2c <ILI9163_drawLine+0x5a>
		dx = -dx;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	425b      	negs	r3, r3
 8002f22:	61bb      	str	r3, [r7, #24]
		stepx = -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e001      	b.n	8002f30 <ILI9163_drawLine+0x5e>
	} else
		stepx = 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]

	dy <<= 1;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
	dx <<= 1;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	61bb      	str	r3, [r7, #24]

	ILI9163_drawPixel(x0, y0, color);
 8002f3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002f3e:	79b9      	ldrb	r1, [r7, #6]
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff34 	bl	8002db0 <ILI9163_drawPixel>

	if (dx > dy) {
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dd25      	ble.n	8002f9c <ILI9163_drawLine+0xca>
		int fraction = dy - (dx >> 1);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	105b      	asrs	r3, r3, #1
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	60fb      	str	r3, [r7, #12]
		while (x0 != x1) {
 8002f5a:	e01a      	b.n	8002f92 <ILI9163_drawLine+0xc0>
			if (fraction >= 0) {
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db08      	blt.n	8002f74 <ILI9163_drawLine+0xa2>
				y0 += stepy;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	4413      	add	r3, r2
 8002f6a:	71bb      	strb	r3, [r7, #6]
				fraction -= dx;
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	60fb      	str	r3, [r7, #12]
			}

			x0 += stepx;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
			fraction += dy;
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
			ILI9163_drawPixel(x0, y0, color);
 8002f86:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002f88:	79b9      	ldrb	r1, [r7, #6]
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff0f 	bl	8002db0 <ILI9163_drawPixel>
		while (x0 != x1) {
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d1e0      	bne.n	8002f5c <ILI9163_drawLine+0x8a>
			y0 += stepy;
			fraction += dx;
			ILI9163_drawPixel(x0, y0, color);
		}
	}
}
 8002f9a:	e024      	b.n	8002fe6 <ILI9163_drawLine+0x114>
		int fraction = dx - (dy >> 1);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	105b      	asrs	r3, r3, #1
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	60bb      	str	r3, [r7, #8]
		while (y0 != y1) {
 8002fa6:	e01a      	b.n	8002fde <ILI9163_drawLine+0x10c>
			if (fraction >= 0) {
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db08      	blt.n	8002fc0 <ILI9163_drawLine+0xee>
				x0 += stepx;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
				fraction -= dy;
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	60bb      	str	r3, [r7, #8]
			y0 += stepy;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	71bb      	strb	r3, [r7, #6]
			fraction += dx;
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]
			ILI9163_drawPixel(x0, y0, color);
 8002fd2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002fd4:	79b9      	ldrb	r1, [r7, #6]
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fee9 	bl	8002db0 <ILI9163_drawPixel>
		while (y0 != y1) {
 8002fde:	79ba      	ldrb	r2, [r7, #6]
 8002fe0:	793b      	ldrb	r3, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d1e0      	bne.n	8002fa8 <ILI9163_drawLine+0xd6>
}
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}

08002fee <ILI9163_drawChar>:
void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font,
		uint16_t color) {
 8002fee:	b082      	sub	sp, #8
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	71bb      	strb	r3, [r7, #6]
 8003000:	4613      	mov	r3, r2
 8003002:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for (i = 0; i < font.height; i++) {
 8003004:	2300      	movs	r3, #0
 8003006:	81fb      	strh	r3, [r7, #14]
 8003008:	e02f      	b.n	800306a <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	797b      	ldrb	r3, [r7, #5]
 800300e:	3b20      	subs	r3, #32
 8003010:	7f79      	ldrb	r1, [r7, #29]
 8003012:	fb01 f103 	mul.w	r1, r1, r3
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	440b      	add	r3, r1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	817b      	strh	r3, [r7, #10]
		for (j = 0; j < font.width; j++) {
 8003022:	2300      	movs	r3, #0
 8003024:	81bb      	strh	r3, [r7, #12]
 8003026:	e018      	b.n	800305a <ILI9163_drawChar+0x6c>
			if ((b << j) & 0x8000) {
 8003028:	897a      	ldrh	r2, [r7, #10]
 800302a:	89bb      	ldrh	r3, [r7, #12]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8003038:	89bb      	ldrh	r3, [r7, #12]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4413      	add	r3, r2
 8003040:	b2d8      	uxtb	r0, r3
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	4413      	add	r3, r2
 800304a:	b2db      	uxtb	r3, r3
 800304c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800304e:	4619      	mov	r1, r3
 8003050:	f7ff feae 	bl	8002db0 <ILI9163_drawPixel>
		for (j = 0; j < font.width; j++) {
 8003054:	89bb      	ldrh	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	81bb      	strh	r3, [r7, #12]
 800305a:	7f3b      	ldrb	r3, [r7, #28]
 800305c:	b29b      	uxth	r3, r3
 800305e:	89ba      	ldrh	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3e1      	bcc.n	8003028 <ILI9163_drawChar+0x3a>
	for (i = 0; i < font.height; i++) {
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	3301      	adds	r3, #1
 8003068:	81fb      	strh	r3, [r7, #14]
 800306a:	7f7b      	ldrb	r3, [r7, #29]
 800306c:	b29b      	uxth	r3, r3
 800306e:	89fa      	ldrh	r2, [r7, #14]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3ca      	bcc.n	800300a <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003080:	b002      	add	sp, #8
 8003082:	4770      	bx	lr

08003084 <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color,
		const char *string) {
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b087      	sub	sp, #28
 8003088:	af02      	add	r7, sp, #8
 800308a:	4604      	mov	r4, r0
 800308c:	4608      	mov	r0, r1
 800308e:	1d39      	adds	r1, r7, #4
 8003090:	e881 000c 	stmia.w	r1, {r2, r3}
 8003094:	4623      	mov	r3, r4
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	4603      	mov	r3, r0
 800309a:	73bb      	strb	r3, [r7, #14]
	while (*string) {
 800309c:	e029      	b.n	80030f2 <ILI9163_drawString+0x6e>
		if (x + font.width >= ILI9163_WIDTH) {
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	793a      	ldrb	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	2b7f      	cmp	r3, #127	; 0x7f
 80030a6:	dd12      	ble.n	80030ce <ILI9163_drawString+0x4a>
			x = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 80030ac:	797a      	ldrb	r2, [r7, #5]
 80030ae:	7bbb      	ldrb	r3, [r7, #14]
 80030b0:	4413      	add	r3, r2
 80030b2:	73bb      	strb	r3, [r7, #14]
			if (y + font.height >= ILI9163_HEIGHT)
 80030b4:	7bbb      	ldrb	r3, [r7, #14]
 80030b6:	797a      	ldrb	r2, [r7, #5]
 80030b8:	4413      	add	r3, r2
 80030ba:	2b9f      	cmp	r3, #159	; 0x9f
 80030bc:	dc1e      	bgt.n	80030fc <ILI9163_drawString+0x78>
				break;

			if (*string == ' ') {
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d103      	bne.n	80030ce <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	3301      	adds	r3, #1
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80030cc:	e011      	b.n	80030f2 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	7bb9      	ldrb	r1, [r7, #14]
 80030d4:	7bf8      	ldrb	r0, [r7, #15]
 80030d6:	8c3b      	ldrh	r3, [r7, #32]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f7ff ff85 	bl	8002fee <ILI9163_drawChar>

		x += font.width;
 80030e4:	793a      	ldrb	r2, [r7, #4]
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	4413      	add	r3, r2
 80030ea:	73fb      	strb	r3, [r7, #15]
		string++;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	3301      	adds	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
	while (*string) {
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1d1      	bne.n	800309e <ILI9163_drawString+0x1a>
	}
}
 80030fa:	e000      	b.n	80030fe <ILI9163_drawString+0x7a>
				break;
 80030fc:	bf00      	nop
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}
	...

08003108 <ILI9163_drawButton>:
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
}

void ILI9163_drawButton(Button *button) {
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
	ILI9163_drawRect(button->x1, button->y1, button->x2, button->y2, 2,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7818      	ldrb	r0, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7899      	ldrb	r1, [r3, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	785a      	ldrb	r2, [r3, #1]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	78dc      	ldrb	r4, [r3, #3]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	891b      	ldrh	r3, [r3, #8]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2302      	movs	r3, #2
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4623      	mov	r3, r4
 800312c:	f7ff fe8e 	bl	8002e4c <ILI9163_drawRect>
			button->color);
	uint8_t xS, yS;
	xS = (button->x1 + button->x2) / 2 - 3 * strlen(button->_string);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	4413      	add	r3, r2
 800313c:	0fda      	lsrs	r2, r3, #31
 800313e:	4413      	add	r3, r2
 8003140:	105b      	asrs	r3, r3, #1
 8003142:	b2dc      	uxtb	r4, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f86d 	bl	8000228 <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	0052      	lsls	r2, r2, #1
 8003156:	4413      	add	r3, r2
 8003158:	b2db      	uxtb	r3, r3
 800315a:	1ae3      	subs	r3, r4, r3
 800315c:	73fb      	strb	r3, [r7, #15]
	yS = (button->y1 + button->y2) / 2 - 5;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	789b      	ldrb	r3, [r3, #2]
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	4413      	add	r3, r2
 800316a:	0fda      	lsrs	r2, r3, #31
 800316c:	4413      	add	r3, r2
 800316e:	105b      	asrs	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3b05      	subs	r3, #5
 8003174:	73bb      	strb	r3, [r7, #14]
	ILI9163_drawString(xS, yS, Font_7x10, GREEN, button->_string);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a06      	ldr	r2, [pc, #24]	; (8003194 <ILI9163_drawButton+0x8c>)
 800317c:	7bb9      	ldrb	r1, [r7, #14]
 800317e:	7bf8      	ldrb	r0, [r7, #15]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	2304      	movs	r3, #4
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	ca0c      	ldmia	r2, {r2, r3}
 8003188:	f7ff ff7c 	bl	8003084 <ILI9163_drawString>

}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	200000d4 	.word	0x200000d4

08003198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319a:	b08d      	sub	sp, #52	; 0x34
 800319c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800319e:	f001 fca1 	bl	8004ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031a2:	f000 f849 	bl	8003238 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	state = MAINMENU;
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <main+0x88>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
	oldState = MAINMENU;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <main+0x8c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b2:	f000 f9e3 	bl	800357c <MX_GPIO_Init>
  MX_DMA_Init();
 80031b6:	f000 f9bb 	bl	8003530 <MX_DMA_Init>
  MX_ADC1_Init();
 80031ba:	f000 f8b5 	bl	8003328 <MX_ADC1_Init>
  MX_RTC_Init();
 80031be:	f000 f8f1 	bl	80033a4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80031c2:	f000 f98b 	bl	80034dc <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80031c6:	f00b fd07 	bl	800ebd8 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 80031ca:	f000 f91b 	bl	8003404 <MX_SPI1_Init>
  MX_FATFS_Init();
 80031ce:	f006 ffc1 	bl	800a154 <MX_FATFS_Init>
  MX_SPI3_Init();
 80031d2:	f000 f94d 	bl	8003470 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	GUI_init();
 80031d6:	f7ff f981 	bl	80024dc <GUI_init>
	fresult = f_mount(&fs, "" ,0);
 80031da:	2200      	movs	r2, #0
 80031dc:	4912      	ldr	r1, [pc, #72]	; (8003228 <main+0x90>)
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <main+0x94>)
 80031e0:	f00a fd94 	bl	800dd0c <f_mount>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <main+0x98>)
 80031ea:	701a      	strb	r2, [r3, #0]
	GUI_drawGUI(huart2);
 80031ec:	4e11      	ldr	r6, [pc, #68]	; (8003234 <main+0x9c>)
 80031ee:	466d      	mov	r5, sp
 80031f0:	f106 0410 	add.w	r4, r6, #16
 80031f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003200:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003204:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003208:	f7ff faa0 	bl	800274c <GUI_drawGUI>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800320c:	2028      	movs	r0, #40	; 0x28
 800320e:	f001 ffec 	bl	80051ea <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8003212:	2201      	movs	r2, #1
 8003214:	2101      	movs	r1, #1
 8003216:	2028      	movs	r0, #40	; 0x28
 8003218:	f001 ffcb 	bl	80051b2 <HAL_NVIC_SetPriority>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 while (1) {
 800321c:	e7fe      	b.n	800321c <main+0x84>
 800321e:	bf00      	nop
 8003220:	2000a4fc 	.word	0x2000a4fc
 8003224:	2000a50e 	.word	0x2000a50e
 8003228:	08010da0 	.word	0x08010da0
 800322c:	2000a53c 	.word	0x2000a53c
 8003230:	2000b610 	.word	0x2000b610
 8003234:	2000b66c 	.word	0x2000b66c

08003238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b09c      	sub	sp, #112	; 0x70
 800323c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003242:	2238      	movs	r2, #56	; 0x38
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f00b ff9e 	bl	800f188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2220      	movs	r2, #32
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f00b ff90 	bl	800f188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003268:	2305      	movs	r3, #5
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800326c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8003272:	2304      	movs	r3, #4
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003276:	2301      	movs	r3, #1
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800327a:	2301      	movs	r3, #1
 800327c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800327e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003284:	2302      	movs	r3, #2
 8003286:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800328e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003292:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8003294:	2302      	movs	r3, #2
 8003296:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8003298:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800329c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f9a4 	bl	80075f4 <HAL_RCC_OscConfig>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80032b2:	f000 fafb 	bl	80038ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032b6:	230f      	movs	r3, #15
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ba:	2302      	movs	r3, #2
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 fca4 	bl	8007c20 <HAL_RCC_ClockConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80032de:	f000 fae5 	bl	80038ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80032e2:	2313      	movs	r3, #19
 80032e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80032ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 febf 	bl	800807c <HAL_RCCEx_PeriphCLKConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003304:	f000 fad2 	bl	80038ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8003308:	2200      	movs	r2, #0
 800330a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800330e:	2000      	movs	r0, #0
 8003310:	f004 fd70 	bl	8007df4 <HAL_RCC_MCOConfig>
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <SystemClock_Config+0xec>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3770      	adds	r7, #112	; 0x70
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	42420070 	.word	0x42420070

08003328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <MX_ADC1_Init+0x74>)
 800333a:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <MX_ADC1_Init+0x78>)
 800333c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <MX_ADC1_Init+0x74>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <MX_ADC1_Init+0x74>)
 8003346:	2200      	movs	r2, #0
 8003348:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_ADC1_Init+0x74>)
 800334c:	2200      	movs	r2, #0
 800334e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <MX_ADC1_Init+0x74>)
 8003352:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <MX_ADC1_Init+0x74>)
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_ADC1_Init+0x74>)
 8003360:	2201      	movs	r2, #1
 8003362:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <MX_ADC1_Init+0x74>)
 8003366:	f001 fc43 	bl	8004bf0 <HAL_ADC_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003370:	f000 fa9c 	bl	80038ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003374:	230e      	movs	r3, #14
 8003376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003378:	2301      	movs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <MX_ADC1_Init+0x74>)
 8003386:	f001 fd0b 	bl	8004da0 <HAL_ADC_ConfigChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003390:	f000 fa8c 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000b5c8 	.word	0x2000b5c8
 80033a0:	40012400 	.word	0x40012400

080033a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 80033aa:	463b      	mov	r3, r7
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_RTC_Init+0x58>)
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_RTC_Init+0x5c>)
 80033b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_RTC_Init+0x58>)
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_RTC_Init+0x58>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033c6:	480d      	ldr	r0, [pc, #52]	; (80033fc <MX_RTC_Init+0x58>)
 80033c8:	f005 f8ee 	bl	80085a8 <HAL_RTC_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_RTC_Init+0x32>
  {
    Error_Handler();
 80033d2:	f000 fa6b 	bl	80038ac <Error_Handler>
  }
  /** Enable the RTC Tamper
  */
  sTamper.Tamper = RTC_TAMPER_1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_LOWLEVEL;
 80033da:	2302      	movs	r3, #2
 80033dc:	607b      	str	r3, [r7, #4]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 80033de:	463b      	mov	r3, r7
 80033e0:	4619      	mov	r1, r3
 80033e2:	4806      	ldr	r0, [pc, #24]	; (80033fc <MX_RTC_Init+0x58>)
 80033e4:	f005 f9f4 	bl	80087d0 <HAL_RTCEx_SetTamper>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 80033ee:	f000 fa5d 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000b5f8 	.word	0x2000b5f8
 8003400:	40002800 	.word	0x40002800

08003404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <MX_SPI1_Init+0x64>)
 800340a:	4a18      	ldr	r2, [pc, #96]	; (800346c <MX_SPI1_Init+0x68>)
 800340c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <MX_SPI1_Init+0x64>)
 8003410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <MX_SPI1_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <MX_SPI1_Init+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <MX_SPI1_Init+0x64>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <MX_SPI1_Init+0x64>)
 800342a:	2200      	movs	r2, #0
 800342c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <MX_SPI1_Init+0x64>)
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <MX_SPI1_Init+0x64>)
 8003438:	2218      	movs	r2, #24
 800343a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <MX_SPI1_Init+0x64>)
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <MX_SPI1_Init+0x64>)
 8003444:	2200      	movs	r2, #0
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <MX_SPI1_Init+0x64>)
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <MX_SPI1_Init+0x64>)
 8003450:	220a      	movs	r2, #10
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003454:	4804      	ldr	r0, [pc, #16]	; (8003468 <MX_SPI1_Init+0x64>)
 8003456:	f005 f9fd 	bl	8008854 <HAL_SPI_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003460:	f000 fa24 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000b614 	.word	0x2000b614
 800346c:	40013000 	.word	0x40013000

08003470 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <MX_SPI3_Init+0x64>)
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <MX_SPI3_Init+0x68>)
 8003478:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800347a:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <MX_SPI3_Init+0x64>)
 800347c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003480:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <MX_SPI3_Init+0x64>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <MX_SPI3_Init+0x64>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <MX_SPI3_Init+0x64>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <MX_SPI3_Init+0x64>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <MX_SPI3_Init+0x64>)
 800349c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034a4:	2218      	movs	r2, #24
 80034a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b4:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034bc:	220a      	movs	r2, #10
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80034c0:	4804      	ldr	r0, [pc, #16]	; (80034d4 <MX_SPI3_Init+0x64>)
 80034c2:	f005 f9c7 	bl	8008854 <HAL_SPI_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80034cc:	f000 f9ee 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000b570 	.word	0x2000b570
 80034d8:	40003c00 	.word	0x40003c00

080034dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <MX_USART2_UART_Init+0x50>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003502:	220c      	movs	r2, #12
 8003504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003514:	f005 ff3c 	bl	8009390 <HAL_UART_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800351e:	f000 f9c5 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000b66c 	.word	0x2000b66c
 800352c:	40004400 	.word	0x40004400

08003530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <MX_DMA_Init+0x48>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <MX_DMA_Init+0x48>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6153      	str	r3, [r2, #20]
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MX_DMA_Init+0x48>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	200c      	movs	r0, #12
 8003554:	f001 fe2d 	bl	80051b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003558:	200c      	movs	r0, #12
 800355a:	f001 fe46 	bl	80051ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	200d      	movs	r0, #13
 8003564:	f001 fe25 	bl	80051b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003568:	200d      	movs	r0, #13
 800356a:	f001 fe3e 	bl	80051ea <HAL_NVIC_EnableIRQ>

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	f107 0318 	add.w	r3, r7, #24
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003590:	4bad      	ldr	r3, [pc, #692]	; (8003848 <MX_GPIO_Init+0x2cc>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4aac      	ldr	r2, [pc, #688]	; (8003848 <MX_GPIO_Init+0x2cc>)
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	6193      	str	r3, [r2, #24]
 800359c:	4baa      	ldr	r3, [pc, #680]	; (8003848 <MX_GPIO_Init+0x2cc>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	4ba7      	ldr	r3, [pc, #668]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4aa6      	ldr	r2, [pc, #664]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035ae:	f043 0310 	orr.w	r3, r3, #16
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4ba4      	ldr	r3, [pc, #656]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c0:	4ba1      	ldr	r3, [pc, #644]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4aa0      	ldr	r2, [pc, #640]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6193      	str	r3, [r2, #24]
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b9b      	ldr	r3, [pc, #620]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a9a      	ldr	r2, [pc, #616]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b98      	ldr	r3, [pc, #608]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f0:	4b95      	ldr	r3, [pc, #596]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a94      	ldr	r2, [pc, #592]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b92      	ldr	r3, [pc, #584]	; (8003848 <MX_GPIO_Init+0x2cc>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MicroSDCard_CS_GPIO_Port, MicroSDCard_CS_Pin, GPIO_PIN_RESET);
 8003608:	2200      	movs	r2, #0
 800360a:	2110      	movs	r1, #16
 800360c:	488f      	ldr	r0, [pc, #572]	; (800384c <MX_GPIO_Init+0x2d0>)
 800360e:	f002 fb1c 	bl	8005c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8003612:	2200      	movs	r2, #0
 8003614:	2104      	movs	r1, #4
 8003616:	488e      	ldr	r0, [pc, #568]	; (8003850 <MX_GPIO_Init+0x2d4>)
 8003618:	f002 fb17 	bl	8005c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8003622:	488c      	ldr	r0, [pc, #560]	; (8003854 <MX_GPIO_Init+0x2d8>)
 8003624:	f002 fb11 	bl	8005c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin, GPIO_PIN_RESET);
 8003628:	2200      	movs	r2, #0
 800362a:	f242 0198 	movw	r1, #8344	; 0x2098
 800362e:	488a      	ldr	r0, [pc, #552]	; (8003858 <MX_GPIO_Init+0x2dc>)
 8003630:	f002 fb0b 	bl	8005c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003634:	2201      	movs	r2, #1
 8003636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800363a:	4888      	ldr	r0, [pc, #544]	; (800385c <MX_GPIO_Init+0x2e0>)
 800363c:	f002 fb05 	bl	8005c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin I2S_MCK_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|I2S_MCK_Pin;
 8003640:	234e      	movs	r3, #78	; 0x4e
 8003642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2302      	movs	r3, #2
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800364c:	f107 0318 	add.w	r3, r7, #24
 8003650:	4619      	mov	r1, r3
 8003652:	4882      	ldr	r0, [pc, #520]	; (800385c <MX_GPIO_Init+0x2e0>)
 8003654:	f002 f95e 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_RX_CLK_Pin MII_MDIO_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_RX_CLK_Pin|MII_MDIO_Pin|MII_COL_Pin;
 8003658:	230f      	movs	r3, #15
 800365a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f107 0318 	add.w	r3, r7, #24
 8003668:	4619      	mov	r1, r3
 800366a:	4878      	ldr	r0, [pc, #480]	; (800384c <MX_GPIO_Init+0x2d0>)
 800366c:	f002 f952 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_CS_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CS_Pin;
 8003670:	2310      	movs	r3, #16
 8003672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003674:	2301      	movs	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2302      	movs	r3, #2
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MicroSDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	4619      	mov	r1, r3
 8003686:	4871      	ldr	r0, [pc, #452]	; (800384c <MX_GPIO_Init+0x2d0>)
 8003688:	f002 f944 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800368c:	2304      	movs	r3, #4
 800368e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	2302      	movs	r3, #2
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800369c:	f107 0318 	add.w	r3, r7, #24
 80036a0:	4619      	mov	r1, r3
 80036a2:	486b      	ldr	r0, [pc, #428]	; (8003850 <MX_GPIO_Init+0x2d4>)
 80036a4:	f002 f936 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80036a8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80036ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2302      	movs	r3, #2
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ba:	f107 0318 	add.w	r3, r7, #24
 80036be:	4619      	mov	r1, r3
 80036c0:	4864      	ldr	r0, [pc, #400]	; (8003854 <MX_GPIO_Init+0x2d8>)
 80036c2:	f002 f927 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <MX_GPIO_Init+0x2e4>)
 80036ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036d4:	f107 0318 	add.w	r3, r7, #24
 80036d8:	4619      	mov	r1, r3
 80036da:	485e      	ldr	r0, [pc, #376]	; (8003854 <MX_GPIO_Init+0x2d8>)
 80036dc:	f002 f91a 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD0_I2S_CMD_Pin MII_TXD1_I2S_CK_Pin I2S_DIN_Pin
                           MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD0_I2S_CMD_Pin|MII_TXD1_I2S_CK_Pin|I2S_DIN_Pin
 80036e0:	f44f 4339 	mov.w	r3, #47360	; 0xb900
 80036e4:	61bb      	str	r3, [r7, #24]
                          |MII_TXD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2302      	movs	r3, #2
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	f107 0318 	add.w	r3, r7, #24
 80036f2:	4619      	mov	r1, r3
 80036f4:	4856      	ldr	r0, [pc, #344]	; (8003850 <MX_GPIO_Init+0x2d4>)
 80036f6:	f002 f90d 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_Expander_INT_Pin */
  GPIO_InitStruct.Pin = IO_Expander_INT_Pin;
 80036fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <MX_GPIO_Init+0x2e8>)
 8003702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003704:	2301      	movs	r3, #1
 8003706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IO_Expander_INT_GPIO_Port, &GPIO_InitStruct);
 8003708:	f107 0318 	add.w	r3, r7, #24
 800370c:	4619      	mov	r1, r3
 800370e:	4850      	ldr	r0, [pc, #320]	; (8003850 <MX_GPIO_Init+0x2d4>)
 8003710:	f002 f900 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_DV_Pin MII_RXD0_Pin MII_RXD1_Pin MII_RXD2_Pin
                           MII_RXD3_Pin CAN1_TX_Pin */
  GPIO_InitStruct.Pin = MII_RX_DV_Pin|MII_RXD0_Pin|MII_RXD1_Pin|MII_RXD2_Pin
 8003714:	f641 7302 	movw	r3, #7938	; 0x1f02
 8003718:	61bb      	str	r3, [r7, #24]
                          |MII_RXD3_Pin|CAN1_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003722:	f107 0318 	add.w	r3, r7, #24
 8003726:	4619      	mov	r1, r3
 8003728:	484b      	ldr	r0, [pc, #300]	; (8003858 <MX_GPIO_Init+0x2dc>)
 800372a:	f002 f8f3 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|LED1_Pin;
 800372e:	f242 0398 	movw	r3, #8344	; 0x2098
 8003732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003734:	2301      	movs	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2302      	movs	r3, #2
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003740:	f107 0318 	add.w	r3, r7, #24
 8003744:	4619      	mov	r1, r3
 8003746:	4844      	ldr	r0, [pc, #272]	; (8003858 <MX_GPIO_Init+0x2dc>)
 8003748:	f002 f8e4 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800374c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2302      	movs	r3, #2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800375e:	f107 0318 	add.w	r3, r7, #24
 8003762:	4619      	mov	r1, r3
 8003764:	483d      	ldr	r0, [pc, #244]	; (800385c <MX_GPIO_Init+0x2e0>)
 8003766:	f002 f8d5 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800376a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8003778:	f107 0318 	add.w	r3, r7, #24
 800377c:	4619      	mov	r1, r3
 800377e:	4833      	ldr	r0, [pc, #204]	; (800384c <MX_GPIO_Init+0x2d0>)
 8003780:	f002 f8c8 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_RX_Pin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin;
 8003784:	2301      	movs	r3, #1
 8003786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800378c:	2301      	movs	r3, #1
 800378e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8003790:	f107 0318 	add.w	r3, r7, #24
 8003794:	4619      	mov	r1, r3
 8003796:	4830      	ldr	r0, [pc, #192]	; (8003858 <MX_GPIO_Init+0x2dc>)
 8003798:	f002 f8bc 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCK_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCK_Pin|I2C1_SDA_Pin;
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037a0:	2312      	movs	r3, #18
 80037a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2302      	movs	r3, #2
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 0318 	add.w	r3, r7, #24
 80037ac:	4619      	mov	r1, r3
 80037ae:	4828      	ldr	r0, [pc, #160]	; (8003850 <MX_GPIO_Init+0x2d4>)
 80037b0:	f002 f8b0 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80037b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <MX_GPIO_Init+0x2e8>)
 80037bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 0318 	add.w	r3, r7, #24
 80037c6:	4619      	mov	r1, r3
 80037c8:	4821      	ldr	r0, [pc, #132]	; (8003850 <MX_GPIO_Init+0x2d4>)
 80037ca:	f002 f8a3 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_Detection_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_Detection_Pin;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d6:	2301      	movs	r3, #1
 80037d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MicroSDCard_Detection_GPIO_Port, &GPIO_InitStruct);
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4619      	mov	r1, r3
 80037e0:	481c      	ldr	r0, [pc, #112]	; (8003854 <MX_GPIO_Init+0x2d8>)
 80037e2:	f002 f897 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80037e6:	2302      	movs	r3, #2
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80037f2:	f107 0318 	add.w	r3, r7, #24
 80037f6:	4619      	mov	r1, r3
 80037f8:	4816      	ldr	r0, [pc, #88]	; (8003854 <MX_GPIO_Init+0x2d8>)
 80037fa:	f002 f88b 	bl	8005914 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_ETH_ENABLE();
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <MX_GPIO_Init+0x2ec>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <MX_GPIO_Init+0x2ec>)
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	6053      	str	r3, [r2, #4]

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_3();
 800381a:	4b13      	ldr	r3, [pc, #76]	; (8003868 <MX_GPIO_Init+0x2ec>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <MX_GPIO_Init+0x2ec>)
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	6053      	str	r3, [r2, #4]

}
 800383e:	bf00      	nop
 8003840:	3730      	adds	r7, #48	; 0x30
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	40010800 	.word	0x40010800
 8003850:	40010c00 	.word	0x40010c00
 8003854:	40011800 	.word	0x40011800
 8003858:	40011400 	.word	0x40011400
 800385c:	40011000 	.word	0x40011000
 8003860:	10210000 	.word	0x10210000
 8003864:	10120000 	.word	0x10120000
 8003868:	40010000 	.word	0x40010000

0800386c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_SPI_TxCpltCallback+0x34>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_SPI_TxCpltCallback+0x34>)
 800387c:	6013      	str	r3, [r2, #0]
	if (SPI_DMA_CNT == 0) {
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_SPI_TxCpltCallback+0x34>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <HAL_SPI_TxCpltCallback+0x2c>
		HAL_SPI_DMAStop(&hspi1);
 8003886:	4807      	ldr	r0, [pc, #28]	; (80038a4 <HAL_SPI_TxCpltCallback+0x38>)
 8003888:	f005 fbfc 	bl	8009084 <HAL_SPI_DMAStop>
		SPI_DMA_CNT = 1;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <HAL_SPI_TxCpltCallback+0x34>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL = 1;
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_SPI_TxCpltCallback+0x3c>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
	}
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200000dc 	.word	0x200000dc
 80038a4:	2000b614 	.word	0x2000b614
 80038a8:	2000a298 	.word	0x2000a298

080038ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <expHandler>:
 *  Created on: Apr 3, 2021
 *      Author: bbari
 */
#include "mainmenu.h"

void expHandler() {
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	state = EXPMENU;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <expHandler+0x14>)
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]

}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	2000a4fc 	.word	0x2000a4fc

080038d0 <expplotHandler>:
void expplotHandler() {
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
	state = PLOT;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <expplotHandler+0x14>)
 80038d6:	2203      	movs	r2, #3
 80038d8:	701a      	strb	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000a4fc 	.word	0x2000a4fc

080038e8 <aboutHandler>:
void aboutHandler() {
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0

}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <checkMainButtons>:
Button about = {  0, 128, 100, 150, "About", 0x00f0, aboutHandler };



//BUTTON CONTROL
void checkMainButtons() {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	if (isPressed(exp)) {
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <checkMainButtons+0x48>)
 80038fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038fc:	f7ff f80e 	bl	800291c <isPressed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <checkMainButtons+0x1a>
		exp.btnHandler();
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <checkMainButtons+0x48>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4798      	blx	r3
	} else if (isPressed(expplot)) {
		expplot.btnHandler();
	} else if (isPressed(about)) {
		about.btnHandler();
	}
}
 800390c:	e014      	b.n	8003938 <checkMainButtons+0x44>
	} else if (isPressed(expplot)) {
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <checkMainButtons+0x4c>)
 8003910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003912:	f7ff f803 	bl	800291c <isPressed>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <checkMainButtons+0x30>
		expplot.btnHandler();
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <checkMainButtons+0x4c>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4798      	blx	r3
}
 8003922:	e009      	b.n	8003938 <checkMainButtons+0x44>
	} else if (isPressed(about)) {
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <checkMainButtons+0x50>)
 8003926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003928:	f7fe fff8 	bl	800291c <isPressed>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <checkMainButtons+0x44>
		about.btnHandler();
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <checkMainButtons+0x50>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4798      	blx	r3
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200000e0 	.word	0x200000e0
 8003940:	200000f0 	.word	0x200000f0
 8003944:	20000100 	.word	0x20000100

08003948 <drawMainButtons>:
void drawMainButtons() {
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	 ILI9163_drawButton(&exp);
 800394c:	4805      	ldr	r0, [pc, #20]	; (8003964 <drawMainButtons+0x1c>)
 800394e:	f7ff fbdb 	bl	8003108 <ILI9163_drawButton>
	 ILI9163_drawButton(&expplot);
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <drawMainButtons+0x20>)
 8003954:	f7ff fbd8 	bl	8003108 <ILI9163_drawButton>
	 ILI9163_drawButton(&about);
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <drawMainButtons+0x24>)
 800395a:	f7ff fbd5 	bl	8003108 <ILI9163_drawButton>
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200000e0 	.word	0x200000e0
 8003968:	200000f0 	.word	0x200000f0
 800396c:	20000100 	.word	0x20000100

08003970 <oneHandler>:
#include "numpad.h"

void oneHandler() {
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <oneHandler+0xa8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d027      	beq.n	80039cc <oneHandler+0x5c>
		number += 1.0 * pow(10.0, --fractionCount);
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <oneHandler+0xac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <oneHandler+0xac>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <oneHandler+0xac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fda6 	bl	80004dc <__aeabi_i2d>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	4921      	ldr	r1, [pc, #132]	; (8003a20 <oneHandler+0xb0>)
 800399a:	f00c f859 	bl	800fa50 <pow>
 800399e:	4604      	mov	r4, r0
 80039a0:	460d      	mov	r5, r1
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <oneHandler+0xb4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fdaa 	bl	8000500 <__aeabi_f2d>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7fc fc46 	bl	8000244 <__adddf3>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	f7fd f8ce 	bl	8000b60 <__aeabi_d2f>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <oneHandler+0xb4>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e01b      	b.n	8003a04 <oneHandler+0x94>

	} else {
		number = number * 10.0 + 1.0;
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <oneHandler+0xb4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fd95 	bl	8000500 <__aeabi_f2d>
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <oneHandler+0xb0>)
 80039dc:	f7fc fde8 	bl	80005b0 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <oneHandler+0xb8>)
 80039ee:	f7fc fc29 	bl	8000244 <__adddf3>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7fd f8b1 	bl	8000b60 <__aeabi_d2f>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <oneHandler+0xb4>)
 8003a02:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <oneHandler+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <oneHandler+0xbc>)
 8003a0c:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <oneHandler+0xc0>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]

}
 8003a14:	bf00      	nop
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}
 8003a18:	2000a50c 	.word	0x2000a50c
 8003a1c:	2000a508 	.word	0x2000a508
 8003a20:	40240000 	.word	0x40240000
 8003a24:	2000a500 	.word	0x2000a500
 8003a28:	3ff00000 	.word	0x3ff00000
 8003a2c:	2000a4f0 	.word	0x2000a4f0
 8003a30:	2000a50e 	.word	0x2000a50e

08003a34 <twoHandler>:
void twoHandler() {
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <twoHandler+0xb8>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02d      	beq.n	8003a9c <twoHandler+0x68>
		number += 2.0 * pow(10.0, --fractionCount);
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <twoHandler+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <twoHandler+0xbc>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <twoHandler+0xbc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fd44 	bl	80004dc <__aeabi_i2d>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	4925      	ldr	r1, [pc, #148]	; (8003af4 <twoHandler+0xc0>)
 8003a5e:	f00b fff7 	bl	800fa50 <pow>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	f7fc fbed 	bl	8000244 <__adddf3>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4614      	mov	r4, r2
 8003a70:	461d      	mov	r5, r3
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <twoHandler+0xc4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fc fd42 	bl	8000500 <__aeabi_f2d>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4620      	mov	r0, r4
 8003a82:	4629      	mov	r1, r5
 8003a84:	f7fc fbde 	bl	8000244 <__adddf3>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fd f866 	bl	8000b60 <__aeabi_d2f>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <twoHandler+0xc4>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01c      	b.n	8003ad6 <twoHandler+0xa2>

	} else {
		number = number * 10.0 + 2.0;
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <twoHandler+0xc4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fd2d 	bl	8000500 <__aeabi_f2d>
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <twoHandler+0xc0>)
 8003aac:	f7fc fd80 	bl	80005b0 <__aeabi_dmul>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ac0:	f7fc fbc0 	bl	8000244 <__adddf3>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd f848 	bl	8000b60 <__aeabi_d2f>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <twoHandler+0xc4>)
 8003ad4:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <twoHandler+0xc8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a07      	ldr	r2, [pc, #28]	; (8003afc <twoHandler+0xc8>)
 8003ade:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <twoHandler+0xcc>)
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000a50c 	.word	0x2000a50c
 8003af0:	2000a508 	.word	0x2000a508
 8003af4:	40240000 	.word	0x40240000
 8003af8:	2000a500 	.word	0x2000a500
 8003afc:	2000a4f0 	.word	0x2000a4f0
 8003b00:	2000a50e 	.word	0x2000a50e

08003b04 <threeHandler>:
void threeHandler() {
 8003b04:	b5b0      	push	{r4, r5, r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <threeHandler+0xb8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02e      	beq.n	8003b6e <threeHandler+0x6a>
		number += 3.0 * pow(10.0, --fractionCount);
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <threeHandler+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <threeHandler+0xbc>)
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <threeHandler+0xbc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fcdc 	bl	80004dc <__aeabi_i2d>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	4925      	ldr	r1, [pc, #148]	; (8003bc4 <threeHandler+0xc0>)
 8003b2e:	f00b ff8f 	bl	800fa50 <pow>
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <threeHandler+0xc4>)
 8003b38:	f7fc fd3a 	bl	80005b0 <__aeabi_dmul>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	461d      	mov	r5, r3
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <threeHandler+0xc8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fc fcd9 	bl	8000500 <__aeabi_f2d>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc fb75 	bl	8000244 <__adddf3>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	f7fc fffd 	bl	8000b60 <__aeabi_d2f>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <threeHandler+0xc8>)
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e01b      	b.n	8003ba6 <threeHandler+0xa2>

	} else {
		number = number * 10.0 + 3.0;
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <threeHandler+0xc8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fcc4 	bl	8000500 <__aeabi_f2d>
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <threeHandler+0xc0>)
 8003b7e:	f7fc fd17 	bl	80005b0 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <threeHandler+0xc4>)
 8003b90:	f7fc fb58 	bl	8000244 <__adddf3>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fc ffe0 	bl	8000b60 <__aeabi_d2f>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <threeHandler+0xc8>)
 8003ba4:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <threeHandler+0xcc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <threeHandler+0xcc>)
 8003bae:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <threeHandler+0xd0>)
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	701a      	strb	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000a50c 	.word	0x2000a50c
 8003bc0:	2000a508 	.word	0x2000a508
 8003bc4:	40240000 	.word	0x40240000
 8003bc8:	40080000 	.word	0x40080000
 8003bcc:	2000a500 	.word	0x2000a500
 8003bd0:	2000a4f0 	.word	0x2000a4f0
 8003bd4:	2000a50e 	.word	0x2000a50e

08003bd8 <fourHandler>:
void fourHandler() {
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <fourHandler+0xb8>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02e      	beq.n	8003c42 <fourHandler+0x6a>
		number += 4.0 * pow(10.0, --fractionCount);
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <fourHandler+0xbc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <fourHandler+0xbc>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <fourHandler+0xbc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc fc72 	bl	80004dc <__aeabi_i2d>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	4925      	ldr	r1, [pc, #148]	; (8003c98 <fourHandler+0xc0>)
 8003c02:	f00b ff25 	bl	800fa50 <pow>
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <fourHandler+0xc4>)
 8003c0c:	f7fc fcd0 	bl	80005b0 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <fourHandler+0xc8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fc6f 	bl	8000500 <__aeabi_f2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fb0b 	bl	8000244 <__adddf3>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc ff93 	bl	8000b60 <__aeabi_d2f>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <fourHandler+0xc8>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e01b      	b.n	8003c7a <fourHandler+0xa2>

	} else {
		number = number * 10.0 + 4.0;
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <fourHandler+0xc8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fc5a 	bl	8000500 <__aeabi_f2d>
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <fourHandler+0xc0>)
 8003c52:	f7fc fcad 	bl	80005b0 <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <fourHandler+0xc4>)
 8003c64:	f7fc faee 	bl	8000244 <__adddf3>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff76 	bl	8000b60 <__aeabi_d2f>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <fourHandler+0xc8>)
 8003c78:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <fourHandler+0xcc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <fourHandler+0xcc>)
 8003c82:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <fourHandler+0xd0>)
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	2000a50c 	.word	0x2000a50c
 8003c94:	2000a508 	.word	0x2000a508
 8003c98:	40240000 	.word	0x40240000
 8003c9c:	40100000 	.word	0x40100000
 8003ca0:	2000a500 	.word	0x2000a500
 8003ca4:	2000a4f0 	.word	0x2000a4f0
 8003ca8:	2000a50e 	.word	0x2000a50e

08003cac <fiveHandler>:
void fiveHandler() {
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <fiveHandler+0xb8>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d02e      	beq.n	8003d16 <fiveHandler+0x6a>
		number += 5.0 * pow(10.0, --fractionCount);
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <fiveHandler+0xbc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <fiveHandler+0xbc>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <fiveHandler+0xbc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc08 	bl	80004dc <__aeabi_i2d>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	f04f 0000 	mov.w	r0, #0
 8003cd4:	4925      	ldr	r1, [pc, #148]	; (8003d6c <fiveHandler+0xc0>)
 8003cd6:	f00b febb 	bl	800fa50 <pow>
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <fiveHandler+0xc4>)
 8003ce0:	f7fc fc66 	bl	80005b0 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	461d      	mov	r5, r3
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <fiveHandler+0xc8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fc05 	bl	8000500 <__aeabi_f2d>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc faa1 	bl	8000244 <__adddf3>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f7fc ff29 	bl	8000b60 <__aeabi_d2f>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <fiveHandler+0xc8>)
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e01b      	b.n	8003d4e <fiveHandler+0xa2>

	} else {
		number = number * 10.0 + 5.0;
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <fiveHandler+0xc8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fbf0 	bl	8000500 <__aeabi_f2d>
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <fiveHandler+0xc0>)
 8003d26:	f7fc fc43 	bl	80005b0 <__aeabi_dmul>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <fiveHandler+0xc4>)
 8003d38:	f7fc fa84 	bl	8000244 <__adddf3>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fc ff0c 	bl	8000b60 <__aeabi_d2f>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <fiveHandler+0xc8>)
 8003d4c:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <fiveHandler+0xcc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <fiveHandler+0xcc>)
 8003d56:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <fiveHandler+0xd0>)
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	bdb0      	pop	{r4, r5, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000a50c 	.word	0x2000a50c
 8003d68:	2000a508 	.word	0x2000a508
 8003d6c:	40240000 	.word	0x40240000
 8003d70:	40140000 	.word	0x40140000
 8003d74:	2000a500 	.word	0x2000a500
 8003d78:	2000a4f0 	.word	0x2000a4f0
 8003d7c:	2000a50e 	.word	0x2000a50e

08003d80 <sixHandler>:
void sixHandler() {
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <sixHandler+0xb8>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02e      	beq.n	8003dea <sixHandler+0x6a>
		number += 6.0 * pow(10.0, --fractionCount);
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <sixHandler+0xbc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <sixHandler+0xbc>)
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <sixHandler+0xbc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fb9e 	bl	80004dc <__aeabi_i2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	4925      	ldr	r1, [pc, #148]	; (8003e40 <sixHandler+0xc0>)
 8003daa:	f00b fe51 	bl	800fa50 <pow>
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <sixHandler+0xc4>)
 8003db4:	f7fc fbfc 	bl	80005b0 <__aeabi_dmul>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <sixHandler+0xc8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fb9b 	bl	8000500 <__aeabi_f2d>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc fa37 	bl	8000244 <__adddf3>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7fc febf 	bl	8000b60 <__aeabi_d2f>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <sixHandler+0xc8>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e01b      	b.n	8003e22 <sixHandler+0xa2>

	} else {
		number = number * 10.0 + 6.0;
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <sixHandler+0xc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc fb86 	bl	8000500 <__aeabi_f2d>
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <sixHandler+0xc0>)
 8003dfa:	f7fc fbd9 	bl	80005b0 <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <sixHandler+0xc4>)
 8003e0c:	f7fc fa1a 	bl	8000244 <__adddf3>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	f7fc fea2 	bl	8000b60 <__aeabi_d2f>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <sixHandler+0xc8>)
 8003e20:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <sixHandler+0xcc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <sixHandler+0xcc>)
 8003e2a:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <sixHandler+0xd0>)
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	bdb0      	pop	{r4, r5, r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000a50c 	.word	0x2000a50c
 8003e3c:	2000a508 	.word	0x2000a508
 8003e40:	40240000 	.word	0x40240000
 8003e44:	40180000 	.word	0x40180000
 8003e48:	2000a500 	.word	0x2000a500
 8003e4c:	2000a4f0 	.word	0x2000a4f0
 8003e50:	2000a50e 	.word	0x2000a50e

08003e54 <sevenHandler>:
void sevenHandler() {
 8003e54:	b5b0      	push	{r4, r5, r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <sevenHandler+0xb8>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02e      	beq.n	8003ebe <sevenHandler+0x6a>
		number += 7.0 * pow(10.0, --fractionCount);
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <sevenHandler+0xbc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <sevenHandler+0xbc>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <sevenHandler+0xbc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fb34 	bl	80004dc <__aeabi_i2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	4925      	ldr	r1, [pc, #148]	; (8003f14 <sevenHandler+0xc0>)
 8003e7e:	f00b fde7 	bl	800fa50 <pow>
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <sevenHandler+0xc4>)
 8003e88:	f7fc fb92 	bl	80005b0 <__aeabi_dmul>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <sevenHandler+0xc8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc fb31 	bl	8000500 <__aeabi_f2d>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc f9cd 	bl	8000244 <__adddf3>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe55 	bl	8000b60 <__aeabi_d2f>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <sevenHandler+0xc8>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e01b      	b.n	8003ef6 <sevenHandler+0xa2>

	} else {
		number = number * 10.0 + 7.0;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <sevenHandler+0xc8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc fb1c 	bl	8000500 <__aeabi_f2d>
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <sevenHandler+0xc0>)
 8003ece:	f7fc fb6f 	bl	80005b0 <__aeabi_dmul>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <sevenHandler+0xc4>)
 8003ee0:	f7fc f9b0 	bl	8000244 <__adddf3>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7fc fe38 	bl	8000b60 <__aeabi_d2f>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <sevenHandler+0xc8>)
 8003ef4:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <sevenHandler+0xcc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <sevenHandler+0xcc>)
 8003efe:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <sevenHandler+0xd0>)
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000a50c 	.word	0x2000a50c
 8003f10:	2000a508 	.word	0x2000a508
 8003f14:	40240000 	.word	0x40240000
 8003f18:	401c0000 	.word	0x401c0000
 8003f1c:	2000a500 	.word	0x2000a500
 8003f20:	2000a4f0 	.word	0x2000a4f0
 8003f24:	2000a50e 	.word	0x2000a50e

08003f28 <eightHandler>:
void eightHandler() {
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	if (isFloat) {
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	; (8003fe0 <eightHandler+0xb8>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02e      	beq.n	8003f92 <eightHandler+0x6a>
		number += 8.0 * pow(10.0, --fractionCount);
 8003f34:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <eightHandler+0xbc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	4a2a      	ldr	r2, [pc, #168]	; (8003fe4 <eightHandler+0xbc>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <eightHandler+0xbc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc faca 	bl	80004dc <__aeabi_i2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	f04f 0000 	mov.w	r0, #0
 8003f50:	4925      	ldr	r1, [pc, #148]	; (8003fe8 <eightHandler+0xc0>)
 8003f52:	f00b fd7d 	bl	800fa50 <pow>
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <eightHandler+0xc4>)
 8003f5c:	f7fc fb28 	bl	80005b0 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <eightHandler+0xc8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc fac7 	bl	8000500 <__aeabi_f2d>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc f963 	bl	8000244 <__adddf3>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f7fc fdeb 	bl	8000b60 <__aeabi_d2f>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <eightHandler+0xc8>)
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e01b      	b.n	8003fca <eightHandler+0xa2>

	} else {
		number = number * 10.0 + 8.0;
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <eightHandler+0xc8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fab2 	bl	8000500 <__aeabi_f2d>
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <eightHandler+0xc0>)
 8003fa2:	f7fc fb05 	bl	80005b0 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <eightHandler+0xc4>)
 8003fb4:	f7fc f946 	bl	8000244 <__adddf3>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fc fdce 	bl	8000b60 <__aeabi_d2f>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <eightHandler+0xc8>)
 8003fc8:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <eightHandler+0xcc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <eightHandler+0xcc>)
 8003fd2:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <eightHandler+0xd0>)
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000a50c 	.word	0x2000a50c
 8003fe4:	2000a508 	.word	0x2000a508
 8003fe8:	40240000 	.word	0x40240000
 8003fec:	40200000 	.word	0x40200000
 8003ff0:	2000a500 	.word	0x2000a500
 8003ff4:	2000a4f0 	.word	0x2000a4f0
 8003ff8:	2000a50e 	.word	0x2000a50e

08003ffc <nineHandler>:
void nineHandler() {
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	if (isFloat) {
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <nineHandler+0xb8>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02e      	beq.n	8004066 <nineHandler+0x6a>
		number += 9.0 * pow(10.0, --fractionCount);
 8004008:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <nineHandler+0xbc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <nineHandler+0xbc>)
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <nineHandler+0xbc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa60 	bl	80004dc <__aeabi_i2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	4925      	ldr	r1, [pc, #148]	; (80040bc <nineHandler+0xc0>)
 8004026:	f00b fd13 	bl	800fa50 <pow>
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <nineHandler+0xc4>)
 8004030:	f7fc fabe 	bl	80005b0 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <nineHandler+0xc8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc fa5d 	bl	8000500 <__aeabi_f2d>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc f8f9 	bl	8000244 <__adddf3>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	f7fc fd81 	bl	8000b60 <__aeabi_d2f>
 800405e:	4603      	mov	r3, r0
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <nineHandler+0xc8>)
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e01b      	b.n	800409e <nineHandler+0xa2>

	} else {
		number = number * 10.0 + 9.0;
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <nineHandler+0xc8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fa48 	bl	8000500 <__aeabi_f2d>
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <nineHandler+0xc0>)
 8004076:	f7fc fa9b 	bl	80005b0 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <nineHandler+0xc4>)
 8004088:	f7fc f8dc 	bl	8000244 <__adddf3>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc fd64 	bl	8000b60 <__aeabi_d2f>
 8004098:	4603      	mov	r3, r0
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <nineHandler+0xc8>)
 800409c:	6013      	str	r3, [r2, #0]
	}
	digitNumber++;
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <nineHandler+0xcc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <nineHandler+0xcc>)
 80040a6:	6013      	str	r3, [r2, #0]

	oldState = NUMPAD;
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <nineHandler+0xd0>)
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	bdb0      	pop	{r4, r5, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000a50c 	.word	0x2000a50c
 80040b8:	2000a508 	.word	0x2000a508
 80040bc:	40240000 	.word	0x40240000
 80040c0:	40220000 	.word	0x40220000
 80040c4:	2000a500 	.word	0x2000a500
 80040c8:	2000a4f0 	.word	0x2000a4f0
 80040cc:	2000a50e 	.word	0x2000a50e

080040d0 <dotHandler>:
void dotHandler() {
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
	if(isFloat ==0){
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <dotHandler+0x2c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <dotHandler+0x1c>
		digitNumber++;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <dotHandler+0x30>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <dotHandler+0x30>)
 80040e4:	6013      	str	r3, [r2, #0]
		isFloat = 1;
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <dotHandler+0x2c>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
	}

	oldState = NUMPAD;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <dotHandler+0x34>)
 80040ee:	2202      	movs	r2, #2
 80040f0:	701a      	strb	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000a50c 	.word	0x2000a50c
 8004100:	2000a4f0 	.word	0x2000a4f0
 8004104:	2000a50e 	.word	0x2000a50e

08004108 <zeroHandler>:
void zeroHandler() {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	if (number != 0.0f) {
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <zeroHandler+0x54>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd f815 	bl	8001144 <__aeabi_fcmpeq>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <zeroHandler+0x4a>
		if (isFloat) {
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <zeroHandler+0x58>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <zeroHandler+0x2c>
			fractionCount--;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <zeroHandler+0x5c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <zeroHandler+0x5c>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e009      	b.n	8004148 <zeroHandler+0x40>
		}
		else{
			number = number * 10.0;
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <zeroHandler+0x54>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	490b      	ldr	r1, [pc, #44]	; (8004168 <zeroHandler+0x60>)
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fe6e 	bl	8000e1c <__aeabi_fmul>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <zeroHandler+0x54>)
 8004146:	601a      	str	r2, [r3, #0]
		}

		digitNumber++;
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <zeroHandler+0x64>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <zeroHandler+0x64>)
 8004150:	6013      	str	r3, [r2, #0]
	}

	oldState = NUMPAD;
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <zeroHandler+0x68>)
 8004154:	2202      	movs	r2, #2
 8004156:	701a      	strb	r2, [r3, #0]
}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	2000a500 	.word	0x2000a500
 8004160:	2000a50c 	.word	0x2000a50c
 8004164:	2000a508 	.word	0x2000a508
 8004168:	41200000 	.word	0x41200000
 800416c:	2000a4f0 	.word	0x2000a4f0
 8004170:	2000a50e 	.word	0x2000a50e

08004174 <enterHandler>:
void enterHandler() {
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
	number = 0;
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <enterHandler+0x2c>)
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
	digitNumber = 0;
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <enterHandler+0x30>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
	isFloat = 0;
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <enterHandler+0x34>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	fractionCount = 0;
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <enterHandler+0x38>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
	state = EXPMENU;
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <enterHandler+0x3c>)
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	2000a500 	.word	0x2000a500
 80041a4:	2000a4f0 	.word	0x2000a4f0
 80041a8:	2000a50c 	.word	0x2000a50c
 80041ac:	2000a508 	.word	0x2000a508
 80041b0:	2000a4fc 	.word	0x2000a4fc

080041b4 <checkNumpadButtons>:
Button dotButton = { 0, 42, 128, 160, "", 0x00f0, dotHandler };
Button zeroButton = { 43, 85, 128, 160, "", 0x00f0, zeroHandler };
Button enterButton = { 85, 128, 128, 160, "", 0x00f0, enterHandler };

//BUTTON CONTROL
void checkNumpadButtons() {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
	if (isPressed(oneButton)) {
 80041b8:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <checkNumpadButtons+0x110>)
 80041ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041bc:	f7fe fbae 	bl	800291c <isPressed>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <checkNumpadButtons+0x1a>
		oneButton.btnHandler();
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <checkNumpadButtons+0x110>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4798      	blx	r3
	} else if (isPressed(zeroButton)) {
		zeroButton.btnHandler();
	} else if (isPressed(enterButton)) {
		enterButton.btnHandler();
	}
}
 80041cc:	e077      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(twoButton)) {
 80041ce:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <checkNumpadButtons+0x114>)
 80041d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d2:	f7fe fba3 	bl	800291c <isPressed>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <checkNumpadButtons+0x30>
		twoButton.btnHandler();
 80041dc:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <checkNumpadButtons+0x114>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4798      	blx	r3
}
 80041e2:	e06c      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(threeButton)) {
 80041e4:	4b39      	ldr	r3, [pc, #228]	; (80042cc <checkNumpadButtons+0x118>)
 80041e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e8:	f7fe fb98 	bl	800291c <isPressed>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <checkNumpadButtons+0x46>
		threeButton.btnHandler();
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <checkNumpadButtons+0x118>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4798      	blx	r3
}
 80041f8:	e061      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(fourButton)) {
 80041fa:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <checkNumpadButtons+0x11c>)
 80041fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041fe:	f7fe fb8d 	bl	800291c <isPressed>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <checkNumpadButtons+0x5c>
		fourButton.btnHandler();
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <checkNumpadButtons+0x11c>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4798      	blx	r3
}
 800420e:	e056      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(fiveButton)) {
 8004210:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <checkNumpadButtons+0x120>)
 8004212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004214:	f7fe fb82 	bl	800291c <isPressed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <checkNumpadButtons+0x72>
		fiveButton.btnHandler();
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <checkNumpadButtons+0x120>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4798      	blx	r3
}
 8004224:	e04b      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(sixButton)) {
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <checkNumpadButtons+0x124>)
 8004228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800422a:	f7fe fb77 	bl	800291c <isPressed>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <checkNumpadButtons+0x88>
		sixButton.btnHandler();
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <checkNumpadButtons+0x124>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4798      	blx	r3
}
 800423a:	e040      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(sevenButton)) {
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <checkNumpadButtons+0x128>)
 800423e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004240:	f7fe fb6c 	bl	800291c <isPressed>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <checkNumpadButtons+0x9e>
		sevenButton.btnHandler();
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <checkNumpadButtons+0x128>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4798      	blx	r3
}
 8004250:	e035      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(eightButton)) {
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <checkNumpadButtons+0x12c>)
 8004254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004256:	f7fe fb61 	bl	800291c <isPressed>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <checkNumpadButtons+0xb4>
		eightButton.btnHandler();
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <checkNumpadButtons+0x12c>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4798      	blx	r3
}
 8004266:	e02a      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(nineButton)) {
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <checkNumpadButtons+0x130>)
 800426a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800426c:	f7fe fb56 	bl	800291c <isPressed>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <checkNumpadButtons+0xca>
		nineButton.btnHandler();
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <checkNumpadButtons+0x130>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4798      	blx	r3
}
 800427c:	e01f      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(dotButton)) {
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <checkNumpadButtons+0x134>)
 8004280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004282:	f7fe fb4b 	bl	800291c <isPressed>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <checkNumpadButtons+0xe0>
		dotButton.btnHandler();
 800428c:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <checkNumpadButtons+0x134>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4798      	blx	r3
}
 8004292:	e014      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(zeroButton)) {
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <checkNumpadButtons+0x138>)
 8004296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004298:	f7fe fb40 	bl	800291c <isPressed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <checkNumpadButtons+0xf6>
		zeroButton.btnHandler();
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <checkNumpadButtons+0x138>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4798      	blx	r3
}
 80042a8:	e009      	b.n	80042be <checkNumpadButtons+0x10a>
	} else if (isPressed(enterButton)) {
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <checkNumpadButtons+0x13c>)
 80042ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042ae:	f7fe fb35 	bl	800291c <isPressed>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <checkNumpadButtons+0x10a>
		enterButton.btnHandler();
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <checkNumpadButtons+0x13c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4798      	blx	r3
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000110 	.word	0x20000110
 80042c8:	20000120 	.word	0x20000120
 80042cc:	20000130 	.word	0x20000130
 80042d0:	20000140 	.word	0x20000140
 80042d4:	20000150 	.word	0x20000150
 80042d8:	20000160 	.word	0x20000160
 80042dc:	20000170 	.word	0x20000170
 80042e0:	20000180 	.word	0x20000180
 80042e4:	20000190 	.word	0x20000190
 80042e8:	200001a0 	.word	0x200001a0
 80042ec:	200001b0 	.word	0x200001b0
 80042f0:	200001c0 	.word	0x200001c0

080042f4 <drawNumpad>:
void drawNumpad() {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af02      	add	r7, sp, #8

	char numberString[20];

	char *tmpSign = (number < 0) ? "-" : "";
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <drawNumpad+0x160>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f7fc ff28 	bl	8001158 <__aeabi_fcmplt>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <drawNumpad+0x1e>
 800430e:	4b52      	ldr	r3, [pc, #328]	; (8004458 <drawNumpad+0x164>)
 8004310:	e000      	b.n	8004314 <drawNumpad+0x20>
 8004312:	4b52      	ldr	r3, [pc, #328]	; (800445c <drawNumpad+0x168>)
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
	float tmpVal = (number < 0) ? -number : number;
 8004316:	4b4f      	ldr	r3, [pc, #316]	; (8004454 <drawNumpad+0x160>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc ff1a 	bl	8001158 <__aeabi_fcmplt>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <drawNumpad+0x40>
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <drawNumpad+0x160>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004332:	e001      	b.n	8004338 <drawNumpad+0x44>
 8004334:	4b47      	ldr	r3, [pc, #284]	; (8004454 <drawNumpad+0x160>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	623b      	str	r3, [r7, #32]

	int tmpInt1 = tmpVal;                  // Get the integer (678).
 800433a:	6a38      	ldr	r0, [r7, #32]
 800433c:	f7fc ff34 	bl	80011a8 <__aeabi_f2iz>
 8004340:	4603      	mov	r3, r0
 8004342:	61fb      	str	r3, [r7, #28]
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8004344:	69f8      	ldr	r0, [r7, #28]
 8004346:	f7fc fd15 	bl	8000d74 <__aeabi_i2f>
 800434a:	4603      	mov	r3, r0
 800434c:	4619      	mov	r1, r3
 800434e:	6a38      	ldr	r0, [r7, #32]
 8004350:	f7fc fc5a 	bl	8000c08 <__aeabi_fsub>
 8004354:	4603      	mov	r3, r0
 8004356:	61bb      	str	r3, [r7, #24]
	int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).
 8004358:	4941      	ldr	r1, [pc, #260]	; (8004460 <drawNumpad+0x16c>)
 800435a:	69b8      	ldr	r0, [r7, #24]
 800435c:	f7fc fd5e 	bl	8000e1c <__aeabi_fmul>
 8004360:	4603      	mov	r3, r0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f8cc 	bl	8000500 <__aeabi_f2d>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f00b fb3e 	bl	800f9f0 <trunc>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f7fc fbc8 	bl	8000b10 <__aeabi_d2iz>
 8004380:	4603      	mov	r3, r0
 8004382:	617b      	str	r3, [r7, #20]

	// Print as parts, note that you need 0-padding for fractional bit.

	sprintf(numberString, "%s%d.%d", tmpSign, tmpInt1, tmpInt2);
 8004384:	4638      	mov	r0, r7
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	4935      	ldr	r1, [pc, #212]	; (8004464 <drawNumpad+0x170>)
 8004390:	f00a ffb8 	bl	800f304 <siprintf>

	ILI9163_drawString(70 - digitNumber * 7, 10, Font_7x10, GREEN,
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <drawNumpad+0x174>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3346      	adds	r3, #70	; 0x46
 80043a4:	b2d8      	uxtb	r0, r3
 80043a6:	4a31      	ldr	r2, [pc, #196]	; (800446c <drawNumpad+0x178>)
 80043a8:	463b      	mov	r3, r7
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	2304      	movs	r3, #4
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	ca0c      	ldmia	r2, {r2, r3}
 80043b2:	210a      	movs	r1, #10
 80043b4:	f7fe fe66 	bl	8003084 <ILI9163_drawString>
			numberString);
	switch (selectedParameter) {
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <drawNumpad+0x17c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d843      	bhi.n	800444a <drawNumpad+0x156>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <drawNumpad+0xd4>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043dd 	.word	0x080043dd
 80043cc:	080043f3 	.word	0x080043f3
 80043d0:	08004409 	.word	0x08004409
 80043d4:	0800441f 	.word	0x0800441f
 80043d8:	08004435 	.word	0x08004435
	case 1:
		ILI9163_drawString(20, 10, Font_7x10, GREEN, "Range");
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <drawNumpad+0x178>)
 80043de:	4a25      	ldr	r2, [pc, #148]	; (8004474 <drawNumpad+0x180>)
 80043e0:	9201      	str	r2, [sp, #4]
 80043e2:	2204      	movs	r2, #4
 80043e4:	9200      	str	r2, [sp, #0]
 80043e6:	cb0c      	ldmia	r3, {r2, r3}
 80043e8:	210a      	movs	r1, #10
 80043ea:	2014      	movs	r0, #20
 80043ec:	f7fe fe4a 	bl	8003084 <ILI9163_drawString>
		break;
 80043f0:	e02b      	b.n	800444a <drawNumpad+0x156>
	case 2:
		ILI9163_drawString(20, 10, Font_7x10, GREEN, "Ei");
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <drawNumpad+0x178>)
 80043f4:	4a20      	ldr	r2, [pc, #128]	; (8004478 <drawNumpad+0x184>)
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	9200      	str	r2, [sp, #0]
 80043fc:	cb0c      	ldmia	r3, {r2, r3}
 80043fe:	210a      	movs	r1, #10
 8004400:	2014      	movs	r0, #20
 8004402:	f7fe fe3f 	bl	8003084 <ILI9163_drawString>
		break;
 8004406:	e020      	b.n	800444a <drawNumpad+0x156>
	case 3:
		ILI9163_drawString(20, 10, Font_7x10, GREEN, "E1");
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <drawNumpad+0x178>)
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <drawNumpad+0x188>)
 800440c:	9201      	str	r2, [sp, #4]
 800440e:	2204      	movs	r2, #4
 8004410:	9200      	str	r2, [sp, #0]
 8004412:	cb0c      	ldmia	r3, {r2, r3}
 8004414:	210a      	movs	r1, #10
 8004416:	2014      	movs	r0, #20
 8004418:	f7fe fe34 	bl	8003084 <ILI9163_drawString>
		break;
 800441c:	e015      	b.n	800444a <drawNumpad+0x156>
	case 4:
		ILI9163_drawString(20, 10, Font_7x10, GREEN, "E2");
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <drawNumpad+0x178>)
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <drawNumpad+0x18c>)
 8004422:	9201      	str	r2, [sp, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	cb0c      	ldmia	r3, {r2, r3}
 800442a:	210a      	movs	r1, #10
 800442c:	2014      	movs	r0, #20
 800442e:	f7fe fe29 	bl	8003084 <ILI9163_drawString>
		break;
 8004432:	e00a      	b.n	800444a <drawNumpad+0x156>
	case 5:
		ILI9163_drawString(20, 10, Font_7x10, GREEN, "V");
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <drawNumpad+0x178>)
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <drawNumpad+0x190>)
 8004438:	9201      	str	r2, [sp, #4]
 800443a:	2204      	movs	r2, #4
 800443c:	9200      	str	r2, [sp, #0]
 800443e:	cb0c      	ldmia	r3, {r2, r3}
 8004440:	210a      	movs	r1, #10
 8004442:	2014      	movs	r0, #20
 8004444:	f7fe fe1e 	bl	8003084 <ILI9163_drawString>
		break;
 8004448:	bf00      	nop
	}
}
 800444a:	bf00      	nop
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2000a500 	.word	0x2000a500
 8004458:	08010dd4 	.word	0x08010dd4
 800445c:	08010dd0 	.word	0x08010dd0
 8004460:	461c4000 	.word	0x461c4000
 8004464:	08010dd8 	.word	0x08010dd8
 8004468:	2000a4f0 	.word	0x2000a4f0
 800446c:	200000d4 	.word	0x200000d4
 8004470:	2000a50d 	.word	0x2000a50d
 8004474:	08010de0 	.word	0x08010de0
 8004478:	08010de8 	.word	0x08010de8
 800447c:	08010dec 	.word	0x08010dec
 8004480:	08010df0 	.word	0x08010df0
 8004484:	08010df4 	.word	0x08010df4

08004488 <read_numpad>:
	fresult = f_lseek(&fil, offset*128*2);
	f_read (&fil, fb, 128*160*2, &br);
	f_close(&fil);

}
void read_numpad(){
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	uint16_t * fb = get_buffer();
 800448e:	f7fe fa77 	bl	8002980 <get_buffer>
 8004492:	4603      	mov	r3, r0
 8004494:	607b      	str	r3, [r7, #4]
	fresult = f_mount(&fs, "" ,0);
 8004496:	2200      	movs	r2, #0
 8004498:	490f      	ldr	r1, [pc, #60]	; (80044d8 <read_numpad+0x50>)
 800449a:	4810      	ldr	r0, [pc, #64]	; (80044dc <read_numpad+0x54>)
 800449c:	f009 fc36 	bl	800dd0c <f_mount>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <read_numpad+0x58>)
 80044a6:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, "numpad.dat", FA_OPEN_ALWAYS | FA_READ);
 80044a8:	2211      	movs	r2, #17
 80044aa:	490e      	ldr	r1, [pc, #56]	; (80044e4 <read_numpad+0x5c>)
 80044ac:	480e      	ldr	r0, [pc, #56]	; (80044e8 <read_numpad+0x60>)
 80044ae:	f009 fc77 	bl	800dda0 <f_open>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <read_numpad+0x58>)
 80044b8:	701a      	strb	r2, [r3, #0]
	//fresult = f_lseek(&fil, offset*128*2);
	f_read (&fil, fb, 128*160*2, &br);
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <read_numpad+0x64>)
 80044bc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4809      	ldr	r0, [pc, #36]	; (80044e8 <read_numpad+0x60>)
 80044c4:	f009 ffa6 	bl	800e414 <f_read>
	f_close(&fil);
 80044c8:	4807      	ldr	r0, [pc, #28]	; (80044e8 <read_numpad+0x60>)
 80044ca:	f00a fa97 	bl	800e9fc <f_close>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08010dfc 	.word	0x08010dfc
 80044dc:	2000a53c 	.word	0x2000a53c
 80044e0:	2000b610 	.word	0x2000b610
 80044e4:	08010e10 	.word	0x08010e10
 80044e8:	2000b6f0 	.word	0x2000b6f0
 80044ec:	2000b56c 	.word	0x2000b56c

080044f0 <read_plot>:

void read_plot(){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
	uint16_t *fb = get_buffer();
 80044f6:	f7fe fa43 	bl	8002980 <get_buffer>
 80044fa:	4603      	mov	r3, r0
 80044fc:	607b      	str	r3, [r7, #4]
	fresult = f_open(&fil, "plot.dat", FA_OPEN_ALWAYS | FA_READ);
 80044fe:	2211      	movs	r2, #17
 8004500:	490a      	ldr	r1, [pc, #40]	; (800452c <read_plot+0x3c>)
 8004502:	480b      	ldr	r0, [pc, #44]	; (8004530 <read_plot+0x40>)
 8004504:	f009 fc4c 	bl	800dda0 <f_open>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <read_plot+0x44>)
 800450e:	701a      	strb	r2, [r3, #0]
	//fresult = f_lseek(&fil, offset*128*2);
	f_read(&fil, fb, 128 * 160 * 2, &br);
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <read_plot+0x48>)
 8004512:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4805      	ldr	r0, [pc, #20]	; (8004530 <read_plot+0x40>)
 800451a:	f009 ff7b 	bl	800e414 <f_read>
	f_close(&fil);
 800451e:	4804      	ldr	r0, [pc, #16]	; (8004530 <read_plot+0x40>)
 8004520:	f00a fa6c 	bl	800e9fc <f_close>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	08010e1c 	.word	0x08010e1c
 8004530:	2000b6f0 	.word	0x2000b6f0
 8004534:	2000b610 	.word	0x2000b610
 8004538:	2000b56c 	.word	0x2000b56c

0800453c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <HAL_MspInit+0x5c>)
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	4a14      	ldr	r2, [pc, #80]	; (8004598 <HAL_MspInit+0x5c>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6193      	str	r3, [r2, #24]
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_MspInit+0x5c>)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_MspInit+0x5c>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <HAL_MspInit+0x5c>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	61d3      	str	r3, [r2, #28]
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_MspInit+0x5c>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_MspInit+0x60>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_MspInit+0x60>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40021000 	.word	0x40021000
 800459c:	40010000 	.word	0x40010000

080045a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_ADC_MspInit+0x98>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d137      	bne.n	8004630 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a17      	ldr	r2, [pc, #92]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045f6:	f043 0310 	orr.w	r3, r3, #16
 80045fa:	6193      	str	r3, [r2, #24]
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <HAL_ADC_MspInit+0x9c>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800460c:	2303      	movs	r3, #3
 800460e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8004610:	f107 0318 	add.w	r3, r7, #24
 8004614:	4619      	mov	r1, r3
 8004616:	480a      	ldr	r0, [pc, #40]	; (8004640 <HAL_ADC_MspInit+0xa0>)
 8004618:	f001 f97c 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Potentiometer_Pin|VBAT_Voltage_OUT_Pin;
 800461c:	2330      	movs	r3, #48	; 0x30
 800461e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004620:	2303      	movs	r3, #3
 8004622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004624:	f107 0318 	add.w	r3, r7, #24
 8004628:	4619      	mov	r1, r3
 800462a:	4806      	ldr	r0, [pc, #24]	; (8004644 <HAL_ADC_MspInit+0xa4>)
 800462c:	f001 f972 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004630:	bf00      	nop
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40012400 	.word	0x40012400
 800463c:	40021000 	.word	0x40021000
 8004640:	40010800 	.word	0x40010800
 8004644:	40011000 	.word	0x40011000

08004648 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_RTC_MspInit+0x3c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d110      	bne.n	800467c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800465a:	f002 ffbf 	bl	80075dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RTC_MspInit+0x40>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RTC_MspInit+0x40>)
 8004664:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004668:	61d3      	str	r3, [r2, #28]
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <HAL_RTC_MspInit+0x40>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RTC_MspInit+0x44>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40002800 	.word	0x40002800
 8004688:	40021000 	.word	0x40021000
 800468c:	4242043c 	.word	0x4242043c

08004690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 0318 	add.w	r3, r7, #24
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6e      	ldr	r2, [pc, #440]	; (8004864 <HAL_SPI_MspInit+0x1d4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	f040 808f 	bne.w	80047d0 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046b2:	4b6d      	ldr	r3, [pc, #436]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4a6c      	ldr	r2, [pc, #432]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046bc:	6193      	str	r3, [r2, #24]
 80046be:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ca:	4b67      	ldr	r3, [pc, #412]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	4a66      	ldr	r2, [pc, #408]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	6193      	str	r3, [r2, #24]
 80046d6:	4b64      	ldr	r3, [pc, #400]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80046e2:	2328      	movs	r3, #40	; 0x28
 80046e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ea:	2303      	movs	r3, #3
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	f107 0318 	add.w	r3, r7, #24
 80046f2:	4619      	mov	r1, r3
 80046f4:	485d      	ldr	r0, [pc, #372]	; (800486c <HAL_SPI_MspInit+0x1dc>)
 80046f6:	f001 f90d 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046fa:	2310      	movs	r3, #16
 80046fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004706:	f107 0318 	add.w	r3, r7, #24
 800470a:	4619      	mov	r1, r3
 800470c:	4857      	ldr	r0, [pc, #348]	; (800486c <HAL_SPI_MspInit+0x1dc>)
 800470e:	f001 f901 	bl	8005914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004712:	4b57      	ldr	r3, [pc, #348]	; (8004870 <HAL_SPI_MspInit+0x1e0>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
 8004728:	4a51      	ldr	r2, [pc, #324]	; (8004870 <HAL_SPI_MspInit+0x1e0>)
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800472e:	4b51      	ldr	r3, [pc, #324]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004730:	4a51      	ldr	r2, [pc, #324]	; (8004878 <HAL_SPI_MspInit+0x1e8>)
 8004732:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473a:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004746:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800474c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474e:	4b49      	ldr	r3, [pc, #292]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004754:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004758:	2220      	movs	r2, #32
 800475a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800475c:	4b45      	ldr	r3, [pc, #276]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 800475e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004762:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004764:	4843      	ldr	r0, [pc, #268]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004766:	f000 fd5b 	bl	8005220 <HAL_DMA_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_SPI_MspInit+0xe4>
    {
      Error_Handler();
 8004770:	f7ff f89c 	bl	80038ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 8004778:	64da      	str	r2, [r3, #76]	; 0x4c
 800477a:	4a3e      	ldr	r2, [pc, #248]	; (8004874 <HAL_SPI_MspInit+0x1e4>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004780:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 8004782:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <HAL_SPI_MspInit+0x1f0>)
 8004784:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 8004788:	2210      	movs	r2, #16
 800478a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004792:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80047a4:	4b35      	ldr	r3, [pc, #212]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047ac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80047b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80047b2:	4832      	ldr	r0, [pc, #200]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047b4:	f000 fd34 	bl	8005220 <HAL_DMA_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 80047be:	f7ff f875 	bl	80038ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047c6:	649a      	str	r2, [r3, #72]	; 0x48
 80047c8:	4a2c      	ldr	r2, [pc, #176]	; (800487c <HAL_SPI_MspInit+0x1ec>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80047ce:	e044      	b.n	800485a <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI3)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <HAL_SPI_MspInit+0x1f4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d13f      	bne.n	800485a <HAL_SPI_MspInit+0x1ca>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a22      	ldr	r2, [pc, #136]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80047e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e4:	61d3      	str	r3, [r2, #28]
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 80047f8:	f043 0310 	orr.w	r3, r3, #16
 80047fc:	6193      	str	r3, [r2, #24]
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_SPI_MspInit+0x1d8>)
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MOSI_Pin;
 800480a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800480e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2302      	movs	r3, #2
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004818:	f107 0318 	add.w	r3, r7, #24
 800481c:	4619      	mov	r1, r3
 800481e:	481a      	ldr	r0, [pc, #104]	; (8004888 <HAL_SPI_MspInit+0x1f8>)
 8004820:	f001 f878 	bl	8005914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_MISO_Pin;
 8004824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPI3_MISO_GPIO_Port, &GPIO_InitStruct);
 8004832:	f107 0318 	add.w	r3, r7, #24
 8004836:	4619      	mov	r1, r3
 8004838:	4813      	ldr	r0, [pc, #76]	; (8004888 <HAL_SPI_MspInit+0x1f8>)
 800483a:	f001 f86b 	bl	8005914 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_SPI_MspInit+0x1e0>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004854:	4a06      	ldr	r2, [pc, #24]	; (8004870 <HAL_SPI_MspInit+0x1e0>)
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	6053      	str	r3, [r2, #4]
}
 800485a:	bf00      	nop
 800485c:	3730      	adds	r7, #48	; 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40013000 	.word	0x40013000
 8004868:	40021000 	.word	0x40021000
 800486c:	40010c00 	.word	0x40010c00
 8004870:	40010000 	.word	0x40010000
 8004874:	2000b6ac 	.word	0x2000b6ac
 8004878:	4002001c 	.word	0x4002001c
 800487c:	2000c71c 	.word	0x2000c71c
 8004880:	40020030 	.word	0x40020030
 8004884:	40003c00 	.word	0x40003c00
 8004888:	40011000 	.word	0x40011000

0800488c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_UART_MspInit+0x8c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d131      	bne.n	8004910 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_UART_MspInit+0x90>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_UART_MspInit+0x90>)
 80048b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b6:	61d3      	str	r3, [r2, #28]
 80048b8:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_UART_MspInit+0x90>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048c4:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_UART_MspInit+0x90>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <HAL_UART_MspInit+0x90>)
 80048ca:	f043 0320 	orr.w	r3, r3, #32
 80048ce:	6193      	str	r3, [r2, #24]
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_UART_MspInit+0x90>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80048dc:	2360      	movs	r3, #96	; 0x60
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e4:	2302      	movs	r3, #2
 80048e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <HAL_UART_MspInit+0x94>)
 80048f0:	f001 f810 	bl	8005914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_UART_MspInit+0x98>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	4a06      	ldr	r2, [pc, #24]	; (8004924 <HAL_UART_MspInit+0x98>)
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004910:	bf00      	nop
 8004912:	3728      	adds	r7, #40	; 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40004400 	.word	0x40004400
 800491c:	40021000 	.word	0x40021000
 8004920:	40011400 	.word	0x40011400
 8004924:	40010000 	.word	0x40010000

08004928 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 800492c:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <SDTimer_Handler+0x3c>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <SDTimer_Handler+0x1c>
		Timer1--;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <SDTimer_Handler+0x3c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <SDTimer_Handler+0x3c>)
 8004942:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <SDTimer_Handler+0x40>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d006      	beq.n	800495c <SDTimer_Handler+0x34>
		Timer2--;
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <SDTimer_Handler+0x40>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <SDTimer_Handler+0x40>)
 800495a:	701a      	strb	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	2000c761 	.word	0x2000c761
 8004968:	2000c760 	.word	0x2000c760

0800496c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004970:	e7fe      	b.n	8004970 <NMI_Handler+0x4>

08004972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004972:	b480      	push	{r7}
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004976:	e7fe      	b.n	8004976 <HardFault_Handler+0x4>

08004978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800497c:	e7fe      	b.n	800497c <MemManage_Handler+0x4>

0800497e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004982:	e7fe      	b.n	8004982 <BusFault_Handler+0x4>

08004984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004988:	e7fe      	b.n	8004988 <UsageFault_Handler+0x4>

0800498a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a2:	b480      	push	{r7}
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a6:	bf00      	nop
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
	...

080049b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <SysTick_Handler+0x30>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <SysTick_Handler+0x30>)
 80049c0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <SysTick_Handler+0x30>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d904      	bls.n	80049d6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <SysTick_Handler+0x30>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80049d2:	f7ff ffa9 	bl	8004928 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049d6:	f000 f8cb 	bl	8004b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000a299 	.word	0x2000a299

080049e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <DMA1_Channel2_IRQHandler+0x10>)
 80049ea:	f000 fd29 	bl	8005440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000b6ac 	.word	0x2000b6ac

080049f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80049fc:	4802      	ldr	r0, [pc, #8]	; (8004a08 <DMA1_Channel3_IRQHandler+0x10>)
 80049fe:	f000 fd1f 	bl	8005440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000c71c 	.word	0x2000c71c

08004a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004a10:	4802      	ldr	r0, [pc, #8]	; (8004a1c <OTG_FS_IRQHandler+0x10>)
 8004a12:	f001 fbe1 	bl	80061d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000eb9c 	.word	0x2000eb9c

08004a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <_sbrk+0x5c>)
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <_sbrk+0x60>)
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <_sbrk+0x64>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <_sbrk+0x64>)
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <_sbrk+0x68>)
 8004a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <_sbrk+0x64>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d207      	bcs.n	8004a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a50:	f00a fb52 	bl	800f0f8 <__errno>
 8004a54:	4603      	mov	r3, r0
 8004a56:	220c      	movs	r2, #12
 8004a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	e009      	b.n	8004a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <_sbrk+0x64>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <_sbrk+0x64>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <_sbrk+0x64>)
 8004a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20010000 	.word	0x20010000
 8004a80:	00000400 	.word	0x00000400
 8004a84:	2000a29c 	.word	0x2000a29c
 8004a88:	2000ee70 	.word	0x2000ee70

08004a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004a98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004a9a:	e003      	b.n	8004aa4 <LoopCopyDataInit>

08004a9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004a9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004aa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004aa2:	3104      	adds	r1, #4

08004aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004aa4:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004aa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004aaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004aac:	d3f6      	bcc.n	8004a9c <CopyDataInit>
  ldr r2, =_sbss
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ab0:	e002      	b.n	8004ab8 <LoopFillZerobss>

08004ab2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004ab2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004ab4:	f842 3b04 	str.w	r3, [r2], #4

08004ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004aba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004abc:	d3f9      	bcc.n	8004ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004abe:	f7ff ffe5 	bl	8004a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ac2:	f00a fb1f 	bl	800f104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ac6:	f7fe fb67 	bl	8003198 <main>
  bx lr
 8004aca:	4770      	bx	lr
  ldr r3, =_sidata
 8004acc:	08025c18 	.word	0x08025c18
  ldr r0, =_sdata
 8004ad0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ad4:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 8004ad8:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 8004adc:	2000ee70 	.word	0x2000ee70

08004ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ae0:	e7fe      	b.n	8004ae0 <ADC1_2_IRQHandler>
	...

08004ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_Init+0x28>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_Init+0x28>)
 8004aee:	f043 0310 	orr.w	r3, r3, #16
 8004af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af4:	2003      	movs	r0, #3
 8004af6:	f000 fb51 	bl	800519c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f808 	bl	8004b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b00:	f7ff fd1c 	bl	800453c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000

08004b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_InitTick+0x54>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_InitTick+0x58>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb69 	bl	8005206 <HAL_SYSTICK_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00e      	b.n	8004b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d80a      	bhi.n	8004b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b44:	2200      	movs	r2, #0
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	f000 fb31 	bl	80051b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b50:	4a06      	ldr	r2, [pc, #24]	; (8004b6c <HAL_InitTick+0x5c>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200001d0 	.word	0x200001d0
 8004b68:	200001d8 	.word	0x200001d8
 8004b6c:	200001d4 	.word	0x200001d4

08004b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_IncTick+0x1c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_IncTick+0x20>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a03      	ldr	r2, [pc, #12]	; (8004b90 <HAL_IncTick+0x20>)
 8004b82:	6013      	str	r3, [r2, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	200001d8 	.word	0x200001d8
 8004b90:	2000c764 	.word	0x2000c764

08004b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return uwTick;
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <HAL_GetTick+0x10>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	2000c764 	.word	0x2000c764

08004ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d005      	beq.n	8004bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_Delay+0x44>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bce:	bf00      	nop
 8004bd0:	f7ff ffe0 	bl	8004b94 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d8f7      	bhi.n	8004bd0 <HAL_Delay+0x28>
  {
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	200001d8 	.word	0x200001d8

08004bf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0be      	b.n	8004d90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fcb6 	bl	80045a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f9ab 	bl	8004f90 <ADC_ConversionStop_Disable>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 8099 	bne.w	8004d7e <HAL_ADC_Init+0x18e>
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8095 	bne.w	8004d7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c5c:	f023 0302 	bic.w	r3, r3, #2
 8004c60:	f043 0202 	orr.w	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7b1b      	ldrb	r3, [r3, #12]
 8004c76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d003      	beq.n	8004c92 <HAL_ADC_Init+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_ADC_Init+0xa8>
 8004c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c96:	e000      	b.n	8004c9a <HAL_ADC_Init+0xaa>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7d1b      	ldrb	r3, [r3, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d119      	bne.n	8004cdc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7b1b      	ldrb	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	035a      	lsls	r2, r3, #13
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e00b      	b.n	8004cdc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	4b28      	ldr	r3, [pc, #160]	; (8004d98 <HAL_ADC_Init+0x1a8>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d003      	beq.n	8004d16 <HAL_ADC_Init+0x126>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d104      	bne.n	8004d20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	051b      	lsls	r3, r3, #20
 8004d1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_ADC_Init+0x1ac>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d10b      	bne.n	8004d5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	f043 0201 	orr.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d5a:	e018      	b.n	8004d8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f023 0312 	bic.w	r3, r3, #18
 8004d64:	f043 0210 	orr.w	r2, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	f043 0201 	orr.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d7c:	e007      	b.n	8004d8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f043 0210 	orr.w	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffe1f7fd 	.word	0xffe1f7fd
 8004d9c:	ff1f0efe 	.word	0xff1f0efe

08004da0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x20>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0dc      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1da>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d81c      	bhi.n	8004e0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	3b05      	subs	r3, #5
 8004de2:	221f      	movs	r2, #31
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	4019      	ands	r1, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	3b05      	subs	r3, #5
 8004dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34
 8004e08:	e03c      	b.n	8004e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d81c      	bhi.n	8004e4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b23      	subs	r3, #35	; 0x23
 8004e24:	221f      	movs	r2, #31
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	4019      	ands	r1, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3b23      	subs	r3, #35	; 0x23
 8004e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
 8004e4a:	e01b      	b.n	8004e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b41      	subs	r3, #65	; 0x41
 8004e5e:	221f      	movs	r2, #31
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	4019      	ands	r1, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	3b41      	subs	r3, #65	; 0x41
 8004e78:	fa00 f203 	lsl.w	r2, r0, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b09      	cmp	r3, #9
 8004e8a:	d91c      	bls.n	8004ec6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3b1e      	subs	r3, #30
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	4019      	ands	r1, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6898      	ldr	r0, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b1e      	subs	r3, #30
 8004eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e019      	b.n	8004efa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6919      	ldr	r1, [r3, #16]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	4019      	ands	r1, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6898      	ldr	r0, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d003      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f06:	2b11      	cmp	r3, #17
 8004f08:	d132      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d125      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d126      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f30:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d11a      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <HAL_ADC_ConfigChannel+0x1ec>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0c9a      	lsrs	r2, r3, #18
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f50:	e002      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f9      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x1b2>
 8004f5e:	e007      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	40012400 	.word	0x40012400
 8004f88:	200001d0 	.word	0x200001d0
 8004f8c:	431bde83 	.word	0x431bde83

08004f90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d127      	bne.n	8004ffa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fba:	f7ff fdeb 	bl	8004b94 <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004fc0:	e014      	b.n	8004fec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fc2:	f7ff fde7 	bl	8004b94 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d90d      	bls.n	8004fec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f043 0210 	orr.w	r2, r3, #16
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e007      	b.n	8004ffc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d0e3      	beq.n	8004fc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <__NVIC_SetPriorityGrouping+0x44>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800502c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <__NVIC_SetPriorityGrouping+0x44>)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	60d3      	str	r3, [r2, #12]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <__NVIC_GetPriorityGrouping+0x18>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 0307 	and.w	r3, r3, #7
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	2b00      	cmp	r3, #0
 8005078:	db0b      	blt.n	8005092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	f003 021f 	and.w	r2, r3, #31
 8005080:	4906      	ldr	r1, [pc, #24]	; (800509c <__NVIC_EnableIRQ+0x34>)
 8005082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2001      	movs	r0, #1
 800508a:	fa00 f202 	lsl.w	r2, r0, r2
 800508e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100

080050a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db0a      	blt.n	80050ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	490c      	ldr	r1, [pc, #48]	; (80050ec <__NVIC_SetPriority+0x4c>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	440b      	add	r3, r1
 80050c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c8:	e00a      	b.n	80050e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4908      	ldr	r1, [pc, #32]	; (80050f0 <__NVIC_SetPriority+0x50>)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	3b04      	subs	r3, #4
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	440b      	add	r3, r1
 80050de:	761a      	strb	r2, [r3, #24]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e100 	.word	0xe000e100
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	; 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf28      	it	cs
 8005112:	2304      	movcs	r3, #4
 8005114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3304      	adds	r3, #4
 800511a:	2b06      	cmp	r3, #6
 800511c:	d902      	bls.n	8005124 <NVIC_EncodePriority+0x30>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3b03      	subs	r3, #3
 8005122:	e000      	b.n	8005126 <NVIC_EncodePriority+0x32>
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	401a      	ands	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800513c:	f04f 31ff 	mov.w	r1, #4294967295
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43d9      	mvns	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	4313      	orrs	r3, r2
         );
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3b01      	subs	r3, #1
 8005164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005168:	d301      	bcc.n	800516e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800516a:	2301      	movs	r3, #1
 800516c:	e00f      	b.n	800518e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <SysTick_Config+0x40>)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3b01      	subs	r3, #1
 8005174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005176:	210f      	movs	r1, #15
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	f7ff ff90 	bl	80050a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <SysTick_Config+0x40>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005186:	4b04      	ldr	r3, [pc, #16]	; (8005198 <SysTick_Config+0x40>)
 8005188:	2207      	movs	r2, #7
 800518a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	e000e010 	.word	0xe000e010

0800519c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ff2d 	bl	8005004 <__NVIC_SetPriorityGrouping>
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	4603      	mov	r3, r0
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051c4:	f7ff ff42 	bl	800504c <__NVIC_GetPriorityGrouping>
 80051c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7ff ff90 	bl	80050f4 <NVIC_EncodePriority>
 80051d4:	4602      	mov	r2, r0
 80051d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff ff5f 	bl	80050a0 <__NVIC_SetPriority>
}
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ff35 	bl	8005068 <__NVIC_EnableIRQ>
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ffa2 	bl	8005158 <SysTick_Config>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e059      	b.n	80052ea <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <HAL_DMA_Init+0xd4>)
 800523e:	429a      	cmp	r2, r3
 8005240:	d80f      	bhi.n	8005262 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_DMA_Init+0xd8>)
 800524a:	4413      	add	r3, r2
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_DMA_Init+0xdc>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	009a      	lsls	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <HAL_DMA_Init+0xe0>)
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005260:	e00e      	b.n	8005280 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b26      	ldr	r3, [pc, #152]	; (8005304 <HAL_DMA_Init+0xe4>)
 800526a:	4413      	add	r3, r2
 800526c:	4a23      	ldr	r2, [pc, #140]	; (80052fc <HAL_DMA_Init+0xdc>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	009a      	lsls	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <HAL_DMA_Init+0xe8>)
 800527e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005296:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800529a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80052a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	40020407 	.word	0x40020407
 80052f8:	bffdfff8 	.word	0xbffdfff8
 80052fc:	cccccccd 	.word	0xcccccccd
 8005300:	40020000 	.word	0x40020000
 8005304:	bffdfbf8 	.word	0xbffdfbf8
 8005308:	40020400 	.word	0x40020400

0800530c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_DMA_Start_IT+0x20>
 8005328:	2302      	movs	r3, #2
 800532a:	e04a      	b.n	80053c2 <HAL_DMA_Start_IT+0xb6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800533a:	2b01      	cmp	r3, #1
 800533c:	d13a      	bne.n	80053b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 faa8 	bl	80058b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 020e 	orr.w	r2, r2, #14
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e00f      	b.n	80053a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0204 	bic.w	r2, r2, #4
 8005390:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 020a 	orr.w	r2, r2, #10
 80053a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e005      	b.n	80053c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
 80053be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d008      	beq.n	80053f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2204      	movs	r2, #4
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e020      	b.n	8005434 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 020e 	bic.w	r2, r2, #14
 8005400:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
	...

08005440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2204      	movs	r2, #4
 800545e:	409a      	lsls	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80d6 	beq.w	8005616 <HAL_DMA_IRQHandler+0x1d6>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80d0 	beq.w	8005616 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	4b9b      	ldr	r3, [pc, #620]	; (8005708 <HAL_DMA_IRQHandler+0x2c8>)
 800549c:	429a      	cmp	r2, r3
 800549e:	d958      	bls.n	8005552 <HAL_DMA_IRQHandler+0x112>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a99      	ldr	r2, [pc, #612]	; (800570c <HAL_DMA_IRQHandler+0x2cc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d04f      	beq.n	800554a <HAL_DMA_IRQHandler+0x10a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a98      	ldr	r2, [pc, #608]	; (8005710 <HAL_DMA_IRQHandler+0x2d0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d048      	beq.n	8005546 <HAL_DMA_IRQHandler+0x106>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a96      	ldr	r2, [pc, #600]	; (8005714 <HAL_DMA_IRQHandler+0x2d4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d040      	beq.n	8005540 <HAL_DMA_IRQHandler+0x100>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a95      	ldr	r2, [pc, #596]	; (8005718 <HAL_DMA_IRQHandler+0x2d8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d038      	beq.n	800553a <HAL_DMA_IRQHandler+0xfa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a93      	ldr	r2, [pc, #588]	; (800571c <HAL_DMA_IRQHandler+0x2dc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d030      	beq.n	8005534 <HAL_DMA_IRQHandler+0xf4>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a92      	ldr	r2, [pc, #584]	; (8005720 <HAL_DMA_IRQHandler+0x2e0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d028      	beq.n	800552e <HAL_DMA_IRQHandler+0xee>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a89      	ldr	r2, [pc, #548]	; (8005708 <HAL_DMA_IRQHandler+0x2c8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d020      	beq.n	8005528 <HAL_DMA_IRQHandler+0xe8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a8e      	ldr	r2, [pc, #568]	; (8005724 <HAL_DMA_IRQHandler+0x2e4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d019      	beq.n	8005524 <HAL_DMA_IRQHandler+0xe4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a8c      	ldr	r2, [pc, #560]	; (8005728 <HAL_DMA_IRQHandler+0x2e8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d012      	beq.n	8005520 <HAL_DMA_IRQHandler+0xe0>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a8b      	ldr	r2, [pc, #556]	; (800572c <HAL_DMA_IRQHandler+0x2ec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00a      	beq.n	800551a <HAL_DMA_IRQHandler+0xda>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a89      	ldr	r2, [pc, #548]	; (8005730 <HAL_DMA_IRQHandler+0x2f0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d102      	bne.n	8005514 <HAL_DMA_IRQHandler+0xd4>
 800550e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005512:	e01b      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005518:	e018      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 800551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551e:	e015      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005520:	2340      	movs	r3, #64	; 0x40
 8005522:	e013      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005524:	2304      	movs	r3, #4
 8005526:	e011      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005528:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800552c:	e00e      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 800552e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005532:	e00b      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005534:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005538:	e008      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 800553a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800553e:	e005      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005544:	e002      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	e000      	b.n	800554c <HAL_DMA_IRQHandler+0x10c>
 800554a:	2304      	movs	r3, #4
 800554c:	4a79      	ldr	r2, [pc, #484]	; (8005734 <HAL_DMA_IRQHandler+0x2f4>)
 800554e:	6053      	str	r3, [r2, #4]
 8005550:	e057      	b.n	8005602 <HAL_DMA_IRQHandler+0x1c2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6d      	ldr	r2, [pc, #436]	; (800570c <HAL_DMA_IRQHandler+0x2cc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d04f      	beq.n	80055fc <HAL_DMA_IRQHandler+0x1bc>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6b      	ldr	r2, [pc, #428]	; (8005710 <HAL_DMA_IRQHandler+0x2d0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d048      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x1b8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6a      	ldr	r2, [pc, #424]	; (8005714 <HAL_DMA_IRQHandler+0x2d4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d040      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x1b2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a68      	ldr	r2, [pc, #416]	; (8005718 <HAL_DMA_IRQHandler+0x2d8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d038      	beq.n	80055ec <HAL_DMA_IRQHandler+0x1ac>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a67      	ldr	r2, [pc, #412]	; (800571c <HAL_DMA_IRQHandler+0x2dc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d030      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x1a6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a65      	ldr	r2, [pc, #404]	; (8005720 <HAL_DMA_IRQHandler+0x2e0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d028      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x1a0>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5d      	ldr	r2, [pc, #372]	; (8005708 <HAL_DMA_IRQHandler+0x2c8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d020      	beq.n	80055da <HAL_DMA_IRQHandler+0x19a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a61      	ldr	r2, [pc, #388]	; (8005724 <HAL_DMA_IRQHandler+0x2e4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d019      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x196>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a60      	ldr	r2, [pc, #384]	; (8005728 <HAL_DMA_IRQHandler+0x2e8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d012      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x192>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_DMA_IRQHandler+0x2ec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00a      	beq.n	80055cc <HAL_DMA_IRQHandler+0x18c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a5d      	ldr	r2, [pc, #372]	; (8005730 <HAL_DMA_IRQHandler+0x2f0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d102      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x186>
 80055c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055c4:	e01b      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055ca:	e018      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	e015      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	e013      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055d6:	2304      	movs	r3, #4
 80055d8:	e011      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80055de:	e00e      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055e4:	e00b      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055ea:	e008      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055f0:	e005      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f6:	e002      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	e000      	b.n	80055fe <HAL_DMA_IRQHandler+0x1be>
 80055fc:	2304      	movs	r3, #4
 80055fe:	4a4e      	ldr	r2, [pc, #312]	; (8005738 <HAL_DMA_IRQHandler+0x2f8>)
 8005600:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8136 	beq.w	8005878 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005614:	e130      	b.n	8005878 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2202      	movs	r2, #2
 800561c:	409a      	lsls	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80f8 	beq.w	8005818 <HAL_DMA_IRQHandler+0x3d8>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80f2 	beq.w	8005818 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 020a 	bic.w	r2, r2, #10
 8005650:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	4b29      	ldr	r3, [pc, #164]	; (8005708 <HAL_DMA_IRQHandler+0x2c8>)
 8005662:	429a      	cmp	r2, r3
 8005664:	d973      	bls.n	800574e <HAL_DMA_IRQHandler+0x30e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_IRQHandler+0x2cc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d06a      	beq.n	8005746 <HAL_DMA_IRQHandler+0x306>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <HAL_DMA_IRQHandler+0x2d0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d063      	beq.n	8005742 <HAL_DMA_IRQHandler+0x302>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_IRQHandler+0x2d4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d05b      	beq.n	800573c <HAL_DMA_IRQHandler+0x2fc>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_DMA_IRQHandler+0x2d8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d038      	beq.n	8005700 <HAL_DMA_IRQHandler+0x2c0>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_IRQHandler+0x2dc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d030      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2ba>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a20      	ldr	r2, [pc, #128]	; (8005720 <HAL_DMA_IRQHandler+0x2e0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d028      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x2b4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_DMA_IRQHandler+0x2c8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d020      	beq.n	80056ee <HAL_DMA_IRQHandler+0x2ae>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	; (8005724 <HAL_DMA_IRQHandler+0x2e4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d019      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2aa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <HAL_DMA_IRQHandler+0x2e8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d012      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x2a6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_DMA_IRQHandler+0x2ec>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00a      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x2a0>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_DMA_IRQHandler+0x2f0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d102      	bne.n	80056da <HAL_DMA_IRQHandler+0x29a>
 80056d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d8:	e036      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056de:	e033      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e4:	e030      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056e6:	2320      	movs	r3, #32
 80056e8:	e02e      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e02c      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056f2:	e029      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056f8:	e026      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 80056fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056fe:	e023      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 8005700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005704:	e020      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 8005706:	bf00      	nop
 8005708:	40020080 	.word	0x40020080
 800570c:	40020008 	.word	0x40020008
 8005710:	4002001c 	.word	0x4002001c
 8005714:	40020030 	.word	0x40020030
 8005718:	40020044 	.word	0x40020044
 800571c:	40020058 	.word	0x40020058
 8005720:	4002006c 	.word	0x4002006c
 8005724:	40020408 	.word	0x40020408
 8005728:	4002041c 	.word	0x4002041c
 800572c:	40020430 	.word	0x40020430
 8005730:	40020444 	.word	0x40020444
 8005734:	40020400 	.word	0x40020400
 8005738:	40020000 	.word	0x40020000
 800573c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005740:	e002      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 8005742:	2320      	movs	r3, #32
 8005744:	e000      	b.n	8005748 <HAL_DMA_IRQHandler+0x308>
 8005746:	2302      	movs	r3, #2
 8005748:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <HAL_DMA_IRQHandler+0x444>)
 800574a:	6053      	str	r3, [r2, #4]
 800574c:	e057      	b.n	80057fe <HAL_DMA_IRQHandler+0x3be>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4d      	ldr	r2, [pc, #308]	; (8005888 <HAL_DMA_IRQHandler+0x448>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d04f      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x3b8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a4b      	ldr	r2, [pc, #300]	; (800588c <HAL_DMA_IRQHandler+0x44c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d048      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x3b4>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <HAL_DMA_IRQHandler+0x450>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d040      	beq.n	80057ee <HAL_DMA_IRQHandler+0x3ae>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a48      	ldr	r2, [pc, #288]	; (8005894 <HAL_DMA_IRQHandler+0x454>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d038      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x3a8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a47      	ldr	r2, [pc, #284]	; (8005898 <HAL_DMA_IRQHandler+0x458>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d030      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x3a2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a45      	ldr	r2, [pc, #276]	; (800589c <HAL_DMA_IRQHandler+0x45c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d028      	beq.n	80057dc <HAL_DMA_IRQHandler+0x39c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a44      	ldr	r2, [pc, #272]	; (80058a0 <HAL_DMA_IRQHandler+0x460>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d020      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x396>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a42      	ldr	r2, [pc, #264]	; (80058a4 <HAL_DMA_IRQHandler+0x464>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d019      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x392>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a41      	ldr	r2, [pc, #260]	; (80058a8 <HAL_DMA_IRQHandler+0x468>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d012      	beq.n	80057ce <HAL_DMA_IRQHandler+0x38e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3f      	ldr	r2, [pc, #252]	; (80058ac <HAL_DMA_IRQHandler+0x46c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00a      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x388>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3e      	ldr	r2, [pc, #248]	; (80058b0 <HAL_DMA_IRQHandler+0x470>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d102      	bne.n	80057c2 <HAL_DMA_IRQHandler+0x382>
 80057bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057c0:	e01b      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057c6:	e018      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057cc:	e015      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057ce:	2320      	movs	r3, #32
 80057d0:	e013      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e011      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057da:	e00e      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057e0:	e00b      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e6:	e008      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057ec:	e005      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f2:	e002      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057f4:	2320      	movs	r3, #32
 80057f6:	e000      	b.n	80057fa <HAL_DMA_IRQHandler+0x3ba>
 80057f8:	2302      	movs	r3, #2
 80057fa:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <HAL_DMA_IRQHandler+0x474>)
 80057fc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d034      	beq.n	8005878 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005816:	e02f      	b.n	8005878 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	2208      	movs	r2, #8
 800581e:	409a      	lsls	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d028      	beq.n	800587a <HAL_DMA_IRQHandler+0x43a>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d023      	beq.n	800587a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 020e 	bic.w	r2, r2, #14
 8005840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f202 	lsl.w	r2, r1, r2
 8005850:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4798      	blx	r3
    }
  }
  return;
 8005878:	bf00      	nop
 800587a:	bf00      	nop
}
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40020400 	.word	0x40020400
 8005888:	40020008 	.word	0x40020008
 800588c:	4002001c 	.word	0x4002001c
 8005890:	40020030 	.word	0x40020030
 8005894:	40020044 	.word	0x40020044
 8005898:	40020058 	.word	0x40020058
 800589c:	4002006c 	.word	0x4002006c
 80058a0:	40020080 	.word	0x40020080
 80058a4:	40020408 	.word	0x40020408
 80058a8:	4002041c 	.word	0x4002041c
 80058ac:	40020430 	.word	0x40020430
 80058b0:	40020444 	.word	0x40020444
 80058b4:	40020000 	.word	0x40020000

080058b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d108      	bne.n	80058f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058f6:	e007      	b.n	8005908 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
	...

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005922:	2300      	movs	r3, #0
 8005924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005926:	e169      	b.n	8005bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005928:	2201      	movs	r2, #1
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	429a      	cmp	r2, r3
 8005942:	f040 8158 	bne.w	8005bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4a9a      	ldr	r2, [pc, #616]	; (8005bb4 <HAL_GPIO_Init+0x2a0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d05e      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
 8005950:	4a98      	ldr	r2, [pc, #608]	; (8005bb4 <HAL_GPIO_Init+0x2a0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d875      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 8005956:	4a98      	ldr	r2, [pc, #608]	; (8005bb8 <HAL_GPIO_Init+0x2a4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d058      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
 800595c:	4a96      	ldr	r2, [pc, #600]	; (8005bb8 <HAL_GPIO_Init+0x2a4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d86f      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 8005962:	4a96      	ldr	r2, [pc, #600]	; (8005bbc <HAL_GPIO_Init+0x2a8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d052      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
 8005968:	4a94      	ldr	r2, [pc, #592]	; (8005bbc <HAL_GPIO_Init+0x2a8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d869      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 800596e:	4a94      	ldr	r2, [pc, #592]	; (8005bc0 <HAL_GPIO_Init+0x2ac>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04c      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
 8005974:	4a92      	ldr	r2, [pc, #584]	; (8005bc0 <HAL_GPIO_Init+0x2ac>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d863      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 800597a:	4a92      	ldr	r2, [pc, #584]	; (8005bc4 <HAL_GPIO_Init+0x2b0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d046      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
 8005980:	4a90      	ldr	r2, [pc, #576]	; (8005bc4 <HAL_GPIO_Init+0x2b0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d85d      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 8005986:	2b12      	cmp	r3, #18
 8005988:	d82a      	bhi.n	80059e0 <HAL_GPIO_Init+0xcc>
 800598a:	2b12      	cmp	r3, #18
 800598c:	d859      	bhi.n	8005a42 <HAL_GPIO_Init+0x12e>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <HAL_GPIO_Init+0x80>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a0f 	.word	0x08005a0f
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059fb 	.word	0x080059fb
 80059a0:	08005a3d 	.word	0x08005a3d
 80059a4:	08005a43 	.word	0x08005a43
 80059a8:	08005a43 	.word	0x08005a43
 80059ac:	08005a43 	.word	0x08005a43
 80059b0:	08005a43 	.word	0x08005a43
 80059b4:	08005a43 	.word	0x08005a43
 80059b8:	08005a43 	.word	0x08005a43
 80059bc:	08005a43 	.word	0x08005a43
 80059c0:	08005a43 	.word	0x08005a43
 80059c4:	08005a43 	.word	0x08005a43
 80059c8:	08005a43 	.word	0x08005a43
 80059cc:	08005a43 	.word	0x08005a43
 80059d0:	08005a43 	.word	0x08005a43
 80059d4:	08005a43 	.word	0x08005a43
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	4a79      	ldr	r2, [pc, #484]	; (8005bc8 <HAL_GPIO_Init+0x2b4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80059e6:	e02c      	b.n	8005a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	623b      	str	r3, [r7, #32]
          break;
 80059ee:	e029      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	3304      	adds	r3, #4
 80059f6:	623b      	str	r3, [r7, #32]
          break;
 80059f8:	e024      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	3308      	adds	r3, #8
 8005a00:	623b      	str	r3, [r7, #32]
          break;
 8005a02:	e01f      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	623b      	str	r3, [r7, #32]
          break;
 8005a0c:	e01a      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a16:	2304      	movs	r3, #4
 8005a18:	623b      	str	r3, [r7, #32]
          break;
 8005a1a:	e013      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d105      	bne.n	8005a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a24:	2308      	movs	r3, #8
 8005a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	611a      	str	r2, [r3, #16]
          break;
 8005a2e:	e009      	b.n	8005a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a30:	2308      	movs	r3, #8
 8005a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	615a      	str	r2, [r3, #20]
          break;
 8005a3a:	e003      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	623b      	str	r3, [r7, #32]
          break;
 8005a40:	e000      	b.n	8005a44 <HAL_GPIO_Init+0x130>
          break;
 8005a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	d801      	bhi.n	8005a4e <HAL_GPIO_Init+0x13a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	e001      	b.n	8005a52 <HAL_GPIO_Init+0x13e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d802      	bhi.n	8005a60 <HAL_GPIO_Init+0x14c>
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	e002      	b.n	8005a66 <HAL_GPIO_Init+0x152>
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	3b08      	subs	r3, #8
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	210f      	movs	r1, #15
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	6a39      	ldr	r1, [r7, #32]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80b1 	beq.w	8005bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a94:	4b4d      	ldr	r3, [pc, #308]	; (8005bcc <HAL_GPIO_Init+0x2b8>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	4a4c      	ldr	r2, [pc, #304]	; (8005bcc <HAL_GPIO_Init+0x2b8>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6193      	str	r3, [r2, #24]
 8005aa0:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_GPIO_Init+0x2b8>)
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005aac:	4a48      	ldr	r2, [pc, #288]	; (8005bd0 <HAL_GPIO_Init+0x2bc>)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	220f      	movs	r2, #15
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a40      	ldr	r2, [pc, #256]	; (8005bd4 <HAL_GPIO_Init+0x2c0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_GPIO_Init+0x1ec>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3f      	ldr	r2, [pc, #252]	; (8005bd8 <HAL_GPIO_Init+0x2c4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00d      	beq.n	8005afc <HAL_GPIO_Init+0x1e8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3e      	ldr	r2, [pc, #248]	; (8005bdc <HAL_GPIO_Init+0x2c8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <HAL_GPIO_Init+0x1e4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3d      	ldr	r2, [pc, #244]	; (8005be0 <HAL_GPIO_Init+0x2cc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_GPIO_Init+0x1e0>
 8005af0:	2303      	movs	r3, #3
 8005af2:	e006      	b.n	8005b02 <HAL_GPIO_Init+0x1ee>
 8005af4:	2304      	movs	r3, #4
 8005af6:	e004      	b.n	8005b02 <HAL_GPIO_Init+0x1ee>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e002      	b.n	8005b02 <HAL_GPIO_Init+0x1ee>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_GPIO_Init+0x1ee>
 8005b00:	2300      	movs	r3, #0
 8005b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b04:	f002 0203 	and.w	r2, r2, #3
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b12:	492f      	ldr	r1, [pc, #188]	; (8005bd0 <HAL_GPIO_Init+0x2bc>)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d006      	beq.n	8005b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b2c:	4b2d      	ldr	r3, [pc, #180]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	492c      	ldr	r1, [pc, #176]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
 8005b38:	e006      	b.n	8005b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b3a:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	4928      	ldr	r1, [pc, #160]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4922      	ldr	r1, [pc, #136]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
 8005b60:	e006      	b.n	8005b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b62:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	491e      	ldr	r1, [pc, #120]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	4918      	ldr	r1, [pc, #96]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]
 8005b88:	e006      	b.n	8005b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005b8a:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	4914      	ldr	r1, [pc, #80]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d021      	beq.n	8005be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	490e      	ldr	r1, [pc, #56]	; (8005be4 <HAL_GPIO_Init+0x2d0>)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
 8005bb0:	e021      	b.n	8005bf6 <HAL_GPIO_Init+0x2e2>
 8005bb2:	bf00      	nop
 8005bb4:	10320000 	.word	0x10320000
 8005bb8:	10310000 	.word	0x10310000
 8005bbc:	10220000 	.word	0x10220000
 8005bc0:	10210000 	.word	0x10210000
 8005bc4:	10120000 	.word	0x10120000
 8005bc8:	10110000 	.word	0x10110000
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010800 	.word	0x40010800
 8005bd8:	40010c00 	.word	0x40010c00
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40011400 	.word	0x40011400
 8005be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	4909      	ldr	r1, [pc, #36]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	fa22 f303 	lsr.w	r3, r2, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f47f ae8e 	bne.w	8005928 <HAL_GPIO_Init+0x14>
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	372c      	adds	r7, #44	; 0x2c
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr
 8005c18:	40010400 	.word	0x40010400

08005c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
 8005c38:	e001      	b.n	8005c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	807b      	strh	r3, [r7, #2]
 8005c56:	4613      	mov	r3, r2
 8005c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c5a:	787b      	ldrb	r3, [r7, #1]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c60:	887a      	ldrh	r2, [r7, #2]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c66:	e003      	b.n	8005c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c68:	887b      	ldrh	r3, [r7, #2]
 8005c6a:	041a      	lsls	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	611a      	str	r2, [r3, #16]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f806 	bl	8005cac <HAL_GPIO_EXTI_Callback>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40010400 	.word	0x40010400

08005cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc2:	b08f      	sub	sp, #60	; 0x3c
 8005cc4:	af0a      	add	r7, sp, #40	; 0x28
 8005cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e054      	b.n	8005d7c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f008 ffc5 	bl	800ec7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f003 fc71 	bl	80095f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	687e      	ldr	r6, [r7, #4]
 8005d1e:	466d      	mov	r5, sp
 8005d20:	f106 0410 	add.w	r4, r6, #16
 8005d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d34:	1d33      	adds	r3, r6, #4
 8005d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d38:	6838      	ldr	r0, [r7, #0]
 8005d3a:	f003 fc05 	bl	8009548 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2101      	movs	r1, #1
 8005d44:	4618      	mov	r0, r3
 8005d46:	f003 fc67 	bl	8009618 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	687e      	ldr	r6, [r7, #4]
 8005d52:	466d      	mov	r5, sp
 8005d54:	f106 0410 	add.w	r4, r6, #16
 8005d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d64:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d68:	1d33      	adds	r3, r6, #4
 8005d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6c:	6838      	ldr	r0, [r7, #0]
 8005d6e:	f003 fd6b 	bl	8009848 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d84 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b089      	sub	sp, #36	; 0x24
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	70fb      	strb	r3, [r7, #3]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70bb      	strb	r3, [r7, #2]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_HCD_HC_Init+0x28>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e07f      	b.n	8005eac <HAL_HCD_HC_Init+0x128>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	440b      	add	r3, r1
 8005dc2:	333d      	adds	r3, #61	; 0x3d
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3338      	adds	r3, #56	; 0x38
 8005dd8:	787a      	ldrb	r2, [r7, #1]
 8005dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	440b      	add	r3, r1
 8005dea:	3340      	adds	r3, #64	; 0x40
 8005dec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005dee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3339      	adds	r3, #57	; 0x39
 8005e00:	78fa      	ldrb	r2, [r7, #3]
 8005e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	440b      	add	r3, r1
 8005e12:	333f      	adds	r3, #63	; 0x3f
 8005e14:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	78bb      	ldrb	r3, [r7, #2]
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	b2d8      	uxtb	r0, r3
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	440b      	add	r3, r1
 8005e30:	333a      	adds	r3, #58	; 0x3a
 8005e32:	4602      	mov	r2, r0
 8005e34:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da0a      	bge.n	8005e54 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	333b      	adds	r3, #59	; 0x3b
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e009      	b.n	8005e68 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	440b      	add	r3, r1
 8005e62:	333b      	adds	r3, #59	; 0x3b
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	333c      	adds	r3, #60	; 0x3c
 8005e78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e7c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	787c      	ldrb	r4, [r7, #1]
 8005e84:	78ba      	ldrb	r2, [r7, #2]
 8005e86:	78f9      	ldrb	r1, [r7, #3]
 8005e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e8a:	9302      	str	r3, [sp, #8]
 8005e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4623      	mov	r3, r4
 8005e9a:	f003 fdd5 	bl	8009a48 <USB_HC_Init>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_HCD_HC_Halt+0x1e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e00f      	b.n	8005ef2 <HAL_HCD_HC_Halt+0x3e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f003 ffb2 	bl	8009e4c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	70fb      	strb	r3, [r7, #3]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70bb      	strb	r3, [r7, #2]
 8005f12:	4613      	mov	r3, r2
 8005f14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	333b      	adds	r3, #59	; 0x3b
 8005f26:	78ba      	ldrb	r2, [r7, #2]
 8005f28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	440b      	add	r3, r1
 8005f38:	333f      	adds	r3, #63	; 0x3f
 8005f3a:	787a      	ldrb	r2, [r7, #1]
 8005f3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005f3e:	7c3b      	ldrb	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d114      	bne.n	8005f6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	440b      	add	r3, r1
 8005f52:	3342      	adds	r3, #66	; 0x42
 8005f54:	2203      	movs	r2, #3
 8005f56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	333d      	adds	r3, #61	; 0x3d
 8005f68:	7f3a      	ldrb	r2, [r7, #28]
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e009      	b.n	8005f82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3342      	adds	r3, #66	; 0x42
 8005f7e:	2202      	movs	r2, #2
 8005f80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005f82:	787b      	ldrb	r3, [r7, #1]
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	f200 80d6 	bhi.w	8006136 <HAL_HCD_HC_SubmitRequest+0x23a>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08006121 	.word	0x08006121
 8005f98:	0800600d 	.word	0x0800600d
 8005f9c:	08006097 	.word	0x08006097
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005fa0:	7c3b      	ldrb	r3, [r7, #16]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f040 80c9 	bne.w	800613a <HAL_HCD_HC_SubmitRequest+0x23e>
 8005fa8:	78bb      	ldrb	r3, [r7, #2]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 80c5 	bne.w	800613a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005fb0:	8b3b      	ldrh	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	440b      	add	r3, r1
 8005fc4:	3351      	adds	r3, #81	; 0x51
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	440b      	add	r3, r1
 8005fd8:	3351      	adds	r3, #81	; 0x51
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	440b      	add	r3, r1
 8005fee:	3342      	adds	r3, #66	; 0x42
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005ff4:	e0a1      	b.n	800613a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	440b      	add	r3, r1
 8006004:	3342      	adds	r3, #66	; 0x42
 8006006:	2202      	movs	r2, #2
 8006008:	701a      	strb	r2, [r3, #0]
      break;
 800600a:	e096      	b.n	800613a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800600c:	78bb      	ldrb	r3, [r7, #2]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d120      	bne.n	8006054 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	440b      	add	r3, r1
 8006020:	3351      	adds	r3, #81	; 0x51
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	440b      	add	r3, r1
 8006036:	3342      	adds	r3, #66	; 0x42
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800603c:	e07e      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	3342      	adds	r3, #66	; 0x42
 800604e:	2202      	movs	r2, #2
 8006050:	701a      	strb	r2, [r3, #0]
      break;
 8006052:	e073      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006054:	78fa      	ldrb	r2, [r7, #3]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	3350      	adds	r3, #80	; 0x50
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	3342      	adds	r3, #66	; 0x42
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
      break;
 800607e:	e05d      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	3342      	adds	r3, #66	; 0x42
 8006090:	2202      	movs	r2, #2
 8006092:	701a      	strb	r2, [r3, #0]
      break;
 8006094:	e052      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006096:	78bb      	ldrb	r3, [r7, #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d120      	bne.n	80060de <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3351      	adds	r3, #81	; 0x51
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	440b      	add	r3, r1
 80060c0:	3342      	adds	r3, #66	; 0x42
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80060c6:	e039      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	440b      	add	r3, r1
 80060d6:	3342      	adds	r3, #66	; 0x42
 80060d8:	2202      	movs	r2, #2
 80060da:	701a      	strb	r2, [r3, #0]
      break;
 80060dc:	e02e      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	440b      	add	r3, r1
 80060ec:	3350      	adds	r3, #80	; 0x50
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	440b      	add	r3, r1
 8006102:	3342      	adds	r3, #66	; 0x42
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
      break;
 8006108:	e018      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	3342      	adds	r3, #66	; 0x42
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e00d      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	3342      	adds	r3, #66	; 0x42
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
      break;
 8006134:	e002      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800613a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	3344      	adds	r3, #68	; 0x44
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	8b39      	ldrh	r1, [r7, #24]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4403      	add	r3, r0
 8006160:	3348      	adds	r3, #72	; 0x48
 8006162:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	440b      	add	r3, r1
 8006172:	335c      	adds	r3, #92	; 0x5c
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	440b      	add	r3, r1
 8006186:	334c      	adds	r3, #76	; 0x4c
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	3339      	adds	r3, #57	; 0x39
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	335d      	adds	r3, #93	; 0x5d
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	3338      	adds	r3, #56	; 0x38
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4413      	add	r3, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f003 fd2f 	bl	8009c2c <USB_HC_StartXfer>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f003 faea 	bl	80097c8 <USB_GetMode>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	f040 80ef 	bne.w	80063da <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f003 facf 	bl	80097a4 <USB_ReadInterrupts>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80e5 	beq.w	80063d8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f003 fac6 	bl	80097a4 <USB_ReadInterrupts>
 8006218:	4603      	mov	r3, r0
 800621a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800621e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006222:	d104      	bne.n	800622e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800622c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f003 fab6 	bl	80097a4 <USB_ReadInterrupts>
 8006238:	4603      	mov	r3, r0
 800623a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d104      	bne.n	800624e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800624c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f003 faa6 	bl	80097a4 <USB_ReadInterrupts>
 8006258:	4603      	mov	r3, r0
 800625a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800625e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006262:	d104      	bne.n	800626e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800626c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f003 fa96 	bl	80097a4 <USB_ReadInterrupts>
 8006278:	4603      	mov	r3, r0
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b02      	cmp	r3, #2
 8006280:	d103      	bne.n	800628a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f003 fa88 	bl	80097a4 <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800629a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629e:	d115      	bne.n	80062cc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80062a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f008 fd40 	bl	800ed40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2101      	movs	r1, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f003 fb3c 	bl	8009944 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f003 fa67 	bl	80097a4 <USB_ReadInterrupts>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062e0:	d102      	bne.n	80062e8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f906 	bl	80074f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f003 fa59 	bl	80097a4 <USB_ReadInterrupts>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d106      	bne.n	800630a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f008 fd03 	bl	800ed08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2208      	movs	r2, #8
 8006308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f003 fa48 	bl	80097a4 <USB_ReadInterrupts>
 8006314:	4603      	mov	r3, r0
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800631e:	d138      	bne.n	8006392 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f003 fd81 	bl	8009e2c <USB_HC_ReadInterrupt>
 800632a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e025      	b.n	800637e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d018      	beq.n	8006378 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d106      	bne.n	800636c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8b1 	bl	80064cc <HCD_HC_IN_IRQHandler>
 800636a:	e005      	b.n	8006378 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fcbb 	bl	8006cee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3301      	adds	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3d4      	bcc.n	8006332 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f003 fa04 	bl	80097a4 <USB_ReadInterrupts>
 800639c:	4603      	mov	r3, r0
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d101      	bne.n	80063aa <HAL_HCD_IRQHandler+0x1d2>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <HAL_HCD_IRQHandler+0x1d4>
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d014      	beq.n	80063da <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0210 	bic.w	r2, r2, #16
 80063be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ffe9 	bl	8007398 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0210 	orr.w	r2, r2, #16
 80063d4:	619a      	str	r2, [r3, #24]
 80063d6:	e000      	b.n	80063da <HAL_HCD_IRQHandler+0x202>
      return;
 80063d8:	bf00      	nop
    }
  }
}
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_HCD_Start+0x16>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e013      	b.n	800641e <HAL_HCD_Start+0x3e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f003 f8e8 	bl	80095d8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fad1 	bl	80099b6 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_HCD_Stop+0x16>
 8006438:	2302      	movs	r3, #2
 800643a:	e00d      	b.n	8006458 <HAL_HCD_Stop+0x32>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f003 fdfd 	bl	800a048 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	440b      	add	r3, r1
 800647a:	335c      	adds	r3, #92	; 0x5c
 800647c:	781b      	ldrb	r3, [r3, #0]
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr

08006488 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	440b      	add	r3, r1
 80064a2:	334c      	adds	r3, #76	; 0x4c
 80064a4:	681b      	ldr	r3, [r3, #0]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f003 fab2 	bl	8009a26 <USB_GetCurrentFrame>
 80064c2:	4603      	mov	r3, r0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d119      	bne.n	8006530 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	461a      	mov	r2, r3
 800650a:	2304      	movs	r3, #4
 800650c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	440a      	add	r2, r1
 8006524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	60d3      	str	r3, [r2, #12]
 800652e:	e0ce      	b.n	80066ce <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006546:	d12c      	bne.n	80065a2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	461a      	mov	r2, r3
 8006556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800655a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	335d      	adds	r3, #93	; 0x5d
 800656c:	2207      	movs	r2, #7
 800656e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	440a      	add	r2, r1
 8006586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f003 fc56 	bl	8009e4c <USB_HC_Halt>
 80065a0:	e095      	b.n	80066ce <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d109      	bne.n	80065cc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c4:	461a      	mov	r2, r3
 80065c6:	2320      	movs	r3, #32
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	e080      	b.n	80066ce <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d134      	bne.n	800664c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	335d      	adds	r3, #93	; 0x5d
 8006612:	2205      	movs	r2, #5
 8006614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006622:	461a      	mov	r2, r3
 8006624:	2310      	movs	r3, #16
 8006626:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	461a      	mov	r2, r3
 8006636:	2308      	movs	r3, #8
 8006638:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f003 fc01 	bl	8009e4c <USB_HC_Halt>
 800664a:	e040      	b.n	80066ce <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006662:	d134      	bne.n	80066ce <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	440a      	add	r2, r1
 800667a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f003 fbdc 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	461a      	mov	r2, r3
 80066a2:	2310      	movs	r3, #16
 80066a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	440b      	add	r3, r1
 80066b4:	335d      	adds	r3, #93	; 0x5d
 80066b6:	2208      	movs	r2, #8
 80066b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066cc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d122      	bne.n	800672c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f003 fb9b 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	461a      	mov	r2, r3
 8006724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006728:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800672a:	e2dc      	b.n	8006ce6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	f040 80dd 	bne.w	80068fe <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	440b      	add	r3, r1
 8006752:	335d      	adds	r3, #93	; 0x5d
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	440b      	add	r3, r1
 8006766:	3358      	adds	r3, #88	; 0x58
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	461a      	mov	r2, r3
 800677a:	2301      	movs	r3, #1
 800677c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	440b      	add	r3, r1
 800678c:	333f      	adds	r3, #63	; 0x3f
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	440b      	add	r3, r1
 80067a2:	333f      	adds	r3, #63	; 0x3f
 80067a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d121      	bne.n	80067ee <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f003 fb39 	bl	8009e4c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	461a      	mov	r2, r3
 80067e8:	2310      	movs	r3, #16
 80067ea:	6093      	str	r3, [r2, #8]
 80067ec:	e070      	b.n	80068d0 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	440b      	add	r3, r1
 80067fc:	333f      	adds	r3, #63	; 0x3f
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d12a      	bne.n	800685a <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	440a      	add	r2, r1
 800681a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006822:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	440b      	add	r3, r1
 8006832:	335c      	adds	r3, #92	; 0x5c
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	b2d8      	uxtb	r0, r3
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	440b      	add	r3, r1
 800684a:	335c      	adds	r3, #92	; 0x5c
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	4601      	mov	r1, r0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f008 fa82 	bl	800ed5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006858:	e03a      	b.n	80068d0 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	440b      	add	r3, r1
 8006868:	333f      	adds	r3, #63	; 0x3f
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d12f      	bne.n	80068d0 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	440b      	add	r3, r1
 800687e:	335c      	adds	r3, #92	; 0x5c
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	440b      	add	r3, r1
 8006892:	3350      	adds	r3, #80	; 0x50
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f083 0301 	eor.w	r3, r3, #1
 800689a:	b2d8      	uxtb	r0, r3
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	440b      	add	r3, r1
 80068aa:	3350      	adds	r3, #80	; 0x50
 80068ac:	4602      	mov	r2, r0
 80068ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	b2d8      	uxtb	r0, r3
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	440b      	add	r3, r1
 80068c2:	335c      	adds	r3, #92	; 0x5c
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	4601      	mov	r1, r0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f008 fa46 	bl	800ed5c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	440b      	add	r3, r1
 80068de:	3350      	adds	r3, #80	; 0x50
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2d8      	uxtb	r0, r3
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	440b      	add	r3, r1
 80068f6:	3350      	adds	r3, #80	; 0x50
 80068f8:	4602      	mov	r2, r0
 80068fa:	701a      	strb	r2, [r3, #0]
}
 80068fc:	e1f3      	b.n	8006ce6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	f040 811a 	bne.w	8006b4a <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006930:	f023 0302 	bic.w	r3, r3, #2
 8006934:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	440b      	add	r3, r1
 8006944:	335d      	adds	r3, #93	; 0x5d
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d10a      	bne.n	8006962 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	440b      	add	r3, r1
 800695a:	335c      	adds	r3, #92	; 0x5c
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e0d9      	b.n	8006b16 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	440b      	add	r3, r1
 8006970:	335d      	adds	r3, #93	; 0x5d
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b05      	cmp	r3, #5
 8006976:	d10a      	bne.n	800698e <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	440b      	add	r3, r1
 8006986:	335c      	adds	r3, #92	; 0x5c
 8006988:	2205      	movs	r2, #5
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e0c3      	b.n	8006b16 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	440b      	add	r3, r1
 800699c:	335d      	adds	r3, #93	; 0x5d
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	d00a      	beq.n	80069ba <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	335d      	adds	r3, #93	; 0x5d
 80069b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d156      	bne.n	8006a68 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	3358      	adds	r3, #88	; 0x58
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	1c59      	adds	r1, r3, #1
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4403      	add	r3, r0
 80069dc:	3358      	adds	r3, #88	; 0x58
 80069de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	440b      	add	r3, r1
 80069ee:	3358      	adds	r3, #88	; 0x58
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d914      	bls.n	8006a20 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	440b      	add	r3, r1
 8006a04:	3358      	adds	r3, #88	; 0x58
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	440b      	add	r3, r1
 8006a18:	335c      	adds	r3, #92	; 0x5c
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e009      	b.n	8006a34 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	440b      	add	r3, r1
 8006a2e:	335c      	adds	r3, #92	; 0x5c
 8006a30:	2202      	movs	r2, #2
 8006a32:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a4a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e056      	b.n	8006b16 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	440b      	add	r3, r1
 8006a76:	335d      	adds	r3, #93	; 0x5d
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d123      	bne.n	8006ac6 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	440b      	add	r3, r1
 8006a8c:	335c      	adds	r3, #92	; 0x5c
 8006a8e:	2202      	movs	r2, #2
 8006a90:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aa8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ab0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	e027      	b.n	8006b16 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	440b      	add	r3, r1
 8006ad4:	335d      	adds	r3, #93	; 0x5d
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b07      	cmp	r3, #7
 8006ada:	d11c      	bne.n	8006b16 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	440b      	add	r3, r1
 8006aea:	3358      	adds	r3, #88	; 0x58
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4403      	add	r3, r0
 8006afe:	3358      	adds	r3, #88	; 0x58
 8006b00:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	440b      	add	r3, r1
 8006b10:	335c      	adds	r3, #92	; 0x5c
 8006b12:	2204      	movs	r2, #4
 8006b14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b22:	461a      	mov	r2, r3
 8006b24:	2302      	movs	r3, #2
 8006b26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	b2d8      	uxtb	r0, r3
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	440b      	add	r3, r1
 8006b3a:	335c      	adds	r3, #92	; 0x5c
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4601      	mov	r1, r0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f008 f90a 	bl	800ed5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b48:	e0cd      	b.n	8006ce6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5c:	2b80      	cmp	r3, #128	; 0x80
 8006b5e:	d13e      	bne.n	8006bde <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7a:	f043 0302 	orr.w	r3, r3, #2
 8006b7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3358      	adds	r3, #88	; 0x58
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4403      	add	r3, r0
 8006ba2:	3358      	adds	r3, #88	; 0x58
 8006ba4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	440b      	add	r3, r1
 8006bb4:	335d      	adds	r3, #93	; 0x5d
 8006bb6:	2206      	movs	r2, #6
 8006bb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f003 f941 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2380      	movs	r3, #128	; 0x80
 8006bda:	6093      	str	r3, [r2, #8]
}
 8006bdc:	e083      	b.n	8006ce6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d178      	bne.n	8006ce6 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	440b      	add	r3, r1
 8006c02:	333f      	adds	r3, #63	; 0x3f
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d122      	bne.n	8006c50 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	440b      	add	r3, r1
 8006c18:	3358      	adds	r3, #88	; 0x58
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f003 f8ff 	bl	8009e4c <USB_HC_Halt>
 8006c4e:	e041      	b.n	8006cd4 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	440b      	add	r3, r1
 8006c5e:	333f      	adds	r3, #63	; 0x3f
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	440b      	add	r3, r1
 8006c74:	333f      	adds	r3, #63	; 0x3f
 8006c76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d12b      	bne.n	8006cd4 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	440b      	add	r3, r1
 8006c8a:	3358      	adds	r3, #88	; 0x58
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	440b      	add	r3, r1
 8006c9e:	335d      	adds	r3, #93	; 0x5d
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cbe:	f043 0302 	orr.w	r3, r3, #2
 8006cc2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f003 f8bc 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	6093      	str	r3, [r2, #8]
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b086      	sub	sp, #24
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d119      	bne.n	8006d52 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006d50:	e31e      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d141      	bne.n	8006dec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	461a      	mov	r2, r3
 8006d76:	2320      	movs	r3, #32
 8006d78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	440b      	add	r3, r1
 8006d88:	333d      	adds	r3, #61	; 0x3d
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f040 82ff 	bne.w	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	440b      	add	r3, r1
 8006da0:	333d      	adds	r3, #61	; 0x3d
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	440b      	add	r3, r1
 8006db4:	335c      	adds	r3, #92	; 0x5c
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd4:	f043 0302 	orr.w	r3, r3, #2
 8006dd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f003 f831 	bl	8009e4c <USB_HC_Halt>
}
 8006dea:	e2d1      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d13f      	bne.n	8006e82 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	440b      	add	r3, r1
 8006e10:	335d      	adds	r3, #93	; 0x5d
 8006e12:	2204      	movs	r2, #4
 8006e14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	440b      	add	r3, r1
 8006e24:	333d      	adds	r3, #61	; 0x3d
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	440b      	add	r3, r1
 8006e38:	3358      	adds	r3, #88	; 0x58
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e58:	f043 0302 	orr.w	r3, r3, #2
 8006e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f002 ffef 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	6093      	str	r3, [r2, #8]
}
 8006e80:	e286      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d122      	bne.n	8006ee0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb4:	f043 0302 	orr.w	r3, r3, #2
 8006eb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 ffc1 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006edc:	6093      	str	r3, [r2, #8]
}
 8006ede:	e257      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d135      	bne.n	8006f62 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	440b      	add	r3, r1
 8006f04:	3358      	adds	r3, #88	; 0x58
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f24:	f043 0302 	orr.w	r3, r3, #2
 8006f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f002 ff89 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	461a      	mov	r2, r3
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	440b      	add	r3, r1
 8006f5a:	335d      	adds	r3, #93	; 0x5d
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
}
 8006f60:	e216      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d12b      	bne.n	8006fd0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	461a      	mov	r2, r3
 8006f86:	2308      	movs	r3, #8
 8006f88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa4:	f043 0302 	orr.w	r3, r3, #2
 8006fa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 ff49 	bl	8009e4c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	440b      	add	r3, r1
 8006fc8:	335d      	adds	r3, #93	; 0x5d
 8006fca:	2205      	movs	r2, #5
 8006fcc:	701a      	strb	r2, [r3, #0]
}
 8006fce:	e1df      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d135      	bne.n	8007052 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3358      	adds	r3, #88	; 0x58
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	440b      	add	r3, r1
 8007008:	335d      	adds	r3, #93	; 0x5d
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	440a      	add	r2, r1
 8007024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f002 ff07 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	461a      	mov	r2, r3
 800704c:	2310      	movs	r3, #16
 800704e:	6093      	str	r3, [r2, #8]
}
 8007050:	e19e      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4413      	add	r3, r2
 800705a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007064:	2b80      	cmp	r3, #128	; 0x80
 8007066:	d12b      	bne.n	80070c0 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007082:	f043 0302 	orr.w	r3, r3, #2
 8007086:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f002 feda 	bl	8009e4c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	440b      	add	r3, r1
 80070a6:	335d      	adds	r3, #93	; 0x5d
 80070a8:	2206      	movs	r2, #6
 80070aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b8:	461a      	mov	r2, r3
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	6093      	str	r3, [r2, #8]
}
 80070be:	e167      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d135      	bne.n	8007144 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f2:	f043 0302 	orr.w	r3, r3, #2
 80070f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f002 fea2 	bl	8009e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4413      	add	r3, r2
 8007110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007114:	461a      	mov	r2, r3
 8007116:	2310      	movs	r3, #16
 8007118:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007126:	461a      	mov	r2, r3
 8007128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	440b      	add	r3, r1
 800713c:	335d      	adds	r3, #93	; 0x5d
 800713e:	2208      	movs	r2, #8
 8007140:	701a      	strb	r2, [r3, #0]
}
 8007142:	e125      	b.n	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	4413      	add	r3, r2
 800714c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b02      	cmp	r3, #2
 8007158:	f040 811a 	bne.w	8007390 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	440a      	add	r2, r1
 8007172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007176:	f023 0302 	bic.w	r3, r3, #2
 800717a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	440b      	add	r3, r1
 800718a:	335d      	adds	r3, #93	; 0x5d
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d137      	bne.n	8007202 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	440b      	add	r3, r1
 80071a0:	335c      	adds	r3, #92	; 0x5c
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	440b      	add	r3, r1
 80071b4:	333f      	adds	r3, #63	; 0x3f
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d00b      	beq.n	80071d4 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	440b      	add	r3, r1
 80071ca:	333f      	adds	r3, #63	; 0x3f
 80071cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	f040 80c5 	bne.w	800735e <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	440b      	add	r3, r1
 80071e2:	3351      	adds	r3, #81	; 0x51
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f083 0301 	eor.w	r3, r3, #1
 80071ea:	b2d8      	uxtb	r0, r3
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	440b      	add	r3, r1
 80071fa:	3351      	adds	r3, #81	; 0x51
 80071fc:	4602      	mov	r2, r0
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e0ad      	b.n	800735e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	440b      	add	r3, r1
 8007210:	335d      	adds	r3, #93	; 0x5d
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d10a      	bne.n	800722e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	440b      	add	r3, r1
 8007226:	335c      	adds	r3, #92	; 0x5c
 8007228:	2202      	movs	r2, #2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e097      	b.n	800735e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	440b      	add	r3, r1
 800723c:	335d      	adds	r3, #93	; 0x5d
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b04      	cmp	r3, #4
 8007242:	d10a      	bne.n	800725a <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	440b      	add	r3, r1
 8007252:	335c      	adds	r3, #92	; 0x5c
 8007254:	2202      	movs	r2, #2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e081      	b.n	800735e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	440b      	add	r3, r1
 8007268:	335d      	adds	r3, #93	; 0x5d
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b05      	cmp	r3, #5
 800726e:	d10a      	bne.n	8007286 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	440b      	add	r3, r1
 800727e:	335c      	adds	r3, #92	; 0x5c
 8007280:	2205      	movs	r2, #5
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	e06b      	b.n	800735e <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	440b      	add	r3, r1
 8007294:	335d      	adds	r3, #93	; 0x5d
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b06      	cmp	r3, #6
 800729a:	d00a      	beq.n	80072b2 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	440b      	add	r3, r1
 80072aa:	335d      	adds	r3, #93	; 0x5d
 80072ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d155      	bne.n	800735e <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	440b      	add	r3, r1
 80072c0:	3358      	adds	r3, #88	; 0x58
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	1c59      	adds	r1, r3, #1
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4403      	add	r3, r0
 80072d4:	3358      	adds	r3, #88	; 0x58
 80072d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	440b      	add	r3, r1
 80072e6:	3358      	adds	r3, #88	; 0x58
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d914      	bls.n	8007318 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	440b      	add	r3, r1
 80072fc:	3358      	adds	r3, #88	; 0x58
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	440b      	add	r3, r1
 8007310:	335c      	adds	r3, #92	; 0x5c
 8007312:	2204      	movs	r2, #4
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e009      	b.n	800732c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	440b      	add	r3, r1
 8007326:	335c      	adds	r3, #92	; 0x5c
 8007328:	2202      	movs	r2, #2
 800732a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007342:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800734a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	461a      	mov	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4413      	add	r3, r2
 8007366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736a:	461a      	mov	r2, r3
 800736c:	2302      	movs	r3, #2
 800736e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	b2d8      	uxtb	r0, r3
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	440b      	add	r3, r1
 8007382:	335c      	adds	r3, #92	; 0x5c
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	4601      	mov	r1, r0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f007 fce6 	bl	800ed5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007390:	bf00      	nop
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	0c5b      	lsrs	r3, r3, #17
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d004      	beq.n	80073de <HCD_RXQLVL_IRQHandler+0x46>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	f000 8082 	beq.w	80074e0 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80073dc:	e083      	b.n	80074e6 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d07f      	beq.n	80074e4 <HCD_RXQLVL_IRQHandler+0x14c>
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	440b      	add	r3, r1
 80073f2:	3344      	adds	r3, #68	; 0x44
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d074      	beq.n	80074e4 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	3344      	adds	r3, #68	; 0x44
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	b292      	uxth	r2, r2
 8007414:	4619      	mov	r1, r3
 8007416:	f002 f99d 	bl	8009754 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	3344      	adds	r3, #68	; 0x44
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	18d1      	adds	r1, r2, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	4403      	add	r3, r0
 800743e:	3344      	adds	r3, #68	; 0x44
 8007440:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	440b      	add	r3, r1
 8007450:	334c      	adds	r3, #76	; 0x4c
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	18d1      	adds	r1, r2, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4403      	add	r3, r0
 8007466:	334c      	adds	r3, #76	; 0x4c
 8007468:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <HCD_RXQLVL_IRQHandler+0x158>)
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d031      	beq.n	80074e4 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007496:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800749e:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	461a      	mov	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	440b      	add	r3, r1
 80074c0:	3350      	adds	r3, #80	; 0x50
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f083 0301 	eor.w	r3, r3, #1
 80074c8:	b2d8      	uxtb	r0, r3
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	440b      	add	r3, r1
 80074d8:	3350      	adds	r3, #80	; 0x50
 80074da:	4602      	mov	r2, r0
 80074dc:	701a      	strb	r2, [r3, #0]
      break;
 80074de:	e001      	b.n	80074e4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80074e0:	bf00      	nop
 80074e2:	e000      	b.n	80074e6 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80074e4:	bf00      	nop
  }
}
 80074e6:	bf00      	nop
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	1ff80000 	.word	0x1ff80000

080074f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007520:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d10b      	bne.n	8007544 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b01      	cmp	r3, #1
 8007534:	d102      	bne.n	800753c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f007 fbf4 	bl	800ed24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f043 0302 	orr.w	r3, r3, #2
 8007542:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b08      	cmp	r3, #8
 800754c:	d132      	bne.n	80075b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f043 0308 	orr.w	r3, r3, #8
 8007554:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b04      	cmp	r3, #4
 800755e:	d126      	bne.n	80075ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d113      	bne.n	8007590 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800756e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007572:	d106      	bne.n	8007582 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f002 f9e2 	bl	8009944 <USB_InitFSLSPClkSel>
 8007580:	e011      	b.n	80075a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2101      	movs	r1, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f002 f9db 	bl	8009944 <USB_InitFSLSPClkSel>
 800758e:	e00a      	b.n	80075a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d106      	bne.n	80075a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759e:	461a      	mov	r2, r3
 80075a0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80075a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f007 fbe5 	bl	800ed76 <HAL_HCD_PortEnabled_Callback>
 80075ac:	e002      	b.n	80075b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f007 fbef 	bl	800ed92 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d103      	bne.n	80075c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075cc:	461a      	mov	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6013      	str	r3, [r2, #0]
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	420e0020 	.word	0x420e0020

080075f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e304      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8087 	beq.w	8007722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007614:	4b92      	ldr	r3, [pc, #584]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f003 030c 	and.w	r3, r3, #12
 800761c:	2b04      	cmp	r3, #4
 800761e:	d00c      	beq.n	800763a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007620:	4b8f      	ldr	r3, [pc, #572]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f003 030c 	and.w	r3, r3, #12
 8007628:	2b08      	cmp	r3, #8
 800762a:	d112      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
 800762c:	4b8c      	ldr	r3, [pc, #560]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007638:	d10b      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763a:	4b89      	ldr	r3, [pc, #548]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d06c      	beq.n	8007720 <HAL_RCC_OscConfig+0x12c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d168      	bne.n	8007720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e2de      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765a:	d106      	bne.n	800766a <HAL_RCC_OscConfig+0x76>
 800765c:	4b80      	ldr	r3, [pc, #512]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7f      	ldr	r2, [pc, #508]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e02e      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <HAL_RCC_OscConfig+0x98>
 8007672:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7a      	ldr	r2, [pc, #488]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4b78      	ldr	r3, [pc, #480]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a77      	ldr	r2, [pc, #476]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	e01d      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007694:	d10c      	bne.n	80076b0 <HAL_RCC_OscConfig+0xbc>
 8007696:	4b72      	ldr	r3, [pc, #456]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a71      	ldr	r2, [pc, #452]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800769c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	4b6f      	ldr	r3, [pc, #444]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a6e      	ldr	r2, [pc, #440]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e00b      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 80076b0:	4b6b      	ldr	r3, [pc, #428]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6a      	ldr	r2, [pc, #424]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	4b68      	ldr	r3, [pc, #416]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a67      	ldr	r2, [pc, #412]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d013      	beq.n	80076f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d0:	f7fd fa60 	bl	8004b94 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076d8:	f7fd fa5c 	bl	8004b94 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	; 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e292      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ea:	4b5d      	ldr	r3, [pc, #372]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0xe4>
 80076f6:	e014      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7fd fa4c 	bl	8004b94 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007700:	f7fd fa48 	bl	8004b94 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e27e      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007712:	4b53      	ldr	r3, [pc, #332]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x10c>
 800771e:	e000      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d063      	beq.n	80077f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800772e:	4b4c      	ldr	r3, [pc, #304]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800773a:	4b49      	ldr	r3, [pc, #292]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 030c 	and.w	r3, r3, #12
 8007742:	2b08      	cmp	r3, #8
 8007744:	d11c      	bne.n	8007780 <HAL_RCC_OscConfig+0x18c>
 8007746:	4b46      	ldr	r3, [pc, #280]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d116      	bne.n	8007780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_RCC_OscConfig+0x176>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d001      	beq.n	800776a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e252      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776a:	4b3d      	ldr	r3, [pc, #244]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4939      	ldr	r1, [pc, #228]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777e:	e03a      	b.n	80077f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d020      	beq.n	80077ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007788:	4b36      	ldr	r3, [pc, #216]	; (8007864 <HAL_RCC_OscConfig+0x270>)
 800778a:	2201      	movs	r2, #1
 800778c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778e:	f7fd fa01 	bl	8004b94 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007796:	f7fd f9fd 	bl	8004b94 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e233      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a8:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b4:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4927      	ldr	r1, [pc, #156]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	600b      	str	r3, [r1, #0]
 80077c8:	e015      	b.n	80077f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ca:	4b26      	ldr	r3, [pc, #152]	; (8007864 <HAL_RCC_OscConfig+0x270>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d0:	f7fd f9e0 	bl	8004b94 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d8:	f7fd f9dc 	bl	8004b94 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e212      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d03a      	beq.n	8007878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d019      	beq.n	800783e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800780a:	4b17      	ldr	r3, [pc, #92]	; (8007868 <HAL_RCC_OscConfig+0x274>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007810:	f7fd f9c0 	bl	8004b94 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007818:	f7fd f9bc 	bl	8004b94 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e1f2      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <HAL_RCC_OscConfig+0x26c>)
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007836:	2001      	movs	r0, #1
 8007838:	f000 fc02 	bl	8008040 <RCC_Delay>
 800783c:	e01c      	b.n	8007878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <HAL_RCC_OscConfig+0x274>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007844:	f7fd f9a6 	bl	8004b94 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784a:	e00f      	b.n	800786c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800784c:	f7fd f9a2 	bl	8004b94 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d908      	bls.n	800786c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1d8      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
 800785e:	bf00      	nop
 8007860:	40021000 	.word	0x40021000
 8007864:	42420000 	.word	0x42420000
 8007868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800786c:	4b9b      	ldr	r3, [pc, #620]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e9      	bne.n	800784c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80a6 	beq.w	80079d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800788a:	4b94      	ldr	r3, [pc, #592]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007896:	4b91      	ldr	r3, [pc, #580]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4a90      	ldr	r2, [pc, #576]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a0:	61d3      	str	r3, [r2, #28]
 80078a2:	4b8e      	ldr	r3, [pc, #568]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b8b      	ldr	r3, [pc, #556]	; (8007ae0 <HAL_RCC_OscConfig+0x4ec>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d118      	bne.n	80078f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078be:	4b88      	ldr	r3, [pc, #544]	; (8007ae0 <HAL_RCC_OscConfig+0x4ec>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a87      	ldr	r2, [pc, #540]	; (8007ae0 <HAL_RCC_OscConfig+0x4ec>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ca:	f7fd f963 	bl	8004b94 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d2:	f7fd f95f 	bl	8004b94 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b64      	cmp	r3, #100	; 0x64
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e195      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e4:	4b7e      	ldr	r3, [pc, #504]	; (8007ae0 <HAL_RCC_OscConfig+0x4ec>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <HAL_RCC_OscConfig+0x312>
 80078f8:	4b78      	ldr	r3, [pc, #480]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	4a77      	ldr	r2, [pc, #476]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6213      	str	r3, [r2, #32]
 8007904:	e02d      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10c      	bne.n	8007928 <HAL_RCC_OscConfig+0x334>
 800790e:	4b73      	ldr	r3, [pc, #460]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	4a72      	ldr	r2, [pc, #456]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	6213      	str	r3, [r2, #32]
 800791a:	4b70      	ldr	r3, [pc, #448]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	4a6f      	ldr	r2, [pc, #444]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007920:	f023 0304 	bic.w	r3, r3, #4
 8007924:	6213      	str	r3, [r2, #32]
 8007926:	e01c      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b05      	cmp	r3, #5
 800792e:	d10c      	bne.n	800794a <HAL_RCC_OscConfig+0x356>
 8007930:	4b6a      	ldr	r3, [pc, #424]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	4a69      	ldr	r2, [pc, #420]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007936:	f043 0304 	orr.w	r3, r3, #4
 800793a:	6213      	str	r3, [r2, #32]
 800793c:	4b67      	ldr	r3, [pc, #412]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	4a66      	ldr	r2, [pc, #408]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6213      	str	r3, [r2, #32]
 8007948:	e00b      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 800794a:	4b64      	ldr	r3, [pc, #400]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	4a63      	ldr	r2, [pc, #396]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	6213      	str	r3, [r2, #32]
 8007956:	4b61      	ldr	r3, [pc, #388]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	4a60      	ldr	r2, [pc, #384]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800795c:	f023 0304 	bic.w	r3, r3, #4
 8007960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d015      	beq.n	8007996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796a:	f7fd f913 	bl	8004b94 <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007970:	e00a      	b.n	8007988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007972:	f7fd f90f 	bl	8004b94 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e143      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007988:	4b54      	ldr	r3, [pc, #336]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ee      	beq.n	8007972 <HAL_RCC_OscConfig+0x37e>
 8007994:	e014      	b.n	80079c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007996:	f7fd f8fd 	bl	8004b94 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7fd f8f9 	bl	8004b94 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e12d      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b4:	4b49      	ldr	r3, [pc, #292]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1ee      	bne.n	800799e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d105      	bne.n	80079d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079c6:	4b45      	ldr	r3, [pc, #276]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4a44      	ldr	r2, [pc, #272]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 808c 	beq.w	8007af4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80079dc:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e8:	d10e      	bne.n	8007a08 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80079ea:	4b3c      	ldr	r3, [pc, #240]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d108      	bne.n	8007a08 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80079fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e103      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d14e      	bne.n	8007aae <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007a10:	4b32      	ldr	r3, [pc, #200]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007a1c:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0ef      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007a30:	4b2c      	ldr	r3, [pc, #176]	; (8007ae4 <HAL_RCC_OscConfig+0x4f0>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a36:	f7fd f8ad 	bl	8004b94 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a3e:	f7fd f8a9 	bl	8004b94 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b64      	cmp	r3, #100	; 0x64
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e0df      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007a50:	4b22      	ldr	r3, [pc, #136]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f0      	bne.n	8007a3e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007a5c:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	491c      	ldr	r1, [pc, #112]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	4918      	ldr	r1, [pc, #96]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007a80:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <HAL_RCC_OscConfig+0x4f0>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a86:	f7fd f885 	bl	8004b94 <HAL_GetTick>
 8007a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a8e:	f7fd f881 	bl	8004b94 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b64      	cmp	r3, #100	; 0x64
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0b7      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f0      	beq.n	8007a8e <HAL_RCC_OscConfig+0x49a>
 8007aac:	e022      	b.n	8007af4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <HAL_RCC_OscConfig+0x4e8>)
 8007ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <HAL_RCC_OscConfig+0x4f0>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac0:	f7fd f868 	bl	8004b94 <HAL_GetTick>
 8007ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007ac6:	e00f      	b.n	8007ae8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ac8:	f7fd f864 	bl	8004b94 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b64      	cmp	r3, #100	; 0x64
 8007ad4:	d908      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e09a      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
 8007ada:	bf00      	nop
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40007000 	.word	0x40007000
 8007ae4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007ae8:	4b4b      	ldr	r3, [pc, #300]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e9      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8088 	beq.w	8007c0e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007afe:	4b46      	ldr	r3, [pc, #280]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d068      	beq.n	8007bdc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d14d      	bne.n	8007bae <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b12:	4b42      	ldr	r3, [pc, #264]	; (8007c1c <HAL_RCC_OscConfig+0x628>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7fd f83c 	bl	8004b94 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b20:	f7fd f838 	bl	8004b94 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e06e      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b32:	4b39      	ldr	r3, [pc, #228]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b46:	d10f      	bne.n	8007b68 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007b48:	4b33      	ldr	r3, [pc, #204]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4931      	ldr	r1, [pc, #196]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b56:	4b30      	ldr	r3, [pc, #192]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	f023 020f 	bic.w	r2, r3, #15
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	492d      	ldr	r1, [pc, #180]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b68:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	4927      	ldr	r1, [pc, #156]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b80:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <HAL_RCC_OscConfig+0x628>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b86:	f7fd f805 	bl	8004b94 <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b8e:	f7fd f801 	bl	8004b94 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e037      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0f0      	beq.n	8007b8e <HAL_RCC_OscConfig+0x59a>
 8007bac:	e02f      	b.n	8007c0e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bae:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCC_OscConfig+0x628>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb4:	f7fc ffee 	bl	8004b94 <HAL_GetTick>
 8007bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bba:	e008      	b.n	8007bce <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bbc:	f7fc ffea 	bl	8004b94 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e020      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f0      	bne.n	8007bbc <HAL_RCC_OscConfig+0x5c8>
 8007bda:	e018      	b.n	8007c0e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e013      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <HAL_RCC_OscConfig+0x624>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d001      	beq.n	8007c0e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	42420060 	.word	0x42420060

08007c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0d0      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b6a      	ldr	r3, [pc, #424]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d910      	bls.n	8007c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b67      	ldr	r3, [pc, #412]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 0207 	bic.w	r2, r3, #7
 8007c4a:	4965      	ldr	r1, [pc, #404]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c52:	4b63      	ldr	r3, [pc, #396]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d001      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e0b8      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d020      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c7c:	4b59      	ldr	r3, [pc, #356]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	4a58      	ldr	r2, [pc, #352]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c94:	4b53      	ldr	r3, [pc, #332]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4a52      	ldr	r2, [pc, #328]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007c9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca0:	4b50      	ldr	r3, [pc, #320]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	494d      	ldr	r1, [pc, #308]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d040      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d107      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc6:	4b47      	ldr	r3, [pc, #284]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d115      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e07f      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cde:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e073      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cee:	4b3d      	ldr	r3, [pc, #244]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e06b      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b39      	ldr	r3, [pc, #228]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4936      	ldr	r1, [pc, #216]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d10:	f7fc ff40 	bl	8004b94 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fc ff3c 	bl	8004b94 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e053      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b2d      	ldr	r3, [pc, #180]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d40:	4b27      	ldr	r3, [pc, #156]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d210      	bcs.n	8007d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f023 0207 	bic.w	r2, r3, #7
 8007d56:	4922      	ldr	r1, [pc, #136]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d5e:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e032      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d7c:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4916      	ldr	r1, [pc, #88]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	490e      	ldr	r1, [pc, #56]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dae:	f000 f859 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	091b      	lsrs	r3, r3, #4
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	490a      	ldr	r1, [pc, #40]	; (8007de8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc0:	5ccb      	ldrb	r3, [r1, r3]
 8007dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <HAL_RCC_ClockConfig+0x1cc>)
 8007dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <HAL_RCC_ClockConfig+0x1d0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc fe9e 	bl	8004b10 <HAL_InitTick>

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40022000 	.word	0x40022000
 8007de4:	40021000 	.word	0x40021000
 8007de8:	0802562c 	.word	0x0802562c
 8007dec:	200001d0 	.word	0x200001d0
 8007df0:	200001d4 	.word	0x200001d4

08007df4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8007e00:	f107 0318 	add.w	r3, r7, #24
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007e12:	2303      	movs	r3, #3
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8007e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e1e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <HAL_RCC_MCOConfig+0x68>)
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <HAL_RCC_MCOConfig+0x68>)
 8007e26:	f043 0304 	orr.w	r3, r3, #4
 8007e2a:	6193      	str	r3, [r2, #24]
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <HAL_RCC_MCOConfig+0x68>)
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8007e38:	f107 0318 	add.w	r3, r7, #24
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4808      	ldr	r0, [pc, #32]	; (8007e60 <HAL_RCC_MCOConfig+0x6c>)
 8007e40:	f7fd fd68 	bl	8005914 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <HAL_RCC_MCOConfig+0x68>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007e4c:	4903      	ldr	r1, [pc, #12]	; (8007e5c <HAL_RCC_MCOConfig+0x68>)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	604b      	str	r3, [r1, #4]
}
 8007e54:	bf00      	nop
 8007e56:	3728      	adds	r7, #40	; 0x28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40010800 	.word	0x40010800

08007e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	b091      	sub	sp, #68	; 0x44
 8007e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8007e6a:	4b56      	ldr	r3, [pc, #344]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e6c:	f107 0414 	add.w	r4, r7, #20
 8007e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e72:	c407      	stmia	r4!, {r0, r1, r2}
 8007e74:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8007e76:	4b54      	ldr	r3, [pc, #336]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007e78:	1d3c      	adds	r4, r7, #4
 8007e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
 8007e84:	2300      	movs	r3, #0
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e98:	2300      	movs	r3, #0
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	f003 030c 	and.w	r3, r3, #12
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d002      	beq.n	8007eb2 <HAL_RCC_GetSysClockFreq+0x4e>
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x54>
 8007eb0:	e080      	b.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007eb2:	4b47      	ldr	r3, [pc, #284]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007eb6:	e080      	b.n	8007fba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	0c9b      	lsrs	r3, r3, #18
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d066      	beq.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007ed6:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007ee8:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007eea:	4b38      	ldr	r3, [pc, #224]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d044      	beq.n	8007f80 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007ef6:	4b35      	ldr	r3, [pc, #212]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	091b      	lsrs	r3, r3, #4
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	3301      	adds	r3, #1
 8007f02:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007f04:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	3302      	adds	r3, #2
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f04f 0100 	mov.w	r1, #0
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	fb02 f501 	mul.w	r5, r2, r1
 8007f26:	fb00 f403 	mul.w	r4, r0, r3
 8007f2a:	442c      	add	r4, r5
 8007f2c:	fba0 2302 	umull	r2, r3, r0, r2
 8007f30:	18e1      	adds	r1, r4, r3
 8007f32:	460b      	mov	r3, r1
 8007f34:	4926      	ldr	r1, [pc, #152]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007f36:	fb01 f003 	mul.w	r0, r1, r3
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	fb01 f102 	mul.w	r1, r1, r2
 8007f40:	4401      	add	r1, r0
 8007f42:	4823      	ldr	r0, [pc, #140]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007f44:	fba2 4500 	umull	r4, r5, r2, r0
 8007f48:	194b      	adds	r3, r1, r5
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	fb02 fc01 	mul.w	ip, r2, r1
 8007f60:	fb00 f603 	mul.w	r6, r0, r3
 8007f64:	4466      	add	r6, ip
 8007f66:	fba0 2302 	umull	r2, r3, r0, r2
 8007f6a:	18f1      	adds	r1, r6, r3
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f9 f95f 	bl	8001234 <__aeabi_uldivmod>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f7e:	e007      	b.n	8007f90 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007f84:	fb02 f203 	mul.w	r2, r2, r3
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007f90:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007f94:	461a      	mov	r2, r3
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa2:	e004      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x170>)
 8007fa8:	fb02 f303 	mul.w	r3, r2, r3
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fb2:	e002      	b.n	8007fba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007fb4:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x174>)
 8007fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3744      	adds	r7, #68	; 0x44
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc4:	08010e28 	.word	0x08010e28
 8007fc8:	08010e38 	.word	0x08010e38
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	017d7840 	.word	0x017d7840
 8007fd4:	003d0900 	.word	0x003d0900
 8007fd8:	007a1200 	.word	0x007a1200

08007fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <HAL_RCC_GetHCLKFreq+0x10>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr
 8007fec:	200001d0 	.word	0x200001d0

08007ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ff4:	f7ff fff2 	bl	8007fdc <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4903      	ldr	r1, [pc, #12]	; (8008014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800800c:	4618      	mov	r0, r3
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40021000 	.word	0x40021000
 8008014:	0802563c 	.word	0x0802563c

08008018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800801c:	f7ff ffde 	bl	8007fdc <HAL_RCC_GetHCLKFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	4b05      	ldr	r3, [pc, #20]	; (8008038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	0adb      	lsrs	r3, r3, #11
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	4903      	ldr	r1, [pc, #12]	; (800803c <HAL_RCC_GetPCLK2Freq+0x24>)
 800802e:	5ccb      	ldrb	r3, [r1, r3]
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008034:	4618      	mov	r0, r3
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40021000 	.word	0x40021000
 800803c:	0802563c 	.word	0x0802563c

08008040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <RCC_Delay+0x34>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a0a      	ldr	r2, [pc, #40]	; (8008078 <RCC_Delay+0x38>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	0a5b      	lsrs	r3, r3, #9
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800805c:	bf00      	nop
  }
  while (Delay --);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1e5a      	subs	r2, r3, #1
 8008062:	60fa      	str	r2, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f9      	bne.n	800805c <RCC_Delay+0x1c>
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	bc80      	pop	{r7}
 8008072:	4770      	bx	lr
 8008074:	200001d0 	.word	0x200001d0
 8008078:	10624dd3 	.word	0x10624dd3

0800807c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d07d      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800809c:	2300      	movs	r3, #0
 800809e:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a0:	4b8b      	ldr	r3, [pc, #556]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ac:	4b88      	ldr	r3, [pc, #544]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	4a87      	ldr	r2, [pc, #540]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b6:	61d3      	str	r3, [r2, #28]
 80080b8:	4b85      	ldr	r3, [pc, #532]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080c4:	2301      	movs	r3, #1
 80080c6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c8:	4b82      	ldr	r3, [pc, #520]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d118      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080d4:	4b7f      	ldr	r3, [pc, #508]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a7e      	ldr	r2, [pc, #504]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080e0:	f7fc fd58 	bl	8004b94 <HAL_GetTick>
 80080e4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e6:	e008      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e8:	f7fc fd54 	bl	8004b94 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	; 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e0e5      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080fa:	4b76      	ldr	r3, [pc, #472]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f0      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008106:	4b72      	ldr	r3, [pc, #456]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d02e      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	d027      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008124:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800812e:	4b6a      	ldr	r3, [pc, #424]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008130:	2201      	movs	r2, #1
 8008132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008134:	4b68      	ldr	r3, [pc, #416]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800813a:	4a65      	ldr	r2, [pc, #404]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d014      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814a:	f7fc fd23 	bl	8004b94 <HAL_GetTick>
 800814e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008150:	e00a      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008152:	f7fc fd1f 	bl	8004b94 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008160:	4293      	cmp	r3, r2
 8008162:	d901      	bls.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e0ae      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008168:	4b59      	ldr	r3, [pc, #356]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0ee      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008174:	4b56      	ldr	r3, [pc, #344]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4953      	ldr	r1, [pc, #332]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008182:	4313      	orrs	r3, r2
 8008184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008186:	7efb      	ldrb	r3, [r7, #27]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d105      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800818c:	4b50      	ldr	r3, [pc, #320]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	4a4f      	ldr	r2, [pc, #316]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008196:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081a4:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4947      	ldr	r1, [pc, #284]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80081c2:	4b43      	ldr	r3, [pc, #268]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	4940      	ldr	r1, [pc, #256]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80081e0:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	4938      	ldr	r1, [pc, #224]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80081f2:	4b37      	ldr	r3, [pc, #220]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80081fe:	4b34      	ldr	r3, [pc, #208]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800820a:	2301      	movs	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d148      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8008214:	4b2e      	ldr	r3, [pc, #184]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d138      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008220:	4b2b      	ldr	r3, [pc, #172]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008238:	429a      	cmp	r2, r3
 800823a:	d001      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e042      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8008240:	4b23      	ldr	r3, [pc, #140]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	4920      	ldr	r1, [pc, #128]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800824e:	4313      	orrs	r3, r2
 8008250:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8008252:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	491c      	ldr	r1, [pc, #112]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008260:	4313      	orrs	r3, r2
 8008262:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8008264:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826a:	f7fc fc93 	bl	8004b94 <HAL_GetTick>
 800826e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008270:	e008      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008272:	f7fc fc8f 	bl	8004b94 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b64      	cmp	r3, #100	; 0x64
 800827e:	d901      	bls.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e020      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008284:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008290:	e009      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d001      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e00f      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d008      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4904      	ldr	r1, [pc, #16]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3720      	adds	r7, #32
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40021000 	.word	0x40021000
 80082d4:	40007000 	.word	0x40007000
 80082d8:	42420440 	.word	0x42420440
 80082dc:	42420070 	.word	0x42420070

080082e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b093      	sub	sp, #76	; 0x4c
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80082e8:	4ba8      	ldr	r3, [pc, #672]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80082ea:	f107 0418 	add.w	r4, r7, #24
 80082ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082f0:	c407      	stmia	r4!, {r0, r1, r2}
 80082f2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80082f4:	4ba6      	ldr	r3, [pc, #664]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80082f6:	f107 0408 	add.w	r4, r7, #8
 80082fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008304:	2300      	movs	r3, #0
 8008306:	647b      	str	r3, [r7, #68]	; 0x44
 8008308:	2300      	movs	r3, #0
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
 8008310:	2300      	movs	r3, #0
 8008312:	633b      	str	r3, [r7, #48]	; 0x30
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
 800831c:	2300      	movs	r3, #0
 800831e:	643b      	str	r3, [r7, #64]	; 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3b01      	subs	r3, #1
 8008324:	2b0f      	cmp	r3, #15
 8008326:	f200 8123 	bhi.w	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	080084f1 	.word	0x080084f1
 8008334:	08008555 	.word	0x08008555
 8008338:	08008571 	.word	0x08008571
 800833c:	0800844f 	.word	0x0800844f
 8008340:	08008571 	.word	0x08008571
 8008344:	08008571 	.word	0x08008571
 8008348:	08008571 	.word	0x08008571
 800834c:	080084a1 	.word	0x080084a1
 8008350:	08008571 	.word	0x08008571
 8008354:	08008571 	.word	0x08008571
 8008358:	08008571 	.word	0x08008571
 800835c:	08008571 	.word	0x08008571
 8008360:	08008571 	.word	0x08008571
 8008364:	08008571 	.word	0x08008571
 8008368:	08008571 	.word	0x08008571
 800836c:	08008371 	.word	0x08008371
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008370:	4b88      	ldr	r3, [pc, #544]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008376:	4b87      	ldr	r3, [pc, #540]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 80f8 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	0c9b      	lsrs	r3, r3, #18
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008390:	4413      	add	r3, r2
 8008392:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8008396:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d03e      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80083a2:	4b7c      	ldr	r3, [pc, #496]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083ae:	4413      	add	r3, r2
 80083b0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80083b6:	4b77      	ldr	r3, [pc, #476]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01c      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80083c2:	4b74      	ldr	r3, [pc, #464]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	091b      	lsrs	r3, r3, #4
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	3301      	adds	r3, #1
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80083d0:	4b70      	ldr	r3, [pc, #448]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	3302      	adds	r3, #2
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 80083de:	4a6e      	ldr	r2, [pc, #440]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e8:	fb02 f203 	mul.w	r2, r2, r3
 80083ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	fb02 f303 	mul.w	r3, r2, r3
 80083f8:	647b      	str	r3, [r7, #68]	; 0x44
 80083fa:	e007      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80083fc:	4a66      	ldr	r2, [pc, #408]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80083fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008400:	fbb2 f2f3 	udiv	r2, r2, r3
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800840c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008410:	461a      	mov	r2, r3
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	4293      	cmp	r3, r2
 8008416:	d108      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8008418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	647b      	str	r3, [r7, #68]	; 0x44
 800841e:	e004      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	4a5e      	ldr	r2, [pc, #376]	; (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008424:	fb02 f303 	mul.w	r3, r2, r3
 8008428:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800842a:	4b5a      	ldr	r3, [pc, #360]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008436:	d102      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8008438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800843c:	e09a      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = (2 * pllclk) / 3;
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	4a57      	ldr	r2, [pc, #348]	; (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800844c:	e092      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800844e:	4b51      	ldr	r3, [pc, #324]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800845a:	f7ff fd03 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 800845e:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008460:	e08a      	b.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008462:	4b4c      	ldr	r3, [pc, #304]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8084 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008470:	4b48      	ldr	r3, [pc, #288]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	3301      	adds	r3, #1
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800847e:	4b45      	ldr	r3, [pc, #276]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	0b1b      	lsrs	r3, r3, #12
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	3302      	adds	r3, #2
 800848a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800848c:	4a42      	ldr	r2, [pc, #264]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	fbb2 f3f3 	udiv	r3, r2, r3
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800849e:	e06b      	b.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80084a0:	4b3c      	ldr	r3, [pc, #240]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80084ac:	f7ff fcda 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 80084b0:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80084b2:	e063      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d05d      	beq.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80084c0:	4b34      	ldr	r3, [pc, #208]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	091b      	lsrs	r3, r3, #4
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	3301      	adds	r3, #1
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80084ce:	4b31      	ldr	r3, [pc, #196]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	0b1b      	lsrs	r3, r3, #12
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	3302      	adds	r3, #2
 80084da:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80084dc:	4a2e      	ldr	r2, [pc, #184]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80084ee:	e045      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80084f0:	4b28      	ldr	r3, [pc, #160]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008500:	d108      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 800850c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008510:	643b      	str	r3, [r7, #64]	; 0x40
 8008512:	e01e      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800851a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851e:	d109      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008520:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 800852c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008530:	643b      	str	r3, [r7, #64]	; 0x40
 8008532:	e00e      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800853e:	d11f      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008540:	4b14      	ldr	r3, [pc, #80]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d019      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        frequency = HSE_VALUE / 128U;
 800854c:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800854e:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008550:	e016      	b.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008552:	e015      	b.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008554:	f7ff fd60 	bl	8008018 <HAL_RCC_GetPCLK2Freq>
 8008558:	4602      	mov	r2, r0
 800855a:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	0b9b      	lsrs	r3, r3, #14
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	3301      	adds	r3, #1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800856e:	e008      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    default:
    {
      break;
 8008570:	bf00      	nop
 8008572:	e006      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8008574:	bf00      	nop
 8008576:	e004      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8008578:	bf00      	nop
 800857a:	e002      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 800857c:	bf00      	nop
 800857e:	e000      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 8008580:	bf00      	nop
    }
  }
  return (frequency);
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008584:	4618      	mov	r0, r3
 8008586:	374c      	adds	r7, #76	; 0x4c
 8008588:	46bd      	mov	sp, r7
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	08010e48 	.word	0x08010e48
 8008590:	08010e58 	.word	0x08010e58
 8008594:	40021000 	.word	0x40021000
 8008598:	017d7840 	.word	0x017d7840
 800859c:	003d0900 	.word	0x003d0900
 80085a0:	aaaaaaab 	.word	0xaaaaaaab
 80085a4:	0002faf0 	.word	0x0002faf0

080085a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e084      	b.n	80086c8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	7c5b      	ldrb	r3, [r3, #17]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d105      	bne.n	80085d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fc f83a 	bl	8004648 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f87a 	bl	80086d4 <HAL_RTC_WaitForSynchro>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2204      	movs	r2, #4
 80085ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e06b      	b.n	80086c8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f89c 	bl	800872e <RTC_EnterInitMode>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2204      	movs	r2, #4
 8008600:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e060      	b.n	80086c8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0207 	bic.w	r2, r2, #7
 8008614:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800861e:	4b2c      	ldr	r3, [pc, #176]	; (80086d0 <HAL_RTC_Init+0x128>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a2b      	ldr	r2, [pc, #172]	; (80086d0 <HAL_RTC_Init+0x128>)
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800862a:	4b29      	ldr	r3, [pc, #164]	; (80086d0 <HAL_RTC_Init+0x128>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	4926      	ldr	r1, [pc, #152]	; (80086d0 <HAL_RTC_Init+0x128>)
 8008638:	4313      	orrs	r3, r2
 800863a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d003      	beq.n	800864e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e00e      	b.n	800866c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800864e:	2001      	movs	r0, #1
 8008650:	f7ff fe46 	bl	80082e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008654:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2204      	movs	r2, #4
 8008660:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e030      	b.n	80086c8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b01      	subs	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 010f 	bic.w	r1, r3, #15
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	0c1a      	lsrs	r2, r3, #16
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	041b      	lsls	r3, r3, #16
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	b291      	uxth	r1, r2
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	430b      	orrs	r3, r1
 8008696:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f870 	bl	800877e <RTC_ExitInitMode>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2204      	movs	r2, #4
 80086a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e00c      	b.n	80086c8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80086c6:	2300      	movs	r3, #0
  }
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	40006c00 	.word	0x40006c00

080086d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e01d      	b.n	8008726 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0208 	bic.w	r2, r2, #8
 80086f8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80086fa:	f7fc fa4b 	bl	8004b94 <HAL_GetTick>
 80086fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008700:	e009      	b.n	8008716 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008702:	f7fc fa47 	bl	8004b94 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008710:	d901      	bls.n	8008716 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e007      	b.n	8008726 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0ee      	beq.n	8008702 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800873a:	f7fc fa2b 	bl	8004b94 <HAL_GetTick>
 800873e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008740:	e009      	b.n	8008756 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008742:	f7fc fa27 	bl	8004b94 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008750:	d901      	bls.n	8008756 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e00f      	b.n	8008776 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ee      	beq.n	8008742 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0210 	orr.w	r2, r2, #16
 8008772:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0210 	bic.w	r2, r2, #16
 8008798:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800879a:	f7fc f9fb 	bl	8004b94 <HAL_GetTick>
 800879e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087a0:	e009      	b.n	80087b6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80087a2:	f7fc f9f7 	bl	8004b94 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b0:	d901      	bls.n	80087b6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e007      	b.n	80087c6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ee      	beq.n	80087a2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <HAL_RTCEx_SetTamper>:
  * @param  sTamper: Pointer to Tamper Structure.
  * @note   Tamper can be enabled only if ASOE and CCO bit are reset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  /* Check input parameters */
  if ((hrtc == NULL) || (sTamper == NULL))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_RTCEx_SetTamper+0x16>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_RTCEx_SetTamper+0x1a>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e02c      	b.n	8008844 <HAL_RTCEx_SetTamper+0x74>
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(sTamper->Tamper));
  assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7c1b      	ldrb	r3, [r3, #16]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_RTCEx_SetTamper+0x26>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e026      	b.n	8008844 <HAL_RTCEx_SetTamper+0x74>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	745a      	strb	r2, [r3, #17]

  if (HAL_IS_BIT_SET(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE)))
 8008802:	4b13      	ldr	r3, [pc, #76]	; (8008850 <HAL_RTCEx_SetTamper+0x80>)
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800880a:	2b00      	cmp	r3, #0
 800880c:	d007      	beq.n	800881e <HAL_RTCEx_SetTamper+0x4e>
  {
    hrtc->State = HAL_RTC_STATE_ERROR;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e012      	b.n	8008844 <HAL_RTCEx_SetTamper+0x74>
  }

  MODIFY_REG(BKP->CR, (BKP_CR_TPE | BKP_CR_TPAL), (sTamper->Tamper | (sTamper->Trigger)));
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <HAL_RTCEx_SetTamper+0x80>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f023 0203 	bic.w	r2, r3, #3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	430b      	orrs	r3, r1
 8008830:	4907      	ldr	r1, [pc, #28]	; (8008850 <HAL_RTCEx_SetTamper+0x80>)
 8008832:	4313      	orrs	r3, r2
 8008834:	630b      	str	r3, [r1, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40006c00 	.word	0x40006c00

08008854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e076      	b.n	8008954 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008876:	d009      	beq.n	800888c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	61da      	str	r2, [r3, #28]
 800887e:	e005      	b.n	800888c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fb fef2 	bl	8004690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008910:	ea42 0103 	orr.w	r1, r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	0c1a      	lsrs	r2, r3, #16
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f002 0204 	and.w	r2, r2, #4
 8008932:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69da      	ldr	r2, [r3, #28]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_SPI_Transmit+0x22>
 800897a:	2302      	movs	r3, #2
 800897c:	e126      	b.n	8008bcc <HAL_SPI_Transmit+0x270>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008986:	f7fc f905 	bl	8004b94 <HAL_GetTick>
 800898a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d002      	beq.n	80089a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800899c:	2302      	movs	r3, #2
 800899e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089a0:	e10b      	b.n	8008bba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <HAL_SPI_Transmit+0x52>
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089b2:	e102      	b.n	8008bba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2203      	movs	r2, #3
 80089b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	88fa      	ldrh	r2, [r7, #6]
 80089cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fa:	d10f      	bne.n	8008a1c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d007      	beq.n	8008a3a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a42:	d14b      	bne.n	8008adc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_SPI_Transmit+0xf6>
 8008a4c:	8afb      	ldrh	r3, [r7, #22]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d13e      	bne.n	8008ad0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	881a      	ldrh	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	1c9a      	adds	r2, r3, #2
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a76:	e02b      	b.n	8008ad0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d112      	bne.n	8008aac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008aaa:	e011      	b.n	8008ad0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aac:	f7fc f872 	bl	8004b94 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d803      	bhi.n	8008ac4 <HAL_SPI_Transmit+0x168>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d102      	bne.n	8008aca <HAL_SPI_Transmit+0x16e>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d102      	bne.n	8008ad0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ace:	e074      	b.n	8008bba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1ce      	bne.n	8008a78 <HAL_SPI_Transmit+0x11c>
 8008ada:	e04c      	b.n	8008b76 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HAL_SPI_Transmit+0x18e>
 8008ae4:	8afb      	ldrh	r3, [r7, #22]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d140      	bne.n	8008b6c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b10:	e02c      	b.n	8008b6c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d113      	bne.n	8008b48 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b46:	e011      	b.n	8008b6c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b48:	f7fc f824 	bl	8004b94 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d803      	bhi.n	8008b60 <HAL_SPI_Transmit+0x204>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d102      	bne.n	8008b66 <HAL_SPI_Transmit+0x20a>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b6a:	e026      	b.n	8008bba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1cd      	bne.n	8008b12 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fbea 	bl	8009354 <SPI_EndRxTxTransaction>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	77fb      	strb	r3, [r7, #31]
 8008bb6:	e000      	b.n	8008bba <HAL_SPI_Transmit+0x25e>
  }

error:
 8008bb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bca:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08c      	sub	sp, #48	; 0x30
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008be2:	2301      	movs	r3, #1
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x26>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e18a      	b.n	8008f10 <HAL_SPI_TransmitReceive+0x33c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c02:	f7fb ffc7 	bl	8004b94 <HAL_GetTick>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c18:	887b      	ldrh	r3, [r7, #2]
 8008c1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d00f      	beq.n	8008c44 <HAL_SPI_TransmitReceive+0x70>
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c2a:	d107      	bne.n	8008c3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <HAL_SPI_TransmitReceive+0x68>
 8008c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d003      	beq.n	8008c44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c42:	e15b      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x82>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x82>
 8008c50:	887b      	ldrh	r3, [r7, #2]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d103      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c5c:	e14e      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d003      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	887a      	ldrh	r2, [r7, #2]
 8008c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	887a      	ldrh	r2, [r7, #2]
 8008c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	887a      	ldrh	r2, [r7, #2]
 8008c94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b40      	cmp	r3, #64	; 0x40
 8008cb4:	d007      	beq.n	8008cc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cce:	d178      	bne.n	8008dc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_SPI_TransmitReceive+0x10a>
 8008cd8:	8b7b      	ldrh	r3, [r7, #26]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d166      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	881a      	ldrh	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cee:	1c9a      	adds	r2, r3, #2
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d02:	e053      	b.n	8008dac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d11b      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x176>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d016      	beq.n	8008d4a <HAL_SPI_TransmitReceive+0x176>
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d113      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	881a      	ldrh	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	1c9a      	adds	r2, r3, #2
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d119      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x1b8>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d014      	beq.n	8008d8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	b292      	uxth	r2, r2
 8008d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	1c9a      	adds	r2, r3, #2
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d8c:	f7fb ff02 	bl	8004b94 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d807      	bhi.n	8008dac <HAL_SPI_TransmitReceive+0x1d8>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d003      	beq.n	8008dac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008daa:	e0a7      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1a6      	bne.n	8008d04 <HAL_SPI_TransmitReceive+0x130>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1a1      	bne.n	8008d04 <HAL_SPI_TransmitReceive+0x130>
 8008dc0:	e07c      	b.n	8008ebc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_SPI_TransmitReceive+0x1fc>
 8008dca:	8b7b      	ldrh	r3, [r7, #26]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d16b      	bne.n	8008ea8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df6:	e057      	b.n	8008ea8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d11c      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x26c>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d017      	beq.n	8008e40 <HAL_SPI_TransmitReceive+0x26c>
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d114      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	330c      	adds	r3, #12
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d119      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x2ae>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d014      	beq.n	8008e82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e82:	f7fb fe87 	bl	8004b94 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d803      	bhi.n	8008e9a <HAL_SPI_TransmitReceive+0x2c6>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e98:	d102      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x2cc>
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ea6:	e029      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1a2      	bne.n	8008df8 <HAL_SPI_TransmitReceive+0x224>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d19d      	bne.n	8008df8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fa47 	bl	8009354 <SPI_EndRxTxTransaction>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ed8:	e010      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	e000      	b.n	8008efc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3730      	adds	r7, #48	; 0x30
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_SPI_Transmit_DMA+0x20>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e09b      	b.n	8009070 <HAL_SPI_Transmit_DMA+0x158>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d002      	beq.n	8008f52 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f50:	e089      	b.n	8009066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_SPI_Transmit_DMA+0x46>
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f62:	e080      	b.n	8009066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2203      	movs	r2, #3
 8008f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008faa:	d10f      	bne.n	8008fcc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd0:	4a29      	ldr	r2, [pc, #164]	; (8009078 <HAL_SPI_Transmit_DMA+0x160>)
 8008fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd8:	4a28      	ldr	r2, [pc, #160]	; (800907c <HAL_SPI_Transmit_DMA+0x164>)
 8008fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe0:	4a27      	ldr	r2, [pc, #156]	; (8009080 <HAL_SPI_Transmit_DMA+0x168>)
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe8:	2200      	movs	r2, #0
 8008fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009002:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009004:	f7fc f982 	bl	800530c <HAL_DMA_Start_IT>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	f043 0210 	orr.w	r2, r3, #16
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009026:	e01e      	b.n	8009066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009032:	2b40      	cmp	r3, #64	; 0x40
 8009034:	d007      	beq.n	8009046 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009044:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0220 	orr.w	r2, r2, #32
 8009054:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0202 	orr.w	r2, r2, #2
 8009064:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	080091e7 	.word	0x080091e7
 800907c:	08009141 	.word	0x08009141
 8009080:	08009203 	.word	0x08009203

08009084 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00f      	beq.n	80090b8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800909c:	4618      	mov	r0, r3
 800909e:	f7fc f994 	bl	80053ca <HAL_DMA_Abort>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d007      	beq.n	80090b8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ac:	f043 0210 	orr.w	r2, r3, #16
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00f      	beq.n	80090e0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fc f980 	bl	80053ca <HAL_DMA_Abort>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d4:	f043 0210 	orr.w	r2, r3, #16
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0203 	bic.w	r2, r2, #3
 80090ee:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009134:	b2db      	uxtb	r3, r3
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr

08009140 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800914e:	f7fb fd21 	bl	8004b94 <HAL_GetTick>
 8009152:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b20      	cmp	r3, #32
 8009160:	d03b      	beq.n	80091da <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0220 	bic.w	r2, r2, #32
 8009170:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 0202 	bic.w	r2, r2, #2
 8009180:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	2164      	movs	r1, #100	; 0x64
 8009186:	6978      	ldr	r0, [r7, #20]
 8009188:	f000 f8e4 	bl	8009354 <SPI_EndRxTxTransaction>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2200      	movs	r2, #0
 80091c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091d2:	6978      	ldr	r0, [r7, #20]
 80091d4:	f7ff ff9e 	bl	8009114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091d8:	e002      	b.n	80091e0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80091da:	6978      	ldr	r0, [r7, #20]
 80091dc:	f7fa fb46 	bl	800386c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff ff84 	bl	8009102 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0203 	bic.w	r2, r2, #3
 800921e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	f043 0210 	orr.w	r2, r3, #16
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff ff6d 	bl	8009114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	4613      	mov	r3, r2
 8009252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009254:	f7fb fc9e 	bl	8004b94 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	4413      	add	r3, r2
 8009262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009264:	f7fb fc96 	bl	8004b94 <HAL_GetTick>
 8009268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800926a:	4b39      	ldr	r3, [pc, #228]	; (8009350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	015b      	lsls	r3, r3, #5
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	fb02 f303 	mul.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800927a:	e054      	b.n	8009326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d050      	beq.n	8009326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009284:	f7fb fc86 	bl	8004b94 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	429a      	cmp	r2, r3
 8009292:	d902      	bls.n	800929a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d13d      	bne.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092b2:	d111      	bne.n	80092d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092bc:	d004      	beq.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c6:	d107      	bne.n	80092d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e0:	d10f      	bne.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e017      	b.n	8009346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3b01      	subs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4013      	ands	r3, r2
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	429a      	cmp	r2, r3
 8009334:	bf0c      	ite	eq
 8009336:	2301      	moveq	r3, #1
 8009338:	2300      	movne	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	461a      	mov	r2, r3
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	429a      	cmp	r2, r3
 8009342:	d19b      	bne.n	800927c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200001d0 	.word	0x200001d0

08009354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af02      	add	r7, sp, #8
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2200      	movs	r2, #0
 8009368:	2180      	movs	r1, #128	; 0x80
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff ff6a 	bl	8009244 <SPI_WaitFlagStateUntilTimeout>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937a:	f043 0220 	orr.w	r2, r3, #32
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e000      	b.n	8009388 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e03f      	b.n	8009422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d106      	bne.n	80093bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fb fa68 	bl	800488c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2224      	movs	r2, #36	; 0x24
 80093c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f829 	bl	800942c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	695a      	ldr	r2, [r3, #20]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009466:	f023 030c 	bic.w	r3, r3, #12
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6812      	ldr	r2, [r2, #0]
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	430b      	orrs	r3, r1
 8009472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a2c      	ldr	r2, [pc, #176]	; (8009540 <UART_SetConfig+0x114>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d103      	bne.n	800949c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009494:	f7fe fdc0 	bl	8008018 <HAL_RCC_GetPCLK2Freq>
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	e002      	b.n	80094a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800949c:	f7fe fda8 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 80094a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009a      	lsls	r2, r3, #2
 80094ac:	441a      	add	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <UART_SetConfig+0x118>)
 80094ba:	fba2 2303 	umull	r2, r3, r2, r3
 80094be:	095b      	lsrs	r3, r3, #5
 80094c0:	0119      	lsls	r1, r3, #4
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009a      	lsls	r2, r3, #2
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094d8:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <UART_SetConfig+0x118>)
 80094da:	fba3 0302 	umull	r0, r3, r3, r2
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2064      	movs	r0, #100	; 0x64
 80094e2:	fb00 f303 	mul.w	r3, r0, r3
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	; 0x32
 80094ec:	4a15      	ldr	r2, [pc, #84]	; (8009544 <UART_SetConfig+0x118>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f8:	4419      	add	r1, r3
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009a      	lsls	r2, r3, #2
 8009504:	441a      	add	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <UART_SetConfig+0x118>)
 8009512:	fba3 0302 	umull	r0, r3, r3, r2
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	2064      	movs	r0, #100	; 0x64
 800951a:	fb00 f303 	mul.w	r3, r0, r3
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	3332      	adds	r3, #50	; 0x32
 8009524:	4a07      	ldr	r2, [pc, #28]	; (8009544 <UART_SetConfig+0x118>)
 8009526:	fba2 2303 	umull	r2, r3, r2, r3
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	440a      	add	r2, r1
 8009536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40013800 	.word	0x40013800
 8009544:	51eb851f 	.word	0x51eb851f

08009548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009548:	b084      	sub	sp, #16
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	f107 001c 	add.w	r0, r7, #28
 8009556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	d122      	bne.n	80095a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d105      	bne.n	800959a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f922 	bl	80097e4 <USB_CoreReset>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e010      	b.n	80095c8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f916 	bl	80097e4 <USB_CoreReset>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095d4:	b004      	add	sp, #16
 80095d6:	4770      	bx	lr

080095d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f043 0201 	orr.w	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f023 0201 	bic.w	r2, r3, #1
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr

08009618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d106      	bne.n	8009644 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60da      	str	r2, [r3, #12]
 8009642:	e00b      	b.n	800965c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60da      	str	r2, [r3, #12]
 8009656:	e001      	b.n	800965c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e003      	b.n	8009664 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800965c:	2032      	movs	r0, #50	; 0x32
 800965e:	f7fb faa3 	bl	8004ba8 <HAL_Delay>

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	019b      	lsls	r3, r3, #6
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a08      	ldr	r2, [pc, #32]	; (80096b0 <USB_FlushTxFifo+0x44>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d901      	bls.n	8009698 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e006      	b.n	80096a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f003 0320 	and.w	r3, r3, #32
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	d0f0      	beq.n	8009686 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr
 80096b0:	00030d40 	.word	0x00030d40

080096b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2210      	movs	r2, #16
 80096c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3301      	adds	r3, #1
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a08      	ldr	r2, [pc, #32]	; (80096f0 <USB_FlushRxFifo+0x3c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d901      	bls.n	80096d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e006      	b.n	80096e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d0f0      	beq.n	80096c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr
 80096f0:	00030d40 	.word	0x00030d40

080096f4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b089      	sub	sp, #36	; 0x24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4611      	mov	r1, r2
 8009700:	461a      	mov	r2, r3
 8009702:	460b      	mov	r3, r1
 8009704:	71fb      	strb	r3, [r7, #7]
 8009706:	4613      	mov	r3, r2
 8009708:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009712:	88bb      	ldrh	r3, [r7, #4]
 8009714:	3303      	adds	r3, #3
 8009716:	089b      	lsrs	r3, r3, #2
 8009718:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	e00f      	b.n	8009740 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	031a      	lsls	r2, r3, #12
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	4413      	add	r3, r2
 8009728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972c:	461a      	mov	r2, r3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	3304      	adds	r3, #4
 8009738:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	3301      	adds	r3, #1
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	429a      	cmp	r2, r3
 8009746:	d3eb      	bcc.n	8009720 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3724      	adds	r7, #36	; 0x24
 800974e:	46bd      	mov	sp, r7
 8009750:	bc80      	pop	{r7}
 8009752:	4770      	bx	lr

08009754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009754:	b480      	push	{r7}
 8009756:	b089      	sub	sp, #36	; 0x24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	3303      	adds	r3, #3
 800976e:	089b      	lsrs	r3, r3, #2
 8009770:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009772:	2300      	movs	r3, #0
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	e00b      	b.n	8009790 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	601a      	str	r2, [r3, #0]
    pDest++;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	3304      	adds	r3, #4
 8009788:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	3301      	adds	r3, #1
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	429a      	cmp	r2, r3
 8009796:	d3ef      	bcc.n	8009778 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009798:	69fb      	ldr	r3, [r7, #28]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3724      	adds	r7, #36	; 0x24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4013      	ands	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097bc:	68fb      	ldr	r3, [r7, #12]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr

080097c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f003 0301 	and.w	r3, r3, #1
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr
	...

080097e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4a12      	ldr	r2, [pc, #72]	; (8009844 <USB_CoreReset+0x60>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d901      	bls.n	8009802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e01b      	b.n	800983a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	daf2      	bge.n	80097f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f043 0201 	orr.w	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4a08      	ldr	r2, [pc, #32]	; (8009844 <USB_CoreReset+0x60>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e006      	b.n	800983a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d0f0      	beq.n	800981a <USB_CoreReset+0x36>

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr
 8009844:	00030d40 	.word	0x00030d40

08009848 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009848:	b084      	sub	sp, #16
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	f107 001c 	add.w	r0, r7, #28
 8009856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009864:	461a      	mov	r2, r3
 8009866:	2300      	movs	r3, #0
 8009868:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009890:	f023 0304 	bic.w	r3, r3, #4
 8009894:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009896:	2110      	movs	r1, #16
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fee7 	bl	800966c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff ff08 	bl	80096b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	e015      	b.n	80098d6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b6:	461a      	mov	r2, r3
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ca:	461a      	mov	r2, r3
 80098cc:	2300      	movs	r3, #0
 80098ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d3e5      	bcc.n	80098aa <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80098de:	2101      	movs	r1, #1
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f868 	bl	80099b6 <USB_DriveVbus>

  HAL_Delay(200U);
 80098e6:	20c8      	movs	r0, #200	; 0xc8
 80098e8:	f7fb f95e 	bl	8004ba8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295
 80098f8:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2280      	movs	r2, #128	; 0x80
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a0d      	ldr	r2, [pc, #52]	; (8009938 <USB_HostInit+0xf0>)
 8009904:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a0c      	ldr	r2, [pc, #48]	; (800993c <USB_HostInit+0xf4>)
 800990a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	f043 0210 	orr.w	r2, r3, #16
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699a      	ldr	r2, [r3, #24]
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <USB_HostInit+0xf8>)
 8009920:	4313      	orrs	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009932:	b004      	add	sp, #16
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	00600080 	.word	0x00600080
 800993c:	004000e0 	.word	0x004000e0
 8009940:	a3200008 	.word	0xa3200008

08009944 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009962:	f023 0303 	bic.w	r3, r3, #3
 8009966:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800997c:	4313      	orrs	r3, r2
 800997e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d107      	bne.n	8009996 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800998c:	461a      	mov	r2, r3
 800998e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009992:	6053      	str	r3, [r2, #4]
 8009994:	e009      	b.n	80099aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	2b02      	cmp	r3, #2
 800999a:	d106      	bne.n	80099aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099a2:	461a      	mov	r2, r3
 80099a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80099a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr

080099b6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <USB_DriveVbus+0x44>
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d106      	bne.n	80099fa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099f8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a04:	d109      	bne.n	8009a1a <USB_DriveVbus+0x64>
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a18:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr

08009a26 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	b29b      	uxth	r3, r3
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr
	...

08009a48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	461a      	mov	r2, r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	70fb      	strb	r3, [r7, #3]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70bb      	strb	r3, [r7, #2]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a76:	461a      	mov	r2, r3
 8009a78:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d867      	bhi.n	8009b56 <USB_HC_Init+0x10e>
 8009a86:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <USB_HC_Init+0x44>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009b19 	.word	0x08009b19
 8009a94:	08009a9d 	.word	0x08009a9d
 8009a98:	08009adb 	.word	0x08009adb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f240 439d 	movw	r3, #1181	; 0x49d
 8009aae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ab0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	da51      	bge.n	8009b5c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	0151      	lsls	r1, r2, #5
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	440a      	add	r2, r1
 8009ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ad6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ad8:	e040      	b.n	8009b5c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f240 639d 	movw	r3, #1693	; 0x69d
 8009aec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009aee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da34      	bge.n	8009b60 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b14:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b16:	e023      	b.n	8009b60 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b24:	461a      	mov	r2, r3
 8009b26:	f240 2325 	movw	r3, #549	; 0x225
 8009b2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da17      	bge.n	8009b64 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	78fa      	ldrb	r2, [r7, #3]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b52:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b54:	e006      	b.n	8009b64 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5a:	e004      	b.n	8009b66 <USB_HC_Init+0x11e>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e002      	b.n	8009b66 <USB_HC_Init+0x11e>
      break;
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <USB_HC_Init+0x11e>
      break;
 8009b64:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	f003 030f 	and.w	r3, r3, #15
 8009b74:	2101      	movs	r1, #1
 8009b76:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b80:	4313      	orrs	r3, r2
 8009b82:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da03      	bge.n	8009ba0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	e001      	b.n	8009ba4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009ba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d103      	bne.n	8009bb4 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e001      	b.n	8009bb8 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bb8:	787b      	ldrb	r3, [r7, #1]
 8009bba:	059b      	lsls	r3, r3, #22
 8009bbc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bc0:	78bb      	ldrb	r3, [r7, #2]
 8009bc2:	02db      	lsls	r3, r3, #11
 8009bc4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bc8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bce:	049b      	lsls	r3, r3, #18
 8009bd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bd4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	0159      	lsls	r1, r3, #5
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bf4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d10f      	bne.n	8009c1e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	0151      	lsls	r1, r2, #5
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	440a      	add	r2, r1
 8009c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop

08009c2c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c44:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d018      	beq.n	8009c80 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	8912      	ldrh	r2, [r2, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	8912      	ldrh	r2, [r2, #8]
 8009c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c62:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8009c64:	8bfa      	ldrh	r2, [r7, #30]
 8009c66:	8a7b      	ldrh	r3, [r7, #18]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d90b      	bls.n	8009c84 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8009c6c:	8a7b      	ldrh	r3, [r7, #18]
 8009c6e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009c70:	8bfb      	ldrh	r3, [r7, #30]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	8912      	ldrh	r2, [r2, #8]
 8009c76:	fb02 f203 	mul.w	r2, r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	611a      	str	r2, [r3, #16]
 8009c7e:	e001      	b.n	8009c84 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8009c80:	2301      	movs	r3, #1
 8009c82:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009c8c:	8bfb      	ldrh	r3, [r7, #30]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	8912      	ldrh	r2, [r2, #8]
 8009c92:	fb02 f203 	mul.w	r2, r2, r3
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ca2:	8bfb      	ldrh	r3, [r7, #30]
 8009ca4:	04d9      	lsls	r1, r3, #19
 8009ca6:	4b5f      	ldr	r3, [pc, #380]	; (8009e24 <USB_HC_StartXfer+0x1f8>)
 8009ca8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009caa:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	7a9b      	ldrb	r3, [r3, #10]
 8009cb0:	075b      	lsls	r3, r3, #29
 8009cb2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cb6:	6979      	ldr	r1, [r7, #20]
 8009cb8:	0148      	lsls	r0, r1, #5
 8009cba:	69b9      	ldr	r1, [r7, #24]
 8009cbc:	4401      	add	r1, r0
 8009cbe:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cc2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cc4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bf0c      	ite	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	2300      	movne	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cfc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	7c7b      	ldrb	r3, [r7, #17]
 8009d0e:	075b      	lsls	r3, r3, #29
 8009d10:	6979      	ldr	r1, [r7, #20]
 8009d12:	0148      	lsls	r0, r1, #5
 8009d14:	69b9      	ldr	r1, [r7, #24]
 8009d16:	4401      	add	r1, r0
 8009d18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a3e      	ldr	r2, [pc, #248]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d30:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d32:	4b3d      	ldr	r3, [pc, #244]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d3a:	4a3b      	ldr	r2, [pc, #236]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d3c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	78db      	ldrb	r3, [r3, #3]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009d46:	4b38      	ldr	r3, [pc, #224]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4e:	4a36      	ldr	r2, [pc, #216]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	e005      	b.n	8009d60 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009d54:	4b34      	ldr	r3, [pc, #208]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d5c:	4a32      	ldr	r2, [pc, #200]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d5e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d60:	4b31      	ldr	r3, [pc, #196]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d68:	4a2f      	ldr	r2, [pc, #188]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <USB_HC_StartXfer+0x1fc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d148      	bne.n	8009e1a <USB_HC_StartXfer+0x1ee>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d044      	beq.n	8009e1a <USB_HC_StartXfer+0x1ee>
  {
    switch (hc->ep_type)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	79db      	ldrb	r3, [r3, #7]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d831      	bhi.n	8009dfc <USB_HC_StartXfer+0x1d0>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <USB_HC_StartXfer+0x174>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009dd5 	.word	0x08009dd5
 8009da8:	08009db1 	.word	0x08009db1
 8009dac:	08009dd5 	.word	0x08009dd5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	3303      	adds	r3, #3
 8009db6:	089b      	lsrs	r3, r3, #2
 8009db8:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009dba:	89fa      	ldrh	r2, [r7, #14]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d91c      	bls.n	8009e00 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f043 0220 	orr.w	r2, r3, #32
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8009dd2:	e015      	b.n	8009e00 <USB_HC_StartXfer+0x1d4>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	3303      	adds	r3, #3
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009dde:	89fa      	ldrh	r2, [r7, #14]
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d90a      	bls.n	8009e04 <USB_HC_StartXfer+0x1d8>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009dfa:	e003      	b.n	8009e04 <USB_HC_StartXfer+0x1d8>

      default:
        break;
 8009dfc:	bf00      	nop
 8009dfe:	e002      	b.n	8009e06 <USB_HC_StartXfer+0x1da>
        break;
 8009e00:	bf00      	nop
 8009e02:	e000      	b.n	8009e06 <USB_HC_StartXfer+0x1da>
        break;
 8009e04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68d9      	ldr	r1, [r3, #12]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	785a      	ldrb	r2, [r3, #1]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff fc6d 	bl	80096f4 <USB_WritePacket>
  }

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	1ff80000 	.word	0x1ff80000
 8009e28:	2000a2a0 	.word	0x2000a2a0

08009e2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	b29b      	uxth	r3, r3
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	0c9b      	lsrs	r3, r3, #18
 8009e74:	f003 0303 	and.w	r3, r3, #3
 8009e78:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <USB_HC_Halt+0x3a>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d16c      	bne.n	8009f60 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ea4:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d143      	bne.n	8009f3a <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ed0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	0151      	lsls	r1, r2, #5
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	440a      	add	r2, r1
 8009f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	3301      	adds	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f1e:	d81d      	bhi.n	8009f5c <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f36:	d0ec      	beq.n	8009f12 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f38:	e080      	b.n	800a03c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f58:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f5a:	e06f      	b.n	800a03c <USB_HC_Halt+0x1f0>
          break;
 8009f5c:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f5e:	e06d      	b.n	800a03c <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	0151      	lsls	r1, r2, #5
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	440a      	add	r2, r1
 8009f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d143      	bne.n	800a018 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	0151      	lsls	r1, r2, #5
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	440a      	add	r2, r1
 8009fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	0151      	lsls	r1, r2, #5
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	440a      	add	r2, r1
 8009fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ffc:	d81d      	bhi.n	800a03a <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a014:	d0ec      	beq.n	8009ff0 <USB_HC_Halt+0x1a4>
 800a016:	e011      	b.n	800a03c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	e000      	b.n	800a03c <USB_HC_Halt+0x1f0>
          break;
 800a03a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	bc80      	pop	{r7}
 800a046:	4770      	bx	lr

0800a048 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff facd 	bl	80095f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a05e:	2110      	movs	r1, #16
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fb03 	bl	800966c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fb24 	bl	80096b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
 800a070:	e01f      	b.n	800a0b2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a088:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a090:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a098:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b0f      	cmp	r3, #15
 800a0b6:	d9dc      	bls.n	800a072 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	613b      	str	r3, [r7, #16]
 800a0bc:	e034      	b.n	800a128 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a104:	d80c      	bhi.n	800a120 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a11c:	d0ec      	beq.n	800a0f8 <USB_StopHost+0xb0>
 800a11e:	e000      	b.n	800a122 <USB_StopHost+0xda>
        break;
 800a120:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	3301      	adds	r3, #1
 800a126:	613b      	str	r3, [r7, #16]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2b0f      	cmp	r3, #15
 800a12c:	d9c7      	bls.n	800a0be <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a134:	461a      	mov	r2, r3
 800a136:	f04f 33ff 	mov.w	r3, #4294967295
 800a13a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff fa47 	bl	80095d8 <USB_EnableGlobalInt>

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a158:	4904      	ldr	r1, [pc, #16]	; (800a16c <MX_FATFS_Init+0x18>)
 800a15a:	4805      	ldr	r0, [pc, #20]	; (800a170 <MX_FATFS_Init+0x1c>)
 800a15c:	f004 fcc4 	bl	800eae8 <FATFS_LinkDriver>
 800a160:	4603      	mov	r3, r0
 800a162:	461a      	mov	r2, r3
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <MX_FATFS_Init+0x20>)
 800a166:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a168:	bf00      	nop
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	2000c768 	.word	0x2000c768
 800a170:	200001dc 	.word	0x200001dc
 800a174:	2000c76c 	.word	0x2000c76c

0800a178 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a17c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a17e:	4618      	mov	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	bc80      	pop	{r7}
 800a184:	4770      	bx	lr

0800a186 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	4603      	mov	r3, r0
 800a18e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	4618      	mov	r0, r3
 800a194:	f7f7 fe7a 	bl	8001e8c <SD_disk_initialize>
 800a198:	4603      	mov	r3, r0
 800a19a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7f7 ff55 	bl	8002060 <SD_disk_status>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a1d2:	7bf8      	ldrb	r0, [r7, #15]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	f7f7 ff55 	bl	8002088 <SD_disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a1fa:	7bf8      	ldrb	r0, [r7, #15]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	f7f7 ffaf 	bl	8002164 <SD_disk_write>
 800a206:	4603      	mov	r3, r0
 800a208:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	4603      	mov	r3, r0
 800a21a:	603a      	str	r2, [r7, #0]
 800a21c:	71fb      	strb	r3, [r7, #7]
 800a21e:	460b      	mov	r3, r1
 800a220:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	73fb      	strb	r3, [r7, #15]
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	79b9      	ldrb	r1, [r7, #6]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7f8 f823 	bl	8002278 <SD_disk_ioctl>
 800a232:	4603      	mov	r3, r0
 800a234:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a23e:	b590      	push	{r4, r7, lr}
 800a240:	b089      	sub	sp, #36	; 0x24
 800a242:	af04      	add	r7, sp, #16
 800a244:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a246:	2301      	movs	r3, #1
 800a248:	2202      	movs	r2, #2
 800a24a:	2102      	movs	r1, #2
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fc5a 	bl	800ab06 <USBH_FindInterface>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	2bff      	cmp	r3, #255	; 0xff
 800a25a:	d002      	beq.n	800a262 <USBH_CDC_InterfaceInit+0x24>
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d901      	bls.n	800a266 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a262:	2302      	movs	r3, #2
 800a264:	e13d      	b.n	800a4e2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fc30 	bl	800aad0 <USBH_SelectInterface>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a27a:	2302      	movs	r3, #2
 800a27c:	e131      	b.n	800a4e2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800a284:	2050      	movs	r0, #80	; 0x50
 800a286:	f004 ff61 	bl	800f14c <malloc>
 800a28a:	4603      	mov	r3, r0
 800a28c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e11f      	b.n	800a4e2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a2a2:	2250      	movs	r2, #80	; 0x50
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	68b8      	ldr	r0, [r7, #8]
 800a2a8:	f004 ff6e 	bl	800f188 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	211a      	movs	r1, #26
 800a2b2:	fb01 f303 	mul.w	r3, r1, r3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da15      	bge.n	800a2f0 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	211a      	movs	r1, #26
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a2d4:	781a      	ldrb	r2, [r3, #0]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	211a      	movs	r1, #26
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2ea:	881a      	ldrh	r2, [r3, #0]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 ff8b 	bl	800b212 <USBH_AllocPipe>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	461a      	mov	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	7819      	ldrb	r1, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	7858      	ldrb	r0, [r3, #1]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	8952      	ldrh	r2, [r2, #10]
 800a31c:	9202      	str	r2, [sp, #8]
 800a31e:	2203      	movs	r2, #3
 800a320:	9201      	str	r2, [sp, #4]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	4623      	mov	r3, r4
 800a326:	4602      	mov	r2, r0
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 ff43 	bl	800b1b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f004 fe64 	bl	800f004 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a33c:	2300      	movs	r3, #0
 800a33e:	2200      	movs	r2, #0
 800a340:	210a      	movs	r1, #10
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fbdf 	bl	800ab06 <USBH_FindInterface>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	2bff      	cmp	r3, #255	; 0xff
 800a350:	d002      	beq.n	800a358 <USBH_CDC_InterfaceInit+0x11a>
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d901      	bls.n	800a35c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a358:	2302      	movs	r3, #2
 800a35a:	e0c2      	b.n	800a4e2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	211a      	movs	r1, #26
 800a362:	fb01 f303 	mul.w	r3, r1, r3
 800a366:	4413      	add	r3, r2
 800a368:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	da16      	bge.n	800a3a2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	211a      	movs	r1, #26
 800a37a:	fb01 f303 	mul.w	r3, r1, r3
 800a37e:	4413      	add	r3, r2
 800a380:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	211a      	movs	r1, #26
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	4413      	add	r3, r2
 800a396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a39a:	881a      	ldrh	r2, [r3, #0]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	835a      	strh	r2, [r3, #26]
 800a3a0:	e015      	b.n	800a3ce <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	211a      	movs	r1, #26
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	211a      	movs	r1, #26
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3c8:	881a      	ldrh	r2, [r3, #0]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	211a      	movs	r1, #26
 800a3d4:	fb01 f303 	mul.w	r3, r1, r3
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	b25b      	sxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da16      	bge.n	800a414 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	211a      	movs	r1, #26
 800a3ec:	fb01 f303 	mul.w	r3, r1, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	211a      	movs	r1, #26
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	4413      	add	r3, r2
 800a408:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	835a      	strh	r2, [r3, #26]
 800a412:	e015      	b.n	800a440 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	211a      	movs	r1, #26
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	4413      	add	r3, r2
 800a420:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	211a      	movs	r1, #26
 800a430:	fb01 f303 	mul.w	r3, r1, r3
 800a434:	4413      	add	r3, r2
 800a436:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a43a:	881a      	ldrh	r2, [r3, #0]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	7b9b      	ldrb	r3, [r3, #14]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fee3 	bl	800b212 <USBH_AllocPipe>
 800a44c:	4603      	mov	r3, r0
 800a44e:	461a      	mov	r2, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	7bdb      	ldrb	r3, [r3, #15]
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fed9 	bl	800b212 <USBH_AllocPipe>
 800a460:	4603      	mov	r3, r0
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	7b59      	ldrb	r1, [r3, #13]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	7b98      	ldrb	r0, [r3, #14]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	8b12      	ldrh	r2, [r2, #24]
 800a480:	9202      	str	r2, [sp, #8]
 800a482:	2202      	movs	r2, #2
 800a484:	9201      	str	r2, [sp, #4]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4623      	mov	r3, r4
 800a48a:	4602      	mov	r2, r0
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fe91 	bl	800b1b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	7b19      	ldrb	r1, [r3, #12]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	7bd8      	ldrb	r0, [r3, #15]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	8b52      	ldrh	r2, [r2, #26]
 800a4aa:	9202      	str	r2, [sp, #8]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	9201      	str	r2, [sp, #4]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fe7c 	bl	800b1b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	7b5b      	ldrb	r3, [r3, #13]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f004 fd99 	bl	800f004 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	7b1b      	ldrb	r3, [r3, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f004 fd92 	bl	800f004 <USBH_LL_SetToggle>

  return USBH_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd90      	pop	{r4, r7, pc}

0800a4ea <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00e      	beq.n	800a522 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fe71 	bl	800b1f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fe9b 	bl	800b252 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	7b1b      	ldrb	r3, [r3, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00e      	beq.n	800a548 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	7b1b      	ldrb	r3, [r3, #12]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fe5e 	bl	800b1f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7b1b      	ldrb	r3, [r3, #12]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fe88 	bl	800b252 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	7b5b      	ldrb	r3, [r3, #13]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	7b5b      	ldrb	r3, [r3, #13]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fe4b 	bl	800b1f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	7b5b      	ldrb	r3, [r3, #13]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fe75 	bl	800b252 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	4618      	mov	r0, r3
 800a584:	f004 fdea 	bl	800f15c <free>
    phost->pActiveClass->pData = 0U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a58e:	2200      	movs	r2, #0
 800a590:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	3340      	adds	r3, #64	; 0x40
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8b1 	bl	800a720 <GetLineCoding>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
  }
  return status;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a600:	2b04      	cmp	r3, #4
 800a602:	d877      	bhi.n	800a6f4 <USBH_CDC_Process+0x114>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <USBH_CDC_Process+0x2c>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a621 	.word	0x0800a621
 800a610:	0800a627 	.word	0x0800a627
 800a614:	0800a657 	.word	0x0800a657
 800a618:	0800a6cb 	.word	0x0800a6cb
 800a61c:	0800a6d9 	.word	0x0800a6d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
      break;
 800a624:	e06d      	b.n	800a702 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f896 	bl	800a75e <SetLineCoding>
 800a632:	4603      	mov	r3, r0
 800a634:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d104      	bne.n	800a646 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a644:	e058      	b.n	800a6f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d055      	beq.n	800a6f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2204      	movs	r2, #4
 800a650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a654:	e050      	b.n	800a6f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	3340      	adds	r3, #64	; 0x40
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f85f 	bl	800a720 <GetLineCoding>
 800a662:	4603      	mov	r3, r0
 800a664:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d126      	bne.n	800a6ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	429a      	cmp	r2, r3
 800a682:	d13b      	bne.n	800a6fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a68e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a690:	429a      	cmp	r2, r3
 800a692:	d133      	bne.n	800a6fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a69e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d12b      	bne.n	800a6fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d124      	bne.n	800a6fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f955 	bl	800a962 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6b8:	e020      	b.n	800a6fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d01d      	beq.n	800a6fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a6c8:	e018      	b.n	800a6fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f866 	bl	800a79c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f8d9 	bl	800a888 <CDC_ProcessReception>
      break;
 800a6d6:	e014      	b.n	800a702 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a6d8:	2100      	movs	r1, #0
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 faf4 	bl	800acc8 <USBH_ClrFeature>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a6f2:	e005      	b.n	800a700 <USBH_CDC_Process+0x120>

    default:
      break;
 800a6f4:	bf00      	nop
 800a6f6:	e004      	b.n	800a702 <USBH_CDC_Process+0x122>
      break;
 800a6f8:	bf00      	nop
 800a6fa:	e002      	b.n	800a702 <USBH_CDC_Process+0x122>
      break;
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <USBH_CDC_Process+0x122>
      break;
 800a700:	bf00      	nop

  }

  return status;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bc80      	pop	{r7}
 800a71e:	4770      	bx	lr

0800a720 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	22a1      	movs	r2, #161	; 0xa1
 800a72e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2221      	movs	r2, #33	; 0x21
 800a734:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2207      	movs	r2, #7
 800a746:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2207      	movs	r2, #7
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fade 	bl	800ad10 <USBH_CtlReq>
 800a754:	4603      	mov	r3, r0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2221      	movs	r2, #33	; 0x21
 800a76c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2207      	movs	r2, #7
 800a784:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2207      	movs	r2, #7
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fabf 	bl	800ad10 <USBH_CtlReq>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d002      	beq.n	800a7c2 <CDC_ProcessTransmission+0x26>
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d023      	beq.n	800a808 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a7c0:	e05e      	b.n	800a880 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	8b12      	ldrh	r2, [r2, #24]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d90b      	bls.n	800a7e6 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	69d9      	ldr	r1, [r3, #28]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8b1a      	ldrh	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	7b5b      	ldrb	r3, [r3, #13]
 800a7da:	2001      	movs	r0, #1
 800a7dc:	9000      	str	r0, [sp, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fca5 	bl	800b12e <USBH_BulkSendData>
 800a7e4:	e00b      	b.n	800a7fe <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	7b5b      	ldrb	r3, [r3, #13]
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	9000      	str	r0, [sp, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fc98 	bl	800b12e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2202      	movs	r2, #2
 800a802:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a806:	e03b      	b.n	800a880 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	7b5b      	ldrb	r3, [r3, #13]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f004 fbce 	bl	800efb0 <USBH_LL_GetURBState>
 800a814:	4603      	mov	r3, r0
 800a816:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d128      	bne.n	800a870 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	8b12      	ldrh	r2, [r2, #24]
 800a826:	4293      	cmp	r3, r2
 800a828:	d90e      	bls.n	800a848 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	8b12      	ldrh	r2, [r2, #24]
 800a832:	1a9a      	subs	r2, r3, r2
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	8b12      	ldrh	r2, [r2, #24]
 800a840:	441a      	add	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	61da      	str	r2, [r3, #28]
 800a846:	e002      	b.n	800a84e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d004      	beq.n	800a860 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a85e:	e00e      	b.n	800a87e <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f868 	bl	800a93e <USBH_CDC_TransmitCallback>
      break;
 800a86e:	e006      	b.n	800a87e <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	2b02      	cmp	r3, #2
 800a874:	d103      	bne.n	800a87e <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a87e:	bf00      	nop
  }
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d002      	beq.n	800a8ae <CDC_ProcessReception+0x26>
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d00e      	beq.n	800a8ca <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a8ac:	e043      	b.n	800a936 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	6a19      	ldr	r1, [r3, #32]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	8b5a      	ldrh	r2, [r3, #26]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	7b1b      	ldrb	r3, [r3, #12]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fc5c 	bl	800b178 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2204      	movs	r2, #4
 800a8c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a8c8:	e035      	b.n	800a936 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	7b1b      	ldrb	r3, [r3, #12]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f004 fb6d 	bl	800efb0 <USBH_LL_GetURBState>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a8da:	7cfb      	ldrb	r3, [r7, #19]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d129      	bne.n	800a934 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	7b1b      	ldrb	r3, [r3, #12]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f004 fad0 	bl	800ee8c <USBH_LL_GetLastXferSize>
 800a8ec:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d016      	beq.n	800a926 <CDC_ProcessReception+0x9e>
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4293      	cmp	r3, r2
 800a902:	d910      	bls.n	800a926 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6a1a      	ldr	r2, [r3, #32]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	441a      	add	r2, r3
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2203      	movs	r2, #3
 800a920:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a924:	e006      	b.n	800a934 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f80e 	bl	800a950 <USBH_CDC_ReceiveCallback>
      break;
 800a934:	bf00      	nop
  }
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bc80      	pop	{r7}
 800a94e:	4770      	bx	lr

0800a950 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bc80      	pop	{r7}
 800a960:	4770      	bx	lr

0800a962 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr

0800a974 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a988:	2302      	movs	r3, #2
 800a98a:	e029      	b.n	800a9e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	79fa      	ldrb	r2, [r7, #7]
 800a990:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 f81f 	bl	800a9e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f004 f9e9 	bl	800edb0 <USBH_LL_Init>

  return USBH_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	e008      	b.n	800aa0c <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	32e0      	adds	r2, #224	; 0xe0
 800aa00:	2100      	movs	r1, #0
 800aa02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b0e      	cmp	r3, #14
 800aa10:	d9f3      	bls.n	800a9fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e009      	b.n	800aa2c <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa32:	d3f1      	bcc.n	800aa18 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2240      	movs	r2, #64	; 0x40
 800aa58:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10f      	bne.n	800aaba <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa0:	1c59      	adds	r1, r3, #1
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	33dc      	adds	r3, #220	; 0xdc
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
 800aab8:	e004      	b.n	800aac4 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aaba:	2302      	movs	r3, #2
 800aabc:	73fb      	strb	r3, [r7, #15]
 800aabe:	e001      	b.n	800aac4 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aac0:	2302      	movs	r3, #2
 800aac2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bc80      	pop	{r7}
 800aace:	4770      	bx	lr

0800aad0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800aae6:	78fa      	ldrb	r2, [r7, #3]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d204      	bcs.n	800aaf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800aaf4:	e001      	b.n	800aafa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bc80      	pop	{r7}
 800ab04:	4770      	bx	lr

0800ab06 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b087      	sub	sp, #28
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	461a      	mov	r2, r3
 800ab14:	4603      	mov	r3, r0
 800ab16:	70fb      	strb	r3, [r7, #3]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70bb      	strb	r3, [r7, #2]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f203 3336 	addw	r3, r3, #822	; 0x336
 800ab2e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab30:	e025      	b.n	800ab7e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	221a      	movs	r2, #26
 800ab36:	fb02 f303 	mul.w	r3, r2, r3
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	3302      	adds	r3, #2
 800ab42:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	795b      	ldrb	r3, [r3, #5]
 800ab48:	78fa      	ldrb	r2, [r7, #3]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d002      	beq.n	800ab54 <USBH_FindInterface+0x4e>
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	2bff      	cmp	r3, #255	; 0xff
 800ab52:	d111      	bne.n	800ab78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab58:	78ba      	ldrb	r2, [r7, #2]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d002      	beq.n	800ab64 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab5e:	78bb      	ldrb	r3, [r7, #2]
 800ab60:	2bff      	cmp	r3, #255	; 0xff
 800ab62:	d109      	bne.n	800ab78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab68:	787a      	ldrb	r2, [r7, #1]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d002      	beq.n	800ab74 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab6e:	787b      	ldrb	r3, [r7, #1]
 800ab70:	2bff      	cmp	r3, #255	; 0xff
 800ab72:	d101      	bne.n	800ab78 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	e006      	b.n	800ab86 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d9d6      	bls.n	800ab32 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab84:	23ff      	movs	r3, #255	; 0xff
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bc80      	pop	{r7}
 800ab8e:	4770      	bx	lr

0800ab90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f004 f941 	bl	800ee20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ab9e:	2101      	movs	r1, #1
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f004 fa18 	bl	800efd6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr

0800abcc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f804 	bl	800abf0 <USBH_HandleSof>
}
 800abe8:	bf00      	nop
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b0b      	cmp	r3, #11
 800ac00:	d10a      	bne.n	800ac18 <USBH_HandleSof+0x28>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
  }
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ac30:	bf00      	nop
}
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr

0800ac3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800ac4a:	bf00      	nop
}
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bc80      	pop	{r7}
 800ac52:	4770      	bx	lr

0800ac54 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f004 f8d8 	bl	800ee56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	791b      	ldrb	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fad0 	bl	800b252 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	795b      	ldrb	r3, [r3, #5]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 faca 	bl	800b252 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	789b      	ldrb	r3, [r3, #2]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d10f      	bne.n	800acfc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800acee:	78fb      	ldrb	r3, [r7, #3]
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f805 	bl	800ad10 <USBH_CtlReq>
 800ad06:	4603      	mov	r3, r0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	789b      	ldrb	r3, [r3, #2]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d002      	beq.n	800ad30 <USBH_CtlReq+0x20>
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d00f      	beq.n	800ad4e <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800ad2e:	e034      	b.n	800ad9a <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	88fa      	ldrh	r2, [r7, #6]
 800ad3a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2202      	movs	r2, #2
 800ad46:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad4c:	e025      	b.n	800ad9a <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 f828 	bl	800ada4 <USBH_HandleControl>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d108      	bne.n	800ad70 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6e:	e013      	b.n	800ad98 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d108      	bne.n	800ad88 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ad82:	2303      	movs	r3, #3
 800ad84:	75fb      	strb	r3, [r7, #23]
      break;
 800ad86:	e007      	b.n	800ad98 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d104      	bne.n	800ad98 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800ad94:	2302      	movs	r3, #2
 800ad96:	75fb      	strb	r3, [r7, #23]
      break;
 800ad98:	bf00      	nop
  }
  return status;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800adac:	2301      	movs	r3, #1
 800adae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7e1b      	ldrb	r3, [r3, #24]
 800adb8:	3b01      	subs	r3, #1
 800adba:	2b0a      	cmp	r3, #10
 800adbc:	f200 814a 	bhi.w	800b054 <USBH_HandleControl+0x2b0>
 800adc0:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <USBH_HandleControl+0x24>)
 800adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc6:	bf00      	nop
 800adc8:	0800adf5 	.word	0x0800adf5
 800adcc:	0800ae0f 	.word	0x0800ae0f
 800add0:	0800ae79 	.word	0x0800ae79
 800add4:	0800ae9f 	.word	0x0800ae9f
 800add8:	0800aed7 	.word	0x0800aed7
 800addc:	0800af01 	.word	0x0800af01
 800ade0:	0800af53 	.word	0x0800af53
 800ade4:	0800af75 	.word	0x0800af75
 800ade8:	0800afb1 	.word	0x0800afb1
 800adec:	0800afd7 	.word	0x0800afd7
 800adf0:	0800b015 	.word	0x0800b015
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f103 0110 	add.w	r1, r3, #16
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	795b      	ldrb	r3, [r3, #5]
 800adfe:	461a      	mov	r2, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f937 	bl	800b074 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	761a      	strb	r2, [r3, #24]
      break;
 800ae0c:	e12d      	b.n	800b06a <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	795b      	ldrb	r3, [r3, #5]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f004 f8cb 	bl	800efb0 <USBH_LL_GetURBState>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d11e      	bne.n	800ae62 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	7c1b      	ldrb	r3, [r3, #16]
 800ae28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae2c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	8adb      	ldrh	r3, [r3, #22]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae36:	7b7b      	ldrb	r3, [r7, #13]
 800ae38:	2b80      	cmp	r3, #128	; 0x80
 800ae3a:	d103      	bne.n	800ae44 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2203      	movs	r2, #3
 800ae40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae42:	e109      	b.n	800b058 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2205      	movs	r2, #5
 800ae48:	761a      	strb	r2, [r3, #24]
      break;
 800ae4a:	e105      	b.n	800b058 <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800ae4c:	7b7b      	ldrb	r3, [r7, #13]
 800ae4e:	2b80      	cmp	r3, #128	; 0x80
 800ae50:	d103      	bne.n	800ae5a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2209      	movs	r2, #9
 800ae56:	761a      	strb	r2, [r3, #24]
      break;
 800ae58:	e0fe      	b.n	800b058 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2207      	movs	r2, #7
 800ae5e:	761a      	strb	r2, [r3, #24]
      break;
 800ae60:	e0fa      	b.n	800b058 <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d003      	beq.n	800ae70 <USBH_HandleControl+0xcc>
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	f040 80f4 	bne.w	800b058 <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	220b      	movs	r2, #11
 800ae74:	761a      	strb	r2, [r3, #24]
      break;
 800ae76:	e0ef      	b.n	800b058 <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6899      	ldr	r1, [r3, #8]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	899a      	ldrh	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	791b      	ldrb	r3, [r3, #4]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f92e 	bl	800b0f2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2204      	movs	r2, #4
 800ae9a:	761a      	strb	r2, [r3, #24]
      break;
 800ae9c:	e0e5      	b.n	800b06a <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	791b      	ldrb	r3, [r3, #4]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f004 f883 	bl	800efb0 <USBH_LL_GetURBState>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d102      	bne.n	800aeba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2209      	movs	r2, #9
 800aeb8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	2b05      	cmp	r3, #5
 800aebe:	d102      	bne.n	800aec6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aec0:	2303      	movs	r3, #3
 800aec2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aec4:	e0ca      	b.n	800b05c <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	f040 80c7 	bne.w	800b05c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	220b      	movs	r2, #11
 800aed2:	761a      	strb	r2, [r3, #24]
      break;
 800aed4:	e0c2      	b.n	800b05c <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6899      	ldr	r1, [r3, #8]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	899a      	ldrh	r2, [r3, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	2001      	movs	r0, #1
 800aee4:	9000      	str	r0, [sp, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f8de 	bl	800b0a8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2206      	movs	r2, #6
 800aefc:	761a      	strb	r2, [r3, #24]
      break;
 800aefe:	e0b4      	b.n	800b06a <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	795b      	ldrb	r3, [r3, #5]
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f004 f852 	bl	800efb0 <USBH_LL_GetURBState>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d103      	bne.n	800af1e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2207      	movs	r2, #7
 800af1a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af1c:	e0a0      	b.n	800b060 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b05      	cmp	r3, #5
 800af22:	d105      	bne.n	800af30 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	220c      	movs	r2, #12
 800af28:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af2a:	2303      	movs	r3, #3
 800af2c:	73fb      	strb	r3, [r7, #15]
      break;
 800af2e:	e097      	b.n	800b060 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d103      	bne.n	800af3e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2205      	movs	r2, #5
 800af3a:	761a      	strb	r2, [r3, #24]
      break;
 800af3c:	e090      	b.n	800b060 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	2b04      	cmp	r3, #4
 800af42:	f040 808d 	bne.w	800b060 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	220b      	movs	r2, #11
 800af4a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af4c:	2302      	movs	r3, #2
 800af4e:	73fb      	strb	r3, [r7, #15]
      break;
 800af50:	e086      	b.n	800b060 <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	791b      	ldrb	r3, [r3, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f8c9 	bl	800b0f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2208      	movs	r2, #8
 800af70:	761a      	strb	r2, [r3, #24]

      break;
 800af72:	e07a      	b.n	800b06a <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	791b      	ldrb	r3, [r3, #4]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f004 f818 	bl	800efb0 <USBH_LL_GetURBState>
 800af80:	4603      	mov	r3, r0
 800af82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d105      	bne.n	800af96 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	220d      	movs	r2, #13
 800af8e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af94:	e066      	b.n	800b064 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d103      	bne.n	800afa4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	220b      	movs	r2, #11
 800afa0:	761a      	strb	r2, [r3, #24]
      break;
 800afa2:	e05f      	b.n	800b064 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	d15c      	bne.n	800b064 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800afaa:	2303      	movs	r3, #3
 800afac:	73fb      	strb	r3, [r7, #15]
      break;
 800afae:	e059      	b.n	800b064 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	795b      	ldrb	r3, [r3, #5]
 800afb4:	2201      	movs	r2, #1
 800afb6:	9200      	str	r2, [sp, #0]
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f873 	bl	800b0a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	220a      	movs	r2, #10
 800afd2:	761a      	strb	r2, [r3, #24]
      break;
 800afd4:	e049      	b.n	800b06a <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	795b      	ldrb	r3, [r3, #5]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f003 ffe7 	bl	800efb0 <USBH_LL_GetURBState>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d105      	bne.n	800aff8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	220d      	movs	r2, #13
 800aff4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aff6:	e037      	b.n	800b068 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d103      	bne.n	800b006 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2209      	movs	r2, #9
 800b002:	761a      	strb	r2, [r3, #24]
      break;
 800b004:	e030      	b.n	800b068 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b04      	cmp	r3, #4
 800b00a:	d12d      	bne.n	800b068 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	220b      	movs	r2, #11
 800b010:	761a      	strb	r2, [r3, #24]
      break;
 800b012:	e029      	b.n	800b068 <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7e5b      	ldrb	r3, [r3, #25]
 800b018:	3301      	adds	r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	765a      	strb	r2, [r3, #25]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	7e5b      	ldrb	r3, [r3, #25]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d806      	bhi.n	800b036 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b034:	e019      	b.n	800b06a <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b03c:	2106      	movs	r1, #6
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b04e:	2302      	movs	r3, #2
 800b050:	73fb      	strb	r3, [r7, #15]
      break;
 800b052:	e00a      	b.n	800b06a <USBH_HandleControl+0x2c6>

    default:
      break;
 800b054:	bf00      	nop
 800b056:	e008      	b.n	800b06a <USBH_HandleControl+0x2c6>
      break;
 800b058:	bf00      	nop
 800b05a:	e006      	b.n	800b06a <USBH_HandleControl+0x2c6>
      break;
 800b05c:	bf00      	nop
 800b05e:	e004      	b.n	800b06a <USBH_HandleControl+0x2c6>
      break;
 800b060:	bf00      	nop
 800b062:	e002      	b.n	800b06a <USBH_HandleControl+0x2c6>
      break;
 800b064:	bf00      	nop
 800b066:	e000      	b.n	800b06a <USBH_HandleControl+0x2c6>
      break;
 800b068:	bf00      	nop
  }

  return status;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af04      	add	r7, sp, #16
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b082:	79f9      	ldrb	r1, [r7, #7]
 800b084:	2300      	movs	r3, #0
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	2308      	movs	r3, #8
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	2300      	movs	r3, #0
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2300      	movs	r3, #0
 800b096:	2200      	movs	r2, #0
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f003 ff58 	bl	800ef4e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af04      	add	r7, sp, #16
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	80fb      	strh	r3, [r7, #6]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0cc:	7979      	ldrb	r1, [r7, #5]
 800b0ce:	7e3b      	ldrb	r3, [r7, #24]
 800b0d0:	9303      	str	r3, [sp, #12]
 800b0d2:	88fb      	ldrh	r3, [r7, #6]
 800b0d4:	9302      	str	r3, [sp, #8]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	2301      	movs	r3, #1
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f003 ff33 	bl	800ef4e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b088      	sub	sp, #32
 800b0f6:	af04      	add	r7, sp, #16
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	461a      	mov	r2, r3
 800b100:	460b      	mov	r3, r1
 800b102:	80fb      	strh	r3, [r7, #6]
 800b104:	4613      	mov	r3, r2
 800b106:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b108:	7979      	ldrb	r1, [r7, #5]
 800b10a:	2300      	movs	r3, #0
 800b10c:	9303      	str	r3, [sp, #12]
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	9302      	str	r3, [sp, #8]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	2301      	movs	r3, #1
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	2300      	movs	r3, #0
 800b11c:	2201      	movs	r2, #1
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f003 ff15 	bl	800ef4e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b124:	2300      	movs	r3, #0

}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af04      	add	r7, sp, #16
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	4611      	mov	r1, r2
 800b13a:	461a      	mov	r2, r3
 800b13c:	460b      	mov	r3, r1
 800b13e:	80fb      	strh	r3, [r7, #6]
 800b140:	4613      	mov	r3, r2
 800b142:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b152:	7979      	ldrb	r1, [r7, #5]
 800b154:	7e3b      	ldrb	r3, [r7, #24]
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	2301      	movs	r3, #1
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	2302      	movs	r3, #2
 800b166:	2200      	movs	r2, #0
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f003 fef0 	bl	800ef4e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af04      	add	r7, sp, #16
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	4611      	mov	r1, r2
 800b184:	461a      	mov	r2, r3
 800b186:	460b      	mov	r3, r1
 800b188:	80fb      	strh	r3, [r7, #6]
 800b18a:	4613      	mov	r3, r2
 800b18c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b18e:	7979      	ldrb	r1, [r7, #5]
 800b190:	2300      	movs	r3, #0
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	9302      	str	r3, [sp, #8]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	2301      	movs	r3, #1
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f003 fed2 	bl	800ef4e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af04      	add	r7, sp, #16
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	4608      	mov	r0, r1
 800b1be:	4611      	mov	r1, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	70fb      	strb	r3, [r7, #3]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70bb      	strb	r3, [r7, #2]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b1ce:	7878      	ldrb	r0, [r7, #1]
 800b1d0:	78ba      	ldrb	r2, [r7, #2]
 800b1d2:	78f9      	ldrb	r1, [r7, #3]
 800b1d4:	8b3b      	ldrh	r3, [r7, #24]
 800b1d6:	9302      	str	r3, [sp, #8]
 800b1d8:	7d3b      	ldrb	r3, [r7, #20]
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	7c3b      	ldrb	r3, [r7, #16]
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f003 fe65 	bl	800eeb2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b1fe:	78fb      	ldrb	r3, [r7, #3]
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f003 fe84 	bl	800ef10 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	460b      	mov	r3, r1
 800b21c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f832 	bl	800b288 <USBH_GetFreePipe>
 800b224:	4603      	mov	r3, r0
 800b226:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b228:	89fb      	ldrh	r3, [r7, #14]
 800b22a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b22e:	4293      	cmp	r3, r2
 800b230:	d009      	beq.n	800b246 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	89fa      	ldrh	r2, [r7, #14]
 800b236:	f002 020f 	and.w	r2, r2, #15
 800b23a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	32e0      	adds	r2, #224	; 0xe0
 800b242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800b246:	89fb      	ldrh	r3, [r7, #14]
 800b248:	b2db      	uxtb	r3, r3
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b252:	b480      	push	{r7}
 800b254:	b083      	sub	sp, #12
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b25e:	78fb      	ldrb	r3, [r7, #3]
 800b260:	2b0a      	cmp	r3, #10
 800b262:	d80b      	bhi.n	800b27c <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	32e0      	adds	r2, #224	; 0xe0
 800b26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26e:	78fa      	ldrb	r2, [r7, #3]
 800b270:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	32e0      	adds	r2, #224	; 0xe0
 800b278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	bc80      	pop	{r7}
 800b286:	4770      	bx	lr

0800b288 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b294:	2300      	movs	r3, #0
 800b296:	73fb      	strb	r3, [r7, #15]
 800b298:	e00e      	b.n	800b2b8 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b29a:	7bfa      	ldrb	r2, [r7, #15]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	32e0      	adds	r2, #224	; 0xe0
 800b2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	e007      	b.n	800b2c2 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	73fb      	strb	r3, [r7, #15]
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b0a      	cmp	r3, #10
 800b2bc:	d9ed      	bls.n	800b29a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b2be:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc80      	pop	{r7}
 800b2ca:	4770      	bx	lr

0800b2cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <disk_status+0x30>)
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	79fa      	ldrb	r2, [r7, #7]
 800b2e4:	4905      	ldr	r1, [pc, #20]	; (800b2fc <disk_status+0x30>)
 800b2e6:	440a      	add	r2, r1
 800b2e8:	7a12      	ldrb	r2, [r2, #8]
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	4798      	blx	r3
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	2000a4c4 	.word	0x2000a4c4

0800b300 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <disk_initialize+0x48>)
 800b312:	5cd3      	ldrb	r3, [r2, r3]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d111      	bne.n	800b33c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	4a0b      	ldr	r2, [pc, #44]	; (800b348 <disk_initialize+0x48>)
 800b31c:	2101      	movs	r1, #1
 800b31e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	4a09      	ldr	r2, [pc, #36]	; (800b348 <disk_initialize+0x48>)
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	79fa      	ldrb	r2, [r7, #7]
 800b32e:	4906      	ldr	r1, [pc, #24]	; (800b348 <disk_initialize+0x48>)
 800b330:	440a      	add	r2, r1
 800b332:	7a12      	ldrb	r2, [r2, #8]
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	2000a4c4 	.word	0x2000a4c4

0800b34c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b34c:	b590      	push	{r4, r7, lr}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <disk_read+0x3c>)
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	689c      	ldr	r4, [r3, #8]
 800b368:	7bfb      	ldrb	r3, [r7, #15]
 800b36a:	4a07      	ldr	r2, [pc, #28]	; (800b388 <disk_read+0x3c>)
 800b36c:	4413      	add	r3, r2
 800b36e:	7a18      	ldrb	r0, [r3, #8]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	47a0      	blx	r4
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	371c      	adds	r7, #28
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	2000a4c4 	.word	0x2000a4c4

0800b38c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b38c:	b590      	push	{r4, r7, lr}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4603      	mov	r3, r0
 800b39a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	4a0a      	ldr	r2, [pc, #40]	; (800b3c8 <disk_write+0x3c>)
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	68dc      	ldr	r4, [r3, #12]
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4a07      	ldr	r2, [pc, #28]	; (800b3c8 <disk_write+0x3c>)
 800b3ac:	4413      	add	r3, r2
 800b3ae:	7a18      	ldrb	r0, [r3, #8]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	47a0      	blx	r4
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd90      	pop	{r4, r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	2000a4c4 	.word	0x2000a4c4

0800b3cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	603a      	str	r2, [r7, #0]
 800b3d6:	71fb      	strb	r3, [r7, #7]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	4a09      	ldr	r2, [pc, #36]	; (800b404 <disk_ioctl+0x38>)
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	79fa      	ldrb	r2, [r7, #7]
 800b3ea:	4906      	ldr	r1, [pc, #24]	; (800b404 <disk_ioctl+0x38>)
 800b3ec:	440a      	add	r2, r1
 800b3ee:	7a10      	ldrb	r0, [r2, #8]
 800b3f0:	79b9      	ldrb	r1, [r7, #6]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	2000a4c4 	.word	0x2000a4c4

0800b408 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800b41c:	e007      	b.n	800b42e <mem_cpy+0x26>
		*d++ = *s++;
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	1c53      	adds	r3, r2, #1
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	1c59      	adds	r1, r3, #1
 800b428:	6179      	str	r1, [r7, #20]
 800b42a:	7812      	ldrb	r2, [r2, #0]
 800b42c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	1e5a      	subs	r2, r3, #1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f2      	bne.n	800b41e <mem_cpy+0x16>
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bc80      	pop	{r7}
 800b442:	4770      	bx	lr

0800b444 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800b454:	e005      	b.n	800b462 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	617a      	str	r2, [r7, #20]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	b2d2      	uxtb	r2, r2
 800b460:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	1e5a      	subs	r2, r3, #1
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f4      	bne.n	800b456 <mem_set+0x12>
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	bc80      	pop	{r7}
 800b476:	4770      	bx	lr

0800b478 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800b478:	b480      	push	{r7}
 800b47a:	b089      	sub	sp, #36	; 0x24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800b490:	bf00      	nop
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1e5a      	subs	r2, r3, #1
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00d      	beq.n	800b4b8 <mem_cmp+0x40>
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	61fa      	str	r2, [r7, #28]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	61ba      	str	r2, [r7, #24]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	1acb      	subs	r3, r1, r3
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0ec      	beq.n	800b492 <mem_cmp+0x1a>
	return r;
 800b4b8:	697b      	ldr	r3, [r7, #20]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3724      	adds	r7, #36	; 0x24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bc80      	pop	{r7}
 800b4c2:	4770      	bx	lr

0800b4c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b4ce:	e002      	b.n	800b4d6 <chk_chr+0x12>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	607b      	str	r3, [r7, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d005      	beq.n	800b4ea <chk_chr+0x26>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d1f2      	bne.n	800b4d0 <chk_chr+0xc>
	return *str;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr

0800b4f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	60fb      	str	r3, [r7, #12]
 800b50a:	e03d      	b.n	800b588 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800b50c:	4932      	ldr	r1, [pc, #200]	; (800b5d8 <chk_lock+0xe0>)
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	4613      	mov	r3, r2
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	4413      	add	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	440b      	add	r3, r1
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d02e      	beq.n	800b57e <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b520:	492d      	ldr	r1, [pc, #180]	; (800b5d8 <chk_lock+0xe0>)
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4613      	mov	r3, r2
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	4413      	add	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	440b      	add	r3, r1
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d122      	bne.n	800b582 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800b53c:	4926      	ldr	r1, [pc, #152]	; (800b5d8 <chk_lock+0xe0>)
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4613      	mov	r3, r2
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	3304      	adds	r3, #4
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b554:	3308      	adds	r3, #8
 800b556:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b558:	429a      	cmp	r2, r3
 800b55a:	d112      	bne.n	800b582 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800b55c:	491e      	ldr	r1, [pc, #120]	; (800b5d8 <chk_lock+0xe0>)
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	4613      	mov	r3, r2
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	3308      	adds	r3, #8
 800b56c:	881a      	ldrh	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b574:	3306      	adds	r3, #6
 800b576:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800b578:	429a      	cmp	r2, r3
 800b57a:	d102      	bne.n	800b582 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800b57c:	e007      	b.n	800b58e <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800b57e:	2301      	movs	r3, #1
 800b580:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d9be      	bls.n	800b50c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d109      	bne.n	800b5a8 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d102      	bne.n	800b5a0 <chk_lock+0xa8>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d101      	bne.n	800b5a4 <chk_lock+0xac>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e013      	b.n	800b5cc <chk_lock+0xd4>
 800b5a4:	2312      	movs	r3, #18
 800b5a6:	e011      	b.n	800b5cc <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10b      	bne.n	800b5c6 <chk_lock+0xce>
 800b5ae:	490a      	ldr	r1, [pc, #40]	; (800b5d8 <chk_lock+0xe0>)
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	330a      	adds	r3, #10
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c4:	d101      	bne.n	800b5ca <chk_lock+0xd2>
 800b5c6:	2310      	movs	r3, #16
 800b5c8:	e000      	b.n	800b5cc <chk_lock+0xd4>
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bc80      	pop	{r7}
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	2000a2ac 	.word	0x2000a2ac

0800b5dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	607b      	str	r3, [r7, #4]
 800b5e6:	e002      	b.n	800b5ee <enq_lock+0x12>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d809      	bhi.n	800b608 <enq_lock+0x2c>
 800b5f4:	490a      	ldr	r1, [pc, #40]	; (800b620 <enq_lock+0x44>)
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1ef      	bne.n	800b5e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	bf14      	ite	ne
 800b60e:	2301      	movne	r3, #1
 800b610:	2300      	moveq	r3, #0
 800b612:	b2db      	uxtb	r3, r3
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	2000a2ac 	.word	0x2000a2ac

0800b624 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e030      	b.n	800b696 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800b634:	495a      	ldr	r1, [pc, #360]	; (800b7a0 <inc_lock+0x17c>)
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4613      	mov	r3, r2
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d11f      	bne.n	800b690 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800b650:	4953      	ldr	r1, [pc, #332]	; (800b7a0 <inc_lock+0x17c>)
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4613      	mov	r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	440b      	add	r3, r1
 800b65e:	3304      	adds	r3, #4
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b668:	3308      	adds	r3, #8
 800b66a:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d10f      	bne.n	800b690 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800b670:	494b      	ldr	r1, [pc, #300]	; (800b7a0 <inc_lock+0x17c>)
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4613      	mov	r3, r2
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	3308      	adds	r3, #8
 800b680:	881a      	ldrh	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b688:	3306      	adds	r3, #6
 800b68a:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d006      	beq.n	800b69e <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	3301      	adds	r3, #1
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d9cb      	bls.n	800b634 <inc_lock+0x10>
 800b69c:	e000      	b.n	800b6a0 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800b69e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d14a      	bne.n	800b73c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	e002      	b.n	800b6b2 <inc_lock+0x8e>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d809      	bhi.n	800b6cc <inc_lock+0xa8>
 800b6b8:	4939      	ldr	r1, [pc, #228]	; (800b7a0 <inc_lock+0x17c>)
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1ef      	bne.n	800b6ac <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d101      	bne.n	800b6d6 <inc_lock+0xb2>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e05f      	b.n	800b796 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6dc:	6819      	ldr	r1, [r3, #0]
 800b6de:	4830      	ldr	r0, [pc, #192]	; (800b7a0 <inc_lock+0x17c>)
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4403      	add	r3, r0
 800b6ec:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	6819      	ldr	r1, [r3, #0]
 800b6f8:	4829      	ldr	r0, [pc, #164]	; (800b7a0 <inc_lock+0x17c>)
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4403      	add	r3, r0
 800b706:	3304      	adds	r3, #4
 800b708:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b710:	3306      	adds	r3, #6
 800b712:	8818      	ldrh	r0, [r3, #0]
 800b714:	4922      	ldr	r1, [pc, #136]	; (800b7a0 <inc_lock+0x17c>)
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4613      	mov	r3, r2
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	3308      	adds	r3, #8
 800b724:	4602      	mov	r2, r0
 800b726:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b728:	491d      	ldr	r1, [pc, #116]	; (800b7a0 <inc_lock+0x17c>)
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	440b      	add	r3, r1
 800b736:	330a      	adds	r3, #10
 800b738:	2200      	movs	r2, #0
 800b73a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00c      	beq.n	800b75c <inc_lock+0x138>
 800b742:	4917      	ldr	r1, [pc, #92]	; (800b7a0 <inc_lock+0x17c>)
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4613      	mov	r3, r2
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	440b      	add	r3, r1
 800b750:	330a      	adds	r3, #10
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <inc_lock+0x138>
 800b758:	2300      	movs	r3, #0
 800b75a:	e01c      	b.n	800b796 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <inc_lock+0x156>
 800b762:	490f      	ldr	r1, [pc, #60]	; (800b7a0 <inc_lock+0x17c>)
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	440b      	add	r3, r1
 800b770:	330a      	adds	r3, #10
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	3301      	adds	r3, #1
 800b776:	b299      	uxth	r1, r3
 800b778:	e001      	b.n	800b77e <inc_lock+0x15a>
 800b77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b77e:	4808      	ldr	r0, [pc, #32]	; (800b7a0 <inc_lock+0x17c>)
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4613      	mov	r3, r2
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4403      	add	r3, r0
 800b78c:	330a      	adds	r3, #10
 800b78e:	460a      	mov	r2, r1
 800b790:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr
 800b7a0:	2000a2ac 	.word	0x2000a2ac

0800b7a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d82e      	bhi.n	800b816 <dec_lock+0x72>
		n = Files[i].ctr;
 800b7b8:	491b      	ldr	r1, [pc, #108]	; (800b828 <dec_lock+0x84>)
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	440b      	add	r3, r1
 800b7c6:	330a      	adds	r3, #10
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b7cc:	89fb      	ldrh	r3, [r7, #14]
 800b7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d2:	d101      	bne.n	800b7d8 <dec_lock+0x34>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b7d8:	89fb      	ldrh	r3, [r7, #14]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <dec_lock+0x40>
 800b7de:	89fb      	ldrh	r3, [r7, #14]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b7e4:	4910      	ldr	r1, [pc, #64]	; (800b828 <dec_lock+0x84>)
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	440b      	add	r3, r1
 800b7f2:	330a      	adds	r3, #10
 800b7f4:	89fa      	ldrh	r2, [r7, #14]
 800b7f6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b7f8:	89fb      	ldrh	r3, [r7, #14]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d108      	bne.n	800b810 <dec_lock+0x6c>
 800b7fe:	490a      	ldr	r1, [pc, #40]	; (800b828 <dec_lock+0x84>)
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4613      	mov	r3, r2
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	2200      	movs	r2, #0
 800b80e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	737b      	strb	r3, [r7, #13]
 800b814:	e001      	b.n	800b81a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b816:	2302      	movs	r3, #2
 800b818:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b81a:	7b7b      	ldrb	r3, [r7, #13]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	bc80      	pop	{r7}
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	2000a2ac 	.word	0x2000a2ac

0800b82c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	e016      	b.n	800b868 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b83a:	4910      	ldr	r1, [pc, #64]	; (800b87c <clear_lock+0x50>)
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4613      	mov	r3, r2
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	440b      	add	r3, r1
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d108      	bne.n	800b862 <clear_lock+0x36>
 800b850:	490a      	ldr	r1, [pc, #40]	; (800b87c <clear_lock+0x50>)
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4613      	mov	r3, r2
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	440b      	add	r3, r1
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3301      	adds	r3, #1
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d9e5      	bls.n	800b83a <clear_lock+0xe>
	}
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	2000a2ac 	.word	0x2000a2ac

0800b880 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b892:	3304      	adds	r3, #4
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d047      	beq.n	800b92a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8a0:	330c      	adds	r3, #12
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	7818      	ldrb	r0, [r3, #0]
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	f7ff fd69 	bl	800b38c <disk_write>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <sync_window+0x46>
			res = FR_DISK_ERR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	73fb      	strb	r3, [r7, #15]
 800b8c4:	e031      	b.n	800b92a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	1ad2      	subs	r2, r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e4:	3318      	adds	r3, #24
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d21e      	bcs.n	800b92a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f2:	3303      	adds	r3, #3
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	e014      	b.n	800b924 <sync_window+0xa4>
					wsect += fs->fsize;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b900:	3318      	adds	r3, #24
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	4413      	add	r3, r2
 800b908:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b910:	3301      	adds	r3, #1
 800b912:	7818      	ldrb	r0, [r3, #0]
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	2301      	movs	r3, #1
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	f7ff fd37 	bl	800b38c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3b01      	subs	r3, #1
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d8e7      	bhi.n	800b8fa <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b948:	330c      	adds	r3, #12
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d01f      	beq.n	800b992 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff ff94 	bl	800b880 <sync_window>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d117      	bne.n	800b992 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b968:	3301      	adds	r3, #1
 800b96a:	7818      	ldrb	r0, [r3, #0]
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	2301      	movs	r3, #1
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	f7ff fceb 	bl	800b34c <disk_read>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b97c:	f04f 33ff 	mov.w	r3, #4294967295
 800b980:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b982:	2301      	movs	r3, #1
 800b984:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b98c:	330c      	adds	r3, #12
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff ff6b 	bl	800b880 <sync_window>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f040 80bd 	bne.w	800bb30 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	f040 80a7 	bne.w	800bb12 <sync_fs+0x176>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ca:	3305      	adds	r3, #5
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	f040 809f 	bne.w	800bb12 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9dc:	330a      	adds	r3, #10
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	f7ff fd2e 	bl	800b444 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2255      	movs	r2, #85	; 0x55
 800b9ec:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	22aa      	movs	r2, #170	; 0xaa
 800b9f4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2252      	movs	r2, #82	; 0x52
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2252      	movs	r2, #82	; 0x52
 800ba02:	705a      	strb	r2, [r3, #1]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2261      	movs	r2, #97	; 0x61
 800ba08:	709a      	strb	r2, [r3, #2]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2241      	movs	r2, #65	; 0x41
 800ba0e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2272      	movs	r2, #114	; 0x72
 800ba14:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2272      	movs	r2, #114	; 0x72
 800ba1c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2241      	movs	r2, #65	; 0x41
 800ba24:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2261      	movs	r2, #97	; 0x61
 800ba2c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba36:	3310      	adds	r3, #16
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba48:	3310      	adds	r3, #16
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	0a1b      	lsrs	r3, r3, #8
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba60:	3310      	adds	r3, #16
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	0c1b      	lsrs	r3, r3, #16
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba74:	3310      	adds	r3, #16
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	0e1b      	lsrs	r3, r3, #24
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba88:	330c      	adds	r3, #12
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9a:	330c      	adds	r3, #12
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	0a1b      	lsrs	r3, r3, #8
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab2:	330c      	adds	r3, #12
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	0c1b      	lsrs	r3, r3, #16
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac6:	330c      	adds	r3, #12
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	0e1b      	lsrs	r3, r3, #24
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bada:	331c      	adds	r3, #28
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	1c5a      	adds	r2, r3, #1
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bae6:	330c      	adds	r3, #12
 800bae8:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf0:	3301      	adds	r3, #1
 800baf2:	7818      	ldrb	r0, [r3, #0]
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bafc:	330c      	adds	r3, #12
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	2301      	movs	r3, #1
 800bb02:	f7ff fc43 	bl	800b38c <disk_write>
			fs->fsi_flag = 0;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb0c:	3305      	adds	r3, #5
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb18:	3301      	adds	r3, #1
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2100      	movs	r1, #0
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fc53 	bl	800b3cc <disk_ioctl>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	3b02      	subs	r3, #2
 800bb48:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb50:	3314      	adds	r3, #20
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3b02      	subs	r3, #2
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d301      	bcc.n	800bb60 <clust2sect+0x26>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e00e      	b.n	800bb7e <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb66:	3302      	adds	r3, #2
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	fb03 f202 	mul.w	r2, r3, r2
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb78:	3308      	adds	r3, #8
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4413      	add	r3, r2
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bc80      	pop	{r7}
 800bb86:	4770      	bx	lr

0800bb88 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d907      	bls.n	800bba8 <get_fat+0x20>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9e:	3314      	adds	r3, #20
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d302      	bcc.n	800bbae <get_fat+0x26>
		val = 1;	/* Internal error */
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e0ec      	b.n	800bd88 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbae:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	f000 809e 	beq.w	800bcfe <get_fat+0x176>
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	f300 80d6 	bgt.w	800bd74 <get_fat+0x1ec>
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d002      	beq.n	800bbd2 <get_fat+0x4a>
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d063      	beq.n	800bc98 <get_fat+0x110>
 800bbd0:	e0d0      	b.n	800bd74 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	085b      	lsrs	r3, r3, #1
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbee:	330a      	adds	r3, #10
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fe98 	bl	800b934 <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f040 80b7 	bne.w	800bd7a <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	60fa      	str	r2, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc18:	320a      	adds	r2, #10
 800bc1a:	8812      	ldrh	r2, [r2, #0]
 800bc1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc20:	fb02 f201 	mul.w	r2, r2, r1
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	5cd3      	ldrb	r3, [r2, r3]
 800bc2a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc3a:	330a      	adds	r3, #10
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc46:	4413      	add	r3, r2
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff fe72 	bl	800b934 <move_window>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f040 8093 	bne.w	800bd7e <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5e:	330a      	adds	r3, #10
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc6a:	fb02 f201 	mul.w	r2, r2, r1
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	5cd3      	ldrb	r3, [r2, r3]
 800bc74:	021b      	lsls	r3, r3, #8
 800bc76:	461a      	mov	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <get_fat+0x106>
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	091b      	lsrs	r3, r3, #4
 800bc8c:	e002      	b.n	800bc94 <get_fat+0x10c>
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc94:	617b      	str	r3, [r7, #20]
			break;
 800bc96:	e077      	b.n	800bd88 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca6:	330a      	adds	r3, #10
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	085b      	lsrs	r3, r3, #1
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	4619      	mov	r1, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcb6:	4413      	add	r3, r2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7ff fe3a 	bl	800b934 <move_window>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d15d      	bne.n	800bd82 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	005a      	lsls	r2, r3, #1
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	330a      	adds	r3, #10
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bcd8:	fb03 f301 	mul.w	r3, r3, r1
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	4413      	add	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	3301      	adds	r3, #1
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	b21a      	sxth	r2, r3
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	b21b      	sxth	r3, r3
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	617b      	str	r3, [r7, #20]
			break;
 800bcfc:	e044      	b.n	800bd88 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd0c:	330a      	adds	r3, #10
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	089b      	lsrs	r3, r3, #2
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	4619      	mov	r1, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd1c:	4413      	add	r3, r2
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff fe07 	bl	800b934 <move_window>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d12c      	bne.n	800bd86 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	009a      	lsls	r2, r3, #2
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd36:	330a      	adds	r3, #10
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd3e:	fb03 f301 	mul.w	r3, r3, r1
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	4413      	add	r3, r2
 800bd48:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	3303      	adds	r3, #3
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	061a      	lsls	r2, r3, #24
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	3302      	adds	r3, #2
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	041b      	lsls	r3, r3, #16
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	3201      	adds	r2, #1
 800bd60:	7812      	ldrb	r2, [r2, #0]
 800bd62:	0212      	lsls	r2, r2, #8
 800bd64:	4313      	orrs	r3, r2
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	7812      	ldrb	r2, [r2, #0]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd70:	617b      	str	r3, [r7, #20]
			break;
 800bd72:	e009      	b.n	800bd88 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e006      	b.n	800bd88 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd7a:	bf00      	nop
 800bd7c:	e004      	b.n	800bd88 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd7e:	bf00      	nop
 800bd80:	e002      	b.n	800bd88 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd82:	bf00      	nop
 800bd84:	e000      	b.n	800bd88 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd86:	bf00      	nop
		}
	}

	return val;
 800bd88:	697b      	ldr	r3, [r7, #20]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b088      	sub	sp, #32
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d907      	bls.n	800bdb4 <put_fat+0x22>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdaa:	3314      	adds	r3, #20
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d302      	bcc.n	800bdba <put_fat+0x28>
		res = FR_INT_ERR;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	77fb      	strb	r3, [r7, #31]
 800bdb8:	e146      	b.n	800c048 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	f000 80d9 	beq.w	800bf7a <put_fat+0x1e8>
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	f300 8133 	bgt.w	800c034 <put_fat+0x2a2>
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d003      	beq.n	800bdda <put_fat+0x48>
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	f000 8095 	beq.w	800bf02 <put_fat+0x170>
 800bdd8:	e12c      	b.n	800c034 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	085b      	lsrs	r3, r3, #1
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	4413      	add	r3, r2
 800bde6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	330a      	adds	r3, #10
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800be02:	4413      	add	r3, r2
 800be04:	4619      	mov	r1, r3
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fd94 	bl	800b934 <move_window>
 800be0c:	4603      	mov	r3, r0
 800be0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be10:	7ffb      	ldrb	r3, [r7, #31]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f040 8111 	bne.w	800c03a <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	617a      	str	r2, [r7, #20]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be24:	320a      	adds	r2, #10
 800be26:	8812      	ldrh	r2, [r2, #0]
 800be28:	fbb3 f1f2 	udiv	r1, r3, r2
 800be2c:	fb02 f201 	mul.w	r2, r2, r1
 800be30:	1a9b      	subs	r3, r3, r2
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	4413      	add	r3, r2
 800be36:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00d      	beq.n	800be5e <put_fat+0xcc>
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	b25b      	sxtb	r3, r3
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	b25a      	sxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	b25b      	sxtb	r3, r3
 800be56:	4313      	orrs	r3, r2
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	e001      	b.n	800be62 <put_fat+0xd0>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be6c:	3304      	adds	r3, #4
 800be6e:	2201      	movs	r2, #1
 800be70:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be80:	330a      	adds	r3, #10
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	fbb3 f3f1 	udiv	r3, r3, r1
 800be8c:	4413      	add	r3, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff fd4f 	bl	800b934 <move_window>
 800be96:	4603      	mov	r3, r0
 800be98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be9a:	7ffb      	ldrb	r3, [r7, #31]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f040 80ce 	bne.w	800c03e <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea8:	330a      	adds	r3, #10
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	461a      	mov	r2, r3
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800beb4:	fb02 f201 	mul.w	r2, r2, r1
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	4413      	add	r3, r2
 800bebe:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <put_fat+0x140>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	091b      	lsrs	r3, r3, #4
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	e00e      	b.n	800bef0 <put_fat+0x15e>
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b25b      	sxtb	r3, r3
 800bed8:	f023 030f 	bic.w	r3, r3, #15
 800bedc:	b25a      	sxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	0a1b      	lsrs	r3, r3, #8
 800bee2:	b25b      	sxtb	r3, r3
 800bee4:	f003 030f 	and.w	r3, r3, #15
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	4313      	orrs	r3, r2
 800beec:	b25b      	sxtb	r3, r3
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800befa:	3304      	adds	r3, #4
 800befc:	2201      	movs	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
			break;
 800bf00:	e0a2      	b.n	800c048 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf10:	330a      	adds	r3, #10
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	085b      	lsrs	r3, r3, #1
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4619      	mov	r1, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf20:	4413      	add	r3, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7ff fd05 	bl	800b934 <move_window>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f040 8086 	bne.w	800c042 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	005a      	lsls	r2, r3, #1
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf40:	330a      	adds	r3, #10
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf48:	fb03 f301 	mul.w	r3, r3, r1
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4413      	add	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	701a      	strb	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	3301      	adds	r3, #1
 800bf68:	b2d2      	uxtb	r2, r2
 800bf6a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf72:	3304      	adds	r3, #4
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
			break;
 800bf78:	e066      	b.n	800c048 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf88:	330a      	adds	r3, #10
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	089b      	lsrs	r3, r3, #2
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	4619      	mov	r1, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf98:	4413      	add	r3, r2
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff fcc9 	bl	800b934 <move_window>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfa6:	7ffb      	ldrb	r3, [r7, #31]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d14c      	bne.n	800c046 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	009a      	lsls	r2, r3, #2
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb6:	330a      	adds	r3, #10
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	fbb2 f1f3 	udiv	r1, r2, r3
 800bfbe:	fb03 f301 	mul.w	r3, r3, r1
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	3303      	adds	r3, #3
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	061a      	lsls	r2, r3, #24
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	3302      	adds	r3, #2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	041b      	lsls	r3, r3, #16
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	3201      	adds	r2, #1
 800bfe0:	7812      	ldrb	r2, [r2, #0]
 800bfe2:	0212      	lsls	r2, r2, #8
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	b29b      	uxth	r3, r3
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	b29a      	uxth	r2, r3
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	3301      	adds	r3, #1
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	0c1a      	lsrs	r2, r3, #16
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	3302      	adds	r3, #2
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	0e1a      	lsrs	r2, r3, #24
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	3303      	adds	r3, #3
 800c022:	b2d2      	uxtb	r2, r2
 800c024:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c02c:	3304      	adds	r3, #4
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
			break;
 800c032:	e009      	b.n	800c048 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800c034:	2302      	movs	r3, #2
 800c036:	77fb      	strb	r3, [r7, #31]
 800c038:	e006      	b.n	800c048 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800c03a:	bf00      	nop
 800c03c:	e004      	b.n	800c048 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800c03e:	bf00      	nop
 800c040:	e002      	b.n	800c048 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800c042:	bf00      	nop
 800c044:	e000      	b.n	800c048 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800c046:	bf00      	nop
		}
	}

	return res;
 800c048:	7ffb      	ldrb	r3, [r7, #31]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3720      	adds	r7, #32
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b084      	sub	sp, #16
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d907      	bls.n	800c072 <remove_chain+0x20>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c068:	3314      	adds	r3, #20
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d302      	bcc.n	800c078 <remove_chain+0x26>
		res = FR_INT_ERR;
 800c072:	2302      	movs	r3, #2
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	e04f      	b.n	800c118 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c07c:	e040      	b.n	800c100 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7ff fd81 	bl	800bb88 <get_fat>
 800c086:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d041      	beq.n	800c112 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d102      	bne.n	800c09a <remove_chain+0x48>
 800c094:	2302      	movs	r3, #2
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	e03e      	b.n	800c118 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a0:	d102      	bne.n	800c0a8 <remove_chain+0x56>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	e037      	b.n	800c118 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff fe70 	bl	800bd92 <put_fat>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d12c      	bne.n	800c116 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c2:	3310      	adds	r3, #16
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d017      	beq.n	800c0fc <remove_chain+0xaa>
				fs->free_clust++;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d2:	3310      	adds	r3, #16
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0de:	3310      	adds	r3, #16
 800c0e0:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e8:	3305      	adds	r3, #5
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f043 0301 	orr.w	r3, r3, #1
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f8:	3305      	adds	r3, #5
 800c0fa:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c106:	3314      	adds	r3, #20
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d3b6      	bcc.n	800c07e <remove_chain+0x2c>
 800c110:	e002      	b.n	800c118 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800c112:	bf00      	nop
 800c114:	e000      	b.n	800c118 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800c116:	bf00      	nop
		}
	}

	return res;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b086      	sub	sp, #24
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d113      	bne.n	800c15a <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c138:	330c      	adds	r3, #12
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d007      	beq.n	800c154 <create_chain+0x32>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c14a:	3314      	adds	r3, #20
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	429a      	cmp	r2, r3
 800c152:	d31e      	bcc.n	800c192 <create_chain+0x70>
 800c154:	2301      	movs	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
 800c158:	e01b      	b.n	800c192 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff fd13 	bl	800bb88 <get_fat>
 800c162:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d801      	bhi.n	800c16e <create_chain+0x4c>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e086      	b.n	800c27c <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d101      	bne.n	800c17a <create_chain+0x58>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	e080      	b.n	800c27c <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c180:	3314      	adds	r3, #20
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	429a      	cmp	r2, r3
 800c188:	d201      	bcs.n	800c18e <create_chain+0x6c>
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	e076      	b.n	800c27c <create_chain+0x15a>
		scl = clst;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	3301      	adds	r3, #1
 800c19a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a2:	3314      	adds	r3, #20
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d307      	bcc.n	800c1bc <create_chain+0x9a>
			ncl = 2;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d901      	bls.n	800c1bc <create_chain+0x9a>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e05f      	b.n	800c27c <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800c1bc:	6979      	ldr	r1, [r7, #20]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff fce2 	bl	800bb88 <get_fat>
 800c1c4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00e      	beq.n	800c1ea <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d002      	beq.n	800c1da <create_chain+0xb8>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <create_chain+0xbc>
			return cs;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	e04e      	b.n	800c27c <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d1d7      	bne.n	800c196 <create_chain+0x74>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e048      	b.n	800c27c <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800c1ea:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800c1ec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c1f0:	6979      	ldr	r1, [r7, #20]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fdcd 	bl	800bd92 <put_fat>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <create_chain+0xf4>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d006      	beq.n	800c216 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fdc0 	bl	800bd92 <put_fat>
 800c212:	4603      	mov	r3, r0
 800c214:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d126      	bne.n	800c26a <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c222:	330c      	adds	r3, #12
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c22e:	3310      	adds	r3, #16
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d020      	beq.n	800c27a <create_chain+0x158>
			fs->free_clust--;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c23e:	3310      	adds	r3, #16
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	1e5a      	subs	r2, r3, #1
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c24a:	3310      	adds	r3, #16
 800c24c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c254:	3305      	adds	r3, #5
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	f043 0301 	orr.w	r3, r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c264:	3305      	adds	r3, #5
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	e007      	b.n	800c27a <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d102      	bne.n	800c276 <create_chain+0x154>
 800c270:	f04f 33ff 	mov.w	r3, #4294967295
 800c274:	e000      	b.n	800c278 <create_chain+0x156>
 800c276:	2301      	movs	r3, #1
 800c278:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800c27a:	697b      	ldr	r3, [r7, #20]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c294:	3304      	adds	r3, #4
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a8:	330a      	adds	r3, #10
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2c0:	3302      	adds	r3, #2
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	1d1a      	adds	r2, r3, #4
 800c2ce:	613a      	str	r2, [r7, #16]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <clmt_clust+0x5a>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e010      	b.n	800c300 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d307      	bcc.n	800c2f6 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2f4:	e7e9      	b.n	800c2ca <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800c2f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	4413      	add	r3, r2
}
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	bc80      	pop	{r7}
 800c308:	4770      	bx	lr

0800c30a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c31e:	3306      	adds	r3, #6
 800c320:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c328:	3308      	adds	r3, #8
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d00a      	beq.n	800c34a <dir_sdi+0x40>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c340:	3314      	adds	r3, #20
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	429a      	cmp	r2, r3
 800c348:	d301      	bcc.n	800c34e <dir_sdi+0x44>
		return FR_INT_ERR;
 800c34a:	2302      	movs	r3, #2
 800c34c:	e0b4      	b.n	800c4b8 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d111      	bne.n	800c378 <dir_sdi+0x6e>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b03      	cmp	r3, #3
 800c364:	d108      	bne.n	800c378 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c372:	3304      	adds	r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d117      	bne.n	800c3ae <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38a:	3308      	adds	r3, #8
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	4293      	cmp	r3, r2
 800c394:	d301      	bcc.n	800c39a <dir_sdi+0x90>
			return FR_INT_ERR;
 800c396:	2302      	movs	r3, #2
 800c398:	e08e      	b.n	800c4b8 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	613b      	str	r3, [r7, #16]
 800c3ac:	e046      	b.n	800c43c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ba:	330a      	adds	r3, #10
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	095b      	lsrs	r3, r3, #5
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	3302      	adds	r3, #2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	fb03 f302 	mul.w	r3, r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800c3da:	e022      	b.n	800c422 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6979      	ldr	r1, [r7, #20]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fbce 	bl	800bb88 <get_fat>
 800c3ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d101      	bne.n	800c3fa <dir_sdi+0xf0>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e05e      	b.n	800c4b8 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d90a      	bls.n	800c416 <dir_sdi+0x10c>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40c:	3314      	adds	r3, #20
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	429a      	cmp	r2, r3
 800c414:	d301      	bcc.n	800c41a <dir_sdi+0x110>
				return FR_INT_ERR;
 800c416:	2302      	movs	r3, #2
 800c418:	e04e      	b.n	800c4b8 <dir_sdi+0x1ae>
			idx -= ic;
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	429a      	cmp	r2, r3
 800c428:	d2d8      	bcs.n	800c3dc <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6979      	ldr	r1, [r7, #20]
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fb80 	bl	800bb3a <clust2sect>
 800c43a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c442:	330c      	adds	r3, #12
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <dir_sdi+0x148>
 800c44e:	2302      	movs	r3, #2
 800c450:	e032      	b.n	800c4b8 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c45e:	330a      	adds	r3, #10
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	095b      	lsrs	r3, r3, #5
 800c464:	b29b      	uxth	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	441a      	add	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c478:	3310      	adds	r3, #16
 800c47a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c492:	330a      	adds	r3, #10
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	095b      	lsrs	r3, r3, #5
 800c498:	b29b      	uxth	r3, r3
 800c49a:	461a      	mov	r2, r3
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a2:	fb02 f201 	mul.w	r2, r2, r1
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	015b      	lsls	r3, r3, #5
 800c4aa:	18c2      	adds	r2, r0, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b2:	3314      	adds	r3, #20
 800c4b4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d0:	3306      	adds	r3, #6
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <dir_next+0x2e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e6:	3310      	adds	r3, #16
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <dir_next+0x32>
		return FR_NO_FILE;
 800c4ee:	2304      	movs	r3, #4
 800c4f0:	e144      	b.n	800c77c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fe:	330a      	adds	r3, #10
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	095b      	lsrs	r3, r3, #5
 800c504:	b29b      	uxth	r3, r3
 800c506:	461a      	mov	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c50e:	fb02 f201 	mul.w	r2, r2, r1
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 810c 	bne.w	800c732 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	3310      	adds	r3, #16
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52c:	3310      	adds	r3, #16
 800c52e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c536:	330c      	adds	r3, #12
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10e      	bne.n	800c55c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54a:	3308      	adds	r3, #8
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4293      	cmp	r3, r2
 800c554:	f0c0 80ed 	bcc.w	800c732 <dir_next+0x272>
				return FR_NO_FILE;
 800c558:	2304      	movs	r3, #4
 800c55a:	e10f      	b.n	800c77c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c568:	330a      	adds	r3, #10
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	095b      	lsrs	r3, r3, #5
 800c56e:	b29b      	uxth	r3, r3
 800c570:	461a      	mov	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	fbb3 f2f2 	udiv	r2, r3, r2
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c584:	3302      	adds	r3, #2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	3b01      	subs	r3, #1
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 80d0 	bne.w	800c732 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a0:	330c      	adds	r3, #12
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f7ff faee 	bl	800bb88 <get_fat>
 800c5ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d801      	bhi.n	800c5b8 <dir_next+0xf8>
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	e0e1      	b.n	800c77c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5be:	d101      	bne.n	800c5c4 <dir_next+0x104>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e0db      	b.n	800c77c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	f0c0 8097 	bcc.w	800c70a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <dir_next+0x126>
 800c5e2:	2304      	movs	r3, #4
 800c5e4:	e0ca      	b.n	800c77c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	f7ff fd91 	bl	800c122 <create_chain>
 800c600:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <dir_next+0x14c>
 800c608:	2307      	movs	r3, #7
 800c60a:	e0b7      	b.n	800c77c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d101      	bne.n	800c616 <dir_next+0x156>
 800c612:	2302      	movs	r3, #2
 800c614:	e0b2      	b.n	800c77c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61c:	d101      	bne.n	800c622 <dir_next+0x162>
 800c61e:	2301      	movs	r3, #1
 800c620:	e0ac      	b.n	800c77c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff f928 	bl	800b880 <sync_window>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <dir_next+0x17a>
 800c636:	2301      	movs	r3, #1
 800c638:	e0a0      	b.n	800c77c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c650:	330a      	adds	r3, #10
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	2100      	movs	r1, #0
 800c658:	f7fe fef4 	bl	800b444 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66a:	681c      	ldr	r4, [r3, #0]
 800c66c:	6979      	ldr	r1, [r7, #20]
 800c66e:	4610      	mov	r0, r2
 800c670:	f7ff fa63 	bl	800bb3a <clust2sect>
 800c674:	4602      	mov	r2, r0
 800c676:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800c67a:	330c      	adds	r3, #12
 800c67c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c67e:	2300      	movs	r3, #0
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	e024      	b.n	800c6ce <dir_next+0x20e>
						dp->fs->wflag = 1;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c690:	3304      	adds	r3, #4
 800c692:	2201      	movs	r2, #1
 800c694:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff f8ee 	bl	800b880 <sync_window>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <dir_next+0x1ee>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e066      	b.n	800c77c <dir_next+0x2bc>
						dp->fs->winsect++;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800c6ba:	330c      	adds	r3, #12
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	1c59      	adds	r1, r3, #1
 800c6c0:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	613b      	str	r3, [r7, #16]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6da:	3302      	adds	r3, #2
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d3ce      	bcc.n	800c684 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c6f2:	330c      	adds	r3, #12
 800c6f4:	6819      	ldr	r1, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	1a8a      	subs	r2, r1, r2
 800c702:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c706:	330c      	adds	r3, #12
 800c708:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c710:	330c      	adds	r3, #12
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6979      	ldr	r1, [r7, #20]
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff fa0a 	bl	800bb3a <clust2sect>
 800c726:	4602      	mov	r2, r0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c72e:	3310      	adds	r3, #16
 800c730:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73c:	3306      	adds	r3, #6
 800c73e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c756:	330a      	adds	r3, #10
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	095b      	lsrs	r3, r3, #5
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	461a      	mov	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	fbb3 f1f2 	udiv	r1, r3, r2
 800c766:	fb02 f201 	mul.w	r2, r2, r1
 800c76a:	1a9b      	subs	r3, r3, r2
 800c76c:	015b      	lsls	r3, r3, #5
 800c76e:	18c2      	adds	r2, r0, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c776:	3314      	adds	r3, #20
 800c778:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	371c      	adds	r7, #28
 800c780:	46bd      	mov	sp, r7
 800c782:	bd90      	pop	{r4, r7, pc}

0800c784 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c78e:	2100      	movs	r1, #0
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fdba 	bl	800c30a <dir_sdi>
 800c796:	4603      	mov	r3, r0
 800c798:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d138      	bne.n	800c812 <dir_alloc+0x8e>
		n = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	f7ff f8bb 	bl	800b934 <move_window>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d123      	bne.n	800c810 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2be5      	cmp	r3, #229	; 0xe5
 800c7d6:	d007      	beq.n	800c7e8 <dir_alloc+0x64>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7de:	3314      	adds	r3, #20
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d107      	bne.n	800c7f8 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	60bb      	str	r3, [r7, #8]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d102      	bne.n	800c7fc <dir_alloc+0x78>
 800c7f6:	e00c      	b.n	800c812 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff fe5e 	bl	800c4c0 <dir_next>
 800c804:	4603      	mov	r3, r0
 800c806:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ca      	beq.n	800c7a4 <dir_alloc+0x20>
 800c80e:	e000      	b.n	800c812 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800c810:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	2b04      	cmp	r3, #4
 800c816:	d101      	bne.n	800c81c <dir_alloc+0x98>
 800c818:	2307      	movs	r3, #7
 800c81a:	73fb      	strb	r3, [r7, #15]
	return res;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c826:	b480      	push	{r7}
 800c828:	b085      	sub	sp, #20
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	331b      	adds	r3, #27
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	021b      	lsls	r3, r3, #8
 800c838:	b21a      	sxth	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	331a      	adds	r3, #26
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	b21b      	sxth	r3, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	b21b      	sxth	r3, r3
 800c846:	b29b      	uxth	r3, r3
 800c848:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b03      	cmp	r3, #3
 800c854:	d10f      	bne.n	800c876 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	3315      	adds	r3, #21
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	021b      	lsls	r3, r3, #8
 800c85e:	b21a      	sxth	r2, r3
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	3314      	adds	r3, #20
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	b21b      	sxth	r3, r3
 800c868:	4313      	orrs	r3, r2
 800c86a:	b21b      	sxth	r3, r3
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	041b      	lsls	r3, r3, #16
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	4313      	orrs	r3, r2
 800c874:	60fb      	str	r3, [r7, #12]

	return cl;
 800c876:	68fb      	ldr	r3, [r7, #12]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bc80      	pop	{r7}
 800c880:	4770      	bx	lr

0800c882 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	331a      	adds	r3, #26
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	331b      	adds	r3, #27
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	0c1a      	lsrs	r2, r3, #16
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3314      	adds	r3, #20
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	0c1b      	lsrs	r3, r3, #16
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	0a1b      	lsrs	r3, r3, #8
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3315      	adds	r3, #21
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bc80      	pop	{r7}
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8e2:	1e5a      	subs	r2, r3, #1
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	613b      	str	r3, [r7, #16]
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800c8f8:	4a2b      	ldr	r2, [pc, #172]	; (800c9a8 <cmp_lfn+0xd8>)
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	3301      	adds	r3, #1
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	4413      	add	r3, r2
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	021b      	lsls	r3, r3, #8
 800c90a:	b21a      	sxth	r2, r3
 800c90c:	4926      	ldr	r1, [pc, #152]	; (800c9a8 <cmp_lfn+0xd8>)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	440b      	add	r3, r1
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	4619      	mov	r1, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	440b      	add	r3, r1
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b21b      	sxth	r3, r3
 800c91e:	4313      	orrs	r3, r2
 800c920:	b21b      	sxth	r3, r3
 800c922:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800c924:	89fb      	ldrh	r3, [r7, #14]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d019      	beq.n	800c95e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800c92a:	89bb      	ldrh	r3, [r7, #12]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f002 f925 	bl	800eb7c <ff_wtoupper>
 800c932:	4603      	mov	r3, r0
 800c934:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2bfe      	cmp	r3, #254	; 0xfe
 800c93a:	d80e      	bhi.n	800c95a <cmp_lfn+0x8a>
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	617a      	str	r2, [r7, #20]
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	4413      	add	r3, r2
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f002 f916 	bl	800eb7c <ff_wtoupper>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	89fb      	ldrh	r3, [r7, #14]
 800c956:	4293      	cmp	r3, r2
 800c958:	d008      	beq.n	800c96c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800c95a:	2300      	movs	r3, #0
 800c95c:	e01f      	b.n	800c99e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800c95e:	89bb      	ldrh	r3, [r7, #12]
 800c960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c964:	4293      	cmp	r3, r2
 800c966:	d001      	beq.n	800c96c <cmp_lfn+0x9c>
 800c968:	2300      	movs	r3, #0
 800c96a:	e018      	b.n	800c99e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3301      	adds	r3, #1
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b0c      	cmp	r3, #12
 800c976:	d9bf      	bls.n	800c8f8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <cmp_lfn+0xcc>
 800c984:	89fb      	ldrh	r3, [r7, #14]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d008      	beq.n	800c99c <cmp_lfn+0xcc>
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	4413      	add	r3, r2
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <cmp_lfn+0xcc>
		return 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	e000      	b.n	800c99e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800c99c:	2301      	movs	r3, #1
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	080256c4 	.word	0x080256c4

0800c9ac <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b089      	sub	sp, #36	; 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	71fb      	strb	r3, [r7, #7]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	330d      	adds	r3, #13
 800c9c6:	79ba      	ldrb	r2, [r7, #6]
 800c9c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	330b      	adds	r3, #11
 800c9ce:	220f      	movs	r2, #15
 800c9d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	330c      	adds	r3, #12
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	331a      	adds	r3, #26
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	331b      	adds	r3, #27
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	1e5a      	subs	r2, r3, #1
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	82fb      	strh	r3, [r7, #22]
 800c9fe:	2300      	movs	r3, #0
 800ca00:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800ca02:	8afb      	ldrh	r3, [r7, #22]
 800ca04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d007      	beq.n	800ca1c <fit_lfn+0x70>
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	61fa      	str	r2, [r7, #28]
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	4413      	add	r3, r2
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800ca1c:	4a1c      	ldr	r2, [pc, #112]	; (800ca90 <fit_lfn+0xe4>)
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	4413      	add	r3, r2
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	461a      	mov	r2, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	4413      	add	r3, r2
 800ca2a:	8afa      	ldrh	r2, [r7, #22]
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	8afb      	ldrh	r3, [r7, #22]
 800ca32:	0a1b      	lsrs	r3, r3, #8
 800ca34:	b299      	uxth	r1, r3
 800ca36:	4a16      	ldr	r2, [pc, #88]	; (800ca90 <fit_lfn+0xe4>)
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	4413      	add	r3, r2
 800ca44:	b2ca      	uxtb	r2, r1
 800ca46:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800ca48:	8afb      	ldrh	r3, [r7, #22]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <fit_lfn+0xa8>
 800ca4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca52:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	3301      	adds	r3, #1
 800ca58:	61bb      	str	r3, [r7, #24]
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	2b0c      	cmp	r3, #12
 800ca5e:	d9d0      	bls.n	800ca02 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800ca60:	8afb      	ldrh	r3, [r7, #22]
 800ca62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d006      	beq.n	800ca78 <fit_lfn+0xcc>
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	005b      	lsls	r3, r3, #1
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	4413      	add	r3, r2
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d103      	bne.n	800ca80 <fit_lfn+0xd4>
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca7e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	79fa      	ldrb	r2, [r7, #7]
 800ca84:	701a      	strb	r2, [r3, #0]
}
 800ca86:	bf00      	nop
 800ca88:	3724      	adds	r7, #36	; 0x24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr
 800ca90:	080256c4 	.word	0x080256c4

0800ca94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08c      	sub	sp, #48	; 0x30
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800caa2:	220b      	movs	r2, #11
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7fe fcae 	bl	800b408 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d92b      	bls.n	800cb0a <gen_numname+0x76>
		sr = seq;
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cab6:	e022      	b.n	800cafe <gen_numname+0x6a>
			wc = *lfn++;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	1c9a      	adds	r2, r3, #2
 800cabc:	607a      	str	r2, [r7, #4]
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cac2:	2300      	movs	r3, #0
 800cac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cac6:	e017      	b.n	800caf8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	005a      	lsls	r2, r3, #1
 800cacc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	4413      	add	r3, r2
 800cad4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cad8:	085b      	lsrs	r3, r3, #1
 800cada:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d005      	beq.n	800caf2 <gen_numname+0x5e>
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800caec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800caf0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	3301      	adds	r3, #1
 800caf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	2b0f      	cmp	r3, #15
 800cafc:	d9e4      	bls.n	800cac8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1d8      	bne.n	800cab8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cb0a:	2307      	movs	r3, #7
 800cb0c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	f003 030f 	and.w	r3, r3, #15
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	3330      	adds	r3, #48	; 0x30
 800cb1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb22:	2b39      	cmp	r3, #57	; 0x39
 800cb24:	d904      	bls.n	800cb30 <gen_numname+0x9c>
 800cb26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb2a:	3307      	adds	r3, #7
 800cb2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	1e5a      	subs	r2, r3, #1
 800cb34:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb40:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	091b      	lsrs	r3, r3, #4
 800cb48:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1de      	bne.n	800cb0e <gen_numname+0x7a>
	ns[i] = '~';
 800cb50:	f107 0214 	add.w	r2, r7, #20
 800cb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb56:	4413      	add	r3, r2
 800cb58:	227e      	movs	r2, #126	; 0x7e
 800cb5a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	627b      	str	r3, [r7, #36]	; 0x24
 800cb60:	e002      	b.n	800cb68 <gen_numname+0xd4>
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	3301      	adds	r3, #1
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24
 800cb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d205      	bcs.n	800cb7c <gen_numname+0xe8>
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	4413      	add	r3, r2
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b20      	cmp	r3, #32
 800cb7a:	d1f2      	bne.n	800cb62 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2b07      	cmp	r3, #7
 800cb80:	d808      	bhi.n	800cb94 <gen_numname+0x100>
 800cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cb92:	e000      	b.n	800cb96 <gen_numname+0x102>
 800cb94:	2120      	movs	r1, #32
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb98:	1c5a      	adds	r2, r3, #1
 800cb9a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	4413      	add	r3, r2
 800cba0:	460a      	mov	r2, r1
 800cba2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	2b07      	cmp	r3, #7
 800cba8:	d9e8      	bls.n	800cb7c <gen_numname+0xe8>
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	3730      	adds	r7, #48	; 0x30
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cbc0:	230b      	movs	r3, #11
 800cbc2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	0852      	lsrs	r2, r2, #1
 800cbca:	01db      	lsls	r3, r3, #7
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	1c59      	adds	r1, r3, #1
 800cbd4:	6079      	str	r1, [r7, #4]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	4413      	add	r3, r2
 800cbda:	73fb      	strb	r3, [r7, #15]
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	60bb      	str	r3, [r7, #8]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1ed      	bne.n	800cbc4 <sum_sfn+0x10>
	return sum;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bc80      	pop	{r7}
 800cbf2:	4770      	bx	lr

0800cbf4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f7ff fb83 	bl	800c30a <dir_sdi>
 800cc04:	4603      	mov	r3, r0
 800cc06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <dir_find+0x1e>
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	e0c1      	b.n	800cd96 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800cc12:	23ff      	movs	r3, #255	; 0xff
 800cc14:	753b      	strb	r3, [r7, #20]
 800cc16:	7d3b      	ldrb	r3, [r7, #20]
 800cc18:	757b      	strb	r3, [r7, #21]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc20:	3304      	adds	r3, #4
 800cc22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc26:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc36:	3310      	adds	r3, #16
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	f7fe fe79 	bl	800b934 <move_window>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f040 809e 	bne.w	800cd8a <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc54:	3314      	adds	r3, #20
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc60:	7dbb      	ldrb	r3, [r7, #22]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <dir_find+0x78>
 800cc66:	2304      	movs	r3, #4
 800cc68:	75fb      	strb	r3, [r7, #23]
 800cc6a:	e093      	b.n	800cd94 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	330b      	adds	r3, #11
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc76:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cc78:	7dbb      	ldrb	r3, [r7, #22]
 800cc7a:	2be5      	cmp	r3, #229	; 0xe5
 800cc7c:	d007      	beq.n	800cc8e <dir_find+0x9a>
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	f003 0308 	and.w	r3, r3, #8
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00c      	beq.n	800cca2 <dir_find+0xae>
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	2b0f      	cmp	r3, #15
 800cc8c:	d009      	beq.n	800cca2 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800cc8e:	23ff      	movs	r3, #255	; 0xff
 800cc90:	757b      	strb	r3, [r7, #21]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cc98:	3304      	adds	r3, #4
 800cc9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc9e:	801a      	strh	r2, [r3, #0]
 800cca0:	e068      	b.n	800cd74 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	2b0f      	cmp	r3, #15
 800cca6:	d139      	bne.n	800cd1c <dir_find+0x128>
				if (dp->lfn) {
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d05f      	beq.n	800cd74 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ccb4:	7dbb      	ldrb	r3, [r7, #22]
 800ccb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d012      	beq.n	800cce4 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	7b5b      	ldrb	r3, [r3, #13]
 800ccc2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ccc4:	7dbb      	ldrb	r3, [r7, #22]
 800ccc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccca:	75bb      	strb	r3, [r7, #22]
 800cccc:	7dbb      	ldrb	r3, [r7, #22]
 800ccce:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd6:	3306      	adds	r3, #6
 800ccd8:	881a      	ldrh	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cce0:	3304      	adds	r3, #4
 800cce2:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800cce4:	7dba      	ldrb	r2, [r7, #22]
 800cce6:	7d7b      	ldrb	r3, [r7, #21]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d114      	bne.n	800cd16 <dir_find+0x122>
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	330d      	adds	r3, #13
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	7d3a      	ldrb	r2, [r7, #20]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d10e      	bne.n	800cd16 <dir_find+0x122>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6939      	ldr	r1, [r7, #16]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fde4 	bl	800c8d0 <cmp_lfn>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <dir_find+0x122>
 800cd0e:	7d7b      	ldrb	r3, [r7, #21]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	e000      	b.n	800cd18 <dir_find+0x124>
 800cd16:	23ff      	movs	r3, #255	; 0xff
 800cd18:	757b      	strb	r3, [r7, #21]
 800cd1a:	e02b      	b.n	800cd74 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800cd1c:	7d7b      	ldrb	r3, [r7, #21]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d107      	bne.n	800cd32 <dir_find+0x13e>
 800cd22:	6938      	ldr	r0, [r7, #16]
 800cd24:	f7ff ff46 	bl	800cbb4 <sum_sfn>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	7d3b      	ldrb	r3, [r7, #20]
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d02d      	beq.n	800cd8e <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd38:	3318      	adds	r3, #24
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	330b      	adds	r3, #11
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10c      	bne.n	800cd62 <dir_find+0x16e>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4e:	3318      	adds	r3, #24
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	220b      	movs	r2, #11
 800cd54:	4619      	mov	r1, r3
 800cd56:	6938      	ldr	r0, [r7, #16]
 800cd58:	f7fe fb8e 	bl	800b478 <mem_cmp>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d017      	beq.n	800cd92 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800cd62:	23ff      	movs	r3, #255	; 0xff
 800cd64:	757b      	strb	r3, [r7, #21]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd72:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800cd74:	2100      	movs	r1, #0
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff fba2 	bl	800c4c0 <dir_next>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f43f af50 	beq.w	800cc28 <dir_find+0x34>
 800cd88:	e004      	b.n	800cd94 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800cd8a:	bf00      	nop
 800cd8c:	e002      	b.n	800cd94 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800cd8e:	bf00      	nop
 800cd90:	e000      	b.n	800cd94 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd92:	bf00      	nop

	return res;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08c      	sub	sp, #48	; 0x30
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdae:	3318      	adds	r3, #24
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	623b      	str	r3, [r7, #32]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	220c      	movs	r2, #12
 800cdc4:	6a39      	ldr	r1, [r7, #32]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe fb1e 	bl	800b408 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d039      	beq.n	800ce4a <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	330b      	adds	r3, #11
 800cdda:	2200      	movs	r2, #0
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800cde8:	2301      	movs	r3, #1
 800cdea:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdec:	e013      	b.n	800ce16 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800cdee:	f107 010c 	add.w	r1, r7, #12
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	69fa      	ldr	r2, [r7, #28]
 800cdf6:	6a38      	ldr	r0, [r7, #32]
 800cdf8:	f7ff fe4c 	bl	800ca94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff fef9 	bl	800cbf4 <dir_find>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ce08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	3301      	adds	r3, #1
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	2b63      	cmp	r3, #99	; 0x63
 800ce1a:	d9e8      	bls.n	800cdee <dir_register+0x4e>
 800ce1c:	e000      	b.n	800ce20 <dir_register+0x80>
			if (res != FR_OK) break;
 800ce1e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	2b64      	cmp	r3, #100	; 0x64
 800ce24:	d101      	bne.n	800ce2a <dir_register+0x8a>
 800ce26:	2307      	movs	r3, #7
 800ce28:	e0e3      	b.n	800cff2 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ce2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d002      	beq.n	800ce38 <dir_register+0x98>
 800ce32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce36:	e0dc      	b.n	800cff2 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	330b      	adds	r3, #11
 800ce3c:	7dfa      	ldrb	r2, [r7, #23]
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce46:	69fa      	ldr	r2, [r7, #28]
 800ce48:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d014      	beq.n	800ce7e <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800ce54:	2300      	movs	r3, #0
 800ce56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce58:	e002      	b.n	800ce60 <dir_register+0xc0>
 800ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	69fa      	ldr	r2, [r7, #28]
 800ce66:	4413      	add	r3, r2
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1f5      	bne.n	800ce5a <dir_register+0xba>
		nent = (n + 25) / 13;
 800ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce70:	3319      	adds	r3, #25
 800ce72:	4a62      	ldr	r2, [pc, #392]	; (800cffc <dir_register+0x25c>)
 800ce74:	fba2 2303 	umull	r2, r3, r2, r3
 800ce78:	089b      	lsrs	r3, r3, #2
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ce7c:	e001      	b.n	800ce82 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ce82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff fc7d 	bl	800c784 <dir_alloc>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ce90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d160      	bne.n	800cf5a <dir_register+0x1ba>
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d05a      	beq.n	800cf5a <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceaa:	3306      	adds	r3, #6
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff fa27 	bl	800c30a <dir_sdi>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d147      	bne.n	800cf5a <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced0:	3318      	adds	r3, #24
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7ff fe6d 	bl	800cbb4 <sum_sfn>
 800ceda:	4603      	mov	r3, r0
 800cedc:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceec:	3310      	adds	r3, #16
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f7fe fd1e 	bl	800b934 <move_window>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cefe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d128      	bne.n	800cf58 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cf0c:	6818      	ldr	r0, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf14:	3314      	adds	r3, #20
 800cf16:	6819      	ldr	r1, [r3, #0]
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	7efb      	ldrb	r3, [r7, #27]
 800cf1e:	f7ff fd45 	bl	800c9ac <fit_lfn>
				dp->fs->wflag = 1;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf2e:	3304      	adds	r3, #4
 800cf30:	2201      	movs	r2, #1
 800cf32:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800cf34:	2100      	movs	r1, #0
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff fac2 	bl	800c4c0 <dir_next>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cf42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d107      	bne.n	800cf5a <dir_register+0x1ba>
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1c3      	bne.n	800cede <dir_register+0x13e>
 800cf56:	e000      	b.n	800cf5a <dir_register+0x1ba>
				if (res != FR_OK) break;
 800cf58:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800cf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d145      	bne.n	800cfee <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf70:	3310      	adds	r3, #16
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4619      	mov	r1, r3
 800cf76:	4610      	mov	r0, r2
 800cf78:	f7fe fcdc 	bl	800b934 <move_window>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cf82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d131      	bne.n	800cfee <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf90:	3314      	adds	r3, #20
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2220      	movs	r2, #32
 800cf96:	2100      	movs	r1, #0
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fa53 	bl	800b444 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa4:	3314      	adds	r3, #20
 800cfa6:	6818      	ldr	r0, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfae:	3318      	adds	r3, #24
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	220b      	movs	r2, #11
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7fe fa27 	bl	800b408 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc0:	3318      	adds	r3, #24
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	330b      	adds	r3, #11
 800cfc6:	781a      	ldrb	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfce:	3314      	adds	r3, #20
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	330c      	adds	r3, #12
 800cfd4:	f002 0218 	and.w	r2, r2, #24
 800cfd8:	b2d2      	uxtb	r2, r2
 800cfda:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe8:	3304      	adds	r3, #4
 800cfea:	2201      	movs	r2, #1
 800cfec:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800cfee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3730      	adds	r7, #48	; 0x30
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	4ec4ec4f 	.word	0x4ec4ec4f

0800d000 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08a      	sub	sp, #40	; 0x28
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	613b      	str	r3, [r7, #16]
 800d010:	e002      	b.n	800d018 <create_name+0x18>
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	3301      	adds	r3, #1
 800d016:	613b      	str	r3, [r7, #16]
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b2f      	cmp	r3, #47	; 0x2f
 800d01e:	d0f8      	beq.n	800d012 <create_name+0x12>
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b5c      	cmp	r3, #92	; 0x5c
 800d026:	d0f4      	beq.n	800d012 <create_name+0x12>
	lfn = dp->lfn;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	61ba      	str	r2, [r7, #24]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4413      	add	r3, r2
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800d048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d04a:	2b1f      	cmp	r3, #31
 800d04c:	d92f      	bls.n	800d0ae <create_name+0xae>
 800d04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d050:	2b2f      	cmp	r3, #47	; 0x2f
 800d052:	d02c      	beq.n	800d0ae <create_name+0xae>
 800d054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d056:	2b5c      	cmp	r3, #92	; 0x5c
 800d058:	d029      	beq.n	800d0ae <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2bfe      	cmp	r3, #254	; 0xfe
 800d05e:	d901      	bls.n	800d064 <create_name+0x64>
			return FR_INVALID_NAME;
 800d060:	2306      	movs	r3, #6
 800d062:	e18b      	b.n	800d37c <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d066:	b2db      	uxtb	r3, r3
 800d068:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 fd4a 	bl	800eb08 <ff_convert>
 800d074:	4603      	mov	r3, r0
 800d076:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <create_name+0x82>
 800d07e:	2306      	movs	r3, #6
 800d080:	e17c      	b.n	800d37c <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800d082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d084:	2b7f      	cmp	r3, #127	; 0x7f
 800d086:	d809      	bhi.n	800d09c <create_name+0x9c>
 800d088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d08a:	4619      	mov	r1, r3
 800d08c:	488f      	ldr	r0, [pc, #572]	; (800d2cc <create_name+0x2cc>)
 800d08e:	f7fe fa19 	bl	800b4c4 <chk_chr>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <create_name+0x9c>
			return FR_INVALID_NAME;
 800d098:	2306      	movs	r3, #6
 800d09a:	e16f      	b.n	800d37c <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	617a      	str	r2, [r7, #20]
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d0aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d0ac:	e7c5      	b.n	800d03a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	441a      	add	r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800d0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ba:	2b1f      	cmp	r3, #31
 800d0bc:	d801      	bhi.n	800d0c2 <create_name+0xc2>
 800d0be:	2304      	movs	r3, #4
 800d0c0:	e000      	b.n	800d0c4 <create_name+0xc4>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800d0c8:	e011      	b.n	800d0ee <create_name+0xee>
		w = lfn[di - 1];
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	d002      	beq.n	800d0e8 <create_name+0xe8>
 800d0e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0e6:	d106      	bne.n	800d0f6 <create_name+0xf6>
		di--;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1ea      	bne.n	800d0ca <create_name+0xca>
 800d0f4:	e000      	b.n	800d0f8 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800d0f6:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <create_name+0x102>
 800d0fe:	2306      	movs	r3, #6
 800d100:	e13c      	b.n	800d37c <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d114:	3318      	adds	r3, #24
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	220b      	movs	r2, #11
 800d11a:	2120      	movs	r1, #32
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe f991 	bl	800b444 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d122:	2300      	movs	r3, #0
 800d124:	61bb      	str	r3, [r7, #24]
 800d126:	e002      	b.n	800d12e <create_name+0x12e>
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	3301      	adds	r3, #1
 800d12c:	61bb      	str	r3, [r7, #24]
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	2b20      	cmp	r3, #32
 800d13a:	d0f5      	beq.n	800d128 <create_name+0x128>
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	005b      	lsls	r3, r3, #1
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	4413      	add	r3, r2
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	2b2e      	cmp	r3, #46	; 0x2e
 800d148:	d0ee      	beq.n	800d128 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d009      	beq.n	800d164 <create_name+0x164>
 800d150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d154:	f043 0303 	orr.w	r3, r3, #3
 800d158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d15c:	e002      	b.n	800d164 <create_name+0x164>
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	3b01      	subs	r3, #1
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d009      	beq.n	800d17e <create_name+0x17e>
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d170:	3b01      	subs	r3, #1
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4413      	add	r3, r2
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	2b2e      	cmp	r3, #46	; 0x2e
 800d17c:	d1ef      	bne.n	800d15e <create_name+0x15e>

	b = i = 0; ni = 8;
 800d17e:	2300      	movs	r3, #0
 800d180:	623b      	str	r3, [r7, #32]
 800d182:	2300      	movs	r3, #0
 800d184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d188:	2308      	movs	r3, #8
 800d18a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	61ba      	str	r2, [r7, #24]
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4413      	add	r3, r2
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d19c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 8092 	beq.w	800d2c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d1a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1a6:	2b20      	cmp	r3, #32
 800d1a8:	d006      	beq.n	800d1b8 <create_name+0x1b8>
 800d1aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ae:	d10a      	bne.n	800d1c6 <create_name+0x1c6>
 800d1b0:	69ba      	ldr	r2, [r7, #24]
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d006      	beq.n	800d1c6 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1bc:	f043 0303 	orr.w	r3, r3, #3
 800d1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1c4:	e07f      	b.n	800d2c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d1c6:	6a3a      	ldr	r2, [r7, #32]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d203      	bcs.n	800d1d6 <create_name+0x1d6>
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d123      	bne.n	800d21e <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	2b0b      	cmp	r3, #11
 800d1da:	d106      	bne.n	800d1ea <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800d1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e0:	f043 0303 	orr.w	r3, r3, #3
 800d1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1e8:	e077      	b.n	800d2da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d1ea:	69ba      	ldr	r2, [r7, #24]
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d005      	beq.n	800d1fe <create_name+0x1fe>
 800d1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f6:	f043 0303 	orr.w	r3, r3, #3
 800d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	429a      	cmp	r2, r3
 800d204:	d868      	bhi.n	800d2d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	61bb      	str	r3, [r7, #24]
 800d20a:	2308      	movs	r3, #8
 800d20c:	623b      	str	r3, [r7, #32]
 800d20e:	230b      	movs	r3, #11
 800d210:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d21c:	e053      	b.n	800d2c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d220:	2b7f      	cmp	r3, #127	; 0x7f
 800d222:	d914      	bls.n	800d24e <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d226:	2100      	movs	r1, #0
 800d228:	4618      	mov	r0, r3
 800d22a:	f001 fc6d 	bl	800eb08 <ff_convert>
 800d22e:	4603      	mov	r3, r0
 800d230:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <create_name+0x242>
 800d238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d23a:	3b80      	subs	r3, #128	; 0x80
 800d23c:	4a24      	ldr	r2, [pc, #144]	; (800d2d0 <create_name+0x2d0>)
 800d23e:	5cd3      	ldrb	r3, [r2, r3]
 800d240:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d246:	f043 0302 	orr.w	r3, r3, #2
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d24e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	d007      	beq.n	800d264 <create_name+0x264>
 800d254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d256:	4619      	mov	r1, r3
 800d258:	481e      	ldr	r0, [pc, #120]	; (800d2d4 <create_name+0x2d4>)
 800d25a:	f7fe f933 	bl	800b4c4 <chk_chr>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d008      	beq.n	800d276 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d264:	235f      	movs	r3, #95	; 0x5f
 800d266:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d26c:	f043 0303 	orr.w	r3, r3, #3
 800d270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d274:	e01b      	b.n	800d2ae <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d278:	2b40      	cmp	r3, #64	; 0x40
 800d27a:	d909      	bls.n	800d290 <create_name+0x290>
 800d27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d27e:	2b5a      	cmp	r3, #90	; 0x5a
 800d280:	d806      	bhi.n	800d290 <create_name+0x290>
					b |= 2;
 800d282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d286:	f043 0302 	orr.w	r3, r3, #2
 800d28a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d28e:	e00e      	b.n	800d2ae <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d292:	2b60      	cmp	r3, #96	; 0x60
 800d294:	d90b      	bls.n	800d2ae <create_name+0x2ae>
 800d296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d298:	2b7a      	cmp	r3, #122	; 0x7a
 800d29a:	d808      	bhi.n	800d2ae <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800d29c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2a0:	f043 0301 	orr.w	r3, r3, #1
 800d2a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2aa:	3b20      	subs	r3, #32
 800d2ac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b4:	3318      	adds	r3, #24
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	1c59      	adds	r1, r3, #1
 800d2bc:	6239      	str	r1, [r7, #32]
 800d2be:	4413      	add	r3, r2
 800d2c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800d2c6:	e761      	b.n	800d18c <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800d2c8:	bf00      	nop
 800d2ca:	e006      	b.n	800d2da <create_name+0x2da>
 800d2cc:	08010e6c 	.word	0x08010e6c
 800d2d0:	08025644 	.word	0x08025644
 800d2d4:	08010e78 	.word	0x08010e78
			if (si > di) break;			/* No extension */
 800d2d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e0:	3318      	adds	r3, #24
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2be5      	cmp	r3, #229	; 0xe5
 800d2e8:	d106      	bne.n	800d2f8 <create_name+0x2f8>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2f0:	3318      	adds	r3, #24
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2205      	movs	r2, #5
 800d2f6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	2b08      	cmp	r3, #8
 800d2fc:	d104      	bne.n	800d308 <create_name+0x308>
 800d2fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800d308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d30c:	f003 030c 	and.w	r3, r3, #12
 800d310:	2b0c      	cmp	r3, #12
 800d312:	d005      	beq.n	800d320 <create_name+0x320>
 800d314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d318:	f003 0303 	and.w	r3, r3, #3
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d105      	bne.n	800d32c <create_name+0x32c>
		cf |= NS_LFN;
 800d320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d324:	f043 0302 	orr.w	r3, r3, #2
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d117      	bne.n	800d368 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	2b01      	cmp	r3, #1
 800d342:	d105      	bne.n	800d350 <create_name+0x350>
 800d344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d348:	f043 0310 	orr.w	r3, r3, #16
 800d34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d354:	f003 030c 	and.w	r3, r3, #12
 800d358:	2b04      	cmp	r3, #4
 800d35a:	d105      	bne.n	800d368 <create_name+0x368>
 800d35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d360:	f043 0308 	orr.w	r3, r3, #8
 800d364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36e:	3318      	adds	r3, #24
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	330b      	adds	r3, #11
 800d374:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d378:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d37a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3728      	adds	r7, #40	; 0x28
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b2f      	cmp	r3, #47	; 0x2f
 800d394:	d003      	beq.n	800d39e <follow_path+0x1a>
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	2b5c      	cmp	r3, #92	; 0x5c
 800d39c:	d102      	bne.n	800d3a4 <follow_path+0x20>
		path++;
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3aa:	3308      	adds	r3, #8
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b1f      	cmp	r3, #31
 800d3b6:	d80c      	bhi.n	800d3d2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7fe ffa5 	bl	800c30a <dir_sdi>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ca:	3314      	adds	r3, #20
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	e04c      	b.n	800d46c <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3d2:	463b      	mov	r3, r7
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff fe12 	bl	800d000 <create_name>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d13d      	bne.n	800d462 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff fc04 	bl	800cbf4 <dir_find>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f6:	3318      	adds	r3, #24
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	7adb      	ldrb	r3, [r3, #11]
 800d3fc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00a      	beq.n	800d41a <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d404:	7bfb      	ldrb	r3, [r7, #15]
 800d406:	2b04      	cmp	r3, #4
 800d408:	d12d      	bne.n	800d466 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d40a:	7bbb      	ldrb	r3, [r7, #14]
 800d40c:	f003 0304 	and.w	r3, r3, #4
 800d410:	2b00      	cmp	r3, #0
 800d412:	d128      	bne.n	800d466 <follow_path+0xe2>
 800d414:	2305      	movs	r3, #5
 800d416:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800d418:	e025      	b.n	800d466 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d122      	bne.n	800d46a <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d42a:	3314      	adds	r3, #20
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	330b      	adds	r3, #11
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	f003 0310 	and.w	r3, r3, #16
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d102      	bne.n	800d444 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800d43e:	2305      	movs	r3, #5
 800d440:	73fb      	strb	r3, [r7, #15]
 800d442:	e013      	b.n	800d46c <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff f9e9 	bl	800c826 <ld_clust>
 800d454:	4602      	mov	r2, r0
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45c:	3308      	adds	r3, #8
 800d45e:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d460:	e7b7      	b.n	800d3d2 <follow_path+0x4e>
			if (res != FR_OK) break;
 800d462:	bf00      	nop
 800d464:	e002      	b.n	800d46c <follow_path+0xe8>
				break;
 800d466:	bf00      	nop
 800d468:	e000      	b.n	800d46c <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d46a:	bf00      	nop
		}
	}

	return res;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d476:	b480      	push	{r7}
 800d478:	b087      	sub	sp, #28
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d47e:	f04f 33ff 	mov.w	r3, #4294967295
 800d482:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d031      	beq.n	800d4f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	e002      	b.n	800d49a <get_ldnumber+0x24>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	3301      	adds	r3, #1
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b1f      	cmp	r3, #31
 800d4a0:	d903      	bls.n	800d4aa <get_ldnumber+0x34>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b3a      	cmp	r3, #58	; 0x3a
 800d4a8:	d1f4      	bne.n	800d494 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b3a      	cmp	r3, #58	; 0x3a
 800d4b0:	d11c      	bne.n	800d4ec <get_ldnumber+0x76>
			tp = *path;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	60fa      	str	r2, [r7, #12]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	3b30      	subs	r3, #48	; 0x30
 800d4c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2b09      	cmp	r3, #9
 800d4c8:	d80e      	bhi.n	800d4e8 <get_ldnumber+0x72>
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d10a      	bne.n	800d4e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d107      	bne.n	800d4e8 <get_ldnumber+0x72>
					vol = (int)i;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	e002      	b.n	800d4f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4f0:	693b      	ldr	r3, [r7, #16]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bc80      	pop	{r7}
 800d4fa:	4770      	bx	lr

0800d4fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50c:	3304      	adds	r3, #4
 800d50e:	2200      	movs	r2, #0
 800d510:	701a      	strb	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d518:	330c      	adds	r3, #12
 800d51a:	f04f 32ff 	mov.w	r2, #4294967295
 800d51e:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7fe fa06 	bl	800b934 <move_window>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <check_fs+0x36>
		return 3;
 800d52e:	2303      	movs	r3, #3
 800d530:	e04a      	b.n	800d5c8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d538:	3301      	adds	r3, #1
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	021b      	lsls	r3, r3, #8
 800d53e:	b21a      	sxth	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d546:	b21b      	sxth	r3, r3
 800d548:	4313      	orrs	r3, r2
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	4a20      	ldr	r2, [pc, #128]	; (800d5d0 <check_fs+0xd4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d001      	beq.n	800d556 <check_fs+0x5a>
		return 2;
 800d552:	2302      	movs	r3, #2
 800d554:	e038      	b.n	800d5c8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3336      	adds	r3, #54	; 0x36
 800d55a:	3303      	adds	r3, #3
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	061a      	lsls	r2, r3, #24
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3336      	adds	r3, #54	; 0x36
 800d564:	3302      	adds	r3, #2
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	041b      	lsls	r3, r3, #16
 800d56a:	4313      	orrs	r3, r2
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	3236      	adds	r2, #54	; 0x36
 800d570:	3201      	adds	r2, #1
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	0212      	lsls	r2, r2, #8
 800d576:	4313      	orrs	r3, r2
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800d57e:	4313      	orrs	r3, r2
 800d580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d584:	4a13      	ldr	r2, [pc, #76]	; (800d5d4 <check_fs+0xd8>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d101      	bne.n	800d58e <check_fs+0x92>
		return 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	e01c      	b.n	800d5c8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3352      	adds	r3, #82	; 0x52
 800d592:	3303      	adds	r3, #3
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	061a      	lsls	r2, r3, #24
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3352      	adds	r3, #82	; 0x52
 800d59c:	3302      	adds	r3, #2
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	041b      	lsls	r3, r3, #16
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	3252      	adds	r2, #82	; 0x52
 800d5a8:	3201      	adds	r2, #1
 800d5aa:	7812      	ldrb	r2, [r2, #0]
 800d5ac:	0212      	lsls	r2, r2, #8
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d5bc:	4a05      	ldr	r2, [pc, #20]	; (800d5d4 <check_fs+0xd8>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d101      	bne.n	800d5c6 <check_fs+0xca>
		return 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e000      	b.n	800d5c8 <check_fs+0xcc>

	return 1;
 800d5c6:	2301      	movs	r3, #1
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	ffffaa55 	.word	0xffffaa55
 800d5d4:	00544146 	.word	0x00544146

0800d5d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b096      	sub	sp, #88	; 0x58
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d5ec:	68b8      	ldr	r0, [r7, #8]
 800d5ee:	f7ff ff42 	bl	800d476 <get_ldnumber>
 800d5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	da01      	bge.n	800d5fe <find_volume+0x26>
 800d5fa:	230b      	movs	r3, #11
 800d5fc:	e33c      	b.n	800dc78 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5fe:	4ab3      	ldr	r2, [pc, #716]	; (800d8cc <find_volume+0x2f4>)
 800d600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d606:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <find_volume+0x3a>
 800d60e:	230c      	movs	r3, #12
 800d610:	e332      	b.n	800dc78 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d616:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01d      	beq.n	800d660 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d62a:	3301      	adds	r3, #1
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd fe4c 	bl	800b2cc <disk_status>
 800d634:	4603      	mov	r3, r0
 800d636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d63a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10c      	bne.n	800d660 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800d646:	79fb      	ldrb	r3, [r7, #7]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d007      	beq.n	800d65c <find_volume+0x84>
 800d64c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d658:	230a      	movs	r3, #10
 800d65a:	e30d      	b.n	800dc78 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800d65c:	2300      	movs	r3, #0
 800d65e:	e30b      	b.n	800dc78 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d666:	2200      	movs	r2, #0
 800d668:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d674:	3301      	adds	r3, #1
 800d676:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67e:	3301      	adds	r3, #1
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f7fd fe3c 	bl	800b300 <disk_initialize>
 800d688:	4603      	mov	r3, r0
 800d68a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800d68e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d69a:	2303      	movs	r3, #3
 800d69c:	e2ec      	b.n	800dc78 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d007      	beq.n	800d6b4 <find_volume+0xdc>
 800d6a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800d6b0:	230a      	movs	r3, #10
 800d6b2:	e2e1      	b.n	800dc78 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	7818      	ldrb	r0, [r3, #0]
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c4:	330a      	adds	r3, #10
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	2102      	movs	r1, #2
 800d6ca:	f7fd fe7f 	bl	800b3cc <disk_ioctl>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10f      	bne.n	800d6f4 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6da:	330a      	adds	r3, #10
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6e2:	d307      	bcc.n	800d6f4 <find_volume+0x11c>
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ea:	330a      	adds	r3, #10
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6f2:	d901      	bls.n	800d6f8 <find_volume+0x120>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e2bf      	b.n	800dc78 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d6fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d700:	f7ff fefc 	bl	800d4fc <check_fs>
 800d704:	4603      	mov	r3, r0
 800d706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d70a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d155      	bne.n	800d7be <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d712:	2300      	movs	r3, #0
 800d714:	643b      	str	r3, [r7, #64]	; 0x40
 800d716:	e029      	b.n	800d76c <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d722:	4413      	add	r3, r2
 800d724:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	3304      	adds	r3, #4
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d012      	beq.n	800d756 <find_volume+0x17e>
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	330b      	adds	r3, #11
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	061a      	lsls	r2, r3, #24
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	330a      	adds	r3, #10
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	041b      	lsls	r3, r3, #16
 800d740:	4313      	orrs	r3, r2
 800d742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d744:	3209      	adds	r2, #9
 800d746:	7812      	ldrb	r2, [r2, #0]
 800d748:	0212      	lsls	r2, r2, #8
 800d74a:	4313      	orrs	r3, r2
 800d74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d74e:	3208      	adds	r2, #8
 800d750:	7812      	ldrb	r2, [r2, #0]
 800d752:	431a      	orrs	r2, r3
 800d754:	e000      	b.n	800d758 <find_volume+0x180>
 800d756:	2200      	movs	r2, #0
 800d758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d760:	440b      	add	r3, r1
 800d762:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d768:	3301      	adds	r3, #1
 800d76a:	643b      	str	r3, [r7, #64]	; 0x40
 800d76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d9d2      	bls.n	800d718 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d772:	2300      	movs	r3, #0
 800d774:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <find_volume+0x1aa>
 800d77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d77e:	3b01      	subs	r3, #1
 800d780:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d78a:	4413      	add	r3, r2
 800d78c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d790:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d794:	2b00      	cmp	r3, #0
 800d796:	d005      	beq.n	800d7a4 <find_volume+0x1cc>
 800d798:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d79a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d79c:	f7ff feae 	bl	800d4fc <check_fs>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	e000      	b.n	800d7a6 <find_volume+0x1ce>
 800d7a4:	2302      	movs	r3, #2
 800d7a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d7aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d005      	beq.n	800d7be <find_volume+0x1e6>
 800d7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	643b      	str	r3, [r7, #64]	; 0x40
 800d7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ba:	2b03      	cmp	r3, #3
 800d7bc:	d9e1      	bls.n	800d782 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d7be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d101      	bne.n	800d7ca <find_volume+0x1f2>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e256      	b.n	800dc78 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <find_volume+0x1fe>
 800d7d2:	230d      	movs	r3, #13
 800d7d4:	e250      	b.n	800dc78 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	7b1b      	ldrb	r3, [r3, #12]
 800d7da:	021b      	lsls	r3, r3, #8
 800d7dc:	b21a      	sxth	r2, r3
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	7adb      	ldrb	r3, [r3, #11]
 800d7e2:	b21b      	sxth	r3, r3
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	b21a      	sxth	r2, r3
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ee:	330a      	adds	r3, #10
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	b21b      	sxth	r3, r3
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d001      	beq.n	800d7fc <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800d7f8:	230d      	movs	r3, #13
 800d7fa:	e23d      	b.n	800dc78 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fe:	7ddb      	ldrb	r3, [r3, #23]
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	b21a      	sxth	r2, r3
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	7d9b      	ldrb	r3, [r3, #22]
 800d808:	b21b      	sxth	r3, r3
 800d80a:	4313      	orrs	r3, r2
 800d80c:	b21b      	sxth	r3, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d112      	bne.n	800d83e <find_volume+0x266>
 800d818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d81e:	061a      	lsls	r2, r3, #24
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d826:	041b      	lsls	r3, r3, #16
 800d828:	4313      	orrs	r3, r2
 800d82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d82c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d830:	0212      	lsls	r2, r2, #8
 800d832:	4313      	orrs	r3, r2
 800d834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d836:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d83a:	4313      	orrs	r3, r2
 800d83c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d844:	3318      	adds	r3, #24
 800d846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d848:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	7c1a      	ldrb	r2, [r3, #16]
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d854:	3303      	adds	r3, #3
 800d856:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d85e:	3303      	adds	r3, #3
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d008      	beq.n	800d878 <find_volume+0x2a0>
 800d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d86c:	3303      	adds	r3, #3
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d001      	beq.n	800d878 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800d874:	230d      	movs	r3, #13
 800d876:	e1ff      	b.n	800dc78 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d87e:	3303      	adds	r3, #3
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d886:	fb02 f303 	mul.w	r3, r2, r3
 800d88a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88e:	7b5a      	ldrb	r2, [r3, #13]
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d896:	3302      	adds	r3, #2
 800d898:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a0:	3302      	adds	r3, #2
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00e      	beq.n	800d8c6 <find_volume+0x2ee>
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ae:	3302      	adds	r3, #2
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800d8c6:	230d      	movs	r3, #13
 800d8c8:	e1d6      	b.n	800dc78 <find_volume+0x6a0>
 800d8ca:	bf00      	nop
 800d8cc:	2000a2a4 	.word	0x2000a2a4

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	7c9b      	ldrb	r3, [r3, #18]
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	b21a      	sxth	r2, r3
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	7c5b      	ldrb	r3, [r3, #17]
 800d8dc:	b21b      	sxth	r3, r3
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	881a      	ldrh	r2, [r3, #0]
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8fe:	330a      	adds	r3, #10
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	095b      	lsrs	r3, r3, #5
 800d904:	b29b      	uxth	r3, r3
 800d906:	fbb2 f1f3 	udiv	r1, r2, r3
 800d90a:	fb03 f301 	mul.w	r3, r3, r1
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	b29b      	uxth	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800d916:	230d      	movs	r3, #13
 800d918:	e1ae      	b.n	800dc78 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91c:	7d1b      	ldrb	r3, [r3, #20]
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	b21a      	sxth	r2, r3
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	7cdb      	ldrb	r3, [r3, #19]
 800d926:	b21b      	sxth	r3, r3
 800d928:	4313      	orrs	r3, r2
 800d92a:	b21b      	sxth	r3, r3
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d932:	2b00      	cmp	r3, #0
 800d934:	d112      	bne.n	800d95c <find_volume+0x384>
 800d936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d938:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d93c:	061a      	lsls	r2, r3, #24
 800d93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d940:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d944:	041b      	lsls	r3, r3, #16
 800d946:	4313      	orrs	r3, r2
 800d948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d94a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d94e:	0212      	lsls	r2, r2, #8
 800d950:	4313      	orrs	r3, r2
 800d952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d954:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d958:	4313      	orrs	r3, r2
 800d95a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	7bdb      	ldrb	r3, [r3, #15]
 800d960:	021b      	lsls	r3, r3, #8
 800d962:	b21a      	sxth	r2, r3
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	7b9b      	ldrb	r3, [r3, #14]
 800d968:	b21b      	sxth	r3, r3
 800d96a:	4313      	orrs	r3, r2
 800d96c:	b21b      	sxth	r3, r3
 800d96e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <find_volume+0x3a2>
 800d976:	230d      	movs	r3, #13
 800d978:	e17e      	b.n	800dc78 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d97a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97e:	441a      	add	r2, r3
 800d980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d986:	3308      	adds	r3, #8
 800d988:	8819      	ldrh	r1, [r3, #0]
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d990:	330a      	adds	r3, #10
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	095b      	lsrs	r3, r3, #5
 800d996:	b29b      	uxth	r3, r3
 800d998:	fbb1 f3f3 	udiv	r3, r1, r3
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	4413      	add	r3, r2
 800d9a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d201      	bcs.n	800d9ae <find_volume+0x3d6>
 800d9aa:	230d      	movs	r3, #13
 800d9ac:	e164      	b.n	800dc78 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	1ad2      	subs	r2, r2, r3
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ba:	3302      	adds	r3, #2
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <find_volume+0x3f6>
 800d9ca:	230d      	movs	r3, #13
 800d9cc:	e154      	b.n	800dc78 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d902      	bls.n	800d9e4 <find_volume+0x40c>
 800d9de:	2302      	movs	r3, #2
 800d9e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d902      	bls.n	800d9f4 <find_volume+0x41c>
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	1c9a      	adds	r2, r3, #2
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9fe:	3314      	adds	r3, #20
 800da00:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da08:	331c      	adds	r3, #28
 800da0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da0c:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800da0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da12:	441a      	add	r2, r3
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da1a:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800da1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	441a      	add	r2, r3
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da28:	3308      	adds	r3, #8
 800da2a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800da2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da30:	2b03      	cmp	r3, #3
 800da32:	d127      	bne.n	800da84 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da3a:	3308      	adds	r3, #8
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d001      	beq.n	800da46 <find_volume+0x46e>
 800da42:	230d      	movs	r3, #13
 800da44:	e118      	b.n	800dc78 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da4c:	061a      	lsls	r2, r3, #24
 800da4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da54:	041b      	lsls	r3, r3, #16
 800da56:	4313      	orrs	r3, r2
 800da58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da5a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800da5e:	0212      	lsls	r2, r2, #8
 800da60:	4313      	orrs	r3, r2
 800da62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da64:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800da68:	431a      	orrs	r2, r3
 800da6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da70:	3304      	adds	r3, #4
 800da72:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7a:	3314      	adds	r3, #20
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	647b      	str	r3, [r7, #68]	; 0x44
 800da82:	e030      	b.n	800dae6 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da8a:	3308      	adds	r3, #8
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <find_volume+0x4be>
 800da92:	230d      	movs	r3, #13
 800da94:	e0f0      	b.n	800dc78 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daa0:	441a      	add	r2, r3
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800daa8:	3304      	adds	r3, #4
 800daaa:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800daac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d106      	bne.n	800dac2 <find_volume+0x4ea>
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daba:	3314      	adds	r3, #20
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	e010      	b.n	800dae4 <find_volume+0x50c>
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dac8:	3314      	adds	r3, #20
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	4613      	mov	r3, r2
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	4413      	add	r3, r2
 800dad2:	085a      	lsrs	r2, r3, #1
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dada:	3314      	adds	r3, #20
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800dae4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daec:	3318      	adds	r3, #24
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daf6:	330a      	adds	r3, #10
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	4619      	mov	r1, r3
 800dafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dafe:	440b      	add	r3, r1
 800db00:	1e59      	subs	r1, r3, #1
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db08:	330a      	adds	r3, #10
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800db10:	429a      	cmp	r2, r3
 800db12:	d201      	bcs.n	800db18 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800db14:	230d      	movs	r3, #13
 800db16:	e0af      	b.n	800dc78 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db1e:	3310      	adds	r3, #16
 800db20:	f04f 32ff 	mov.w	r2, #4294967295
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db2c:	3310      	adds	r3, #16
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db36:	330c      	adds	r3, #12
 800db38:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800db3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db40:	3305      	adds	r3, #5
 800db42:	2280      	movs	r2, #128	; 0x80
 800db44:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800db46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d17d      	bne.n	800dc4a <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800db4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db54:	021b      	lsls	r3, r3, #8
 800db56:	b21a      	sxth	r2, r3
 800db58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db5e:	b21b      	sxth	r3, r3
 800db60:	4313      	orrs	r3, r2
 800db62:	b21b      	sxth	r3, r3
 800db64:	2b01      	cmp	r3, #1
 800db66:	d170      	bne.n	800dc4a <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800db68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db6a:	3301      	adds	r3, #1
 800db6c:	4619      	mov	r1, r3
 800db6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db70:	f7fd fee0 	bl	800b934 <move_window>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d167      	bne.n	800dc4a <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db80:	3305      	adds	r3, #5
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db88:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	b21a      	sxth	r2, r3
 800db90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db92:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800db96:	b21b      	sxth	r3, r3
 800db98:	4313      	orrs	r3, r2
 800db9a:	b21b      	sxth	r3, r3
 800db9c:	4a38      	ldr	r2, [pc, #224]	; (800dc80 <find_volume+0x6a8>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d153      	bne.n	800dc4a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	78db      	ldrb	r3, [r3, #3]
 800dba6:	061a      	lsls	r2, r3, #24
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	789b      	ldrb	r3, [r3, #2]
 800dbac:	041b      	lsls	r3, r3, #16
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb2:	7852      	ldrb	r2, [r2, #1]
 800dbb4:	0212      	lsls	r2, r2, #8
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbba:	7812      	ldrb	r2, [r2, #0]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	4a31      	ldr	r2, [pc, #196]	; (800dc84 <find_volume+0x6ac>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d142      	bne.n	800dc4a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800dbca:	061a      	lsls	r2, r3, #24
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800dbd2:	041b      	lsls	r3, r3, #16
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd8:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800dbdc:	0212      	lsls	r2, r2, #8
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbe2:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	4a27      	ldr	r2, [pc, #156]	; (800dc88 <find_volume+0x6b0>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d12d      	bne.n	800dc4a <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf0:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800dbf4:	061a      	lsls	r2, r3, #24
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf8:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800dbfc:	041b      	lsls	r3, r3, #16
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc02:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800dc06:	0212      	lsls	r2, r2, #8
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc0c:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800dc10:	431a      	orrs	r2, r3
 800dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc18:	3310      	adds	r3, #16
 800dc1a:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800dc22:	061a      	lsls	r2, r3, #24
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc30:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800dc34:	0212      	lsls	r2, r2, #8
 800dc36:	4313      	orrs	r3, r2
 800dc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc3a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc46:	330c      	adds	r3, #12
 800dc48:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dc54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800dc56:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <find_volume+0x6b4>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	; (800dc8c <find_volume+0x6b4>)
 800dc60:	801a      	strh	r2, [r3, #0]
 800dc62:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <find_volume+0x6b4>)
 800dc64:	881a      	ldrh	r2, [r3, #0]
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc6c:	3306      	adds	r3, #6
 800dc6e:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800dc70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc72:	f7fd fddb 	bl	800b82c <clear_lock>
#endif

	return FR_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3758      	adds	r7, #88	; 0x58
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	ffffaa55 	.word	0xffffaa55
 800dc84:	41615252 	.word	0x41615252
 800dc88:	61417272 	.word	0x61417272
 800dc8c:	2000a2a8 	.word	0x2000a2a8

0800dc90 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d02d      	beq.n	800dcfe <validate+0x6e>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d027      	beq.n	800dcfe <validate+0x6e>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d01e      	beq.n	800dcfe <validate+0x6e>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dccc:	3306      	adds	r3, #6
 800dcce:	881a      	ldrh	r2, [r3, #0]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd6:	3304      	adds	r3, #4
 800dcd8:	881b      	ldrh	r3, [r3, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d10f      	bne.n	800dcfe <validate+0x6e>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcea:	3301      	adds	r3, #1
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fd faec 	bl	800b2cc <disk_status>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <validate+0x72>
		return FR_INVALID_OBJECT;
 800dcfe:	2309      	movs	r3, #9
 800dd00:	e000      	b.n	800dd04 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800dd1e:	f107 0310 	add.w	r3, r7, #16
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff fba7 	bl	800d476 <get_ldnumber>
 800dd28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	da01      	bge.n	800dd34 <f_mount+0x28>
 800dd30:	230b      	movs	r3, #11
 800dd32:	e02f      	b.n	800dd94 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dd34:	4a19      	ldr	r2, [pc, #100]	; (800dd9c <f_mount+0x90>)
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d007      	beq.n	800dd54 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800dd44:	69b8      	ldr	r0, [r7, #24]
 800dd46:	f7fd fd71 	bl	800b82c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd50:	2200      	movs	r2, #0
 800dd52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d004      	beq.n	800dd64 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd60:	2200      	movs	r2, #0
 800dd62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	490d      	ldr	r1, [pc, #52]	; (800dd9c <f_mount+0x90>)
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <f_mount+0x6e>
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d001      	beq.n	800dd7e <f_mount+0x72>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e00a      	b.n	800dd94 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800dd7e:	f107 0108 	add.w	r1, r7, #8
 800dd82:	f107 030c 	add.w	r3, r7, #12
 800dd86:	2200      	movs	r2, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fc25 	bl	800d5d8 <find_volume>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3720      	adds	r7, #32
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	2000a2a4 	.word	0x2000a2a4

0800dda0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	f107 0318 	add.w	r3, r7, #24
 800ddae:	3b0c      	subs	r3, #12
 800ddb0:	6018      	str	r0, [r3, #0]
 800ddb2:	f107 0318 	add.w	r3, r7, #24
 800ddb6:	3b10      	subs	r3, #16
 800ddb8:	6019      	str	r1, [r3, #0]
 800ddba:	f107 0318 	add.w	r3, r7, #24
 800ddbe:	3b11      	subs	r3, #17
 800ddc0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ddc2:	f107 0318 	add.w	r3, r7, #24
 800ddc6:	3b0c      	subs	r3, #12
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d101      	bne.n	800ddd2 <f_open+0x32>
 800ddce:	2309      	movs	r3, #9
 800ddd0:	e319      	b.n	800e406 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800ddd2:	f107 0318 	add.w	r3, r7, #24
 800ddd6:	3b0c      	subs	r3, #12
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800dde2:	f107 0318 	add.w	r3, r7, #24
 800dde6:	3b11      	subs	r3, #17
 800dde8:	f107 0218 	add.w	r2, r7, #24
 800ddec:	3a11      	subs	r2, #17
 800ddee:	7812      	ldrb	r2, [r2, #0]
 800ddf0:	f002 021f 	and.w	r2, r2, #31
 800ddf4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ddf6:	f107 0318 	add.w	r3, r7, #24
 800ddfa:	3b11      	subs	r3, #17
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	f023 0301 	bic.w	r3, r3, #1
 800de02:	b2da      	uxtb	r2, r3
 800de04:	f107 0118 	add.w	r1, r7, #24
 800de08:	3910      	subs	r1, #16
 800de0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de0e:	3b18      	subs	r3, #24
 800de10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de14:	4618      	mov	r0, r3
 800de16:	f7ff fbdf 	bl	800d5d8 <find_volume>
 800de1a:	4603      	mov	r3, r0
 800de1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800de20:	f102 0217 	add.w	r2, r2, #23
 800de24:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800de26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800de2a:	f103 0317 	add.w	r3, r3, #23
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	f040 82e3 	bne.w	800e3fc <f_open+0x65c>
		INIT_BUF(dj);
 800de36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de3a:	3b18      	subs	r3, #24
 800de3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de40:	3318      	adds	r3, #24
 800de42:	f107 0218 	add.w	r2, r7, #24
 800de46:	3a04      	subs	r2, #4
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de4e:	3b18      	subs	r3, #24
 800de50:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800de54:	4ad1      	ldr	r2, [pc, #836]	; (800e19c <f_open+0x3fc>)
 800de56:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de58:	f107 0318 	add.w	r3, r7, #24
 800de5c:	3b10      	subs	r3, #16
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de64:	3b18      	subs	r3, #24
 800de66:	4611      	mov	r1, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fa8b 	bl	800d384 <follow_path>
 800de6e:	4603      	mov	r3, r0
 800de70:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800de74:	f102 0217 	add.w	r2, r2, #23
 800de78:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800de7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de7e:	3b18      	subs	r3, #24
 800de80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de84:	3314      	adds	r3, #20
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800de8c:	f102 0210 	add.w	r2, r2, #16
 800de90:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800de96:	f103 0317 	add.w	r3, r3, #23
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d126      	bne.n	800deee <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800dea0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dea4:	f103 0310 	add.w	r3, r3, #16
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <f_open+0x11c>
				res = FR_INVALID_NAME;
 800deae:	2306      	movs	r3, #6
 800deb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800deb4:	f102 0217 	add.w	r2, r2, #23
 800deb8:	7013      	strb	r3, [r2, #0]
 800deba:	e018      	b.n	800deee <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800debc:	f107 0318 	add.w	r3, r7, #24
 800dec0:	3b11      	subs	r3, #17
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	f023 0301 	bic.w	r3, r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bf14      	ite	ne
 800decc:	2301      	movne	r3, #1
 800dece:	2300      	moveq	r3, #0
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	461a      	mov	r2, r3
 800ded4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ded8:	3b18      	subs	r3, #24
 800deda:	4611      	mov	r1, r2
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fd fb0b 	bl	800b4f8 <chk_lock>
 800dee2:	4603      	mov	r3, r0
 800dee4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dee8:	f102 0217 	add.w	r2, r2, #23
 800deec:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800deee:	f107 0318 	add.w	r3, r7, #24
 800def2:	3b11      	subs	r3, #17
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 031c 	and.w	r3, r3, #28
 800defa:	2b00      	cmp	r3, #0
 800defc:	f000 8150 	beq.w	800e1a0 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800df00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800df04:	f103 0317 	add.w	r3, r3, #23
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d030      	beq.n	800df70 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800df0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800df12:	f103 0317 	add.w	r3, r3, #23
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d112      	bne.n	800df42 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800df1c:	f7fd fb5e 	bl	800b5dc <enq_lock>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d007      	beq.n	800df36 <f_open+0x196>
 800df26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df2a:	3b18      	subs	r3, #24
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe ff37 	bl	800cda0 <dir_register>
 800df32:	4603      	mov	r3, r0
 800df34:	e000      	b.n	800df38 <f_open+0x198>
 800df36:	2312      	movs	r3, #18
 800df38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800df3c:	f102 0217 	add.w	r2, r2, #23
 800df40:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df42:	f107 0318 	add.w	r3, r7, #24
 800df46:	3b11      	subs	r3, #17
 800df48:	f107 0218 	add.w	r2, r7, #24
 800df4c:	3a11      	subs	r2, #17
 800df4e:	7812      	ldrb	r2, [r2, #0]
 800df50:	f042 0208 	orr.w	r2, r2, #8
 800df54:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800df56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df5a:	3b18      	subs	r3, #24
 800df5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df60:	3314      	adds	r3, #20
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800df68:	f102 0210 	add.w	r2, r2, #16
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	e01f      	b.n	800dfb0 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800df74:	f103 0310 	add.w	r3, r3, #16
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	330b      	adds	r3, #11
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	f003 0311 	and.w	r3, r3, #17
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <f_open+0x1f4>
					res = FR_DENIED;
 800df86:	2307      	movs	r3, #7
 800df88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800df8c:	f102 0217 	add.w	r2, r2, #23
 800df90:	7013      	strb	r3, [r2, #0]
 800df92:	e00d      	b.n	800dfb0 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800df94:	f107 0318 	add.w	r3, r7, #24
 800df98:	3b11      	subs	r3, #17
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d005      	beq.n	800dfb0 <f_open+0x210>
						res = FR_EXIST;
 800dfa4:	2308      	movs	r3, #8
 800dfa6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dfaa:	f102 0217 	add.w	r2, r2, #23
 800dfae:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dfb0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dfb4:	f103 0317 	add.w	r3, r3, #23
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f040 8122 	bne.w	800e204 <f_open+0x464>
 800dfc0:	f107 0318 	add.w	r3, r7, #24
 800dfc4:	3b11      	subs	r3, #17
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 0308 	and.w	r3, r3, #8
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 8119 	beq.w	800e204 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800dfd2:	f7fc f8d1 	bl	800a178 <get_fattime>
 800dfd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dfda:	f103 030c 	add.w	r3, r3, #12
 800dfde:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800dfe0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dfe4:	f103 0310 	add.w	r3, r3, #16
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	330e      	adds	r3, #14
 800dfec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800dff0:	f102 020c 	add.w	r2, r2, #12
 800dff4:	6812      	ldr	r2, [r2, #0]
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dffe:	f103 030c 	add.w	r3, r3, #12
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b29a      	uxth	r2, r3
 800e00a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e00e:	f103 0310 	add.w	r3, r3, #16
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	330f      	adds	r3, #15
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	701a      	strb	r2, [r3, #0]
 800e01a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e01e:	f103 030c 	add.w	r3, r3, #12
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	0c1a      	lsrs	r2, r3, #16
 800e026:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e02a:	f103 0310 	add.w	r3, r3, #16
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	3310      	adds	r3, #16
 800e032:	b2d2      	uxtb	r2, r2
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e03a:	f103 030c 	add.w	r3, r3, #12
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	0e1a      	lsrs	r2, r3, #24
 800e042:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e046:	f103 0310 	add.w	r3, r3, #16
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3311      	adds	r3, #17
 800e04e:	b2d2      	uxtb	r2, r2
 800e050:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800e052:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e056:	f103 0310 	add.w	r3, r3, #16
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	330b      	adds	r3, #11
 800e05e:	2200      	movs	r2, #0
 800e060:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800e062:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e066:	f103 0310 	add.w	r3, r3, #16
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	331c      	adds	r3, #28
 800e06e:	2200      	movs	r2, #0
 800e070:	701a      	strb	r2, [r3, #0]
 800e072:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e076:	f103 0310 	add.w	r3, r3, #16
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	331d      	adds	r3, #29
 800e07e:	2200      	movs	r2, #0
 800e080:	701a      	strb	r2, [r3, #0]
 800e082:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e086:	f103 0310 	add.w	r3, r3, #16
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	331e      	adds	r3, #30
 800e08e:	2200      	movs	r2, #0
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e096:	f103 0310 	add.w	r3, r3, #16
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	331f      	adds	r3, #31
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800e0a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e0a6:	3b18      	subs	r3, #24
 800e0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e0b2:	f102 0210 	add.w	r2, r2, #16
 800e0b6:	6811      	ldr	r1, [r2, #0]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fe fbb4 	bl	800c826 <ld_clust>
 800e0be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e0c2:	f103 0308 	add.w	r3, r3, #8
 800e0c6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e0ce:	f103 0310 	add.w	r3, r3, #16
 800e0d2:	6818      	ldr	r0, [r3, #0]
 800e0d4:	f7fe fbd5 	bl	800c882 <st_clust>
				dj.fs->wflag = 1;
 800e0d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e0dc:	3b18      	subs	r3, #24
 800e0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800e0ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e0f2:	f103 0308 	add.w	r3, r3, #8
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f000 8083 	beq.w	800e204 <f_open+0x464>
					dw = dj.fs->winsect;
 800e0fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e102:	3b18      	subs	r3, #24
 800e104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e10e:	330c      	adds	r3, #12
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e116:	f102 020c 	add.w	r2, r2, #12
 800e11a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800e11c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e120:	3b18      	subs	r3, #24
 800e122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e12c:	f102 0208 	add.w	r2, r2, #8
 800e130:	6811      	ldr	r1, [r2, #0]
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd ff8d 	bl	800c052 <remove_chain>
 800e138:	4603      	mov	r3, r0
 800e13a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e13e:	f102 0217 	add.w	r2, r2, #23
 800e142:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800e144:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e148:	f103 0317 	add.w	r3, r3, #23
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d158      	bne.n	800e204 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e152:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e156:	3b18      	subs	r3, #24
 800e158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e162:	f102 0208 	add.w	r2, r2, #8
 800e166:	6812      	ldr	r2, [r2, #0]
 800e168:	3a01      	subs	r2, #1
 800e16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16e:	330c      	adds	r3, #12
 800e170:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800e172:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e176:	3b18      	subs	r3, #24
 800e178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e182:	f102 020c 	add.w	r2, r2, #12
 800e186:	6811      	ldr	r1, [r2, #0]
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fd fbd3 	bl	800b934 <move_window>
 800e18e:	4603      	mov	r3, r0
 800e190:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e194:	f102 0217 	add.w	r2, r2, #23
 800e198:	7013      	strb	r3, [r2, #0]
 800e19a:	e033      	b.n	800e204 <f_open+0x464>
 800e19c:	2000a2c4 	.word	0x2000a2c4
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800e1a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e1a4:	f103 0317 	add.w	r3, r3, #23
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d12a      	bne.n	800e204 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800e1ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e1b2:	f103 0310 	add.w	r3, r3, #16
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	330b      	adds	r3, #11
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 0310 	and.w	r3, r3, #16
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <f_open+0x432>
					res = FR_NO_FILE;
 800e1c4:	2304      	movs	r3, #4
 800e1c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e1ca:	f102 0217 	add.w	r2, r2, #23
 800e1ce:	7013      	strb	r3, [r2, #0]
 800e1d0:	e018      	b.n	800e204 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800e1d2:	f107 0318 	add.w	r3, r7, #24
 800e1d6:	3b11      	subs	r3, #17
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	f003 0302 	and.w	r3, r3, #2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d010      	beq.n	800e204 <f_open+0x464>
 800e1e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e1e6:	f103 0310 	add.w	r3, r3, #16
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	330b      	adds	r3, #11
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <f_open+0x464>
						res = FR_DENIED;
 800e1f8:	2307      	movs	r3, #7
 800e1fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e1fe:	f102 0217 	add.w	r2, r2, #23
 800e202:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800e204:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e208:	f103 0317 	add.w	r3, r3, #23
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d15b      	bne.n	800e2ca <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e212:	f107 0318 	add.w	r3, r7, #24
 800e216:	3b11      	subs	r3, #17
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	f003 0308 	and.w	r3, r3, #8
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <f_open+0x496>
				mode |= FA__WRITTEN;
 800e222:	f107 0318 	add.w	r3, r7, #24
 800e226:	3b11      	subs	r3, #17
 800e228:	f107 0218 	add.w	r2, r7, #24
 800e22c:	3a11      	subs	r2, #17
 800e22e:	7812      	ldrb	r2, [r2, #0]
 800e230:	f042 0220 	orr.w	r2, r2, #32
 800e234:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800e236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e23a:	3b18      	subs	r3, #24
 800e23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e246:	330c      	adds	r3, #12
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	f107 0318 	add.w	r3, r7, #24
 800e24e:	3b0c      	subs	r3, #12
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e256:	331c      	adds	r3, #28
 800e258:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800e25a:	f107 0318 	add.w	r3, r7, #24
 800e25e:	3b0c      	subs	r3, #12
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e266:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e26a:	f102 0210 	add.w	r2, r2, #16
 800e26e:	6812      	ldr	r2, [r2, #0]
 800e270:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e272:	f107 0318 	add.w	r3, r7, #24
 800e276:	3b11      	subs	r3, #17
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	f023 0301 	bic.w	r3, r3, #1
 800e27e:	2b00      	cmp	r3, #0
 800e280:	bf14      	ite	ne
 800e282:	2301      	movne	r3, #1
 800e284:	2300      	moveq	r3, #0
 800e286:	b2db      	uxtb	r3, r3
 800e288:	461a      	mov	r2, r3
 800e28a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e28e:	3b18      	subs	r3, #24
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd f9c6 	bl	800b624 <inc_lock>
 800e298:	4602      	mov	r2, r0
 800e29a:	f107 0318 	add.w	r3, r7, #24
 800e29e:	3b0c      	subs	r3, #12
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800e2aa:	f107 0318 	add.w	r3, r7, #24
 800e2ae:	3b0c      	subs	r3, #12
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e2b6:	3308      	adds	r3, #8
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d105      	bne.n	800e2ca <f_open+0x52a>
 800e2be:	2302      	movs	r3, #2
 800e2c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e2c4:	f102 0217 	add.w	r2, r2, #23
 800e2c8:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800e2ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e2ce:	f103 0317 	add.w	r3, r3, #23
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f040 8091 	bne.w	800e3fc <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800e2da:	f107 0318 	add.w	r3, r7, #24
 800e2de:	3b0c      	subs	r3, #12
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e6:	3306      	adds	r3, #6
 800e2e8:	f107 0218 	add.w	r2, r7, #24
 800e2ec:	3a11      	subs	r2, #17
 800e2ee:	7812      	ldrb	r2, [r2, #0]
 800e2f0:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800e2f2:	f107 0318 	add.w	r3, r7, #24
 800e2f6:	3b0c      	subs	r3, #12
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2fe:	3307      	adds	r3, #7
 800e300:	2200      	movs	r2, #0
 800e302:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800e304:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e308:	3b18      	subs	r3, #24
 800e30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e314:	f102 0210 	add.w	r2, r2, #16
 800e318:	6811      	ldr	r1, [r2, #0]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fe fa83 	bl	800c826 <ld_clust>
 800e320:	4602      	mov	r2, r0
 800e322:	f107 0318 	add.w	r3, r7, #24
 800e326:	3b0c      	subs	r3, #12
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32e:	3310      	adds	r3, #16
 800e330:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800e332:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e336:	f103 0310 	add.w	r3, r3, #16
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	331f      	adds	r3, #31
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	061a      	lsls	r2, r3, #24
 800e342:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e346:	f103 0310 	add.w	r3, r3, #16
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	331e      	adds	r3, #30
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	041b      	lsls	r3, r3, #16
 800e352:	4313      	orrs	r3, r2
 800e354:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e358:	f102 0210 	add.w	r2, r2, #16
 800e35c:	6812      	ldr	r2, [r2, #0]
 800e35e:	321d      	adds	r2, #29
 800e360:	7812      	ldrb	r2, [r2, #0]
 800e362:	0212      	lsls	r2, r2, #8
 800e364:	4313      	orrs	r3, r2
 800e366:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800e36a:	f102 0210 	add.w	r2, r2, #16
 800e36e:	6812      	ldr	r2, [r2, #0]
 800e370:	321c      	adds	r2, #28
 800e372:	7812      	ldrb	r2, [r2, #0]
 800e374:	431a      	orrs	r2, r3
 800e376:	f107 0318 	add.w	r3, r7, #24
 800e37a:	3b0c      	subs	r3, #12
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e382:	330c      	adds	r3, #12
 800e384:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800e386:	f107 0318 	add.w	r3, r7, #24
 800e38a:	3b0c      	subs	r3, #12
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e392:	3308      	adds	r3, #8
 800e394:	2200      	movs	r2, #0
 800e396:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800e398:	f107 0318 	add.w	r3, r7, #24
 800e39c:	3b0c      	subs	r3, #12
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a4:	3318      	adds	r3, #24
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800e3aa:	f107 0318 	add.w	r3, r7, #24
 800e3ae:	3b0c      	subs	r3, #12
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800e3bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e3c0:	3b18      	subs	r3, #24
 800e3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	f107 0318 	add.w	r3, r7, #24
 800e3cc:	3b0c      	subs	r3, #12
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d4:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800e3d6:	f107 0318 	add.w	r3, r7, #24
 800e3da:	3b0c      	subs	r3, #12
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e8:	3306      	adds	r3, #6
 800e3ea:	881a      	ldrh	r2, [r3, #0]
 800e3ec:	f107 0318 	add.w	r3, r7, #24
 800e3f0:	3b0c      	subs	r3, #12
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800e3fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800e400:	f103 0317 	add.w	r3, r3, #23
 800e404:	781b      	ldrb	r3, [r3, #0]
}
 800e406:	4618      	mov	r0, r3
 800e408:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800e40c:	3718      	adds	r7, #24
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop

0800e414 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7ff fc2f 	bl	800dc90 <validate>
 800e432:	4603      	mov	r3, r0
 800e434:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e436:	7ffb      	ldrb	r3, [r7, #31]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <f_read+0x2c>
 800e43c:	7ffb      	ldrb	r3, [r7, #31]
 800e43e:	e1fb      	b.n	800e838 <f_read+0x424>
	if (fp->err)								/* Check error */
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e446:	3307      	adds	r3, #7
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d005      	beq.n	800e45a <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e454:	3307      	adds	r3, #7
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	e1ee      	b.n	800e838 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e460:	3306      	adds	r3, #6
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800e46c:	2307      	movs	r3, #7
 800e46e:	e1e3      	b.n	800e838 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e476:	330c      	adds	r3, #12
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e480:	3308      	adds	r3, #8
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	f240 81ce 	bls.w	800e82e <f_read+0x41a>
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e496:	e1ca      	b.n	800e82e <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49e:	3308      	adds	r3, #8
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ae:	330a      	adds	r3, #10
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	fbb2 f1f3 	udiv	r1, r2, r3
 800e4b6:	fb03 f301 	mul.w	r3, r3, r1
 800e4ba:	1ad3      	subs	r3, r2, r3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8160 	bne.w	800e782 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4d8:	330a      	adds	r3, #10
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ee:	3302      	adds	r3, #2
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d14a      	bne.n	800e596 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e506:	3308      	adds	r3, #8
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d106      	bne.n	800e51c <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e514:	3310      	adds	r3, #16
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e51a:	e01f      	b.n	800e55c <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e522:	3304      	adds	r3, #4
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e530:	3308      	adds	r3, #8
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4619      	mov	r1, r3
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7fd fea4 	bl	800c284 <clmt_clust>
 800e53c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e53e:	e00d      	b.n	800e55c <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e54e:	3314      	adds	r3, #20
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	f7fd fb17 	bl	800bb88 <get_fat>
 800e55a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d807      	bhi.n	800e572 <f_read+0x15e>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e568:	3307      	adds	r3, #7
 800e56a:	2202      	movs	r2, #2
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	2302      	movs	r3, #2
 800e570:	e162      	b.n	800e838 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e578:	d107      	bne.n	800e58a <f_read+0x176>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e580:	3307      	adds	r3, #7
 800e582:	2201      	movs	r2, #1
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	2301      	movs	r3, #1
 800e588:	e156      	b.n	800e838 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e590:	3314      	adds	r3, #20
 800e592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e594:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5a4:	3314      	adds	r3, #20
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	f7fd fac5 	bl	800bb3a <clust2sect>
 800e5b0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d107      	bne.n	800e5c8 <f_read+0x1b4>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5be:	3307      	adds	r3, #7
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	701a      	strb	r2, [r3, #0]
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e137      	b.n	800e838 <f_read+0x424>
			sect += csect;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5dc:	330a      	adds	r3, #10
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d070      	beq.n	800e6d2 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800e5f0:	7dfa      	ldrb	r2, [r7, #23]
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	441a      	add	r2, r3
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e602:	3302      	adds	r3, #2
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d90b      	bls.n	800e622 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e616:	3302      	adds	r3, #2
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	461a      	mov	r2, r3
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e62e:	3301      	adds	r3, #1
 800e630:	7818      	ldrb	r0, [r3, #0]
 800e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	6a39      	ldr	r1, [r7, #32]
 800e638:	f7fc fe88 	bl	800b34c <disk_read>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e648:	3307      	adds	r3, #7
 800e64a:	2201      	movs	r2, #1
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	2301      	movs	r3, #1
 800e650:	e0f2      	b.n	800e838 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e658:	3306      	adds	r3, #6
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	d028      	beq.n	800e6b6 <f_read+0x2a2>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e66a:	3318      	adds	r3, #24
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e674:	429a      	cmp	r2, r3
 800e676:	d91e      	bls.n	800e6b6 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e67e:	3318      	adds	r3, #24
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	1ad2      	subs	r2, r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e692:	330a      	adds	r3, #10
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	fb03 f302 	mul.w	r3, r3, r2
 800e69a:	6a3a      	ldr	r2, [r7, #32]
 800e69c:	18d0      	adds	r0, r2, r3
 800e69e:	68f9      	ldr	r1, [r7, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ac:	330a      	adds	r3, #10
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	f7fc fea9 	bl	800b408 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6c2:	330a      	adds	r3, #10
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	fb02 f303 	mul.w	r3, r2, r3
 800e6ce:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800e6d0:	e093      	b.n	800e7fa <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6d8:	3318      	adds	r3, #24
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d049      	beq.n	800e776 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6e8:	3306      	adds	r3, #6
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d028      	beq.n	800e746 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e700:	3301      	adds	r3, #1
 800e702:	7818      	ldrb	r0, [r3, #0]
 800e704:	68f9      	ldr	r1, [r7, #12]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e70c:	3318      	adds	r3, #24
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	2301      	movs	r3, #1
 800e712:	f7fc fe3b 	bl	800b38c <disk_write>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d007      	beq.n	800e72c <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e722:	3307      	adds	r3, #7
 800e724:	2201      	movs	r2, #1
 800e726:	701a      	strb	r2, [r3, #0]
 800e728:	2301      	movs	r3, #1
 800e72a:	e085      	b.n	800e838 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e732:	3306      	adds	r3, #6
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e742:	3306      	adds	r3, #6
 800e744:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e752:	3301      	adds	r3, #1
 800e754:	7818      	ldrb	r0, [r3, #0]
 800e756:	68f9      	ldr	r1, [r7, #12]
 800e758:	2301      	movs	r3, #1
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	f7fc fdf6 	bl	800b34c <disk_read>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e76c:	3307      	adds	r3, #7
 800e76e:	2201      	movs	r2, #1
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	2301      	movs	r3, #1
 800e774:	e060      	b.n	800e838 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e77c:	3318      	adds	r3, #24
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e78e:	330a      	adds	r3, #10
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	4618      	mov	r0, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e79a:	3308      	adds	r3, #8
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7aa:	330a      	adds	r3, #10
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7b2:	fb03 f301 	mul.w	r3, r3, r1
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	1ac3      	subs	r3, r0, r3
 800e7ba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800e7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d901      	bls.n	800e7c8 <f_read+0x3b4>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7de:	330a      	adds	r3, #10
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7e6:	fb03 f301 	mul.w	r3, r3, r1
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6a38      	ldr	r0, [r7, #32]
 800e7f6:	f7fc fe07 	bl	800b408 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e7fa:	6a3a      	ldr	r2, [r7, #32]
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	4413      	add	r3, r2
 800e800:	623b      	str	r3, [r7, #32]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e808:	3308      	adds	r3, #8
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	441a      	add	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e816:	3308      	adds	r3, #8
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	441a      	add	r2, r3
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f47f ae31 	bne.w	800e498 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3730      	adds	r7, #48	; 0x30
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff fa21 	bl	800dc90 <validate>
 800e84e:	4603      	mov	r3, r0
 800e850:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e852:	7dfb      	ldrb	r3, [r7, #23]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f040 80cc 	bne.w	800e9f2 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e860:	3306      	adds	r3, #6
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 0320 	and.w	r3, r3, #32
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 80c2 	beq.w	800e9f2 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e874:	3306      	adds	r3, #6
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d022      	beq.n	800e8c6 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e88c:	3301      	adds	r3, #1
 800e88e:	7818      	ldrb	r0, [r3, #0]
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e898:	3318      	adds	r3, #24
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	2301      	movs	r3, #1
 800e89e:	f7fc fd75 	bl	800b38c <disk_write>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e0a3      	b.n	800e9f4 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8b2:	3306      	adds	r3, #6
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c2:	3306      	adds	r3, #6
 800e8c4:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8d4:	331c      	adds	r3, #28
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fd f82a 	bl	800b934 <move_window>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f040 8083 	bne.w	800e9f2 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	330b      	adds	r3, #11
 800e8fa:	781a      	ldrb	r2, [r3, #0]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	330b      	adds	r3, #11
 800e900:	f042 0220 	orr.w	r2, r2, #32
 800e904:	b2d2      	uxtb	r2, r2
 800e906:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e90e:	330c      	adds	r3, #12
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	331c      	adds	r3, #28
 800e916:	b2d2      	uxtb	r2, r2
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e920:	330c      	adds	r3, #12
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	0a1b      	lsrs	r3, r3, #8
 800e928:	b29a      	uxth	r2, r3
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	331d      	adds	r3, #29
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e938:	330c      	adds	r3, #12
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	0c1a      	lsrs	r2, r3, #16
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	331e      	adds	r3, #30
 800e942:	b2d2      	uxtb	r2, r2
 800e944:	701a      	strb	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e94c:	330c      	adds	r3, #12
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	0e1a      	lsrs	r2, r3, #24
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	331f      	adds	r3, #31
 800e956:	b2d2      	uxtb	r2, r2
 800e958:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e960:	3310      	adds	r3, #16
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4619      	mov	r1, r3
 800e966:	6938      	ldr	r0, [r7, #16]
 800e968:	f7fd ff8b 	bl	800c882 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800e96c:	f7fb fc04 	bl	800a178 <get_fattime>
 800e970:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	3316      	adds	r3, #22
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	b2d2      	uxtb	r2, r2
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	0a1b      	lsrs	r3, r3, #8
 800e982:	b29a      	uxth	r2, r3
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	3317      	adds	r3, #23
 800e988:	b2d2      	uxtb	r2, r2
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	0c1a      	lsrs	r2, r3, #16
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	3318      	adds	r3, #24
 800e994:	b2d2      	uxtb	r2, r2
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	0e1a      	lsrs	r2, r3, #24
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	3319      	adds	r3, #25
 800e9a0:	b2d2      	uxtb	r2, r2
 800e9a2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	3312      	adds	r3, #18
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	701a      	strb	r2, [r3, #0]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	3313      	adds	r3, #19
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ba:	3306      	adds	r3, #6
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f023 0320 	bic.w	r3, r3, #32
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ca:	3306      	adds	r3, #6
 800e9cc:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9da:	3304      	adds	r3, #4
 800e9dc:	2201      	movs	r2, #1
 800e9de:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fc ffd7 	bl	800b99c <sync_fs>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff ff1b 	bl	800e840 <f_sync>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ea0e:	7bfb      	ldrb	r3, [r7, #15]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d119      	bne.n	800ea48 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff f93b 	bl	800dc90 <validate>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d111      	bne.n	800ea48 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fc feb8 	bl	800b7a4 <dec_lock>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d104      	bne.n	800ea48 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ea48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
	...

0800ea54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea62:	2301      	movs	r3, #1
 800ea64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ea6a:	4b1e      	ldr	r3, [pc, #120]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea6c:	7a5b      	ldrb	r3, [r3, #9]
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d831      	bhi.n	800ead8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea74:	4b1b      	ldr	r3, [pc, #108]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea76:	7a5b      	ldrb	r3, [r3, #9]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	4b19      	ldr	r3, [pc, #100]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea7e:	2100      	movs	r1, #0
 800ea80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ea82:	4b18      	ldr	r3, [pc, #96]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea84:	7a5b      	ldrb	r3, [r3, #9]
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	4a16      	ldr	r2, [pc, #88]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4413      	add	r3, r2
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ea92:	4b14      	ldr	r3, [pc, #80]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea94:	7a5b      	ldrb	r3, [r3, #9]
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800ea9c:	4413      	add	r3, r2
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eaa2:	4b10      	ldr	r3, [pc, #64]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800eaa4:	7a5b      	ldrb	r3, [r3, #9]
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	b2d1      	uxtb	r1, r2
 800eaac:	4a0d      	ldr	r2, [pc, #52]	; (800eae4 <FATFS_LinkDriverEx+0x90>)
 800eaae:	7251      	strb	r1, [r2, #9]
 800eab0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eab2:	7dbb      	ldrb	r3, [r7, #22]
 800eab4:	3330      	adds	r3, #48	; 0x30
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	3301      	adds	r3, #1
 800eac0:	223a      	movs	r2, #58	; 0x3a
 800eac2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	3302      	adds	r3, #2
 800eac8:	222f      	movs	r2, #47	; 0x2f
 800eaca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	3303      	adds	r3, #3
 800ead0:	2200      	movs	r2, #0
 800ead2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	371c      	adds	r7, #28
 800eade:	46bd      	mov	sp, r7
 800eae0:	bc80      	pop	{r7}
 800eae2:	4770      	bx	lr
 800eae4:	2000a4c4 	.word	0x2000a4c4

0800eae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff ffac 	bl	800ea54 <FATFS_LinkDriverEx>
 800eafc:	4603      	mov	r3, r0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
	...

0800eb08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	2b7f      	cmp	r3, #127	; 0x7f
 800eb18:	d802      	bhi.n	800eb20 <ff_convert+0x18>
		c = chr;
 800eb1a:	88fb      	ldrh	r3, [r7, #6]
 800eb1c:	81fb      	strh	r3, [r7, #14]
 800eb1e:	e025      	b.n	800eb6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00b      	beq.n	800eb3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eb26:	88fb      	ldrh	r3, [r7, #6]
 800eb28:	2bff      	cmp	r3, #255	; 0xff
 800eb2a:	d805      	bhi.n	800eb38 <ff_convert+0x30>
 800eb2c:	88fb      	ldrh	r3, [r7, #6]
 800eb2e:	3b80      	subs	r3, #128	; 0x80
 800eb30:	4a11      	ldr	r2, [pc, #68]	; (800eb78 <ff_convert+0x70>)
 800eb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb36:	e000      	b.n	800eb3a <ff_convert+0x32>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	81fb      	strh	r3, [r7, #14]
 800eb3c:	e016      	b.n	800eb6c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800eb3e:	2300      	movs	r3, #0
 800eb40:	81fb      	strh	r3, [r7, #14]
 800eb42:	e009      	b.n	800eb58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800eb44:	89fb      	ldrh	r3, [r7, #14]
 800eb46:	4a0c      	ldr	r2, [pc, #48]	; (800eb78 <ff_convert+0x70>)
 800eb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb4c:	88fa      	ldrh	r2, [r7, #6]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d006      	beq.n	800eb60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eb52:	89fb      	ldrh	r3, [r7, #14]
 800eb54:	3301      	adds	r3, #1
 800eb56:	81fb      	strh	r3, [r7, #14]
 800eb58:	89fb      	ldrh	r3, [r7, #14]
 800eb5a:	2b7f      	cmp	r3, #127	; 0x7f
 800eb5c:	d9f2      	bls.n	800eb44 <ff_convert+0x3c>
 800eb5e:	e000      	b.n	800eb62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eb60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eb62:	89fb      	ldrh	r3, [r7, #14]
 800eb64:	3380      	adds	r3, #128	; 0x80
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3714      	adds	r7, #20
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bc80      	pop	{r7}
 800eb76:	4770      	bx	lr
 800eb78:	080256d4 	.word	0x080256d4

0800eb7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800eb86:	2300      	movs	r3, #0
 800eb88:	60fb      	str	r3, [r7, #12]
 800eb8a:	e002      	b.n	800eb92 <ff_wtoupper+0x16>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	4a0f      	ldr	r2, [pc, #60]	; (800ebd0 <ff_wtoupper+0x54>)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d006      	beq.n	800ebac <ff_wtoupper+0x30>
 800eb9e:	4a0c      	ldr	r2, [pc, #48]	; (800ebd0 <ff_wtoupper+0x54>)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eba6:	88fa      	ldrh	r2, [r7, #6]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d1ef      	bne.n	800eb8c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800ebac:	4a08      	ldr	r2, [pc, #32]	; (800ebd0 <ff_wtoupper+0x54>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <ff_wtoupper+0x46>
 800ebb8:	4a06      	ldr	r2, [pc, #24]	; (800ebd4 <ff_wtoupper+0x58>)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebc0:	e000      	b.n	800ebc4 <ff_wtoupper+0x48>
 800ebc2:	88fb      	ldrh	r3, [r7, #6]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bc80      	pop	{r7}
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	080257d4 	.word	0x080257d4
 800ebd4:	080259b4 	.word	0x080259b4

0800ebd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	490e      	ldr	r1, [pc, #56]	; (800ec18 <MX_USB_HOST_Init+0x40>)
 800ebe0:	480e      	ldr	r0, [pc, #56]	; (800ec1c <MX_USB_HOST_Init+0x44>)
 800ebe2:	f7fb fec7 	bl	800a974 <USBH_Init>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ebec:	f7f4 fe5e 	bl	80038ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ebf0:	490b      	ldr	r1, [pc, #44]	; (800ec20 <MX_USB_HOST_Init+0x48>)
 800ebf2:	480a      	ldr	r0, [pc, #40]	; (800ec1c <MX_USB_HOST_Init+0x44>)
 800ebf4:	f7fb ff42 	bl	800aa7c <USBH_RegisterClass>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ebfe:	f7f4 fe55 	bl	80038ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ec02:	4806      	ldr	r0, [pc, #24]	; (800ec1c <MX_USB_HOST_Init+0x44>)
 800ec04:	f7fb ffc4 	bl	800ab90 <USBH_Start>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ec0e:	f7f4 fe4d 	bl	80038ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ec12:	bf00      	nop
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	0800ec25 	.word	0x0800ec25
 800ec1c:	2000e7cc 	.word	0x2000e7cc
 800ec20:	200001f0 	.word	0x200001f0

0800ec24 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	3b01      	subs	r3, #1
 800ec34:	2b04      	cmp	r3, #4
 800ec36:	d819      	bhi.n	800ec6c <USBH_UserProcess+0x48>
 800ec38:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <USBH_UserProcess+0x1c>)
 800ec3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3e:	bf00      	nop
 800ec40:	0800ec6d 	.word	0x0800ec6d
 800ec44:	0800ec5d 	.word	0x0800ec5d
 800ec48:	0800ec6d 	.word	0x0800ec6d
 800ec4c:	0800ec65 	.word	0x0800ec65
 800ec50:	0800ec55 	.word	0x0800ec55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ec54:	4b08      	ldr	r3, [pc, #32]	; (800ec78 <USBH_UserProcess+0x54>)
 800ec56:	2203      	movs	r2, #3
 800ec58:	701a      	strb	r2, [r3, #0]
  break;
 800ec5a:	e008      	b.n	800ec6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <USBH_UserProcess+0x54>)
 800ec5e:	2202      	movs	r2, #2
 800ec60:	701a      	strb	r2, [r3, #0]
  break;
 800ec62:	e004      	b.n	800ec6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ec64:	4b04      	ldr	r3, [pc, #16]	; (800ec78 <USBH_UserProcess+0x54>)
 800ec66:	2201      	movs	r2, #1
 800ec68:	701a      	strb	r2, [r3, #0]
  break;
 800ec6a:	e000      	b.n	800ec6e <USBH_UserProcess+0x4a>

  default:
  break;
 800ec6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ec6e:	bf00      	nop
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bc80      	pop	{r7}
 800ec76:	4770      	bx	lr
 800ec78:	2000a4d0 	.word	0x2000a4d0

0800ec7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b088      	sub	sp, #32
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec84:	f107 0310 	add.w	r3, r7, #16
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	605a      	str	r2, [r3, #4]
 800ec8e:	609a      	str	r2, [r3, #8]
 800ec90:	60da      	str	r2, [r3, #12]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec9a:	d12c      	bne.n	800ecf6 <HAL_HCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec9c:	4b18      	ldr	r3, [pc, #96]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	4a17      	ldr	r2, [pc, #92]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800eca2:	f043 0304 	orr.w	r3, r3, #4
 800eca6:	6193      	str	r3, [r2, #24]
 800eca8:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800ecaa:	699b      	ldr	r3, [r3, #24]
 800ecac:	f003 0304 	and.w	r3, r3, #4
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_VBUS_Pin|USB_ID_Pin;
 800ecb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ecb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecc2:	f107 0310 	add.w	r3, r7, #16
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	480e      	ldr	r0, [pc, #56]	; (800ed04 <HAL_HCD_MspInit+0x88>)
 800ecca:	f7f6 fe23 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ecce:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	4a0b      	ldr	r2, [pc, #44]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800ecd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ecd8:	6153      	str	r3, [r2, #20]
 800ecda:	4b09      	ldr	r3, [pc, #36]	; (800ed00 <HAL_HCD_MspInit+0x84>)
 800ecdc:	695b      	ldr	r3, [r3, #20]
 800ecde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ece2:	60bb      	str	r3, [r7, #8]
 800ece4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ece6:	2200      	movs	r2, #0
 800ece8:	2100      	movs	r1, #0
 800ecea:	2043      	movs	r0, #67	; 0x43
 800ecec:	f7f6 fa61 	bl	80051b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ecf0:	2043      	movs	r0, #67	; 0x43
 800ecf2:	f7f6 fa7a 	bl	80051ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	40021000 	.word	0x40021000
 800ed04:	40010800 	.word	0x40010800

0800ed08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fb ff58 	bl	800abcc <USBH_LL_IncTimer>
}
 800ed1c:	bf00      	nop
 800ed1e:	3708      	adds	r7, #8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fb ff8e 	bl	800ac54 <USBH_LL_Connect>
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fb ff96 	bl	800ac80 <USBH_LL_Disconnect>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70fb      	strb	r3, [r7, #3]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bc80      	pop	{r7}
 800ed74:	4770      	bx	lr

0800ed76 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b082      	sub	sp, #8
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fb ff4b 	bl	800ac20 <USBH_LL_PortEnabled>
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b082      	sub	sp, #8
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fb ff4a 	bl	800ac3a <USBH_LL_PortDisabled>
}
 800eda6:	bf00      	nop
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
	...

0800edb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d127      	bne.n	800ee12 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800edc2:	4a16      	ldr	r2, [pc, #88]	; (800ee1c <USBH_LL_Init+0x6c>)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a13      	ldr	r2, [pc, #76]	; (800ee1c <USBH_LL_Init+0x6c>)
 800edce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800edd2:	4b12      	ldr	r3, [pc, #72]	; (800ee1c <USBH_LL_Init+0x6c>)
 800edd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800edd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800edda:	4b10      	ldr	r3, [pc, #64]	; (800ee1c <USBH_LL_Init+0x6c>)
 800eddc:	2208      	movs	r2, #8
 800edde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ede0:	4b0e      	ldr	r3, [pc, #56]	; (800ee1c <USBH_LL_Init+0x6c>)
 800ede2:	2201      	movs	r2, #1
 800ede4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ede6:	4b0d      	ldr	r3, [pc, #52]	; (800ee1c <USBH_LL_Init+0x6c>)
 800ede8:	2202      	movs	r2, #2
 800edea:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800edec:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <USBH_LL_Init+0x6c>)
 800edee:	2200      	movs	r2, #0
 800edf0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800edf2:	480a      	ldr	r0, [pc, #40]	; (800ee1c <USBH_LL_Init+0x6c>)
 800edf4:	f7f6 ff64 	bl	8005cc0 <HAL_HCD_Init>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800edfe:	f7f4 fd55 	bl	80038ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ee02:	4806      	ldr	r0, [pc, #24]	; (800ee1c <USBH_LL_Init+0x6c>)
 800ee04:	f7f7 fb54 	bl	80064b0 <HAL_HCD_GetCurrentFrame>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7fb fecf 	bl	800abb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	2000eb9c 	.word	0x2000eb9c

0800ee20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f7 fad2 	bl	80063e0 <HAL_HCD_Start>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee40:	7bfb      	ldrb	r3, [r7, #15]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 f910 	bl	800f068 <USBH_Get_USB_Status>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7f7 fada 	bl	8006426 <HAL_HCD_Stop>
 800ee72:	4603      	mov	r3, r0
 800ee74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee76:	7bfb      	ldrb	r3, [r7, #15]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 f8f5 	bl	800f068 <USBH_Get_USB_Status>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee9e:	78fa      	ldrb	r2, [r7, #3]
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f7 faf0 	bl	8006488 <HAL_HCD_HC_GetXferCount>
 800eea8:	4603      	mov	r3, r0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eeb2:	b590      	push	{r4, r7, lr}
 800eeb4:	b089      	sub	sp, #36	; 0x24
 800eeb6:	af04      	add	r7, sp, #16
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	4608      	mov	r0, r1
 800eebc:	4611      	mov	r1, r2
 800eebe:	461a      	mov	r2, r3
 800eec0:	4603      	mov	r3, r0
 800eec2:	70fb      	strb	r3, [r7, #3]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70bb      	strb	r3, [r7, #2]
 800eec8:	4613      	mov	r3, r2
 800eeca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eecc:	2300      	movs	r3, #0
 800eece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800eeda:	787c      	ldrb	r4, [r7, #1]
 800eedc:	78ba      	ldrb	r2, [r7, #2]
 800eede:	78f9      	ldrb	r1, [r7, #3]
 800eee0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eee2:	9302      	str	r3, [sp, #8]
 800eee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	4623      	mov	r3, r4
 800eef2:	f7f6 ff47 	bl	8005d84 <HAL_HCD_HC_Init>
 800eef6:	4603      	mov	r3, r0
 800eef8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f8b3 	bl	800f068 <USBH_Get_USB_Status>
 800ef02:	4603      	mov	r3, r0
 800ef04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd90      	pop	{r4, r7, pc}

0800ef10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef2a:	78fa      	ldrb	r2, [r7, #3]
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f6 ffc0 	bl	8005eb4 <HAL_HCD_HC_Halt>
 800ef34:	4603      	mov	r3, r0
 800ef36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f894 	bl	800f068 <USBH_Get_USB_Status>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef4e:	b590      	push	{r4, r7, lr}
 800ef50:	b089      	sub	sp, #36	; 0x24
 800ef52:	af04      	add	r7, sp, #16
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	70fb      	strb	r3, [r7, #3]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70bb      	strb	r3, [r7, #2]
 800ef64:	4613      	mov	r3, r2
 800ef66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800ef76:	787c      	ldrb	r4, [r7, #1]
 800ef78:	78ba      	ldrb	r2, [r7, #2]
 800ef7a:	78f9      	ldrb	r1, [r7, #3]
 800ef7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef80:	9303      	str	r3, [sp, #12]
 800ef82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef84:	9302      	str	r3, [sp, #8]
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	9301      	str	r3, [sp, #4]
 800ef8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	4623      	mov	r3, r4
 800ef92:	f7f6 ffb3 	bl	8005efc <HAL_HCD_HC_SubmitRequest>
 800ef96:	4603      	mov	r3, r0
 800ef98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 f863 	bl	800f068 <USBH_Get_USB_Status>
 800efa2:	4603      	mov	r3, r0
 800efa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	bd90      	pop	{r4, r7, pc}

0800efb0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	460b      	mov	r3, r1
 800efba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800efc2:	78fa      	ldrb	r2, [r7, #3]
 800efc4:	4611      	mov	r1, r2
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f7 fa4a 	bl	8006460 <HAL_HCD_HC_GetURBState>
 800efcc:	4603      	mov	r3, r0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b082      	sub	sp, #8
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	460b      	mov	r3, r1
 800efe0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d103      	bne.n	800eff4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800efec:	78fb      	ldrb	r3, [r7, #3]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 f866 	bl	800f0c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800eff4:	20c8      	movs	r0, #200	; 0xc8
 800eff6:	f7f5 fdd7 	bl	8004ba8 <HAL_Delay>
  return USBH_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
 800f010:	4613      	mov	r3, r2
 800f012:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f01a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f01c:	78fa      	ldrb	r2, [r7, #3]
 800f01e:	68f9      	ldr	r1, [r7, #12]
 800f020:	4613      	mov	r3, r2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	4413      	add	r3, r2
 800f026:	00db      	lsls	r3, r3, #3
 800f028:	440b      	add	r3, r1
 800f02a:	333b      	adds	r3, #59	; 0x3b
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00a      	beq.n	800f048 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f032:	78fa      	ldrb	r2, [r7, #3]
 800f034:	68f9      	ldr	r1, [r7, #12]
 800f036:	4613      	mov	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4413      	add	r3, r2
 800f03c:	00db      	lsls	r3, r3, #3
 800f03e:	440b      	add	r3, r1
 800f040:	3350      	adds	r3, #80	; 0x50
 800f042:	78ba      	ldrb	r2, [r7, #2]
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	e009      	b.n	800f05c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f048:	78fa      	ldrb	r2, [r7, #3]
 800f04a:	68f9      	ldr	r1, [r7, #12]
 800f04c:	4613      	mov	r3, r2
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	4413      	add	r3, r2
 800f052:	00db      	lsls	r3, r3, #3
 800f054:	440b      	add	r3, r1
 800f056:	3351      	adds	r3, #81	; 0x51
 800f058:	78ba      	ldrb	r2, [r7, #2]
 800f05a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3714      	adds	r7, #20
 800f062:	46bd      	mov	sp, r7
 800f064:	bc80      	pop	{r7}
 800f066:	4770      	bx	lr

0800f068 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f072:	2300      	movs	r3, #0
 800f074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d817      	bhi.n	800f0ac <USBH_Get_USB_Status+0x44>
 800f07c:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <USBH_Get_USB_Status+0x1c>)
 800f07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f082:	bf00      	nop
 800f084:	0800f095 	.word	0x0800f095
 800f088:	0800f09b 	.word	0x0800f09b
 800f08c:	0800f0a1 	.word	0x0800f0a1
 800f090:	0800f0a7 	.word	0x0800f0a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f094:	2300      	movs	r3, #0
 800f096:	73fb      	strb	r3, [r7, #15]
    break;
 800f098:	e00b      	b.n	800f0b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f09a:	2302      	movs	r3, #2
 800f09c:	73fb      	strb	r3, [r7, #15]
    break;
 800f09e:	e008      	b.n	800f0b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a4:	e005      	b.n	800f0b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0aa:	e002      	b.n	800f0b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b0:	bf00      	nop
  }
  return usb_status;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bc80      	pop	{r7}
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop

0800f0c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
 800f0d8:	e001      	b.n	800f0de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f0e6:	4803      	ldr	r0, [pc, #12]	; (800f0f4 <MX_DriverVbusFS+0x34>)
 800f0e8:	f7f6 fdaf 	bl	8005c4a <HAL_GPIO_WritePin>
}
 800f0ec:	bf00      	nop
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	40011000 	.word	0x40011000

0800f0f8 <__errno>:
 800f0f8:	4b01      	ldr	r3, [pc, #4]	; (800f100 <__errno+0x8>)
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	20000210 	.word	0x20000210

0800f104 <__libc_init_array>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	2600      	movs	r6, #0
 800f108:	4d0c      	ldr	r5, [pc, #48]	; (800f13c <__libc_init_array+0x38>)
 800f10a:	4c0d      	ldr	r4, [pc, #52]	; (800f140 <__libc_init_array+0x3c>)
 800f10c:	1b64      	subs	r4, r4, r5
 800f10e:	10a4      	asrs	r4, r4, #2
 800f110:	42a6      	cmp	r6, r4
 800f112:	d109      	bne.n	800f128 <__libc_init_array+0x24>
 800f114:	f001 fc2a 	bl	801096c <_init>
 800f118:	2600      	movs	r6, #0
 800f11a:	4d0a      	ldr	r5, [pc, #40]	; (800f144 <__libc_init_array+0x40>)
 800f11c:	4c0a      	ldr	r4, [pc, #40]	; (800f148 <__libc_init_array+0x44>)
 800f11e:	1b64      	subs	r4, r4, r5
 800f120:	10a4      	asrs	r4, r4, #2
 800f122:	42a6      	cmp	r6, r4
 800f124:	d105      	bne.n	800f132 <__libc_init_array+0x2e>
 800f126:	bd70      	pop	{r4, r5, r6, pc}
 800f128:	f855 3b04 	ldr.w	r3, [r5], #4
 800f12c:	4798      	blx	r3
 800f12e:	3601      	adds	r6, #1
 800f130:	e7ee      	b.n	800f110 <__libc_init_array+0xc>
 800f132:	f855 3b04 	ldr.w	r3, [r5], #4
 800f136:	4798      	blx	r3
 800f138:	3601      	adds	r6, #1
 800f13a:	e7f2      	b.n	800f122 <__libc_init_array+0x1e>
 800f13c:	08025c10 	.word	0x08025c10
 800f140:	08025c10 	.word	0x08025c10
 800f144:	08025c10 	.word	0x08025c10
 800f148:	08025c14 	.word	0x08025c14

0800f14c <malloc>:
 800f14c:	4b02      	ldr	r3, [pc, #8]	; (800f158 <malloc+0xc>)
 800f14e:	4601      	mov	r1, r0
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	f000 b86d 	b.w	800f230 <_malloc_r>
 800f156:	bf00      	nop
 800f158:	20000210 	.word	0x20000210

0800f15c <free>:
 800f15c:	4b02      	ldr	r3, [pc, #8]	; (800f168 <free+0xc>)
 800f15e:	4601      	mov	r1, r0
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	f000 b819 	b.w	800f198 <_free_r>
 800f166:	bf00      	nop
 800f168:	20000210 	.word	0x20000210

0800f16c <memcpy>:
 800f16c:	440a      	add	r2, r1
 800f16e:	4291      	cmp	r1, r2
 800f170:	f100 33ff 	add.w	r3, r0, #4294967295
 800f174:	d100      	bne.n	800f178 <memcpy+0xc>
 800f176:	4770      	bx	lr
 800f178:	b510      	push	{r4, lr}
 800f17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f17e:	4291      	cmp	r1, r2
 800f180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f184:	d1f9      	bne.n	800f17a <memcpy+0xe>
 800f186:	bd10      	pop	{r4, pc}

0800f188 <memset>:
 800f188:	4603      	mov	r3, r0
 800f18a:	4402      	add	r2, r0
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d100      	bne.n	800f192 <memset+0xa>
 800f190:	4770      	bx	lr
 800f192:	f803 1b01 	strb.w	r1, [r3], #1
 800f196:	e7f9      	b.n	800f18c <memset+0x4>

0800f198 <_free_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4605      	mov	r5, r0
 800f19c:	2900      	cmp	r1, #0
 800f19e:	d043      	beq.n	800f228 <_free_r+0x90>
 800f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a4:	1f0c      	subs	r4, r1, #4
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bfb8      	it	lt
 800f1aa:	18e4      	addlt	r4, r4, r3
 800f1ac:	f000 f8ca 	bl	800f344 <__malloc_lock>
 800f1b0:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <_free_r+0x94>)
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	b933      	cbnz	r3, 800f1c6 <_free_r+0x2e>
 800f1b8:	6063      	str	r3, [r4, #4]
 800f1ba:	6014      	str	r4, [r2, #0]
 800f1bc:	4628      	mov	r0, r5
 800f1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1c2:	f000 b8c5 	b.w	800f350 <__malloc_unlock>
 800f1c6:	42a3      	cmp	r3, r4
 800f1c8:	d90a      	bls.n	800f1e0 <_free_r+0x48>
 800f1ca:	6821      	ldr	r1, [r4, #0]
 800f1cc:	1862      	adds	r2, r4, r1
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	bf01      	itttt	eq
 800f1d2:	681a      	ldreq	r2, [r3, #0]
 800f1d4:	685b      	ldreq	r3, [r3, #4]
 800f1d6:	1852      	addeq	r2, r2, r1
 800f1d8:	6022      	streq	r2, [r4, #0]
 800f1da:	6063      	str	r3, [r4, #4]
 800f1dc:	6004      	str	r4, [r0, #0]
 800f1de:	e7ed      	b.n	800f1bc <_free_r+0x24>
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	b10b      	cbz	r3, 800f1ea <_free_r+0x52>
 800f1e6:	42a3      	cmp	r3, r4
 800f1e8:	d9fa      	bls.n	800f1e0 <_free_r+0x48>
 800f1ea:	6811      	ldr	r1, [r2, #0]
 800f1ec:	1850      	adds	r0, r2, r1
 800f1ee:	42a0      	cmp	r0, r4
 800f1f0:	d10b      	bne.n	800f20a <_free_r+0x72>
 800f1f2:	6820      	ldr	r0, [r4, #0]
 800f1f4:	4401      	add	r1, r0
 800f1f6:	1850      	adds	r0, r2, r1
 800f1f8:	4283      	cmp	r3, r0
 800f1fa:	6011      	str	r1, [r2, #0]
 800f1fc:	d1de      	bne.n	800f1bc <_free_r+0x24>
 800f1fe:	6818      	ldr	r0, [r3, #0]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	4401      	add	r1, r0
 800f204:	6011      	str	r1, [r2, #0]
 800f206:	6053      	str	r3, [r2, #4]
 800f208:	e7d8      	b.n	800f1bc <_free_r+0x24>
 800f20a:	d902      	bls.n	800f212 <_free_r+0x7a>
 800f20c:	230c      	movs	r3, #12
 800f20e:	602b      	str	r3, [r5, #0]
 800f210:	e7d4      	b.n	800f1bc <_free_r+0x24>
 800f212:	6820      	ldr	r0, [r4, #0]
 800f214:	1821      	adds	r1, r4, r0
 800f216:	428b      	cmp	r3, r1
 800f218:	bf01      	itttt	eq
 800f21a:	6819      	ldreq	r1, [r3, #0]
 800f21c:	685b      	ldreq	r3, [r3, #4]
 800f21e:	1809      	addeq	r1, r1, r0
 800f220:	6021      	streq	r1, [r4, #0]
 800f222:	6063      	str	r3, [r4, #4]
 800f224:	6054      	str	r4, [r2, #4]
 800f226:	e7c9      	b.n	800f1bc <_free_r+0x24>
 800f228:	bd38      	pop	{r3, r4, r5, pc}
 800f22a:	bf00      	nop
 800f22c:	2000a4d4 	.word	0x2000a4d4

0800f230 <_malloc_r>:
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f232:	1ccd      	adds	r5, r1, #3
 800f234:	f025 0503 	bic.w	r5, r5, #3
 800f238:	3508      	adds	r5, #8
 800f23a:	2d0c      	cmp	r5, #12
 800f23c:	bf38      	it	cc
 800f23e:	250c      	movcc	r5, #12
 800f240:	2d00      	cmp	r5, #0
 800f242:	4606      	mov	r6, r0
 800f244:	db01      	blt.n	800f24a <_malloc_r+0x1a>
 800f246:	42a9      	cmp	r1, r5
 800f248:	d903      	bls.n	800f252 <_malloc_r+0x22>
 800f24a:	230c      	movs	r3, #12
 800f24c:	6033      	str	r3, [r6, #0]
 800f24e:	2000      	movs	r0, #0
 800f250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f252:	f000 f877 	bl	800f344 <__malloc_lock>
 800f256:	4921      	ldr	r1, [pc, #132]	; (800f2dc <_malloc_r+0xac>)
 800f258:	680a      	ldr	r2, [r1, #0]
 800f25a:	4614      	mov	r4, r2
 800f25c:	b99c      	cbnz	r4, 800f286 <_malloc_r+0x56>
 800f25e:	4f20      	ldr	r7, [pc, #128]	; (800f2e0 <_malloc_r+0xb0>)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	b923      	cbnz	r3, 800f26e <_malloc_r+0x3e>
 800f264:	4621      	mov	r1, r4
 800f266:	4630      	mov	r0, r6
 800f268:	f000 f83c 	bl	800f2e4 <_sbrk_r>
 800f26c:	6038      	str	r0, [r7, #0]
 800f26e:	4629      	mov	r1, r5
 800f270:	4630      	mov	r0, r6
 800f272:	f000 f837 	bl	800f2e4 <_sbrk_r>
 800f276:	1c43      	adds	r3, r0, #1
 800f278:	d123      	bne.n	800f2c2 <_malloc_r+0x92>
 800f27a:	230c      	movs	r3, #12
 800f27c:	4630      	mov	r0, r6
 800f27e:	6033      	str	r3, [r6, #0]
 800f280:	f000 f866 	bl	800f350 <__malloc_unlock>
 800f284:	e7e3      	b.n	800f24e <_malloc_r+0x1e>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	1b5b      	subs	r3, r3, r5
 800f28a:	d417      	bmi.n	800f2bc <_malloc_r+0x8c>
 800f28c:	2b0b      	cmp	r3, #11
 800f28e:	d903      	bls.n	800f298 <_malloc_r+0x68>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	441c      	add	r4, r3
 800f294:	6025      	str	r5, [r4, #0]
 800f296:	e004      	b.n	800f2a2 <_malloc_r+0x72>
 800f298:	6863      	ldr	r3, [r4, #4]
 800f29a:	42a2      	cmp	r2, r4
 800f29c:	bf0c      	ite	eq
 800f29e:	600b      	streq	r3, [r1, #0]
 800f2a0:	6053      	strne	r3, [r2, #4]
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f000 f854 	bl	800f350 <__malloc_unlock>
 800f2a8:	f104 000b 	add.w	r0, r4, #11
 800f2ac:	1d23      	adds	r3, r4, #4
 800f2ae:	f020 0007 	bic.w	r0, r0, #7
 800f2b2:	1ac2      	subs	r2, r0, r3
 800f2b4:	d0cc      	beq.n	800f250 <_malloc_r+0x20>
 800f2b6:	1a1b      	subs	r3, r3, r0
 800f2b8:	50a3      	str	r3, [r4, r2]
 800f2ba:	e7c9      	b.n	800f250 <_malloc_r+0x20>
 800f2bc:	4622      	mov	r2, r4
 800f2be:	6864      	ldr	r4, [r4, #4]
 800f2c0:	e7cc      	b.n	800f25c <_malloc_r+0x2c>
 800f2c2:	1cc4      	adds	r4, r0, #3
 800f2c4:	f024 0403 	bic.w	r4, r4, #3
 800f2c8:	42a0      	cmp	r0, r4
 800f2ca:	d0e3      	beq.n	800f294 <_malloc_r+0x64>
 800f2cc:	1a21      	subs	r1, r4, r0
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f000 f808 	bl	800f2e4 <_sbrk_r>
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d1dd      	bne.n	800f294 <_malloc_r+0x64>
 800f2d8:	e7cf      	b.n	800f27a <_malloc_r+0x4a>
 800f2da:	bf00      	nop
 800f2dc:	2000a4d4 	.word	0x2000a4d4
 800f2e0:	2000a4d8 	.word	0x2000a4d8

0800f2e4 <_sbrk_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	4d05      	ldr	r5, [pc, #20]	; (800f300 <_sbrk_r+0x1c>)
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	602b      	str	r3, [r5, #0]
 800f2f0:	f7f5 fb96 	bl	8004a20 <_sbrk>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d102      	bne.n	800f2fe <_sbrk_r+0x1a>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b103      	cbz	r3, 800f2fe <_sbrk_r+0x1a>
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	2000ee60 	.word	0x2000ee60

0800f304 <siprintf>:
 800f304:	b40e      	push	{r1, r2, r3}
 800f306:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f30a:	b500      	push	{lr}
 800f30c:	b09c      	sub	sp, #112	; 0x70
 800f30e:	ab1d      	add	r3, sp, #116	; 0x74
 800f310:	9002      	str	r0, [sp, #8]
 800f312:	9006      	str	r0, [sp, #24]
 800f314:	9107      	str	r1, [sp, #28]
 800f316:	9104      	str	r1, [sp, #16]
 800f318:	4808      	ldr	r0, [pc, #32]	; (800f33c <siprintf+0x38>)
 800f31a:	4909      	ldr	r1, [pc, #36]	; (800f340 <siprintf+0x3c>)
 800f31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f320:	9105      	str	r1, [sp, #20]
 800f322:	6800      	ldr	r0, [r0, #0]
 800f324:	a902      	add	r1, sp, #8
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	f000 f874 	bl	800f414 <_svfiprintf_r>
 800f32c:	2200      	movs	r2, #0
 800f32e:	9b02      	ldr	r3, [sp, #8]
 800f330:	701a      	strb	r2, [r3, #0]
 800f332:	b01c      	add	sp, #112	; 0x70
 800f334:	f85d eb04 	ldr.w	lr, [sp], #4
 800f338:	b003      	add	sp, #12
 800f33a:	4770      	bx	lr
 800f33c:	20000210 	.word	0x20000210
 800f340:	ffff0208 	.word	0xffff0208

0800f344 <__malloc_lock>:
 800f344:	4801      	ldr	r0, [pc, #4]	; (800f34c <__malloc_lock+0x8>)
 800f346:	f000 bafb 	b.w	800f940 <__retarget_lock_acquire_recursive>
 800f34a:	bf00      	nop
 800f34c:	2000ee68 	.word	0x2000ee68

0800f350 <__malloc_unlock>:
 800f350:	4801      	ldr	r0, [pc, #4]	; (800f358 <__malloc_unlock+0x8>)
 800f352:	f000 baf6 	b.w	800f942 <__retarget_lock_release_recursive>
 800f356:	bf00      	nop
 800f358:	2000ee68 	.word	0x2000ee68

0800f35c <__ssputs_r>:
 800f35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f360:	688e      	ldr	r6, [r1, #8]
 800f362:	4682      	mov	sl, r0
 800f364:	429e      	cmp	r6, r3
 800f366:	460c      	mov	r4, r1
 800f368:	4690      	mov	r8, r2
 800f36a:	461f      	mov	r7, r3
 800f36c:	d838      	bhi.n	800f3e0 <__ssputs_r+0x84>
 800f36e:	898a      	ldrh	r2, [r1, #12]
 800f370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f374:	d032      	beq.n	800f3dc <__ssputs_r+0x80>
 800f376:	6825      	ldr	r5, [r4, #0]
 800f378:	6909      	ldr	r1, [r1, #16]
 800f37a:	3301      	adds	r3, #1
 800f37c:	eba5 0901 	sub.w	r9, r5, r1
 800f380:	6965      	ldr	r5, [r4, #20]
 800f382:	444b      	add	r3, r9
 800f384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f38c:	106d      	asrs	r5, r5, #1
 800f38e:	429d      	cmp	r5, r3
 800f390:	bf38      	it	cc
 800f392:	461d      	movcc	r5, r3
 800f394:	0553      	lsls	r3, r2, #21
 800f396:	d531      	bpl.n	800f3fc <__ssputs_r+0xa0>
 800f398:	4629      	mov	r1, r5
 800f39a:	f7ff ff49 	bl	800f230 <_malloc_r>
 800f39e:	4606      	mov	r6, r0
 800f3a0:	b950      	cbnz	r0, 800f3b8 <__ssputs_r+0x5c>
 800f3a2:	230c      	movs	r3, #12
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	f8ca 3000 	str.w	r3, [sl]
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3b2:	81a3      	strh	r3, [r4, #12]
 800f3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b8:	464a      	mov	r2, r9
 800f3ba:	6921      	ldr	r1, [r4, #16]
 800f3bc:	f7ff fed6 	bl	800f16c <memcpy>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	6126      	str	r6, [r4, #16]
 800f3ce:	444e      	add	r6, r9
 800f3d0:	6026      	str	r6, [r4, #0]
 800f3d2:	463e      	mov	r6, r7
 800f3d4:	6165      	str	r5, [r4, #20]
 800f3d6:	eba5 0509 	sub.w	r5, r5, r9
 800f3da:	60a5      	str	r5, [r4, #8]
 800f3dc:	42be      	cmp	r6, r7
 800f3de:	d900      	bls.n	800f3e2 <__ssputs_r+0x86>
 800f3e0:	463e      	mov	r6, r7
 800f3e2:	4632      	mov	r2, r6
 800f3e4:	4641      	mov	r1, r8
 800f3e6:	6820      	ldr	r0, [r4, #0]
 800f3e8:	f000 faba 	bl	800f960 <memmove>
 800f3ec:	68a3      	ldr	r3, [r4, #8]
 800f3ee:	6822      	ldr	r2, [r4, #0]
 800f3f0:	1b9b      	subs	r3, r3, r6
 800f3f2:	4432      	add	r2, r6
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	60a3      	str	r3, [r4, #8]
 800f3f8:	6022      	str	r2, [r4, #0]
 800f3fa:	e7db      	b.n	800f3b4 <__ssputs_r+0x58>
 800f3fc:	462a      	mov	r2, r5
 800f3fe:	f000 fac9 	bl	800f994 <_realloc_r>
 800f402:	4606      	mov	r6, r0
 800f404:	2800      	cmp	r0, #0
 800f406:	d1e1      	bne.n	800f3cc <__ssputs_r+0x70>
 800f408:	4650      	mov	r0, sl
 800f40a:	6921      	ldr	r1, [r4, #16]
 800f40c:	f7ff fec4 	bl	800f198 <_free_r>
 800f410:	e7c7      	b.n	800f3a2 <__ssputs_r+0x46>
	...

0800f414 <_svfiprintf_r>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	4698      	mov	r8, r3
 800f41a:	898b      	ldrh	r3, [r1, #12]
 800f41c:	4607      	mov	r7, r0
 800f41e:	061b      	lsls	r3, r3, #24
 800f420:	460d      	mov	r5, r1
 800f422:	4614      	mov	r4, r2
 800f424:	b09d      	sub	sp, #116	; 0x74
 800f426:	d50e      	bpl.n	800f446 <_svfiprintf_r+0x32>
 800f428:	690b      	ldr	r3, [r1, #16]
 800f42a:	b963      	cbnz	r3, 800f446 <_svfiprintf_r+0x32>
 800f42c:	2140      	movs	r1, #64	; 0x40
 800f42e:	f7ff feff 	bl	800f230 <_malloc_r>
 800f432:	6028      	str	r0, [r5, #0]
 800f434:	6128      	str	r0, [r5, #16]
 800f436:	b920      	cbnz	r0, 800f442 <_svfiprintf_r+0x2e>
 800f438:	230c      	movs	r3, #12
 800f43a:	603b      	str	r3, [r7, #0]
 800f43c:	f04f 30ff 	mov.w	r0, #4294967295
 800f440:	e0d1      	b.n	800f5e6 <_svfiprintf_r+0x1d2>
 800f442:	2340      	movs	r3, #64	; 0x40
 800f444:	616b      	str	r3, [r5, #20]
 800f446:	2300      	movs	r3, #0
 800f448:	9309      	str	r3, [sp, #36]	; 0x24
 800f44a:	2320      	movs	r3, #32
 800f44c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f450:	2330      	movs	r3, #48	; 0x30
 800f452:	f04f 0901 	mov.w	r9, #1
 800f456:	f8cd 800c 	str.w	r8, [sp, #12]
 800f45a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f600 <_svfiprintf_r+0x1ec>
 800f45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f462:	4623      	mov	r3, r4
 800f464:	469a      	mov	sl, r3
 800f466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46a:	b10a      	cbz	r2, 800f470 <_svfiprintf_r+0x5c>
 800f46c:	2a25      	cmp	r2, #37	; 0x25
 800f46e:	d1f9      	bne.n	800f464 <_svfiprintf_r+0x50>
 800f470:	ebba 0b04 	subs.w	fp, sl, r4
 800f474:	d00b      	beq.n	800f48e <_svfiprintf_r+0x7a>
 800f476:	465b      	mov	r3, fp
 800f478:	4622      	mov	r2, r4
 800f47a:	4629      	mov	r1, r5
 800f47c:	4638      	mov	r0, r7
 800f47e:	f7ff ff6d 	bl	800f35c <__ssputs_r>
 800f482:	3001      	adds	r0, #1
 800f484:	f000 80aa 	beq.w	800f5dc <_svfiprintf_r+0x1c8>
 800f488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f48a:	445a      	add	r2, fp
 800f48c:	9209      	str	r2, [sp, #36]	; 0x24
 800f48e:	f89a 3000 	ldrb.w	r3, [sl]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 80a2 	beq.w	800f5dc <_svfiprintf_r+0x1c8>
 800f498:	2300      	movs	r3, #0
 800f49a:	f04f 32ff 	mov.w	r2, #4294967295
 800f49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4a2:	f10a 0a01 	add.w	sl, sl, #1
 800f4a6:	9304      	str	r3, [sp, #16]
 800f4a8:	9307      	str	r3, [sp, #28]
 800f4aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4ae:	931a      	str	r3, [sp, #104]	; 0x68
 800f4b0:	4654      	mov	r4, sl
 800f4b2:	2205      	movs	r2, #5
 800f4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b8:	4851      	ldr	r0, [pc, #324]	; (800f600 <_svfiprintf_r+0x1ec>)
 800f4ba:	f000 fa43 	bl	800f944 <memchr>
 800f4be:	9a04      	ldr	r2, [sp, #16]
 800f4c0:	b9d8      	cbnz	r0, 800f4fa <_svfiprintf_r+0xe6>
 800f4c2:	06d0      	lsls	r0, r2, #27
 800f4c4:	bf44      	itt	mi
 800f4c6:	2320      	movmi	r3, #32
 800f4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4cc:	0711      	lsls	r1, r2, #28
 800f4ce:	bf44      	itt	mi
 800f4d0:	232b      	movmi	r3, #43	; 0x2b
 800f4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f4da:	2b2a      	cmp	r3, #42	; 0x2a
 800f4dc:	d015      	beq.n	800f50a <_svfiprintf_r+0xf6>
 800f4de:	4654      	mov	r4, sl
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	f04f 0c0a 	mov.w	ip, #10
 800f4e6:	9a07      	ldr	r2, [sp, #28]
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4ee:	3b30      	subs	r3, #48	; 0x30
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	d94e      	bls.n	800f592 <_svfiprintf_r+0x17e>
 800f4f4:	b1b0      	cbz	r0, 800f524 <_svfiprintf_r+0x110>
 800f4f6:	9207      	str	r2, [sp, #28]
 800f4f8:	e014      	b.n	800f524 <_svfiprintf_r+0x110>
 800f4fa:	eba0 0308 	sub.w	r3, r0, r8
 800f4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800f502:	4313      	orrs	r3, r2
 800f504:	46a2      	mov	sl, r4
 800f506:	9304      	str	r3, [sp, #16]
 800f508:	e7d2      	b.n	800f4b0 <_svfiprintf_r+0x9c>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	1d19      	adds	r1, r3, #4
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	9103      	str	r1, [sp, #12]
 800f512:	2b00      	cmp	r3, #0
 800f514:	bfbb      	ittet	lt
 800f516:	425b      	neglt	r3, r3
 800f518:	f042 0202 	orrlt.w	r2, r2, #2
 800f51c:	9307      	strge	r3, [sp, #28]
 800f51e:	9307      	strlt	r3, [sp, #28]
 800f520:	bfb8      	it	lt
 800f522:	9204      	strlt	r2, [sp, #16]
 800f524:	7823      	ldrb	r3, [r4, #0]
 800f526:	2b2e      	cmp	r3, #46	; 0x2e
 800f528:	d10c      	bne.n	800f544 <_svfiprintf_r+0x130>
 800f52a:	7863      	ldrb	r3, [r4, #1]
 800f52c:	2b2a      	cmp	r3, #42	; 0x2a
 800f52e:	d135      	bne.n	800f59c <_svfiprintf_r+0x188>
 800f530:	9b03      	ldr	r3, [sp, #12]
 800f532:	3402      	adds	r4, #2
 800f534:	1d1a      	adds	r2, r3, #4
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	9203      	str	r2, [sp, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	bfb8      	it	lt
 800f53e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f542:	9305      	str	r3, [sp, #20]
 800f544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f610 <_svfiprintf_r+0x1fc>
 800f548:	2203      	movs	r2, #3
 800f54a:	4650      	mov	r0, sl
 800f54c:	7821      	ldrb	r1, [r4, #0]
 800f54e:	f000 f9f9 	bl	800f944 <memchr>
 800f552:	b140      	cbz	r0, 800f566 <_svfiprintf_r+0x152>
 800f554:	2340      	movs	r3, #64	; 0x40
 800f556:	eba0 000a 	sub.w	r0, r0, sl
 800f55a:	fa03 f000 	lsl.w	r0, r3, r0
 800f55e:	9b04      	ldr	r3, [sp, #16]
 800f560:	3401      	adds	r4, #1
 800f562:	4303      	orrs	r3, r0
 800f564:	9304      	str	r3, [sp, #16]
 800f566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56a:	2206      	movs	r2, #6
 800f56c:	4825      	ldr	r0, [pc, #148]	; (800f604 <_svfiprintf_r+0x1f0>)
 800f56e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f572:	f000 f9e7 	bl	800f944 <memchr>
 800f576:	2800      	cmp	r0, #0
 800f578:	d038      	beq.n	800f5ec <_svfiprintf_r+0x1d8>
 800f57a:	4b23      	ldr	r3, [pc, #140]	; (800f608 <_svfiprintf_r+0x1f4>)
 800f57c:	bb1b      	cbnz	r3, 800f5c6 <_svfiprintf_r+0x1b2>
 800f57e:	9b03      	ldr	r3, [sp, #12]
 800f580:	3307      	adds	r3, #7
 800f582:	f023 0307 	bic.w	r3, r3, #7
 800f586:	3308      	adds	r3, #8
 800f588:	9303      	str	r3, [sp, #12]
 800f58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58c:	4433      	add	r3, r6
 800f58e:	9309      	str	r3, [sp, #36]	; 0x24
 800f590:	e767      	b.n	800f462 <_svfiprintf_r+0x4e>
 800f592:	460c      	mov	r4, r1
 800f594:	2001      	movs	r0, #1
 800f596:	fb0c 3202 	mla	r2, ip, r2, r3
 800f59a:	e7a5      	b.n	800f4e8 <_svfiprintf_r+0xd4>
 800f59c:	2300      	movs	r3, #0
 800f59e:	f04f 0c0a 	mov.w	ip, #10
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	3401      	adds	r4, #1
 800f5a6:	9305      	str	r3, [sp, #20]
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5ae:	3a30      	subs	r2, #48	; 0x30
 800f5b0:	2a09      	cmp	r2, #9
 800f5b2:	d903      	bls.n	800f5bc <_svfiprintf_r+0x1a8>
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0c5      	beq.n	800f544 <_svfiprintf_r+0x130>
 800f5b8:	9105      	str	r1, [sp, #20]
 800f5ba:	e7c3      	b.n	800f544 <_svfiprintf_r+0x130>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	2301      	movs	r3, #1
 800f5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5c4:	e7f0      	b.n	800f5a8 <_svfiprintf_r+0x194>
 800f5c6:	ab03      	add	r3, sp, #12
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	462a      	mov	r2, r5
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <_svfiprintf_r+0x1f8>)
 800f5d0:	a904      	add	r1, sp, #16
 800f5d2:	f3af 8000 	nop.w
 800f5d6:	1c42      	adds	r2, r0, #1
 800f5d8:	4606      	mov	r6, r0
 800f5da:	d1d6      	bne.n	800f58a <_svfiprintf_r+0x176>
 800f5dc:	89ab      	ldrh	r3, [r5, #12]
 800f5de:	065b      	lsls	r3, r3, #25
 800f5e0:	f53f af2c 	bmi.w	800f43c <_svfiprintf_r+0x28>
 800f5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5e6:	b01d      	add	sp, #116	; 0x74
 800f5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ec:	ab03      	add	r3, sp, #12
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	462a      	mov	r2, r5
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <_svfiprintf_r+0x1f8>)
 800f5f6:	a904      	add	r1, sp, #16
 800f5f8:	f000 f87c 	bl	800f6f4 <_printf_i>
 800f5fc:	e7eb      	b.n	800f5d6 <_svfiprintf_r+0x1c2>
 800f5fe:	bf00      	nop
 800f600:	08025b94 	.word	0x08025b94
 800f604:	08025b9e 	.word	0x08025b9e
 800f608:	00000000 	.word	0x00000000
 800f60c:	0800f35d 	.word	0x0800f35d
 800f610:	08025b9a 	.word	0x08025b9a

0800f614 <_printf_common>:
 800f614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f618:	4616      	mov	r6, r2
 800f61a:	4699      	mov	r9, r3
 800f61c:	688a      	ldr	r2, [r1, #8]
 800f61e:	690b      	ldr	r3, [r1, #16]
 800f620:	4607      	mov	r7, r0
 800f622:	4293      	cmp	r3, r2
 800f624:	bfb8      	it	lt
 800f626:	4613      	movlt	r3, r2
 800f628:	6033      	str	r3, [r6, #0]
 800f62a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f62e:	460c      	mov	r4, r1
 800f630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f634:	b10a      	cbz	r2, 800f63a <_printf_common+0x26>
 800f636:	3301      	adds	r3, #1
 800f638:	6033      	str	r3, [r6, #0]
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	0699      	lsls	r1, r3, #26
 800f63e:	bf42      	ittt	mi
 800f640:	6833      	ldrmi	r3, [r6, #0]
 800f642:	3302      	addmi	r3, #2
 800f644:	6033      	strmi	r3, [r6, #0]
 800f646:	6825      	ldr	r5, [r4, #0]
 800f648:	f015 0506 	ands.w	r5, r5, #6
 800f64c:	d106      	bne.n	800f65c <_printf_common+0x48>
 800f64e:	f104 0a19 	add.w	sl, r4, #25
 800f652:	68e3      	ldr	r3, [r4, #12]
 800f654:	6832      	ldr	r2, [r6, #0]
 800f656:	1a9b      	subs	r3, r3, r2
 800f658:	42ab      	cmp	r3, r5
 800f65a:	dc28      	bgt.n	800f6ae <_printf_common+0x9a>
 800f65c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f660:	1e13      	subs	r3, r2, #0
 800f662:	6822      	ldr	r2, [r4, #0]
 800f664:	bf18      	it	ne
 800f666:	2301      	movne	r3, #1
 800f668:	0692      	lsls	r2, r2, #26
 800f66a:	d42d      	bmi.n	800f6c8 <_printf_common+0xb4>
 800f66c:	4649      	mov	r1, r9
 800f66e:	4638      	mov	r0, r7
 800f670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f674:	47c0      	blx	r8
 800f676:	3001      	adds	r0, #1
 800f678:	d020      	beq.n	800f6bc <_printf_common+0xa8>
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	68e5      	ldr	r5, [r4, #12]
 800f67e:	f003 0306 	and.w	r3, r3, #6
 800f682:	2b04      	cmp	r3, #4
 800f684:	bf18      	it	ne
 800f686:	2500      	movne	r5, #0
 800f688:	6832      	ldr	r2, [r6, #0]
 800f68a:	f04f 0600 	mov.w	r6, #0
 800f68e:	68a3      	ldr	r3, [r4, #8]
 800f690:	bf08      	it	eq
 800f692:	1aad      	subeq	r5, r5, r2
 800f694:	6922      	ldr	r2, [r4, #16]
 800f696:	bf08      	it	eq
 800f698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f69c:	4293      	cmp	r3, r2
 800f69e:	bfc4      	itt	gt
 800f6a0:	1a9b      	subgt	r3, r3, r2
 800f6a2:	18ed      	addgt	r5, r5, r3
 800f6a4:	341a      	adds	r4, #26
 800f6a6:	42b5      	cmp	r5, r6
 800f6a8:	d11a      	bne.n	800f6e0 <_printf_common+0xcc>
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	e008      	b.n	800f6c0 <_printf_common+0xac>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	47c0      	blx	r8
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	d103      	bne.n	800f6c4 <_printf_common+0xb0>
 800f6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6c4:	3501      	adds	r5, #1
 800f6c6:	e7c4      	b.n	800f652 <_printf_common+0x3e>
 800f6c8:	2030      	movs	r0, #48	; 0x30
 800f6ca:	18e1      	adds	r1, r4, r3
 800f6cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6d6:	4422      	add	r2, r4
 800f6d8:	3302      	adds	r3, #2
 800f6da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6de:	e7c5      	b.n	800f66c <_printf_common+0x58>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	4622      	mov	r2, r4
 800f6e4:	4649      	mov	r1, r9
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	47c0      	blx	r8
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	d0e6      	beq.n	800f6bc <_printf_common+0xa8>
 800f6ee:	3601      	adds	r6, #1
 800f6f0:	e7d9      	b.n	800f6a6 <_printf_common+0x92>
	...

0800f6f4 <_printf_i>:
 800f6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	7e27      	ldrb	r7, [r4, #24]
 800f6fc:	4691      	mov	r9, r2
 800f6fe:	2f78      	cmp	r7, #120	; 0x78
 800f700:	4680      	mov	r8, r0
 800f702:	469a      	mov	sl, r3
 800f704:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f70a:	d807      	bhi.n	800f71c <_printf_i+0x28>
 800f70c:	2f62      	cmp	r7, #98	; 0x62
 800f70e:	d80a      	bhi.n	800f726 <_printf_i+0x32>
 800f710:	2f00      	cmp	r7, #0
 800f712:	f000 80d9 	beq.w	800f8c8 <_printf_i+0x1d4>
 800f716:	2f58      	cmp	r7, #88	; 0x58
 800f718:	f000 80a4 	beq.w	800f864 <_printf_i+0x170>
 800f71c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f724:	e03a      	b.n	800f79c <_printf_i+0xa8>
 800f726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f72a:	2b15      	cmp	r3, #21
 800f72c:	d8f6      	bhi.n	800f71c <_printf_i+0x28>
 800f72e:	a001      	add	r0, pc, #4	; (adr r0, 800f734 <_printf_i+0x40>)
 800f730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f734:	0800f78d 	.word	0x0800f78d
 800f738:	0800f7a1 	.word	0x0800f7a1
 800f73c:	0800f71d 	.word	0x0800f71d
 800f740:	0800f71d 	.word	0x0800f71d
 800f744:	0800f71d 	.word	0x0800f71d
 800f748:	0800f71d 	.word	0x0800f71d
 800f74c:	0800f7a1 	.word	0x0800f7a1
 800f750:	0800f71d 	.word	0x0800f71d
 800f754:	0800f71d 	.word	0x0800f71d
 800f758:	0800f71d 	.word	0x0800f71d
 800f75c:	0800f71d 	.word	0x0800f71d
 800f760:	0800f8af 	.word	0x0800f8af
 800f764:	0800f7d1 	.word	0x0800f7d1
 800f768:	0800f891 	.word	0x0800f891
 800f76c:	0800f71d 	.word	0x0800f71d
 800f770:	0800f71d 	.word	0x0800f71d
 800f774:	0800f8d1 	.word	0x0800f8d1
 800f778:	0800f71d 	.word	0x0800f71d
 800f77c:	0800f7d1 	.word	0x0800f7d1
 800f780:	0800f71d 	.word	0x0800f71d
 800f784:	0800f71d 	.word	0x0800f71d
 800f788:	0800f899 	.word	0x0800f899
 800f78c:	680b      	ldr	r3, [r1, #0]
 800f78e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f792:	1d1a      	adds	r2, r3, #4
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	600a      	str	r2, [r1, #0]
 800f798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f79c:	2301      	movs	r3, #1
 800f79e:	e0a4      	b.n	800f8ea <_printf_i+0x1f6>
 800f7a0:	6825      	ldr	r5, [r4, #0]
 800f7a2:	6808      	ldr	r0, [r1, #0]
 800f7a4:	062e      	lsls	r6, r5, #24
 800f7a6:	f100 0304 	add.w	r3, r0, #4
 800f7aa:	d50a      	bpl.n	800f7c2 <_printf_i+0xce>
 800f7ac:	6805      	ldr	r5, [r0, #0]
 800f7ae:	600b      	str	r3, [r1, #0]
 800f7b0:	2d00      	cmp	r5, #0
 800f7b2:	da03      	bge.n	800f7bc <_printf_i+0xc8>
 800f7b4:	232d      	movs	r3, #45	; 0x2d
 800f7b6:	426d      	negs	r5, r5
 800f7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7bc:	230a      	movs	r3, #10
 800f7be:	485e      	ldr	r0, [pc, #376]	; (800f938 <_printf_i+0x244>)
 800f7c0:	e019      	b.n	800f7f6 <_printf_i+0x102>
 800f7c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f7c6:	6805      	ldr	r5, [r0, #0]
 800f7c8:	600b      	str	r3, [r1, #0]
 800f7ca:	bf18      	it	ne
 800f7cc:	b22d      	sxthne	r5, r5
 800f7ce:	e7ef      	b.n	800f7b0 <_printf_i+0xbc>
 800f7d0:	680b      	ldr	r3, [r1, #0]
 800f7d2:	6825      	ldr	r5, [r4, #0]
 800f7d4:	1d18      	adds	r0, r3, #4
 800f7d6:	6008      	str	r0, [r1, #0]
 800f7d8:	0628      	lsls	r0, r5, #24
 800f7da:	d501      	bpl.n	800f7e0 <_printf_i+0xec>
 800f7dc:	681d      	ldr	r5, [r3, #0]
 800f7de:	e002      	b.n	800f7e6 <_printf_i+0xf2>
 800f7e0:	0669      	lsls	r1, r5, #25
 800f7e2:	d5fb      	bpl.n	800f7dc <_printf_i+0xe8>
 800f7e4:	881d      	ldrh	r5, [r3, #0]
 800f7e6:	2f6f      	cmp	r7, #111	; 0x6f
 800f7e8:	bf0c      	ite	eq
 800f7ea:	2308      	moveq	r3, #8
 800f7ec:	230a      	movne	r3, #10
 800f7ee:	4852      	ldr	r0, [pc, #328]	; (800f938 <_printf_i+0x244>)
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7f6:	6866      	ldr	r6, [r4, #4]
 800f7f8:	2e00      	cmp	r6, #0
 800f7fa:	bfa8      	it	ge
 800f7fc:	6821      	ldrge	r1, [r4, #0]
 800f7fe:	60a6      	str	r6, [r4, #8]
 800f800:	bfa4      	itt	ge
 800f802:	f021 0104 	bicge.w	r1, r1, #4
 800f806:	6021      	strge	r1, [r4, #0]
 800f808:	b90d      	cbnz	r5, 800f80e <_printf_i+0x11a>
 800f80a:	2e00      	cmp	r6, #0
 800f80c:	d04d      	beq.n	800f8aa <_printf_i+0x1b6>
 800f80e:	4616      	mov	r6, r2
 800f810:	fbb5 f1f3 	udiv	r1, r5, r3
 800f814:	fb03 5711 	mls	r7, r3, r1, r5
 800f818:	5dc7      	ldrb	r7, [r0, r7]
 800f81a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f81e:	462f      	mov	r7, r5
 800f820:	42bb      	cmp	r3, r7
 800f822:	460d      	mov	r5, r1
 800f824:	d9f4      	bls.n	800f810 <_printf_i+0x11c>
 800f826:	2b08      	cmp	r3, #8
 800f828:	d10b      	bne.n	800f842 <_printf_i+0x14e>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	07df      	lsls	r7, r3, #31
 800f82e:	d508      	bpl.n	800f842 <_printf_i+0x14e>
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	6861      	ldr	r1, [r4, #4]
 800f834:	4299      	cmp	r1, r3
 800f836:	bfde      	ittt	le
 800f838:	2330      	movle	r3, #48	; 0x30
 800f83a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f83e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f842:	1b92      	subs	r2, r2, r6
 800f844:	6122      	str	r2, [r4, #16]
 800f846:	464b      	mov	r3, r9
 800f848:	4621      	mov	r1, r4
 800f84a:	4640      	mov	r0, r8
 800f84c:	f8cd a000 	str.w	sl, [sp]
 800f850:	aa03      	add	r2, sp, #12
 800f852:	f7ff fedf 	bl	800f614 <_printf_common>
 800f856:	3001      	adds	r0, #1
 800f858:	d14c      	bne.n	800f8f4 <_printf_i+0x200>
 800f85a:	f04f 30ff 	mov.w	r0, #4294967295
 800f85e:	b004      	add	sp, #16
 800f860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f864:	4834      	ldr	r0, [pc, #208]	; (800f938 <_printf_i+0x244>)
 800f866:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f86a:	680e      	ldr	r6, [r1, #0]
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f872:	061f      	lsls	r7, r3, #24
 800f874:	600e      	str	r6, [r1, #0]
 800f876:	d514      	bpl.n	800f8a2 <_printf_i+0x1ae>
 800f878:	07d9      	lsls	r1, r3, #31
 800f87a:	bf44      	itt	mi
 800f87c:	f043 0320 	orrmi.w	r3, r3, #32
 800f880:	6023      	strmi	r3, [r4, #0]
 800f882:	b91d      	cbnz	r5, 800f88c <_printf_i+0x198>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	f023 0320 	bic.w	r3, r3, #32
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	2310      	movs	r3, #16
 800f88e:	e7af      	b.n	800f7f0 <_printf_i+0xfc>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	f043 0320 	orr.w	r3, r3, #32
 800f896:	6023      	str	r3, [r4, #0]
 800f898:	2378      	movs	r3, #120	; 0x78
 800f89a:	4828      	ldr	r0, [pc, #160]	; (800f93c <_printf_i+0x248>)
 800f89c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8a0:	e7e3      	b.n	800f86a <_printf_i+0x176>
 800f8a2:	065e      	lsls	r6, r3, #25
 800f8a4:	bf48      	it	mi
 800f8a6:	b2ad      	uxthmi	r5, r5
 800f8a8:	e7e6      	b.n	800f878 <_printf_i+0x184>
 800f8aa:	4616      	mov	r6, r2
 800f8ac:	e7bb      	b.n	800f826 <_printf_i+0x132>
 800f8ae:	680b      	ldr	r3, [r1, #0]
 800f8b0:	6826      	ldr	r6, [r4, #0]
 800f8b2:	1d1d      	adds	r5, r3, #4
 800f8b4:	6960      	ldr	r0, [r4, #20]
 800f8b6:	600d      	str	r5, [r1, #0]
 800f8b8:	0635      	lsls	r5, r6, #24
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	d501      	bpl.n	800f8c2 <_printf_i+0x1ce>
 800f8be:	6018      	str	r0, [r3, #0]
 800f8c0:	e002      	b.n	800f8c8 <_printf_i+0x1d4>
 800f8c2:	0671      	lsls	r1, r6, #25
 800f8c4:	d5fb      	bpl.n	800f8be <_printf_i+0x1ca>
 800f8c6:	8018      	strh	r0, [r3, #0]
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4616      	mov	r6, r2
 800f8cc:	6123      	str	r3, [r4, #16]
 800f8ce:	e7ba      	b.n	800f846 <_printf_i+0x152>
 800f8d0:	680b      	ldr	r3, [r1, #0]
 800f8d2:	1d1a      	adds	r2, r3, #4
 800f8d4:	600a      	str	r2, [r1, #0]
 800f8d6:	681e      	ldr	r6, [r3, #0]
 800f8d8:	2100      	movs	r1, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	6862      	ldr	r2, [r4, #4]
 800f8de:	f000 f831 	bl	800f944 <memchr>
 800f8e2:	b108      	cbz	r0, 800f8e8 <_printf_i+0x1f4>
 800f8e4:	1b80      	subs	r0, r0, r6
 800f8e6:	6060      	str	r0, [r4, #4]
 800f8e8:	6863      	ldr	r3, [r4, #4]
 800f8ea:	6123      	str	r3, [r4, #16]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8f2:	e7a8      	b.n	800f846 <_printf_i+0x152>
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	4640      	mov	r0, r8
 800f8fa:	6923      	ldr	r3, [r4, #16]
 800f8fc:	47d0      	blx	sl
 800f8fe:	3001      	adds	r0, #1
 800f900:	d0ab      	beq.n	800f85a <_printf_i+0x166>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	079b      	lsls	r3, r3, #30
 800f906:	d413      	bmi.n	800f930 <_printf_i+0x23c>
 800f908:	68e0      	ldr	r0, [r4, #12]
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	4298      	cmp	r0, r3
 800f90e:	bfb8      	it	lt
 800f910:	4618      	movlt	r0, r3
 800f912:	e7a4      	b.n	800f85e <_printf_i+0x16a>
 800f914:	2301      	movs	r3, #1
 800f916:	4632      	mov	r2, r6
 800f918:	4649      	mov	r1, r9
 800f91a:	4640      	mov	r0, r8
 800f91c:	47d0      	blx	sl
 800f91e:	3001      	adds	r0, #1
 800f920:	d09b      	beq.n	800f85a <_printf_i+0x166>
 800f922:	3501      	adds	r5, #1
 800f924:	68e3      	ldr	r3, [r4, #12]
 800f926:	9903      	ldr	r1, [sp, #12]
 800f928:	1a5b      	subs	r3, r3, r1
 800f92a:	42ab      	cmp	r3, r5
 800f92c:	dcf2      	bgt.n	800f914 <_printf_i+0x220>
 800f92e:	e7eb      	b.n	800f908 <_printf_i+0x214>
 800f930:	2500      	movs	r5, #0
 800f932:	f104 0619 	add.w	r6, r4, #25
 800f936:	e7f5      	b.n	800f924 <_printf_i+0x230>
 800f938:	08025ba5 	.word	0x08025ba5
 800f93c:	08025bb6 	.word	0x08025bb6

0800f940 <__retarget_lock_acquire_recursive>:
 800f940:	4770      	bx	lr

0800f942 <__retarget_lock_release_recursive>:
 800f942:	4770      	bx	lr

0800f944 <memchr>:
 800f944:	4603      	mov	r3, r0
 800f946:	b510      	push	{r4, lr}
 800f948:	b2c9      	uxtb	r1, r1
 800f94a:	4402      	add	r2, r0
 800f94c:	4293      	cmp	r3, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	d101      	bne.n	800f956 <memchr+0x12>
 800f952:	2000      	movs	r0, #0
 800f954:	e003      	b.n	800f95e <memchr+0x1a>
 800f956:	7804      	ldrb	r4, [r0, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	428c      	cmp	r4, r1
 800f95c:	d1f6      	bne.n	800f94c <memchr+0x8>
 800f95e:	bd10      	pop	{r4, pc}

0800f960 <memmove>:
 800f960:	4288      	cmp	r0, r1
 800f962:	b510      	push	{r4, lr}
 800f964:	eb01 0402 	add.w	r4, r1, r2
 800f968:	d902      	bls.n	800f970 <memmove+0x10>
 800f96a:	4284      	cmp	r4, r0
 800f96c:	4623      	mov	r3, r4
 800f96e:	d807      	bhi.n	800f980 <memmove+0x20>
 800f970:	1e43      	subs	r3, r0, #1
 800f972:	42a1      	cmp	r1, r4
 800f974:	d008      	beq.n	800f988 <memmove+0x28>
 800f976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f97e:	e7f8      	b.n	800f972 <memmove+0x12>
 800f980:	4601      	mov	r1, r0
 800f982:	4402      	add	r2, r0
 800f984:	428a      	cmp	r2, r1
 800f986:	d100      	bne.n	800f98a <memmove+0x2a>
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f992:	e7f7      	b.n	800f984 <memmove+0x24>

0800f994 <_realloc_r>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	4607      	mov	r7, r0
 800f998:	4614      	mov	r4, r2
 800f99a:	460e      	mov	r6, r1
 800f99c:	b921      	cbnz	r1, 800f9a8 <_realloc_r+0x14>
 800f99e:	4611      	mov	r1, r2
 800f9a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9a4:	f7ff bc44 	b.w	800f230 <_malloc_r>
 800f9a8:	b922      	cbnz	r2, 800f9b4 <_realloc_r+0x20>
 800f9aa:	f7ff fbf5 	bl	800f198 <_free_r>
 800f9ae:	4625      	mov	r5, r4
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b4:	f000 f814 	bl	800f9e0 <_malloc_usable_size_r>
 800f9b8:	42a0      	cmp	r0, r4
 800f9ba:	d20f      	bcs.n	800f9dc <_realloc_r+0x48>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4638      	mov	r0, r7
 800f9c0:	f7ff fc36 	bl	800f230 <_malloc_r>
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d0f2      	beq.n	800f9b0 <_realloc_r+0x1c>
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	f7ff fbcd 	bl	800f16c <memcpy>
 800f9d2:	4631      	mov	r1, r6
 800f9d4:	4638      	mov	r0, r7
 800f9d6:	f7ff fbdf 	bl	800f198 <_free_r>
 800f9da:	e7e9      	b.n	800f9b0 <_realloc_r+0x1c>
 800f9dc:	4635      	mov	r5, r6
 800f9de:	e7e7      	b.n	800f9b0 <_realloc_r+0x1c>

0800f9e0 <_malloc_usable_size_r>:
 800f9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9e4:	1f18      	subs	r0, r3, #4
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	bfbc      	itt	lt
 800f9ea:	580b      	ldrlt	r3, [r1, r0]
 800f9ec:	18c0      	addlt	r0, r0, r3
 800f9ee:	4770      	bx	lr

0800f9f0 <trunc>:
 800f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f9f6:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800f9fa:	2a13      	cmp	r2, #19
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	460c      	mov	r4, r1
 800fa00:	dc10      	bgt.n	800fa24 <trunc+0x34>
 800fa02:	2a00      	cmp	r2, #0
 800fa04:	bfb3      	iteet	lt
 800fa06:	2000      	movlt	r0, #0
 800fa08:	2000      	movge	r0, #0
 800fa0a:	4b10      	ldrge	r3, [pc, #64]	; (800fa4c <trunc+0x5c>)
 800fa0c:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800fa10:	bfa4      	itt	ge
 800fa12:	fa43 f202 	asrge.w	r2, r3, r2
 800fa16:	ea24 0102 	bicge.w	r1, r4, r2
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	4618      	mov	r0, r3
 800fa20:	4621      	mov	r1, r4
 800fa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa24:	2a33      	cmp	r2, #51	; 0x33
 800fa26:	dd07      	ble.n	800fa38 <trunc+0x48>
 800fa28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fa2c:	d1f7      	bne.n	800fa1e <trunc+0x2e>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	f7f0 fc07 	bl	8000244 <__adddf3>
 800fa36:	e7f0      	b.n	800fa1a <trunc+0x2a>
 800fa38:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3c:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800fa40:	fa22 f505 	lsr.w	r5, r2, r5
 800fa44:	ea20 0005 	bic.w	r0, r0, r5
 800fa48:	e7e7      	b.n	800fa1a <trunc+0x2a>
 800fa4a:	bf00      	nop
 800fa4c:	000fffff 	.word	0x000fffff

0800fa50 <pow>:
 800fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa54:	461f      	mov	r7, r3
 800fa56:	4680      	mov	r8, r0
 800fa58:	4689      	mov	r9, r1
 800fa5a:	4616      	mov	r6, r2
 800fa5c:	f000 f8a4 	bl	800fba8 <__ieee754_pow>
 800fa60:	4b4d      	ldr	r3, [pc, #308]	; (800fb98 <pow+0x148>)
 800fa62:	4604      	mov	r4, r0
 800fa64:	f993 3000 	ldrsb.w	r3, [r3]
 800fa68:	460d      	mov	r5, r1
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	d015      	beq.n	800fa9a <pow+0x4a>
 800fa6e:	4632      	mov	r2, r6
 800fa70:	463b      	mov	r3, r7
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f7f1 f835 	bl	8000ae4 <__aeabi_dcmpun>
 800fa7a:	b970      	cbnz	r0, 800fa9a <pow+0x4a>
 800fa7c:	4642      	mov	r2, r8
 800fa7e:	464b      	mov	r3, r9
 800fa80:	4640      	mov	r0, r8
 800fa82:	4649      	mov	r1, r9
 800fa84:	f7f1 f82e 	bl	8000ae4 <__aeabi_dcmpun>
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	b148      	cbz	r0, 800faa2 <pow+0x52>
 800fa8e:	4630      	mov	r0, r6
 800fa90:	4639      	mov	r1, r7
 800fa92:	f7f0 fff5 	bl	8000a80 <__aeabi_dcmpeq>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d17b      	bne.n	800fb92 <pow+0x142>
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	4640      	mov	r0, r8
 800faa4:	4649      	mov	r1, r9
 800faa6:	f7f0 ffeb 	bl	8000a80 <__aeabi_dcmpeq>
 800faaa:	b1e0      	cbz	r0, 800fae6 <pow+0x96>
 800faac:	2200      	movs	r2, #0
 800faae:	2300      	movs	r3, #0
 800fab0:	4630      	mov	r0, r6
 800fab2:	4639      	mov	r1, r7
 800fab4:	f7f0 ffe4 	bl	8000a80 <__aeabi_dcmpeq>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d16a      	bne.n	800fb92 <pow+0x142>
 800fabc:	4630      	mov	r0, r6
 800fabe:	4639      	mov	r1, r7
 800fac0:	f000 fe37 	bl	8010732 <finite>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d0e8      	beq.n	800fa9a <pow+0x4a>
 800fac8:	2200      	movs	r2, #0
 800faca:	2300      	movs	r3, #0
 800facc:	4630      	mov	r0, r6
 800face:	4639      	mov	r1, r7
 800fad0:	f7f0 ffe0 	bl	8000a94 <__aeabi_dcmplt>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d0e0      	beq.n	800fa9a <pow+0x4a>
 800fad8:	f7ff fb0e 	bl	800f0f8 <__errno>
 800fadc:	2321      	movs	r3, #33	; 0x21
 800fade:	2400      	movs	r4, #0
 800fae0:	6003      	str	r3, [r0, #0]
 800fae2:	4d2e      	ldr	r5, [pc, #184]	; (800fb9c <pow+0x14c>)
 800fae4:	e7d9      	b.n	800fa9a <pow+0x4a>
 800fae6:	4620      	mov	r0, r4
 800fae8:	4629      	mov	r1, r5
 800faea:	f000 fe22 	bl	8010732 <finite>
 800faee:	bba8      	cbnz	r0, 800fb5c <pow+0x10c>
 800faf0:	4640      	mov	r0, r8
 800faf2:	4649      	mov	r1, r9
 800faf4:	f000 fe1d 	bl	8010732 <finite>
 800faf8:	b380      	cbz	r0, 800fb5c <pow+0x10c>
 800fafa:	4630      	mov	r0, r6
 800fafc:	4639      	mov	r1, r7
 800fafe:	f000 fe18 	bl	8010732 <finite>
 800fb02:	b358      	cbz	r0, 800fb5c <pow+0x10c>
 800fb04:	4622      	mov	r2, r4
 800fb06:	462b      	mov	r3, r5
 800fb08:	4620      	mov	r0, r4
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	f7f0 ffea 	bl	8000ae4 <__aeabi_dcmpun>
 800fb10:	b160      	cbz	r0, 800fb2c <pow+0xdc>
 800fb12:	f7ff faf1 	bl	800f0f8 <__errno>
 800fb16:	2321      	movs	r3, #33	; 0x21
 800fb18:	2200      	movs	r2, #0
 800fb1a:	6003      	str	r3, [r0, #0]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	4610      	mov	r0, r2
 800fb20:	4619      	mov	r1, r3
 800fb22:	f7f0 fe6f 	bl	8000804 <__aeabi_ddiv>
 800fb26:	4604      	mov	r4, r0
 800fb28:	460d      	mov	r5, r1
 800fb2a:	e7b6      	b.n	800fa9a <pow+0x4a>
 800fb2c:	f7ff fae4 	bl	800f0f8 <__errno>
 800fb30:	2322      	movs	r3, #34	; 0x22
 800fb32:	2200      	movs	r2, #0
 800fb34:	6003      	str	r3, [r0, #0]
 800fb36:	4649      	mov	r1, r9
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4640      	mov	r0, r8
 800fb3c:	f7f0 ffaa 	bl	8000a94 <__aeabi_dcmplt>
 800fb40:	2400      	movs	r4, #0
 800fb42:	b148      	cbz	r0, 800fb58 <pow+0x108>
 800fb44:	4630      	mov	r0, r6
 800fb46:	4639      	mov	r1, r7
 800fb48:	f000 fe00 	bl	801074c <rint>
 800fb4c:	4632      	mov	r2, r6
 800fb4e:	463b      	mov	r3, r7
 800fb50:	f7f0 ff96 	bl	8000a80 <__aeabi_dcmpeq>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	d0c4      	beq.n	800fae2 <pow+0x92>
 800fb58:	4d11      	ldr	r5, [pc, #68]	; (800fba0 <pow+0x150>)
 800fb5a:	e79e      	b.n	800fa9a <pow+0x4a>
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2300      	movs	r3, #0
 800fb60:	4620      	mov	r0, r4
 800fb62:	4629      	mov	r1, r5
 800fb64:	f7f0 ff8c 	bl	8000a80 <__aeabi_dcmpeq>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d096      	beq.n	800fa9a <pow+0x4a>
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	4649      	mov	r1, r9
 800fb70:	f000 fddf 	bl	8010732 <finite>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d090      	beq.n	800fa9a <pow+0x4a>
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	f000 fdd9 	bl	8010732 <finite>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d08a      	beq.n	800fa9a <pow+0x4a>
 800fb84:	f7ff fab8 	bl	800f0f8 <__errno>
 800fb88:	2322      	movs	r3, #34	; 0x22
 800fb8a:	2400      	movs	r4, #0
 800fb8c:	2500      	movs	r5, #0
 800fb8e:	6003      	str	r3, [r0, #0]
 800fb90:	e783      	b.n	800fa9a <pow+0x4a>
 800fb92:	2400      	movs	r4, #0
 800fb94:	4d03      	ldr	r5, [pc, #12]	; (800fba4 <pow+0x154>)
 800fb96:	e780      	b.n	800fa9a <pow+0x4a>
 800fb98:	20000274 	.word	0x20000274
 800fb9c:	fff00000 	.word	0xfff00000
 800fba0:	7ff00000 	.word	0x7ff00000
 800fba4:	3ff00000 	.word	0x3ff00000

0800fba8 <__ieee754_pow>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	b093      	sub	sp, #76	; 0x4c
 800fbae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbb2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800fbb6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800fbba:	ea55 0302 	orrs.w	r3, r5, r2
 800fbbe:	4607      	mov	r7, r0
 800fbc0:	4688      	mov	r8, r1
 800fbc2:	f000 84bf 	beq.w	8010544 <__ieee754_pow+0x99c>
 800fbc6:	4b7e      	ldr	r3, [pc, #504]	; (800fdc0 <__ieee754_pow+0x218>)
 800fbc8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800fbcc:	429c      	cmp	r4, r3
 800fbce:	4689      	mov	r9, r1
 800fbd0:	4682      	mov	sl, r0
 800fbd2:	dc09      	bgt.n	800fbe8 <__ieee754_pow+0x40>
 800fbd4:	d103      	bne.n	800fbde <__ieee754_pow+0x36>
 800fbd6:	b978      	cbnz	r0, 800fbf8 <__ieee754_pow+0x50>
 800fbd8:	42a5      	cmp	r5, r4
 800fbda:	dd02      	ble.n	800fbe2 <__ieee754_pow+0x3a>
 800fbdc:	e00c      	b.n	800fbf8 <__ieee754_pow+0x50>
 800fbde:	429d      	cmp	r5, r3
 800fbe0:	dc02      	bgt.n	800fbe8 <__ieee754_pow+0x40>
 800fbe2:	429d      	cmp	r5, r3
 800fbe4:	d10e      	bne.n	800fc04 <__ieee754_pow+0x5c>
 800fbe6:	b16a      	cbz	r2, 800fc04 <__ieee754_pow+0x5c>
 800fbe8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fbec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fbf0:	ea54 030a 	orrs.w	r3, r4, sl
 800fbf4:	f000 84a6 	beq.w	8010544 <__ieee754_pow+0x99c>
 800fbf8:	4872      	ldr	r0, [pc, #456]	; (800fdc4 <__ieee754_pow+0x21c>)
 800fbfa:	b013      	add	sp, #76	; 0x4c
 800fbfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc00:	f000 bd9e 	b.w	8010740 <nan>
 800fc04:	f1b9 0f00 	cmp.w	r9, #0
 800fc08:	da39      	bge.n	800fc7e <__ieee754_pow+0xd6>
 800fc0a:	4b6f      	ldr	r3, [pc, #444]	; (800fdc8 <__ieee754_pow+0x220>)
 800fc0c:	429d      	cmp	r5, r3
 800fc0e:	dc54      	bgt.n	800fcba <__ieee754_pow+0x112>
 800fc10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fc14:	429d      	cmp	r5, r3
 800fc16:	f340 84a6 	ble.w	8010566 <__ieee754_pow+0x9be>
 800fc1a:	152b      	asrs	r3, r5, #20
 800fc1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc20:	2b14      	cmp	r3, #20
 800fc22:	dd0f      	ble.n	800fc44 <__ieee754_pow+0x9c>
 800fc24:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fc28:	fa22 f103 	lsr.w	r1, r2, r3
 800fc2c:	fa01 f303 	lsl.w	r3, r1, r3
 800fc30:	4293      	cmp	r3, r2
 800fc32:	f040 8498 	bne.w	8010566 <__ieee754_pow+0x9be>
 800fc36:	f001 0101 	and.w	r1, r1, #1
 800fc3a:	f1c1 0302 	rsb	r3, r1, #2
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	b182      	cbz	r2, 800fc64 <__ieee754_pow+0xbc>
 800fc42:	e05e      	b.n	800fd02 <__ieee754_pow+0x15a>
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	d15a      	bne.n	800fcfe <__ieee754_pow+0x156>
 800fc48:	f1c3 0314 	rsb	r3, r3, #20
 800fc4c:	fa45 f103 	asr.w	r1, r5, r3
 800fc50:	fa01 f303 	lsl.w	r3, r1, r3
 800fc54:	42ab      	cmp	r3, r5
 800fc56:	f040 8483 	bne.w	8010560 <__ieee754_pow+0x9b8>
 800fc5a:	f001 0101 	and.w	r1, r1, #1
 800fc5e:	f1c1 0302 	rsb	r3, r1, #2
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	4b59      	ldr	r3, [pc, #356]	; (800fdcc <__ieee754_pow+0x224>)
 800fc66:	429d      	cmp	r5, r3
 800fc68:	d130      	bne.n	800fccc <__ieee754_pow+0x124>
 800fc6a:	2e00      	cmp	r6, #0
 800fc6c:	f280 8474 	bge.w	8010558 <__ieee754_pow+0x9b0>
 800fc70:	463a      	mov	r2, r7
 800fc72:	4643      	mov	r3, r8
 800fc74:	2000      	movs	r0, #0
 800fc76:	4955      	ldr	r1, [pc, #340]	; (800fdcc <__ieee754_pow+0x224>)
 800fc78:	f7f0 fdc4 	bl	8000804 <__aeabi_ddiv>
 800fc7c:	e02f      	b.n	800fcde <__ieee754_pow+0x136>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	2a00      	cmp	r2, #0
 800fc84:	d13d      	bne.n	800fd02 <__ieee754_pow+0x15a>
 800fc86:	4b4e      	ldr	r3, [pc, #312]	; (800fdc0 <__ieee754_pow+0x218>)
 800fc88:	429d      	cmp	r5, r3
 800fc8a:	d1eb      	bne.n	800fc64 <__ieee754_pow+0xbc>
 800fc8c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fc90:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fc94:	ea53 030a 	orrs.w	r3, r3, sl
 800fc98:	f000 8454 	beq.w	8010544 <__ieee754_pow+0x99c>
 800fc9c:	4b4c      	ldr	r3, [pc, #304]	; (800fdd0 <__ieee754_pow+0x228>)
 800fc9e:	429c      	cmp	r4, r3
 800fca0:	dd0d      	ble.n	800fcbe <__ieee754_pow+0x116>
 800fca2:	2e00      	cmp	r6, #0
 800fca4:	f280 8454 	bge.w	8010550 <__ieee754_pow+0x9a8>
 800fca8:	f04f 0b00 	mov.w	fp, #0
 800fcac:	f04f 0c00 	mov.w	ip, #0
 800fcb0:	4658      	mov	r0, fp
 800fcb2:	4661      	mov	r1, ip
 800fcb4:	b013      	add	sp, #76	; 0x4c
 800fcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcba:	2302      	movs	r3, #2
 800fcbc:	e7e0      	b.n	800fc80 <__ieee754_pow+0xd8>
 800fcbe:	2e00      	cmp	r6, #0
 800fcc0:	daf2      	bge.n	800fca8 <__ieee754_pow+0x100>
 800fcc2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800fcc6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800fcca:	e7f1      	b.n	800fcb0 <__ieee754_pow+0x108>
 800fccc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800fcd0:	d108      	bne.n	800fce4 <__ieee754_pow+0x13c>
 800fcd2:	463a      	mov	r2, r7
 800fcd4:	4643      	mov	r3, r8
 800fcd6:	4638      	mov	r0, r7
 800fcd8:	4641      	mov	r1, r8
 800fcda:	f7f0 fc69 	bl	80005b0 <__aeabi_dmul>
 800fcde:	4683      	mov	fp, r0
 800fce0:	468c      	mov	ip, r1
 800fce2:	e7e5      	b.n	800fcb0 <__ieee754_pow+0x108>
 800fce4:	4b3b      	ldr	r3, [pc, #236]	; (800fdd4 <__ieee754_pow+0x22c>)
 800fce6:	429e      	cmp	r6, r3
 800fce8:	d10b      	bne.n	800fd02 <__ieee754_pow+0x15a>
 800fcea:	f1b9 0f00 	cmp.w	r9, #0
 800fcee:	db08      	blt.n	800fd02 <__ieee754_pow+0x15a>
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	4641      	mov	r1, r8
 800fcf4:	b013      	add	sp, #76	; 0x4c
 800fcf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfa:	f000 bc6b 	b.w	80105d4 <__ieee754_sqrt>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4638      	mov	r0, r7
 800fd04:	4641      	mov	r1, r8
 800fd06:	f000 fd11 	bl	801072c <fabs>
 800fd0a:	4683      	mov	fp, r0
 800fd0c:	468c      	mov	ip, r1
 800fd0e:	f1ba 0f00 	cmp.w	sl, #0
 800fd12:	d129      	bne.n	800fd68 <__ieee754_pow+0x1c0>
 800fd14:	b124      	cbz	r4, 800fd20 <__ieee754_pow+0x178>
 800fd16:	4b2d      	ldr	r3, [pc, #180]	; (800fdcc <__ieee754_pow+0x224>)
 800fd18:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d123      	bne.n	800fd68 <__ieee754_pow+0x1c0>
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	da07      	bge.n	800fd34 <__ieee754_pow+0x18c>
 800fd24:	465a      	mov	r2, fp
 800fd26:	4663      	mov	r3, ip
 800fd28:	2000      	movs	r0, #0
 800fd2a:	4928      	ldr	r1, [pc, #160]	; (800fdcc <__ieee754_pow+0x224>)
 800fd2c:	f7f0 fd6a 	bl	8000804 <__aeabi_ddiv>
 800fd30:	4683      	mov	fp, r0
 800fd32:	468c      	mov	ip, r1
 800fd34:	f1b9 0f00 	cmp.w	r9, #0
 800fd38:	daba      	bge.n	800fcb0 <__ieee754_pow+0x108>
 800fd3a:	9b00      	ldr	r3, [sp, #0]
 800fd3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fd40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fd44:	4323      	orrs	r3, r4
 800fd46:	d108      	bne.n	800fd5a <__ieee754_pow+0x1b2>
 800fd48:	465a      	mov	r2, fp
 800fd4a:	4663      	mov	r3, ip
 800fd4c:	4658      	mov	r0, fp
 800fd4e:	4661      	mov	r1, ip
 800fd50:	f7f0 fa76 	bl	8000240 <__aeabi_dsub>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	e78e      	b.n	800fc78 <__ieee754_pow+0xd0>
 800fd5a:	9b00      	ldr	r3, [sp, #0]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d1a7      	bne.n	800fcb0 <__ieee754_pow+0x108>
 800fd60:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800fd64:	469c      	mov	ip, r3
 800fd66:	e7a3      	b.n	800fcb0 <__ieee754_pow+0x108>
 800fd68:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd72:	9b00      	ldr	r3, [sp, #0]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	d104      	bne.n	800fd82 <__ieee754_pow+0x1da>
 800fd78:	463a      	mov	r2, r7
 800fd7a:	4643      	mov	r3, r8
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	4641      	mov	r1, r8
 800fd80:	e7e6      	b.n	800fd50 <__ieee754_pow+0x1a8>
 800fd82:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <__ieee754_pow+0x230>)
 800fd84:	429d      	cmp	r5, r3
 800fd86:	f340 80f9 	ble.w	800ff7c <__ieee754_pow+0x3d4>
 800fd8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fd8e:	429d      	cmp	r5, r3
 800fd90:	4b0f      	ldr	r3, [pc, #60]	; (800fdd0 <__ieee754_pow+0x228>)
 800fd92:	dd09      	ble.n	800fda8 <__ieee754_pow+0x200>
 800fd94:	429c      	cmp	r4, r3
 800fd96:	dc0c      	bgt.n	800fdb2 <__ieee754_pow+0x20a>
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	da85      	bge.n	800fca8 <__ieee754_pow+0x100>
 800fd9c:	a306      	add	r3, pc, #24	; (adr r3, 800fdb8 <__ieee754_pow+0x210>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	4610      	mov	r0, r2
 800fda4:	4619      	mov	r1, r3
 800fda6:	e798      	b.n	800fcda <__ieee754_pow+0x132>
 800fda8:	429c      	cmp	r4, r3
 800fdaa:	dbf5      	blt.n	800fd98 <__ieee754_pow+0x1f0>
 800fdac:	4b07      	ldr	r3, [pc, #28]	; (800fdcc <__ieee754_pow+0x224>)
 800fdae:	429c      	cmp	r4, r3
 800fdb0:	dd14      	ble.n	800fddc <__ieee754_pow+0x234>
 800fdb2:	2e00      	cmp	r6, #0
 800fdb4:	dcf2      	bgt.n	800fd9c <__ieee754_pow+0x1f4>
 800fdb6:	e777      	b.n	800fca8 <__ieee754_pow+0x100>
 800fdb8:	8800759c 	.word	0x8800759c
 800fdbc:	7e37e43c 	.word	0x7e37e43c
 800fdc0:	7ff00000 	.word	0x7ff00000
 800fdc4:	08025b99 	.word	0x08025b99
 800fdc8:	433fffff 	.word	0x433fffff
 800fdcc:	3ff00000 	.word	0x3ff00000
 800fdd0:	3fefffff 	.word	0x3fefffff
 800fdd4:	3fe00000 	.word	0x3fe00000
 800fdd8:	41e00000 	.word	0x41e00000
 800fddc:	4661      	mov	r1, ip
 800fdde:	2200      	movs	r2, #0
 800fde0:	4658      	mov	r0, fp
 800fde2:	4b61      	ldr	r3, [pc, #388]	; (800ff68 <__ieee754_pow+0x3c0>)
 800fde4:	f7f0 fa2c 	bl	8000240 <__aeabi_dsub>
 800fde8:	a355      	add	r3, pc, #340	; (adr r3, 800ff40 <__ieee754_pow+0x398>)
 800fdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdee:	4604      	mov	r4, r0
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	f7f0 fbdd 	bl	80005b0 <__aeabi_dmul>
 800fdf6:	a354      	add	r3, pc, #336	; (adr r3, 800ff48 <__ieee754_pow+0x3a0>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	460f      	mov	r7, r1
 800fe00:	4620      	mov	r0, r4
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7f0 fbd4 	bl	80005b0 <__aeabi_dmul>
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4682      	mov	sl, r0
 800fe0c:	468b      	mov	fp, r1
 800fe0e:	4620      	mov	r0, r4
 800fe10:	4629      	mov	r1, r5
 800fe12:	4b56      	ldr	r3, [pc, #344]	; (800ff6c <__ieee754_pow+0x3c4>)
 800fe14:	f7f0 fbcc 	bl	80005b0 <__aeabi_dmul>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	a14c      	add	r1, pc, #304	; (adr r1, 800ff50 <__ieee754_pow+0x3a8>)
 800fe1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe22:	f7f0 fa0d 	bl	8000240 <__aeabi_dsub>
 800fe26:	4622      	mov	r2, r4
 800fe28:	462b      	mov	r3, r5
 800fe2a:	f7f0 fbc1 	bl	80005b0 <__aeabi_dmul>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	460b      	mov	r3, r1
 800fe32:	2000      	movs	r0, #0
 800fe34:	494e      	ldr	r1, [pc, #312]	; (800ff70 <__ieee754_pow+0x3c8>)
 800fe36:	f7f0 fa03 	bl	8000240 <__aeabi_dsub>
 800fe3a:	4622      	mov	r2, r4
 800fe3c:	462b      	mov	r3, r5
 800fe3e:	4680      	mov	r8, r0
 800fe40:	4689      	mov	r9, r1
 800fe42:	4620      	mov	r0, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7f0 fbb3 	bl	80005b0 <__aeabi_dmul>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	4640      	mov	r0, r8
 800fe50:	4649      	mov	r1, r9
 800fe52:	f7f0 fbad 	bl	80005b0 <__aeabi_dmul>
 800fe56:	a340      	add	r3, pc, #256	; (adr r3, 800ff58 <__ieee754_pow+0x3b0>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fba8 	bl	80005b0 <__aeabi_dmul>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	4650      	mov	r0, sl
 800fe66:	4659      	mov	r1, fp
 800fe68:	f7f0 f9ea 	bl	8000240 <__aeabi_dsub>
 800fe6c:	f04f 0a00 	mov.w	sl, #0
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	4604      	mov	r4, r0
 800fe76:	460d      	mov	r5, r1
 800fe78:	4630      	mov	r0, r6
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f7f0 f9e2 	bl	8000244 <__adddf3>
 800fe80:	4632      	mov	r2, r6
 800fe82:	463b      	mov	r3, r7
 800fe84:	4650      	mov	r0, sl
 800fe86:	468b      	mov	fp, r1
 800fe88:	f7f0 f9da 	bl	8000240 <__aeabi_dsub>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4620      	mov	r0, r4
 800fe92:	4629      	mov	r1, r5
 800fe94:	f7f0 f9d4 	bl	8000240 <__aeabi_dsub>
 800fe98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fe9c:	9b00      	ldr	r3, [sp, #0]
 800fe9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fea0:	3b01      	subs	r3, #1
 800fea2:	4313      	orrs	r3, r2
 800fea4:	f04f 0600 	mov.w	r6, #0
 800fea8:	f04f 0200 	mov.w	r2, #0
 800feac:	bf0c      	ite	eq
 800feae:	4b31      	ldreq	r3, [pc, #196]	; (800ff74 <__ieee754_pow+0x3cc>)
 800feb0:	4b2d      	ldrne	r3, [pc, #180]	; (800ff68 <__ieee754_pow+0x3c0>)
 800feb2:	4604      	mov	r4, r0
 800feb4:	460d      	mov	r5, r1
 800feb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feba:	e9cd 2300 	strd	r2, r3, [sp]
 800febe:	4632      	mov	r2, r6
 800fec0:	463b      	mov	r3, r7
 800fec2:	f7f0 f9bd 	bl	8000240 <__aeabi_dsub>
 800fec6:	4652      	mov	r2, sl
 800fec8:	465b      	mov	r3, fp
 800feca:	f7f0 fb71 	bl	80005b0 <__aeabi_dmul>
 800fece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fed2:	4680      	mov	r8, r0
 800fed4:	4689      	mov	r9, r1
 800fed6:	4620      	mov	r0, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	f7f0 fb69 	bl	80005b0 <__aeabi_dmul>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	4640      	mov	r0, r8
 800fee4:	4649      	mov	r1, r9
 800fee6:	f7f0 f9ad 	bl	8000244 <__adddf3>
 800feea:	4632      	mov	r2, r6
 800feec:	463b      	mov	r3, r7
 800feee:	4680      	mov	r8, r0
 800fef0:	4689      	mov	r9, r1
 800fef2:	4650      	mov	r0, sl
 800fef4:	4659      	mov	r1, fp
 800fef6:	f7f0 fb5b 	bl	80005b0 <__aeabi_dmul>
 800fefa:	4604      	mov	r4, r0
 800fefc:	460d      	mov	r5, r1
 800fefe:	460b      	mov	r3, r1
 800ff00:	4602      	mov	r2, r0
 800ff02:	4649      	mov	r1, r9
 800ff04:	4640      	mov	r0, r8
 800ff06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ff0a:	f7f0 f99b 	bl	8000244 <__adddf3>
 800ff0e:	4b1a      	ldr	r3, [pc, #104]	; (800ff78 <__ieee754_pow+0x3d0>)
 800ff10:	4682      	mov	sl, r0
 800ff12:	4299      	cmp	r1, r3
 800ff14:	460f      	mov	r7, r1
 800ff16:	460e      	mov	r6, r1
 800ff18:	f340 82ed 	ble.w	80104f6 <__ieee754_pow+0x94e>
 800ff1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ff20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ff24:	4303      	orrs	r3, r0
 800ff26:	f000 81e7 	beq.w	80102f8 <__ieee754_pow+0x750>
 800ff2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ff60 <__ieee754_pow+0x3b8>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff34:	f7f0 fb3c 	bl	80005b0 <__aeabi_dmul>
 800ff38:	a309      	add	r3, pc, #36	; (adr r3, 800ff60 <__ieee754_pow+0x3b8>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	e6cc      	b.n	800fcda <__ieee754_pow+0x132>
 800ff40:	60000000 	.word	0x60000000
 800ff44:	3ff71547 	.word	0x3ff71547
 800ff48:	f85ddf44 	.word	0xf85ddf44
 800ff4c:	3e54ae0b 	.word	0x3e54ae0b
 800ff50:	55555555 	.word	0x55555555
 800ff54:	3fd55555 	.word	0x3fd55555
 800ff58:	652b82fe 	.word	0x652b82fe
 800ff5c:	3ff71547 	.word	0x3ff71547
 800ff60:	8800759c 	.word	0x8800759c
 800ff64:	7e37e43c 	.word	0x7e37e43c
 800ff68:	3ff00000 	.word	0x3ff00000
 800ff6c:	3fd00000 	.word	0x3fd00000
 800ff70:	3fe00000 	.word	0x3fe00000
 800ff74:	bff00000 	.word	0xbff00000
 800ff78:	408fffff 	.word	0x408fffff
 800ff7c:	4bd4      	ldr	r3, [pc, #848]	; (80102d0 <__ieee754_pow+0x728>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	ea09 0303 	and.w	r3, r9, r3
 800ff84:	b943      	cbnz	r3, 800ff98 <__ieee754_pow+0x3f0>
 800ff86:	4658      	mov	r0, fp
 800ff88:	4661      	mov	r1, ip
 800ff8a:	4bd2      	ldr	r3, [pc, #840]	; (80102d4 <__ieee754_pow+0x72c>)
 800ff8c:	f7f0 fb10 	bl	80005b0 <__aeabi_dmul>
 800ff90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ff94:	4683      	mov	fp, r0
 800ff96:	460c      	mov	r4, r1
 800ff98:	1523      	asrs	r3, r4, #20
 800ff9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ff9e:	4413      	add	r3, r2
 800ffa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffa2:	4bcd      	ldr	r3, [pc, #820]	; (80102d8 <__ieee754_pow+0x730>)
 800ffa4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ffa8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ffac:	429c      	cmp	r4, r3
 800ffae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ffb2:	dd08      	ble.n	800ffc6 <__ieee754_pow+0x41e>
 800ffb4:	4bc9      	ldr	r3, [pc, #804]	; (80102dc <__ieee754_pow+0x734>)
 800ffb6:	429c      	cmp	r4, r3
 800ffb8:	f340 819c 	ble.w	80102f4 <__ieee754_pow+0x74c>
 800ffbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffc6:	2600      	movs	r6, #0
 800ffc8:	00f3      	lsls	r3, r6, #3
 800ffca:	930d      	str	r3, [sp, #52]	; 0x34
 800ffcc:	4bc4      	ldr	r3, [pc, #784]	; (80102e0 <__ieee754_pow+0x738>)
 800ffce:	4658      	mov	r0, fp
 800ffd0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ffd8:	4629      	mov	r1, r5
 800ffda:	461a      	mov	r2, r3
 800ffdc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ffe0:	4623      	mov	r3, r4
 800ffe2:	f7f0 f92d 	bl	8000240 <__aeabi_dsub>
 800ffe6:	46da      	mov	sl, fp
 800ffe8:	462b      	mov	r3, r5
 800ffea:	4652      	mov	r2, sl
 800ffec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fff0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fff4:	f7f0 f926 	bl	8000244 <__adddf3>
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	2000      	movs	r0, #0
 800fffe:	49b9      	ldr	r1, [pc, #740]	; (80102e4 <__ieee754_pow+0x73c>)
 8010000:	f7f0 fc00 	bl	8000804 <__aeabi_ddiv>
 8010004:	4602      	mov	r2, r0
 8010006:	460b      	mov	r3, r1
 8010008:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801000c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010010:	f7f0 face 	bl	80005b0 <__aeabi_dmul>
 8010014:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010018:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801001c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010020:	2300      	movs	r3, #0
 8010022:	2200      	movs	r2, #0
 8010024:	46ab      	mov	fp, r5
 8010026:	106d      	asrs	r5, r5, #1
 8010028:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801002c:	9304      	str	r3, [sp, #16]
 801002e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010032:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010036:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801003a:	4640      	mov	r0, r8
 801003c:	4649      	mov	r1, r9
 801003e:	4614      	mov	r4, r2
 8010040:	461d      	mov	r5, r3
 8010042:	f7f0 fab5 	bl	80005b0 <__aeabi_dmul>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801004e:	f7f0 f8f7 	bl	8000240 <__aeabi_dsub>
 8010052:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010056:	4606      	mov	r6, r0
 8010058:	460f      	mov	r7, r1
 801005a:	4620      	mov	r0, r4
 801005c:	4629      	mov	r1, r5
 801005e:	f7f0 f8ef 	bl	8000240 <__aeabi_dsub>
 8010062:	4602      	mov	r2, r0
 8010064:	460b      	mov	r3, r1
 8010066:	4650      	mov	r0, sl
 8010068:	4659      	mov	r1, fp
 801006a:	f7f0 f8e9 	bl	8000240 <__aeabi_dsub>
 801006e:	4642      	mov	r2, r8
 8010070:	464b      	mov	r3, r9
 8010072:	f7f0 fa9d 	bl	80005b0 <__aeabi_dmul>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4630      	mov	r0, r6
 801007c:	4639      	mov	r1, r7
 801007e:	f7f0 f8df 	bl	8000240 <__aeabi_dsub>
 8010082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010086:	f7f0 fa93 	bl	80005b0 <__aeabi_dmul>
 801008a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801008e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010092:	4610      	mov	r0, r2
 8010094:	4619      	mov	r1, r3
 8010096:	f7f0 fa8b 	bl	80005b0 <__aeabi_dmul>
 801009a:	a37b      	add	r3, pc, #492	; (adr r3, 8010288 <__ieee754_pow+0x6e0>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	4604      	mov	r4, r0
 80100a2:	460d      	mov	r5, r1
 80100a4:	f7f0 fa84 	bl	80005b0 <__aeabi_dmul>
 80100a8:	a379      	add	r3, pc, #484	; (adr r3, 8010290 <__ieee754_pow+0x6e8>)
 80100aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ae:	f7f0 f8c9 	bl	8000244 <__adddf3>
 80100b2:	4622      	mov	r2, r4
 80100b4:	462b      	mov	r3, r5
 80100b6:	f7f0 fa7b 	bl	80005b0 <__aeabi_dmul>
 80100ba:	a377      	add	r3, pc, #476	; (adr r3, 8010298 <__ieee754_pow+0x6f0>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 f8c0 	bl	8000244 <__adddf3>
 80100c4:	4622      	mov	r2, r4
 80100c6:	462b      	mov	r3, r5
 80100c8:	f7f0 fa72 	bl	80005b0 <__aeabi_dmul>
 80100cc:	a374      	add	r3, pc, #464	; (adr r3, 80102a0 <__ieee754_pow+0x6f8>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	f7f0 f8b7 	bl	8000244 <__adddf3>
 80100d6:	4622      	mov	r2, r4
 80100d8:	462b      	mov	r3, r5
 80100da:	f7f0 fa69 	bl	80005b0 <__aeabi_dmul>
 80100de:	a372      	add	r3, pc, #456	; (adr r3, 80102a8 <__ieee754_pow+0x700>)
 80100e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e4:	f7f0 f8ae 	bl	8000244 <__adddf3>
 80100e8:	4622      	mov	r2, r4
 80100ea:	462b      	mov	r3, r5
 80100ec:	f7f0 fa60 	bl	80005b0 <__aeabi_dmul>
 80100f0:	a36f      	add	r3, pc, #444	; (adr r3, 80102b0 <__ieee754_pow+0x708>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 f8a5 	bl	8000244 <__adddf3>
 80100fa:	4622      	mov	r2, r4
 80100fc:	4606      	mov	r6, r0
 80100fe:	460f      	mov	r7, r1
 8010100:	462b      	mov	r3, r5
 8010102:	4620      	mov	r0, r4
 8010104:	4629      	mov	r1, r5
 8010106:	f7f0 fa53 	bl	80005b0 <__aeabi_dmul>
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	4630      	mov	r0, r6
 8010110:	4639      	mov	r1, r7
 8010112:	f7f0 fa4d 	bl	80005b0 <__aeabi_dmul>
 8010116:	4604      	mov	r4, r0
 8010118:	460d      	mov	r5, r1
 801011a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801011e:	4642      	mov	r2, r8
 8010120:	464b      	mov	r3, r9
 8010122:	f7f0 f88f 	bl	8000244 <__adddf3>
 8010126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801012a:	f7f0 fa41 	bl	80005b0 <__aeabi_dmul>
 801012e:	4622      	mov	r2, r4
 8010130:	462b      	mov	r3, r5
 8010132:	f7f0 f887 	bl	8000244 <__adddf3>
 8010136:	4642      	mov	r2, r8
 8010138:	4606      	mov	r6, r0
 801013a:	460f      	mov	r7, r1
 801013c:	464b      	mov	r3, r9
 801013e:	4640      	mov	r0, r8
 8010140:	4649      	mov	r1, r9
 8010142:	f7f0 fa35 	bl	80005b0 <__aeabi_dmul>
 8010146:	2200      	movs	r2, #0
 8010148:	4b67      	ldr	r3, [pc, #412]	; (80102e8 <__ieee754_pow+0x740>)
 801014a:	4682      	mov	sl, r0
 801014c:	468b      	mov	fp, r1
 801014e:	f7f0 f879 	bl	8000244 <__adddf3>
 8010152:	4632      	mov	r2, r6
 8010154:	463b      	mov	r3, r7
 8010156:	f7f0 f875 	bl	8000244 <__adddf3>
 801015a:	9c04      	ldr	r4, [sp, #16]
 801015c:	460d      	mov	r5, r1
 801015e:	4622      	mov	r2, r4
 8010160:	460b      	mov	r3, r1
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fa23 	bl	80005b0 <__aeabi_dmul>
 801016a:	2200      	movs	r2, #0
 801016c:	4680      	mov	r8, r0
 801016e:	4689      	mov	r9, r1
 8010170:	4620      	mov	r0, r4
 8010172:	4629      	mov	r1, r5
 8010174:	4b5c      	ldr	r3, [pc, #368]	; (80102e8 <__ieee754_pow+0x740>)
 8010176:	f7f0 f863 	bl	8000240 <__aeabi_dsub>
 801017a:	4652      	mov	r2, sl
 801017c:	465b      	mov	r3, fp
 801017e:	f7f0 f85f 	bl	8000240 <__aeabi_dsub>
 8010182:	4602      	mov	r2, r0
 8010184:	460b      	mov	r3, r1
 8010186:	4630      	mov	r0, r6
 8010188:	4639      	mov	r1, r7
 801018a:	f7f0 f859 	bl	8000240 <__aeabi_dsub>
 801018e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010192:	f7f0 fa0d 	bl	80005b0 <__aeabi_dmul>
 8010196:	4622      	mov	r2, r4
 8010198:	4606      	mov	r6, r0
 801019a:	460f      	mov	r7, r1
 801019c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101a0:	462b      	mov	r3, r5
 80101a2:	f7f0 fa05 	bl	80005b0 <__aeabi_dmul>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4630      	mov	r0, r6
 80101ac:	4639      	mov	r1, r7
 80101ae:	f7f0 f849 	bl	8000244 <__adddf3>
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	4602      	mov	r2, r0
 80101b8:	460b      	mov	r3, r1
 80101ba:	4640      	mov	r0, r8
 80101bc:	4649      	mov	r1, r9
 80101be:	f7f0 f841 	bl	8000244 <__adddf3>
 80101c2:	a33d      	add	r3, pc, #244	; (adr r3, 80102b8 <__ieee754_pow+0x710>)
 80101c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c8:	9c04      	ldr	r4, [sp, #16]
 80101ca:	460d      	mov	r5, r1
 80101cc:	4620      	mov	r0, r4
 80101ce:	f7f0 f9ef 	bl	80005b0 <__aeabi_dmul>
 80101d2:	4642      	mov	r2, r8
 80101d4:	464b      	mov	r3, r9
 80101d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101da:	4620      	mov	r0, r4
 80101dc:	4629      	mov	r1, r5
 80101de:	f7f0 f82f 	bl	8000240 <__aeabi_dsub>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7f0 f829 	bl	8000240 <__aeabi_dsub>
 80101ee:	a334      	add	r3, pc, #208	; (adr r3, 80102c0 <__ieee754_pow+0x718>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	f7f0 f9dc 	bl	80005b0 <__aeabi_dmul>
 80101f8:	a333      	add	r3, pc, #204	; (adr r3, 80102c8 <__ieee754_pow+0x720>)
 80101fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fe:	4606      	mov	r6, r0
 8010200:	460f      	mov	r7, r1
 8010202:	4620      	mov	r0, r4
 8010204:	4629      	mov	r1, r5
 8010206:	f7f0 f9d3 	bl	80005b0 <__aeabi_dmul>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	4630      	mov	r0, r6
 8010210:	4639      	mov	r1, r7
 8010212:	f7f0 f817 	bl	8000244 <__adddf3>
 8010216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010218:	4b34      	ldr	r3, [pc, #208]	; (80102ec <__ieee754_pow+0x744>)
 801021a:	4413      	add	r3, r2
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f810 	bl	8000244 <__adddf3>
 8010224:	4680      	mov	r8, r0
 8010226:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010228:	4689      	mov	r9, r1
 801022a:	f7f0 f957 	bl	80004dc <__aeabi_i2d>
 801022e:	4604      	mov	r4, r0
 8010230:	460d      	mov	r5, r1
 8010232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010234:	4b2e      	ldr	r3, [pc, #184]	; (80102f0 <__ieee754_pow+0x748>)
 8010236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801023a:	4413      	add	r3, r2
 801023c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010240:	4642      	mov	r2, r8
 8010242:	464b      	mov	r3, r9
 8010244:	f7ef fffe 	bl	8000244 <__adddf3>
 8010248:	4632      	mov	r2, r6
 801024a:	463b      	mov	r3, r7
 801024c:	f7ef fffa 	bl	8000244 <__adddf3>
 8010250:	4622      	mov	r2, r4
 8010252:	462b      	mov	r3, r5
 8010254:	f7ef fff6 	bl	8000244 <__adddf3>
 8010258:	f8dd a010 	ldr.w	sl, [sp, #16]
 801025c:	4622      	mov	r2, r4
 801025e:	462b      	mov	r3, r5
 8010260:	4650      	mov	r0, sl
 8010262:	468b      	mov	fp, r1
 8010264:	f7ef ffec 	bl	8000240 <__aeabi_dsub>
 8010268:	4632      	mov	r2, r6
 801026a:	463b      	mov	r3, r7
 801026c:	f7ef ffe8 	bl	8000240 <__aeabi_dsub>
 8010270:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010274:	f7ef ffe4 	bl	8000240 <__aeabi_dsub>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	4640      	mov	r0, r8
 801027e:	4649      	mov	r1, r9
 8010280:	e608      	b.n	800fe94 <__ieee754_pow+0x2ec>
 8010282:	bf00      	nop
 8010284:	f3af 8000 	nop.w
 8010288:	4a454eef 	.word	0x4a454eef
 801028c:	3fca7e28 	.word	0x3fca7e28
 8010290:	93c9db65 	.word	0x93c9db65
 8010294:	3fcd864a 	.word	0x3fcd864a
 8010298:	a91d4101 	.word	0xa91d4101
 801029c:	3fd17460 	.word	0x3fd17460
 80102a0:	518f264d 	.word	0x518f264d
 80102a4:	3fd55555 	.word	0x3fd55555
 80102a8:	db6fabff 	.word	0xdb6fabff
 80102ac:	3fdb6db6 	.word	0x3fdb6db6
 80102b0:	33333303 	.word	0x33333303
 80102b4:	3fe33333 	.word	0x3fe33333
 80102b8:	e0000000 	.word	0xe0000000
 80102bc:	3feec709 	.word	0x3feec709
 80102c0:	dc3a03fd 	.word	0xdc3a03fd
 80102c4:	3feec709 	.word	0x3feec709
 80102c8:	145b01f5 	.word	0x145b01f5
 80102cc:	be3e2fe0 	.word	0xbe3e2fe0
 80102d0:	7ff00000 	.word	0x7ff00000
 80102d4:	43400000 	.word	0x43400000
 80102d8:	0003988e 	.word	0x0003988e
 80102dc:	000bb679 	.word	0x000bb679
 80102e0:	08025bc8 	.word	0x08025bc8
 80102e4:	3ff00000 	.word	0x3ff00000
 80102e8:	40080000 	.word	0x40080000
 80102ec:	08025be8 	.word	0x08025be8
 80102f0:	08025bd8 	.word	0x08025bd8
 80102f4:	2601      	movs	r6, #1
 80102f6:	e667      	b.n	800ffc8 <__ieee754_pow+0x420>
 80102f8:	a39d      	add	r3, pc, #628	; (adr r3, 8010570 <__ieee754_pow+0x9c8>)
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	4640      	mov	r0, r8
 8010300:	4649      	mov	r1, r9
 8010302:	f7ef ff9f 	bl	8000244 <__adddf3>
 8010306:	4622      	mov	r2, r4
 8010308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801030c:	462b      	mov	r3, r5
 801030e:	4650      	mov	r0, sl
 8010310:	4639      	mov	r1, r7
 8010312:	f7ef ff95 	bl	8000240 <__aeabi_dsub>
 8010316:	4602      	mov	r2, r0
 8010318:	460b      	mov	r3, r1
 801031a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801031e:	f7f0 fbd7 	bl	8000ad0 <__aeabi_dcmpgt>
 8010322:	2800      	cmp	r0, #0
 8010324:	f47f ae01 	bne.w	800ff2a <__ieee754_pow+0x382>
 8010328:	4aa5      	ldr	r2, [pc, #660]	; (80105c0 <__ieee754_pow+0xa18>)
 801032a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801032e:	4293      	cmp	r3, r2
 8010330:	f340 8103 	ble.w	801053a <__ieee754_pow+0x992>
 8010334:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010338:	2000      	movs	r0, #0
 801033a:	151b      	asrs	r3, r3, #20
 801033c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010340:	fa4a f303 	asr.w	r3, sl, r3
 8010344:	4433      	add	r3, r6
 8010346:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801034a:	4f9e      	ldr	r7, [pc, #632]	; (80105c4 <__ieee754_pow+0xa1c>)
 801034c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010350:	4117      	asrs	r7, r2
 8010352:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010356:	ea23 0107 	bic.w	r1, r3, r7
 801035a:	f1c2 0214 	rsb	r2, r2, #20
 801035e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010362:	460b      	mov	r3, r1
 8010364:	fa4a fa02 	asr.w	sl, sl, r2
 8010368:	2e00      	cmp	r6, #0
 801036a:	4602      	mov	r2, r0
 801036c:	4629      	mov	r1, r5
 801036e:	4620      	mov	r0, r4
 8010370:	bfb8      	it	lt
 8010372:	f1ca 0a00 	rsblt	sl, sl, #0
 8010376:	f7ef ff63 	bl	8000240 <__aeabi_dsub>
 801037a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801037e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010382:	2400      	movs	r4, #0
 8010384:	4642      	mov	r2, r8
 8010386:	464b      	mov	r3, r9
 8010388:	f7ef ff5c 	bl	8000244 <__adddf3>
 801038c:	a37a      	add	r3, pc, #488	; (adr r3, 8010578 <__ieee754_pow+0x9d0>)
 801038e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010392:	4620      	mov	r0, r4
 8010394:	460d      	mov	r5, r1
 8010396:	f7f0 f90b 	bl	80005b0 <__aeabi_dmul>
 801039a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801039e:	4606      	mov	r6, r0
 80103a0:	460f      	mov	r7, r1
 80103a2:	4620      	mov	r0, r4
 80103a4:	4629      	mov	r1, r5
 80103a6:	f7ef ff4b 	bl	8000240 <__aeabi_dsub>
 80103aa:	4602      	mov	r2, r0
 80103ac:	460b      	mov	r3, r1
 80103ae:	4640      	mov	r0, r8
 80103b0:	4649      	mov	r1, r9
 80103b2:	f7ef ff45 	bl	8000240 <__aeabi_dsub>
 80103b6:	a372      	add	r3, pc, #456	; (adr r3, 8010580 <__ieee754_pow+0x9d8>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	f7f0 f8f8 	bl	80005b0 <__aeabi_dmul>
 80103c0:	a371      	add	r3, pc, #452	; (adr r3, 8010588 <__ieee754_pow+0x9e0>)
 80103c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c6:	4680      	mov	r8, r0
 80103c8:	4689      	mov	r9, r1
 80103ca:	4620      	mov	r0, r4
 80103cc:	4629      	mov	r1, r5
 80103ce:	f7f0 f8ef 	bl	80005b0 <__aeabi_dmul>
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	4640      	mov	r0, r8
 80103d8:	4649      	mov	r1, r9
 80103da:	f7ef ff33 	bl	8000244 <__adddf3>
 80103de:	4604      	mov	r4, r0
 80103e0:	460d      	mov	r5, r1
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	4630      	mov	r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	f7ef ff2b 	bl	8000244 <__adddf3>
 80103ee:	4632      	mov	r2, r6
 80103f0:	463b      	mov	r3, r7
 80103f2:	4680      	mov	r8, r0
 80103f4:	4689      	mov	r9, r1
 80103f6:	f7ef ff23 	bl	8000240 <__aeabi_dsub>
 80103fa:	4602      	mov	r2, r0
 80103fc:	460b      	mov	r3, r1
 80103fe:	4620      	mov	r0, r4
 8010400:	4629      	mov	r1, r5
 8010402:	f7ef ff1d 	bl	8000240 <__aeabi_dsub>
 8010406:	4642      	mov	r2, r8
 8010408:	4606      	mov	r6, r0
 801040a:	460f      	mov	r7, r1
 801040c:	464b      	mov	r3, r9
 801040e:	4640      	mov	r0, r8
 8010410:	4649      	mov	r1, r9
 8010412:	f7f0 f8cd 	bl	80005b0 <__aeabi_dmul>
 8010416:	a35e      	add	r3, pc, #376	; (adr r3, 8010590 <__ieee754_pow+0x9e8>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	4604      	mov	r4, r0
 801041e:	460d      	mov	r5, r1
 8010420:	f7f0 f8c6 	bl	80005b0 <__aeabi_dmul>
 8010424:	a35c      	add	r3, pc, #368	; (adr r3, 8010598 <__ieee754_pow+0x9f0>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f7ef ff09 	bl	8000240 <__aeabi_dsub>
 801042e:	4622      	mov	r2, r4
 8010430:	462b      	mov	r3, r5
 8010432:	f7f0 f8bd 	bl	80005b0 <__aeabi_dmul>
 8010436:	a35a      	add	r3, pc, #360	; (adr r3, 80105a0 <__ieee754_pow+0x9f8>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	f7ef ff02 	bl	8000244 <__adddf3>
 8010440:	4622      	mov	r2, r4
 8010442:	462b      	mov	r3, r5
 8010444:	f7f0 f8b4 	bl	80005b0 <__aeabi_dmul>
 8010448:	a357      	add	r3, pc, #348	; (adr r3, 80105a8 <__ieee754_pow+0xa00>)
 801044a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044e:	f7ef fef7 	bl	8000240 <__aeabi_dsub>
 8010452:	4622      	mov	r2, r4
 8010454:	462b      	mov	r3, r5
 8010456:	f7f0 f8ab 	bl	80005b0 <__aeabi_dmul>
 801045a:	a355      	add	r3, pc, #340	; (adr r3, 80105b0 <__ieee754_pow+0xa08>)
 801045c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010460:	f7ef fef0 	bl	8000244 <__adddf3>
 8010464:	4622      	mov	r2, r4
 8010466:	462b      	mov	r3, r5
 8010468:	f7f0 f8a2 	bl	80005b0 <__aeabi_dmul>
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	4640      	mov	r0, r8
 8010472:	4649      	mov	r1, r9
 8010474:	f7ef fee4 	bl	8000240 <__aeabi_dsub>
 8010478:	4604      	mov	r4, r0
 801047a:	460d      	mov	r5, r1
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4640      	mov	r0, r8
 8010482:	4649      	mov	r1, r9
 8010484:	f7f0 f894 	bl	80005b0 <__aeabi_dmul>
 8010488:	2200      	movs	r2, #0
 801048a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801048e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010492:	4620      	mov	r0, r4
 8010494:	4629      	mov	r1, r5
 8010496:	f7ef fed3 	bl	8000240 <__aeabi_dsub>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104a2:	f7f0 f9af 	bl	8000804 <__aeabi_ddiv>
 80104a6:	4632      	mov	r2, r6
 80104a8:	4604      	mov	r4, r0
 80104aa:	460d      	mov	r5, r1
 80104ac:	463b      	mov	r3, r7
 80104ae:	4640      	mov	r0, r8
 80104b0:	4649      	mov	r1, r9
 80104b2:	f7f0 f87d 	bl	80005b0 <__aeabi_dmul>
 80104b6:	4632      	mov	r2, r6
 80104b8:	463b      	mov	r3, r7
 80104ba:	f7ef fec3 	bl	8000244 <__adddf3>
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	4620      	mov	r0, r4
 80104c4:	4629      	mov	r1, r5
 80104c6:	f7ef febb 	bl	8000240 <__aeabi_dsub>
 80104ca:	4642      	mov	r2, r8
 80104cc:	464b      	mov	r3, r9
 80104ce:	f7ef feb7 	bl	8000240 <__aeabi_dsub>
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	2000      	movs	r0, #0
 80104d8:	493b      	ldr	r1, [pc, #236]	; (80105c8 <__ieee754_pow+0xa20>)
 80104da:	f7ef feb1 	bl	8000240 <__aeabi_dsub>
 80104de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80104e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80104e6:	da2b      	bge.n	8010540 <__ieee754_pow+0x998>
 80104e8:	4652      	mov	r2, sl
 80104ea:	f000 f9b9 	bl	8010860 <scalbn>
 80104ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104f2:	f7ff bbf2 	b.w	800fcda <__ieee754_pow+0x132>
 80104f6:	4b35      	ldr	r3, [pc, #212]	; (80105cc <__ieee754_pow+0xa24>)
 80104f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80104fc:	429f      	cmp	r7, r3
 80104fe:	f77f af13 	ble.w	8010328 <__ieee754_pow+0x780>
 8010502:	4b33      	ldr	r3, [pc, #204]	; (80105d0 <__ieee754_pow+0xa28>)
 8010504:	440b      	add	r3, r1
 8010506:	4303      	orrs	r3, r0
 8010508:	d00b      	beq.n	8010522 <__ieee754_pow+0x97a>
 801050a:	a32b      	add	r3, pc, #172	; (adr r3, 80105b8 <__ieee754_pow+0xa10>)
 801050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010514:	f7f0 f84c 	bl	80005b0 <__aeabi_dmul>
 8010518:	a327      	add	r3, pc, #156	; (adr r3, 80105b8 <__ieee754_pow+0xa10>)
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f7ff bbdc 	b.w	800fcda <__ieee754_pow+0x132>
 8010522:	4622      	mov	r2, r4
 8010524:	462b      	mov	r3, r5
 8010526:	f7ef fe8b 	bl	8000240 <__aeabi_dsub>
 801052a:	4642      	mov	r2, r8
 801052c:	464b      	mov	r3, r9
 801052e:	f7f0 fac5 	bl	8000abc <__aeabi_dcmpge>
 8010532:	2800      	cmp	r0, #0
 8010534:	f43f aef8 	beq.w	8010328 <__ieee754_pow+0x780>
 8010538:	e7e7      	b.n	801050a <__ieee754_pow+0x962>
 801053a:	f04f 0a00 	mov.w	sl, #0
 801053e:	e71e      	b.n	801037e <__ieee754_pow+0x7d6>
 8010540:	4621      	mov	r1, r4
 8010542:	e7d4      	b.n	80104ee <__ieee754_pow+0x946>
 8010544:	f04f 0b00 	mov.w	fp, #0
 8010548:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80105c8 <__ieee754_pow+0xa20>
 801054c:	f7ff bbb0 	b.w	800fcb0 <__ieee754_pow+0x108>
 8010550:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8010554:	f7ff bbac 	b.w	800fcb0 <__ieee754_pow+0x108>
 8010558:	4638      	mov	r0, r7
 801055a:	4641      	mov	r1, r8
 801055c:	f7ff bbbf 	b.w	800fcde <__ieee754_pow+0x136>
 8010560:	9200      	str	r2, [sp, #0]
 8010562:	f7ff bb7f 	b.w	800fc64 <__ieee754_pow+0xbc>
 8010566:	2300      	movs	r3, #0
 8010568:	f7ff bb69 	b.w	800fc3e <__ieee754_pow+0x96>
 801056c:	f3af 8000 	nop.w
 8010570:	652b82fe 	.word	0x652b82fe
 8010574:	3c971547 	.word	0x3c971547
 8010578:	00000000 	.word	0x00000000
 801057c:	3fe62e43 	.word	0x3fe62e43
 8010580:	fefa39ef 	.word	0xfefa39ef
 8010584:	3fe62e42 	.word	0x3fe62e42
 8010588:	0ca86c39 	.word	0x0ca86c39
 801058c:	be205c61 	.word	0xbe205c61
 8010590:	72bea4d0 	.word	0x72bea4d0
 8010594:	3e663769 	.word	0x3e663769
 8010598:	c5d26bf1 	.word	0xc5d26bf1
 801059c:	3ebbbd41 	.word	0x3ebbbd41
 80105a0:	af25de2c 	.word	0xaf25de2c
 80105a4:	3f11566a 	.word	0x3f11566a
 80105a8:	16bebd93 	.word	0x16bebd93
 80105ac:	3f66c16c 	.word	0x3f66c16c
 80105b0:	5555553e 	.word	0x5555553e
 80105b4:	3fc55555 	.word	0x3fc55555
 80105b8:	c2f8f359 	.word	0xc2f8f359
 80105bc:	01a56e1f 	.word	0x01a56e1f
 80105c0:	3fe00000 	.word	0x3fe00000
 80105c4:	000fffff 	.word	0x000fffff
 80105c8:	3ff00000 	.word	0x3ff00000
 80105cc:	4090cbff 	.word	0x4090cbff
 80105d0:	3f6f3400 	.word	0x3f6f3400

080105d4 <__ieee754_sqrt>:
 80105d4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8010728 <__ieee754_sqrt+0x154>
 80105d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80105e0:	460b      	mov	r3, r1
 80105e2:	4606      	mov	r6, r0
 80105e4:	460d      	mov	r5, r1
 80105e6:	460a      	mov	r2, r1
 80105e8:	4607      	mov	r7, r0
 80105ea:	4604      	mov	r4, r0
 80105ec:	d10e      	bne.n	801060c <__ieee754_sqrt+0x38>
 80105ee:	4602      	mov	r2, r0
 80105f0:	f7ef ffde 	bl	80005b0 <__aeabi_dmul>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4630      	mov	r0, r6
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7ef fe22 	bl	8000244 <__adddf3>
 8010600:	4606      	mov	r6, r0
 8010602:	460d      	mov	r5, r1
 8010604:	4630      	mov	r0, r6
 8010606:	4629      	mov	r1, r5
 8010608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801060c:	2900      	cmp	r1, #0
 801060e:	dc0d      	bgt.n	801062c <__ieee754_sqrt+0x58>
 8010610:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010614:	ea5c 0707 	orrs.w	r7, ip, r7
 8010618:	d0f4      	beq.n	8010604 <__ieee754_sqrt+0x30>
 801061a:	b139      	cbz	r1, 801062c <__ieee754_sqrt+0x58>
 801061c:	4602      	mov	r2, r0
 801061e:	f7ef fe0f 	bl	8000240 <__aeabi_dsub>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	f7f0 f8ed 	bl	8000804 <__aeabi_ddiv>
 801062a:	e7e9      	b.n	8010600 <__ieee754_sqrt+0x2c>
 801062c:	1512      	asrs	r2, r2, #20
 801062e:	d074      	beq.n	801071a <__ieee754_sqrt+0x146>
 8010630:	2000      	movs	r0, #0
 8010632:	07d5      	lsls	r5, r2, #31
 8010634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010638:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 801063c:	bf5e      	ittt	pl
 801063e:	0fe3      	lsrpl	r3, r4, #31
 8010640:	0064      	lslpl	r4, r4, #1
 8010642:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8010646:	0fe3      	lsrs	r3, r4, #31
 8010648:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801064c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010650:	2516      	movs	r5, #22
 8010652:	4601      	mov	r1, r0
 8010654:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010658:	1076      	asrs	r6, r6, #1
 801065a:	0064      	lsls	r4, r4, #1
 801065c:	188f      	adds	r7, r1, r2
 801065e:	429f      	cmp	r7, r3
 8010660:	bfde      	ittt	le
 8010662:	1bdb      	suble	r3, r3, r7
 8010664:	18b9      	addle	r1, r7, r2
 8010666:	1880      	addle	r0, r0, r2
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	3d01      	subs	r5, #1
 801066c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8010670:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010674:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010678:	d1f0      	bne.n	801065c <__ieee754_sqrt+0x88>
 801067a:	462a      	mov	r2, r5
 801067c:	f04f 0e20 	mov.w	lr, #32
 8010680:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010684:	428b      	cmp	r3, r1
 8010686:	eb07 0c05 	add.w	ip, r7, r5
 801068a:	dc02      	bgt.n	8010692 <__ieee754_sqrt+0xbe>
 801068c:	d113      	bne.n	80106b6 <__ieee754_sqrt+0xe2>
 801068e:	45a4      	cmp	ip, r4
 8010690:	d811      	bhi.n	80106b6 <__ieee754_sqrt+0xe2>
 8010692:	f1bc 0f00 	cmp.w	ip, #0
 8010696:	eb0c 0507 	add.w	r5, ip, r7
 801069a:	da43      	bge.n	8010724 <__ieee754_sqrt+0x150>
 801069c:	2d00      	cmp	r5, #0
 801069e:	db41      	blt.n	8010724 <__ieee754_sqrt+0x150>
 80106a0:	f101 0801 	add.w	r8, r1, #1
 80106a4:	1a5b      	subs	r3, r3, r1
 80106a6:	4641      	mov	r1, r8
 80106a8:	45a4      	cmp	ip, r4
 80106aa:	bf88      	it	hi
 80106ac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80106b0:	eba4 040c 	sub.w	r4, r4, ip
 80106b4:	443a      	add	r2, r7
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	f1be 0e01 	subs.w	lr, lr, #1
 80106bc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80106c0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80106c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80106c8:	d1dc      	bne.n	8010684 <__ieee754_sqrt+0xb0>
 80106ca:	4323      	orrs	r3, r4
 80106cc:	d006      	beq.n	80106dc <__ieee754_sqrt+0x108>
 80106ce:	1c54      	adds	r4, r2, #1
 80106d0:	bf0b      	itete	eq
 80106d2:	4672      	moveq	r2, lr
 80106d4:	3201      	addne	r2, #1
 80106d6:	3001      	addeq	r0, #1
 80106d8:	f022 0201 	bicne.w	r2, r2, #1
 80106dc:	1043      	asrs	r3, r0, #1
 80106de:	07c1      	lsls	r1, r0, #31
 80106e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80106e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80106e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80106ec:	bf48      	it	mi
 80106ee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80106f2:	4610      	mov	r0, r2
 80106f4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80106f8:	e782      	b.n	8010600 <__ieee754_sqrt+0x2c>
 80106fa:	0ae3      	lsrs	r3, r4, #11
 80106fc:	3915      	subs	r1, #21
 80106fe:	0564      	lsls	r4, r4, #21
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0fa      	beq.n	80106fa <__ieee754_sqrt+0x126>
 8010704:	02de      	lsls	r6, r3, #11
 8010706:	d50a      	bpl.n	801071e <__ieee754_sqrt+0x14a>
 8010708:	f1c2 0020 	rsb	r0, r2, #32
 801070c:	fa24 f000 	lsr.w	r0, r4, r0
 8010710:	1e55      	subs	r5, r2, #1
 8010712:	4094      	lsls	r4, r2
 8010714:	4303      	orrs	r3, r0
 8010716:	1b4a      	subs	r2, r1, r5
 8010718:	e78a      	b.n	8010630 <__ieee754_sqrt+0x5c>
 801071a:	4611      	mov	r1, r2
 801071c:	e7f0      	b.n	8010700 <__ieee754_sqrt+0x12c>
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	3201      	adds	r2, #1
 8010722:	e7ef      	b.n	8010704 <__ieee754_sqrt+0x130>
 8010724:	4688      	mov	r8, r1
 8010726:	e7bd      	b.n	80106a4 <__ieee754_sqrt+0xd0>
 8010728:	7ff00000 	.word	0x7ff00000

0801072c <fabs>:
 801072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010730:	4770      	bx	lr

08010732 <finite>:
 8010732:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8010736:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801073a:	0fc0      	lsrs	r0, r0, #31
 801073c:	4770      	bx	lr
	...

08010740 <nan>:
 8010740:	2000      	movs	r0, #0
 8010742:	4901      	ldr	r1, [pc, #4]	; (8010748 <nan+0x8>)
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	7ff80000 	.word	0x7ff80000

0801074c <rint>:
 801074c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8010750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010752:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8010756:	2f13      	cmp	r7, #19
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	460c      	mov	r4, r1
 801075e:	4605      	mov	r5, r0
 8010760:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8010764:	dc59      	bgt.n	801081a <rint+0xce>
 8010766:	2f00      	cmp	r7, #0
 8010768:	da2a      	bge.n	80107c0 <rint+0x74>
 801076a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801076e:	4301      	orrs	r1, r0
 8010770:	d022      	beq.n	80107b8 <rint+0x6c>
 8010772:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8010776:	4301      	orrs	r1, r0
 8010778:	424d      	negs	r5, r1
 801077a:	430d      	orrs	r5, r1
 801077c:	4936      	ldr	r1, [pc, #216]	; (8010858 <rint+0x10c>)
 801077e:	0c5c      	lsrs	r4, r3, #17
 8010780:	0b2d      	lsrs	r5, r5, #12
 8010782:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8010786:	0464      	lsls	r4, r4, #17
 8010788:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801078c:	ea45 0304 	orr.w	r3, r5, r4
 8010790:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010794:	4620      	mov	r0, r4
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef fd54 	bl	8000244 <__adddf3>
 801079c:	e9cd 0100 	strd	r0, r1, [sp]
 80107a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107a4:	462b      	mov	r3, r5
 80107a6:	4622      	mov	r2, r4
 80107a8:	f7ef fd4a 	bl	8000240 <__aeabi_dsub>
 80107ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107b0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80107b4:	4602      	mov	r2, r0
 80107b6:	460b      	mov	r3, r1
 80107b8:	4610      	mov	r0, r2
 80107ba:	4619      	mov	r1, r3
 80107bc:	b003      	add	sp, #12
 80107be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c0:	4926      	ldr	r1, [pc, #152]	; (801085c <rint+0x110>)
 80107c2:	4139      	asrs	r1, r7
 80107c4:	ea03 0001 	and.w	r0, r3, r1
 80107c8:	4310      	orrs	r0, r2
 80107ca:	d0f5      	beq.n	80107b8 <rint+0x6c>
 80107cc:	084b      	lsrs	r3, r1, #1
 80107ce:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80107d2:	ea52 0501 	orrs.w	r5, r2, r1
 80107d6:	d00c      	beq.n	80107f2 <rint+0xa6>
 80107d8:	ea24 0303 	bic.w	r3, r4, r3
 80107dc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80107e0:	2f13      	cmp	r7, #19
 80107e2:	bf0c      	ite	eq
 80107e4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80107e8:	2500      	movne	r5, #0
 80107ea:	fa44 f707 	asr.w	r7, r4, r7
 80107ee:	ea43 0407 	orr.w	r4, r3, r7
 80107f2:	4919      	ldr	r1, [pc, #100]	; (8010858 <rint+0x10c>)
 80107f4:	4623      	mov	r3, r4
 80107f6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80107fa:	462a      	mov	r2, r5
 80107fc:	e9d6 4500 	ldrd	r4, r5, [r6]
 8010800:	4620      	mov	r0, r4
 8010802:	4629      	mov	r1, r5
 8010804:	f7ef fd1e 	bl	8000244 <__adddf3>
 8010808:	e9cd 0100 	strd	r0, r1, [sp]
 801080c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010810:	4622      	mov	r2, r4
 8010812:	462b      	mov	r3, r5
 8010814:	f7ef fd14 	bl	8000240 <__aeabi_dsub>
 8010818:	e7cc      	b.n	80107b4 <rint+0x68>
 801081a:	2f33      	cmp	r7, #51	; 0x33
 801081c:	dd05      	ble.n	801082a <rint+0xde>
 801081e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8010822:	d1c9      	bne.n	80107b8 <rint+0x6c>
 8010824:	f7ef fd0e 	bl	8000244 <__adddf3>
 8010828:	e7c4      	b.n	80107b4 <rint+0x68>
 801082a:	f04f 31ff 	mov.w	r1, #4294967295
 801082e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8010832:	fa21 f10c 	lsr.w	r1, r1, ip
 8010836:	4208      	tst	r0, r1
 8010838:	d0be      	beq.n	80107b8 <rint+0x6c>
 801083a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 801083e:	bf18      	it	ne
 8010840:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8010844:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8010848:	bf1e      	ittt	ne
 801084a:	ea20 0303 	bicne.w	r3, r0, r3
 801084e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8010852:	ea43 050c 	orrne.w	r5, r3, ip
 8010856:	e7cc      	b.n	80107f2 <rint+0xa6>
 8010858:	08025bf8 	.word	0x08025bf8
 801085c:	000fffff 	.word	0x000fffff

08010860 <scalbn>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8010866:	4604      	mov	r4, r0
 8010868:	460d      	mov	r5, r1
 801086a:	4617      	mov	r7, r2
 801086c:	460b      	mov	r3, r1
 801086e:	b996      	cbnz	r6, 8010896 <scalbn+0x36>
 8010870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010874:	4303      	orrs	r3, r0
 8010876:	d039      	beq.n	80108ec <scalbn+0x8c>
 8010878:	4b35      	ldr	r3, [pc, #212]	; (8010950 <scalbn+0xf0>)
 801087a:	2200      	movs	r2, #0
 801087c:	f7ef fe98 	bl	80005b0 <__aeabi_dmul>
 8010880:	4b34      	ldr	r3, [pc, #208]	; (8010954 <scalbn+0xf4>)
 8010882:	4604      	mov	r4, r0
 8010884:	429f      	cmp	r7, r3
 8010886:	460d      	mov	r5, r1
 8010888:	da0f      	bge.n	80108aa <scalbn+0x4a>
 801088a:	a32d      	add	r3, pc, #180	; (adr r3, 8010940 <scalbn+0xe0>)
 801088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010890:	f7ef fe8e 	bl	80005b0 <__aeabi_dmul>
 8010894:	e006      	b.n	80108a4 <scalbn+0x44>
 8010896:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801089a:	4296      	cmp	r6, r2
 801089c:	d10a      	bne.n	80108b4 <scalbn+0x54>
 801089e:	4602      	mov	r2, r0
 80108a0:	f7ef fcd0 	bl	8000244 <__adddf3>
 80108a4:	4604      	mov	r4, r0
 80108a6:	460d      	mov	r5, r1
 80108a8:	e020      	b.n	80108ec <scalbn+0x8c>
 80108aa:	460b      	mov	r3, r1
 80108ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80108b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80108b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80108b8:	19b9      	adds	r1, r7, r6
 80108ba:	4291      	cmp	r1, r2
 80108bc:	dd0e      	ble.n	80108dc <scalbn+0x7c>
 80108be:	a322      	add	r3, pc, #136	; (adr r3, 8010948 <scalbn+0xe8>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80108c8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80108cc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80108d0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80108d4:	4820      	ldr	r0, [pc, #128]	; (8010958 <scalbn+0xf8>)
 80108d6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80108da:	e7d9      	b.n	8010890 <scalbn+0x30>
 80108dc:	2900      	cmp	r1, #0
 80108de:	dd08      	ble.n	80108f2 <scalbn+0x92>
 80108e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80108ec:	4620      	mov	r0, r4
 80108ee:	4629      	mov	r1, r5
 80108f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80108f6:	da16      	bge.n	8010926 <scalbn+0xc6>
 80108f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80108fc:	429f      	cmp	r7, r3
 80108fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8010902:	dd08      	ble.n	8010916 <scalbn+0xb6>
 8010904:	4c15      	ldr	r4, [pc, #84]	; (801095c <scalbn+0xfc>)
 8010906:	4814      	ldr	r0, [pc, #80]	; (8010958 <scalbn+0xf8>)
 8010908:	f363 74df 	bfi	r4, r3, #31, #1
 801090c:	a30e      	add	r3, pc, #56	; (adr r3, 8010948 <scalbn+0xe8>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	4621      	mov	r1, r4
 8010914:	e7bc      	b.n	8010890 <scalbn+0x30>
 8010916:	4c12      	ldr	r4, [pc, #72]	; (8010960 <scalbn+0x100>)
 8010918:	4812      	ldr	r0, [pc, #72]	; (8010964 <scalbn+0x104>)
 801091a:	f363 74df 	bfi	r4, r3, #31, #1
 801091e:	a308      	add	r3, pc, #32	; (adr r3, 8010940 <scalbn+0xe0>)
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	e7f5      	b.n	8010912 <scalbn+0xb2>
 8010926:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801092a:	3136      	adds	r1, #54	; 0x36
 801092c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010930:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010934:	4620      	mov	r0, r4
 8010936:	4629      	mov	r1, r5
 8010938:	2200      	movs	r2, #0
 801093a:	4b0b      	ldr	r3, [pc, #44]	; (8010968 <scalbn+0x108>)
 801093c:	e7a8      	b.n	8010890 <scalbn+0x30>
 801093e:	bf00      	nop
 8010940:	c2f8f359 	.word	0xc2f8f359
 8010944:	01a56e1f 	.word	0x01a56e1f
 8010948:	8800759c 	.word	0x8800759c
 801094c:	7e37e43c 	.word	0x7e37e43c
 8010950:	43500000 	.word	0x43500000
 8010954:	ffff3cb0 	.word	0xffff3cb0
 8010958:	8800759c 	.word	0x8800759c
 801095c:	7e37e43c 	.word	0x7e37e43c
 8010960:	01a56e1f 	.word	0x01a56e1f
 8010964:	c2f8f359 	.word	0xc2f8f359
 8010968:	3c900000 	.word	0x3c900000

0801096c <_init>:
 801096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096e:	bf00      	nop
 8010970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010972:	bc08      	pop	{r3}
 8010974:	469e      	mov	lr, r3
 8010976:	4770      	bx	lr

08010978 <_fini>:
 8010978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097a:	bf00      	nop
 801097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801097e:	bc08      	pop	{r3}
 8010980:	469e      	mov	lr, r3
 8010982:	4770      	bx	lr
